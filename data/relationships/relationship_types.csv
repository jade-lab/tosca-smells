node,smelly
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",lazy
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",lazy
"{'tosca.relationships.nfv.HA': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.nfv.HA']}}",lazy
"{'tosca.relationships.nfv.Monitor': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.Metric']}}",lazy
"{'tosca.relationships.nfv.ForwardsTo': {'derived_from': 'tosca.relationships.root', 'valid_target_types': ['tosca.capabilities.nfv.Forwarder']}}",lazy
"{'MyAttachesTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'location': {'type': 'string', 'default': '/default_location'}}}}",lazy
"{'tosca.relationships.mec.VirtualLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.mec.VirtualLinkable']}}",lazy
"{'tosca.relationships.mec.VirtualBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.mec.VirtualBindable']}}",lazy
"{'tosca.relationships.mec.HA': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.mec.HA']}}",lazy
"{'tosca.relationships.mec.Monitor': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.mec.Metric']}}",lazy
"{'tosca.relationships.mec.ForwardsTo': {'derived_from': 'tosca.relationships.root', 'valid_target_types': ['tosca.capabilities.mec.Forwarder']}}",lazy
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from.\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",lazy
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}",false
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'required': True, 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'required': False, 'type': 'string'}}}}",false
"{'tosca.relationships.RoutesTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.network.LinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
{'test.relation.connects': {'derived_from4': 'tosca.relationships.ConnectsTo'}},lazy
"{'MyAttachesTo': {'derived_from': 'AttachesTo', 'properties': {'location': '/default_location'}, 'interfaces': {'Configure': {'post_configure_target': {'implementation': 'default_script.sh'}}}}}",false
"{'my.types.WordpressDbConnection': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'credential': {'user': 'db_user', 'token': 'db_pwd'}}}}",false
{'MyCustomAttachesTo': {'derived_from': 'AttachesTo'}},lazy
{'org.alien4cloud.automation.a4c.pub.relationships.AlienConfiguratorHostedOnAlien': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'data_endpoint', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'interfaces': {'Configure': {'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collector_added.yml', 'dashboard_dir': {'get_attribute': ['TARGET', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['TARGET', 'grafana_url']}, 'grafana_user': {'get_attribute': ['TARGET', 'grafana_user']}, 'grafana_password': {'get_attribute': ['TARGET', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.aws.relationships.ELBServiceSide': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'configure': {'add_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/add_target.sh'}, 'remove_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/remove_target.sh'}}}}}",false
"{'org.alien4cloud.automation.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'hostpool_connected.yml', 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_key']}, 'key_name': {'get_property': ['SOURCE', 'key_name']}, 'key_content': {'get_property': ['SOURCE', 'key_content']}, 'region': {'get_property': ['SOURCE', 'region']}, 'instance_name': {'get_property': ['SOURCE', 'instance_name']}, 'instance_count': {'get_property': ['SOURCE', 'instance_count']}, 'host_per_instance': {'get_property': ['SOURCE', 'host_per_instance']}, 'instance_username': {'get_property': ['SOURCE', 'instance_username']}, 'instance_groups': {'get_property': ['SOURCE', 'instance_groups']}, 'instance_image': {'get_property': ['SOURCE', 'instance_image']}, 'instance_type': {'get_property': ['SOURCE', 'instance_type']}, 'instance_os': {'get_property': ['SOURCE', 'instance_os']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.ansible.relationships.ELBProxyEC2Instance': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.ansible.capabilities.EC2Instance'], 'interfaces': {'configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'add_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}, 'remove_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'remove_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.kafka.topic.nodes.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.kafka.topic.nodes.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleDependency': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.demo.spark.streaming.capabilities.SparkStreamingModuleDependency']}}",false
"{'org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'ES_PORT': {'get_property': ['TARGET', 'elasticsearch', 'port']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'remove_target': {'inputs': {'operation': 'remove_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'remove_source': {'inputs': {'operation': 'remove_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}}}}}",unknown
"{'org.alien4cloud.relationships.demo.Relationship': {'description': 'Defines common definitions for our test.\n', 'derived_from': 'tosca.relationships.ConnectsTo', 'abstract': True, 'valid_target_types': ['org.alien4cloud.capabilities.demo.ServiceDemo']}}",false
"{'org.alien4cloud.relationships.demo.ConnectsTo': {'description': 'This is the default relationship to use between 2 concrete nodes.\n', 'derived_from': 'org.alien4cloud.relationships.demo.Relationship', 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'OPERATION': 'pre_configure_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'pre_configure_target': {'inputs': {'OPERATION': 'pre_configure_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_source': {'inputs': {'OPERATION': 'post_configure_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_target': {'inputs': {'OPERATION': 'post_configure_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'add_target': {'inputs': {'OPERATION': 'add_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'add_source': {'inputs': {'OPERATION': 'add_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'remove_target': {'inputs': {'OPERATION': 'remove_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'remove_source': {'inputs': {'OPERATION': 'remove_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}}}}}",unknown
"{'org.alien4cloud.relationships.demo.OverriddenConnectsTo': {'description': 'This is the default relationship to use when connecting a concrete node to a service.\n', 'derived_from': 'org.alien4cloud.relationships.demo.Relationship', 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'OPERATION': 'pre_configure_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'pre_configure_target': {'inputs': {'OPERATION': 'pre_configure_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_source': {'inputs': {'OPERATION': 'post_configure_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_target': {'inputs': {'OPERATION': 'post_configure_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'add_target': {'inputs': {'OPERATION': 'add_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'add_source': {'inputs': {'OPERATION': 'add_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'remove_target': {'inputs': {'OPERATION': 'remove_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'remove_source': {'inputs': {'OPERATION': 'remove_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}}}}}",false
"{'org.alien4cloud.relationships.WebSiteHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'WEBFILE_URL': {'get_property': ['SOURCE', 'zip_url']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'context_path']}, 'DOC_ROOT': {'get_property': ['TARGET', 'document_root']}}, 'implementation': 'scripts/deploy_website.sh'}}}}}",false
"{'alien.relationships.PetclinicConnectsToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Petclinic with a Mysql database', 'valid_target_types': ['org.alien4cloud.capabilities.MysqlDatabaseEndpoint'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'DB_USER': {'get_property': ['TARGET', 'db_user']}, 'DB_PASS': {'get_property': ['TARGET', 'db_password']}, 'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}}, 'implementation': 'scripts/install_petclinic_mysql.sh'}}}}}",false
"{'alien.relationships.PetclinicConnectsToPostgresql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Petclinic with a Postgresql database', 'valid_target_types': ['org.alien4cloud.capabilities.PostgresqlDatabaseEndpoint'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'DB_USER': {'get_property': ['TARGET', 'user']}, 'DB_PASS': {'get_property': ['TARGET', 'password']}, 'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}}, 'implementation': 'scripts/install_petclinic_postgresql.sh'}}}}}",false
"{'org.alien4cloud.automation.a4c.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.cloud.amazon.cli.pub.capabilities.AwsCli']}}",false
"{'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureAWSKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/aws_configure_key.sh'}}}}}",false
"{'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureOpenstackKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/openstack_configure_key.sh'}}}}}",false
"{'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToZookeeper': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ZOOKEEPER_IP': {'get_attribute': ['TARGET', 'zookeeper_endpoint', 'ip_address']}, 'ZOOKEEPER_PORT': {'get_attribute': ['TARGET', 'zookeeper_endpoint', 'port']}}, 'implementation': 'scripts/KafkaTopicConnectToZookeeper/pre_configure_source.sh'}}}}}",false
"{'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToBroker': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_IP': {'get_attribute': ['TARGET', 'kafka_endpoint', 'ip_address']}, 'KAFKA_PORT': {'get_attribute': ['TARGET', 'kafka_endpoint', 'port']}}, 'implementation': 'scripts/KafkaTopicConnectToBroker/pre_configure_source.sh'}}}}}",false
{'org.alien4cloud.monitoring.diamond.pub.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the Alien is connect on the target Elasticsearch.', 'valid_target_types': ['org.alien4cloud.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/alien/config_alien.sh'}}}}}",false
"{'org.alien4cloud.relationships.AlienITConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the Alien is connect on the target Elasticsearch.', 'valid_target_types': ['alien.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/it/config_it.sh'}}}}}",false
"{'org.alien4cloud.relationships.AlienITDependsOnAlien': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship use to describe that AlienIT needs Alien.', 'valid_target_types': ['alien.capabilities.Alien']}}",false
"{'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToService': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'context': 'Private', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_api', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source_private.sh'}, 'add_target': {'inputs': {'context': 'Private', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_public_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_public_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_public_api', 'ip_address']}}, 'implementation': 'scripts/add_target.sh'}}}}}",false
"{'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToPublicService': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'context': 'Public', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_public_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_public_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_public_api', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source_public.sh'}}}}}",false
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/io.sh'}}}}}",false
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkAppDependency': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.demo.spark-jobs.capabilities.SparkApplicationDependency'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/app_connect.sh'}}}}}",false
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentHostedOnHost': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'valid_target_types': ['org.alien4cloud.mock.ansible.nodes.AnsibleMockHost'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.automation.a4c.config.orchestrator.cfy.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.relationships.RegistryHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer']}}",false
"{'org.alien4cloud.relationships.RegistryConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.capabilities.PHPModule']}}",false
"{'org.alien4cloud.relationships.RegistryConfigurerDependsOnRegistry': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'configure': {'add_target': {'inputs': {'REGISTRY_HOST': {'get_attribute': ['TARGET', 'host']}, 'REGISTRY_PORT': {'get_attribute': ['TARGET', 'port']}}, 'implementation': 'scripts/RegistryConfigurerDependsOnRegistry/add_target.sh'}}}}}",false
"{'org.alien4cloud.relationships.GenericHostedOnGenericHost': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.GenericHost'], 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_source.sh'}, 'pre_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_target.sh'}, 'post_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_source.sh'}, 'post_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_target.sh'}, 'add_target': {'implementation': 'scripts/GenericConnectToGeneric/add_target.sh'}, 'add_source': {'implementation': 'scripts/GenericConnectToGeneric/add_source.sh'}, 'remove_target': {'implementation': 'scripts/GenericConnectToGeneric/remove_target.sh'}, 'remove_source': {'implementation': 'scripts/GenericConnectToGeneric/remove_source.sh'}}}}}",false
"{'org.alien4cloud.relationships.GenericConnectToGeneric': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.capabilities.GenericCapability'], 'properties': {'generic_property': {'type': 'string', 'required': False, 'default': 'default_value'}, 'complex_prop': {'type': 'alien.nodes.test.ComplexDataType', 'required': False}}, 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_source.sh'}, 'pre_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_target.sh'}, 'post_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_source.sh'}, 'post_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_target.sh'}, 'add_target': {'inputs': {'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'TARGET_PROPERTY': {'get_property': ['TARGET', 'generic_property']}}, 'implementation': 'scripts/GenericConnectToGeneric/add_target.sh'}, 'add_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'SOURCE_PROPERTY': {'get_property': ['SOURCE', 'generic_property']}}, 'implementation': 'scripts/GenericConnectToGeneric/add_source.sh'}, 'remove_target': {'implementation': 'scripts/GenericConnectToGeneric/remove_target.sh'}, 'remove_source': {'implementation': 'scripts/GenericConnectToGeneric/remove_source.sh'}}}}}",false
"{'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'plugin_archive_url': {'get_property': ['SOURCE', 'plugin_archive_url']}, 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToA4C': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_a4c.yml', 'alien_user': {'get_property': ['TARGET', 'rest', 'user']}, 'alien_password': {'get_property': ['TARGET', 'rest', 'password']}, 'alien_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost': {'derived_from': 'tosca.relationships.HostedOn', 'abstract': True, 'valid_target_types': ['org.alien4cloud.mock.pub.nodes.AbstractMockHost']}}",false
"{'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'abstract': True, 'valid_target_types': ['org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint']}}",false
"{'org.alien4cloud.relationships.RoutesToApacheLoadBalancer': {'derived_from': 'tosca.relationships.RoutesTo', 'description': 'Relationship that configures the Apache Load Balancer so it', 'interfaces': {'Configure': {'add_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/add_web_app_to_load_balancer.sh'}, 'remove_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/remove_web_app_from_load_balancer.sh'}}}}}",false
"{'org.alien4cloud.relationships.RoutesToApacheLoadBalancerService': {'derived_from': 'tosca.relationships.RoutesTo', 'description': 'Specific relationship to route an application using an apache load balancer started a a service. This relationship is expected to be processed on a sandboxed manager node and to connect to the Apache Load Balancer machine through ssh. The path to the ssh key to use for the apache machine connexion can be specified through a property.\n', 'properties': {'user': {'type': 'string', 'default': 'ubuntu'}}, 'artifacts': [{'script_directory': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'ssh_key': {'file': 'ssh/service_key.pem', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Configure': {'add_target': {'inputs': {'USER': {'get_property': ['SELF', 'user']}, 'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/service_add_web_app_to_load_balancer.sh'}, 'remove_target': {'inputs': {'USER': {'get_property': ['SELF', 'user']}, 'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/service_remove_web_app_from_load_balancer.sh'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCollectElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_elasticsearch.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'elasticsearch_host': {'get_attribute': ['TARGET', 'http', 'ip_address']}, 'elasticsearch_port': {'get_attribute': ['TARGET', 'http', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondJolokiaCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_jolokia.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'ip_address']}, 'jolokia_port': {'get_attribute': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondRabbitmqCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_rabbitmq.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'rabbitmq_port': {'get_attribute': ['TARGET', 'rabbitmq_management', 'port']}, 'rabbitmq_user': {'get_attribute': ['TARGET', 'rabbitmq_management', 'user']}, 'rabbitmq_password': {'get_attribute': ['TARGET', 'rabbitmq_management', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondPostgresqlCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_postgresql.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'postgresql_port': {'get_attribute': ['TARGET', 'postgresql', 'port']}, 'postgresql_user': {'get_attribute': ['TARGET', 'postgresql', 'user']}, 'postgresql_password': {'get_attribute': ['TARGET', 'postgresql', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondA4CCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondJolokiaCollector', 'valid_target_types': ['org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint'], 'interfaces': {'Configure': {'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_alien.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'jolokia', 'ip_address']}, 'alien_data_dir': {'get_property': ['TARGET', 'data_dir']}, 'jolokia_port': {'get_property': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyHostpoolCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.automation.a4c.config.applications.relationships.AddApplicationsDependsOnCsar': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.automation.a4c.config.csar']}}",false
"{'org.alien4cloud.relationships.WordpressHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'CONTEXT_ROOT': {'get_property': ['SOURCE', 'context_root']}, 'DOC_ROOT': {'get_property': ['TARGET', 'document_root']}}, 'implementation': 'scripts/config_wordpress.sh'}}}}}",false
"{'org.alien4cloud.relationships.WordpressConnectToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Wordpress with a Mysql databse', 'valid_target_types': ['org.alien4cloud.capabilities.MysqlDatabaseEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'DB_USER': {'get_property': ['TARGET', 'db_user']}, 'DB_PASSWORD': {'get_property': ['TARGET', 'db_password']}}, 'implementation': 'scripts/config_wordpress_for_mysql.sh'}}}}}",false
"{'org.alien4cloud.relationships.WordpressConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to install the Mysql module for PHP', 'valid_target_types': ['org.alien4cloud.capabilities.PHPModule'], 'interfaces': {'Configure': {'pre_configure_source': 'scripts/install_php_module.sh'}}}}",false
"{'org.alien4cloud.automation.a4c.config.location_resources.cfy_byon.LocationConnectsToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_hostpool.yml', 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
{'org.alien4cloud.automation.a4c.config.pub.relationships.LocationHostedOnOrchestrator': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'org.alien4cloud.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",false
"{'org.alien4cloud.relationships.Flannel': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.capabilities.flannel.Connectivity']}}",false
"{'org.alien4cloud.relationships.kubernetes.HostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.MasterHost'], 'attributes': {'kubernetes_master_ip': {'get_attribute': ['TARGET', 'ip_address']}}}}",false
"{'org.alien4cloud.relationships.kubernetes.DependsOnNamespace': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.Namespace']}}",false
"{'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress': {'abstract': True, 'derived_from': 'tosca.relationships.ConnectsTo', 'attributes': {'target_ip_address': {'get_operation_output': ['SELF', 'configure', 'postConfigureSource', 'EXPORTED_TARGET_IP']}}, 'interfaces': {'configure': {'post_configure_source': {'implementation': 'scripts/exposeTargetIpAddress.sh', 'inputs': {'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}}}}}}",false
"{'org.alien4cloud.relationships.kubernetes.RetrieveMasterConfigurations': {'derived_from': 'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.MasterConfiguration']}}",false
"{'org.alien4cloud.relationships.kubernetes.RetrieveEtcdIpAddress': {'derived_from': 'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.ETCD']}}",false
"{'org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GraphiteHttpEndpoint'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, 'graphite_port': {'get_property': ['TARGET', 'http_endpoint', 'port']}, 'grafana_port': {'get_property': ['SOURCE', 'http_endpoint', 'port']}, 'grafana_user': {'get_property': ['SOURCE', 'http_endpoint', 'user']}, 'grafana_password': {'get_property': ['SOURCE', 'http_endpoint', 'password']}, 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.relationships.ConnectElasticSearchNodes': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship that models 2 ES nodes connection.', 'valid_target_types': ['alien.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source.sh'}, 'pre_configure_target': {'inputs': {'ES_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/pre_configure_target.sh'}}}}}",false
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.relationships.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_target_types': ['org.alien4cloud.capabilities.WarContainer'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}, 'TOMCAT_HOME': {'get_property': ['TARGET', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['TARGET', 'port']}}, 'implementation': 'scripts/tomcat_install_war.sh'}}}}}",false
"{'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.lang.java.pub.capabilities.JDK']}}",false
"{'MyAttachTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'location': {'type': 'string', 'default': '/default_location'}}}}",false
"{'tosca.relationships.vendor.VendorLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.vendor.VendorLinkable']}}",false
"{'tosca.relationships.vendor.VendorBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.vendor.VendorBindable']}}",false
"{'my.relationships.ConnectsToWebUI': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'target_ip': {'type': 'string'}}, 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'target_ip': {'type': 'string'}}, 'implementation': 'scripts/my_script.sh'}}}}}",false
"{'mycompany.mytypes.myCustomClientServerType': {'derived_from': 'tosca.relationships.HostedOn', 'properties': None}}",lazy
"{'mycompany.mytypes.myCustomConnectionType': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': None}}",lazy
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint'], 'properties': {'prop.name': {'type': 'string', 'required': False}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}}}",false
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint'], 'properties': {'prop.name': {'type': 'string', 'required': False}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/test.sh'}, 'pre_configure_target': {'implementation': 'scripts/target.sh'}}}}}",false
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint', 'tosca.capabilities.Endpoint.Database'], 'properties': {'prop.name': {'type': 'string', 'required': True}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}}}",false
{'tosca.relationships.indigo.Manages': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'tosca.relationships.indigo.AttachesTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'fs_type': {'type': 'string', 'required': False, 'default': None}}}}",false
"{'SmartPlug': {'properties': {'vendor': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string'}}}}",false
"{'SuperSmartPlug': {'derived_from': 'SmartPlug', 'properties': {'failsafe': {'type': 'boolean'}}}}",false
"{'Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'relationship.Configure'}}}}",false
"{'DependsOn': {'derived_from': 'Root', 'description': 'This type represents a general dependency relationship between two nodes.', 'valid_target_types': ['Node']}}",false
"{'HostedOn': {'derived_from': 'Root', 'description': 'This type represents a hosting relationship between two nodes.', 'valid_target_types': ['Container']}}",false
"{'ConnectsTo': {'derived_from': 'Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['Endpoint'], 'properties': {'credential': {'type': 'Credential', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",false
"{'AttachesTo': {'derived_from': 'Root', 'valid_target_types': ['Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",false
"{'RoutesTo': {'derived_from': 'ConnectsTo', 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'valid_target_types': ['Endpoint']}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a general dependency relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a hosting relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",false
"{'tosca.relationships.RoutesTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'插頭': {'properties': {'供應商': {'type': 'string'}}, 'attributes': {'IP地址': {'type': 'string'}}}}",false
{'Route': {'valid_target_types': ['Service']}},false
{'Depends': {}},lazy
"{'tosca.relationships.nfv.VirtualBindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.7.1'}, 'description': 'This relationship type represents an association relationship between VDU and CP node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",false
"{'tosca.relationships.nfv.Monitor': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.7.2'}, 'description': 'This relationship type represents an association relationship to the Metric capability of VDU node types.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.Metric']}}",false
{'Connection': {}},lazy
"{'Routing': {'derived_from': 'Connection', 'properties': {'routes': {'type': 'list', 'entry_schema': 'Route'}}}}",false
"{'tosca.relationships.samples.basic.SampleRelationship': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': None, 'interfaces': {'Configure': {'add_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/samplerelationship_add_target.sh'}, 'remove_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/samplerelationship_remove_target.sh'}}}}}",false
"{'Trunk': {'properties': {'endpoint': {'type': 'string'}}, 'attributes': {'ip': {'type': 'string'}}}}",false
"{'tosca.relationships.MiCADO.ConnectsTo': {'description': 'used to connect containers over a specific Docker network', 'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'network': {'type': 'string', 'description': 'Name of Docker network to connect containers over', 'required': True}}}}",false
"{'org.alien4cloud.terraform.openstack.relationships.SecurityGroup': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.terraform.openstack.capabilities.SecurityGroup'], 'interfaces': {'configure': {'add_target': {'inputs': {'_TF_OPENSTACK_CONFIG': {'get_property': ['SOURCE', 'openstack_config']}, '_TF_FLOATING_IP': {'get_attribute': ['TARGET', 'public_ip']}}, 'implementation': 'scripts/tf_rel_sg_add_target.sh'}, 'remove_target': {'implementation': 'scripts/tf_rel_sg_remove_target.sh'}, 'add_source': {'implementation': 'scripts/tf_rel_sg_add_source.sh'}, 'remove_source': {'implementation': 'scripts/tf_rel_sg_remove_source.sh'}}}}}",false
"{'org.alien4cloud.grafana.linux_ans.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.alien4cloud.graphite.pub.capabilities.GraphiteHttpEndpoint'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, 'graphite_port': {'get_property': ['TARGET', 'http_endpoint', 'port']}, 'grafana_port': {'get_property': ['SOURCE', 'http_endpoint', 'port']}, 'grafana_user': {'get_property': ['SOURCE', 'http_endpoint', 'user']}, 'grafana_password': {'get_property': ['SOURCE', 'http_endpoint', 'password']}, 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.spark.linux_sh.relationships.JoinSparkCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.spark.linux_sh.nodes.SparkMaster'], 'interfaces': {'Configure': {'add_target': {'inputs': {'SPARK_INSTALL_DIR': {'get_property': ['SOURCE', 'install_dir']}, 'SPARK_MASTER_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}, 'SPARK_SLAVE_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'SPARK_MASTER_PORT': {'get_attribute': ['TARGET', 'spark_master', 'port']}}, 'implementation': 'scripts/join_spark_cluster.sh'}}}}}",false
"{'org.alien4cloud.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.java.pub.capabilities.JDK']}}",false
{'org.alien4cloud.diamond.pub.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.alien4cloud.config.orchestrator.cfy.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.consul.relationships.ConnectToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'CA_PEM': {'get_property': ['SOURCE', 'ca_pem']}, 'CA_KEY': {'get_property': ['SOURCE', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SOURCE', 'ca_passphrase']}, 'AGENT_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'AGENT_API_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}}, 'implementation': 'scripts/ConnectToConsulAgent/pre_configure_source.sh'}}}, 'artifacts': [{'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.alien4cloud.alien4cloud.webapp.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchTransportAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'ES_PORT': {'get_property': ['TARGET', 'elasticsearch', 'port']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.alien4cloud.samba.relationships.ConnectsToSambaServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.samba.capabilities.SambaServer'], 'properties': {'mount_point': {'type': 'string', 'default': '/var/alien4cloud'}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'SAMBA_SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SHARE_NAME': {'get_property': ['TARGET', 'share_name']}, 'MOUNT_POINT': {'get_property': ['SELF', 'mount_point']}}, 'implementation': 'scripts/smbClient/add_target.sh'}, 'remove_target': {'inputs': {'MOUNT_POINT': {'get_property': ['SELF', 'mount_point']}}, 'implementation': 'scripts/smbClient/remove_target.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.alien4cloud.vault.relationships.ConnectToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'AGENT_IP': {'get_attribute': ['TARGET', 'private_address']}, 'AGENT_API_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}, 'AGENT_TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'VAULT_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'VAULT_PORT': {'get_property': ['SOURCE', 'port']}, 'PUBLIC_ADDRESS': {'get_attribute': ['SOURCE', 'public_address']}, 'CA_PEM': {'get_property': ['SOURCE', 'ca_pem']}, 'CA_KEY': {'get_property': ['SOURCE', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SOURCE', 'ca_passphrase']}}, 'implementation': 'scripts/vault/configure_vault.sh'}}}}}",false
"{'org.alien4cloud.vault.vault_sh.relationships.PolicyHostedOnVaultServer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.vault.vault_sh.nodes.VaultServer']}}",false
"{'org.alien4cloud.vault.pub.relationships.PolicyHostedOnVaultServer': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the vault policy is hosted on the vault server.', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",false
"{'org.alien4cloud.kubernetes.kubeadm.relationships.HostedOnDocker': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.kubernetes.kubeadm.capabilities.DockerHost']}}",false
"{'org.alien4cloud.kubernetes.kubeadm.relationships.JoinMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.kubernetes.kubeadm.capabilities.MasterCluster'], 'interfaces': {'configure': {'post_configure_source': {'implementation': 'scripts/kubernetes/join-master.sh', 'inputs': {'MASTER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'KUBE_TOKEN': {'get_attribute': ['TARGET', 'kube_token']}, 'KUBE_SHA256': {'get_attribute': ['TARGET', 'kube_sha256']}}}}}}}",false
"{'org.alien4cloud.alien4cloud.config.location_resources.cfy_byon.LocationConnectsToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_hostpool.yml', 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.mysql.linux_pup.relationships.MysqlHostedOnAgentPuppet': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.agentpuppet.capabilities.PuppetAgentContainer']}}",false
{'org.alien4cloud.alien4cloud.pub.relationships.AlienConfiguratorHostedOnAlien': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCollectElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_elasticsearch.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'elasticsearch_host': {'get_attribute': ['TARGET', 'http', 'ip_address']}, 'elasticsearch_port': {'get_attribute': ['TARGET', 'http', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_jolokia.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'ip_address']}, 'jolokia_port': {'get_attribute': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_rabbitmq.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'rabbitmq_port': {'get_attribute': ['TARGET', 'rabbitmq_management', 'port']}, 'rabbitmq_user': {'get_attribute': ['TARGET', 'rabbitmq_management', 'user']}, 'rabbitmq_password': {'get_attribute': ['TARGET', 'rabbitmq_management', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondPostgresqlCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.postgresql.pub.PostgresqlEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_postgresql.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'postgresql_port': {'get_attribute': ['TARGET', 'postgresql', 'port']}, 'postgresql_user': {'get_attribute': ['TARGET', 'postgresql', 'user']}, 'postgresql_password': {'get_attribute': ['TARGET', 'postgresql', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector': {'derived_from': 'org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector', 'valid_target_types': ['org.alien4cloud.alien4cloud.pub.capabilities.JolokiaA4CEndpoint'], 'interfaces': {'Configure': {'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_alien.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'jolokia', 'ip_address']}, 'alien_data_dir': {'get_property': ['TARGET', 'data_dir']}, 'jolokia_port': {'get_property': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyHostpoolCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.alien4cloud.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.aws-cli.pub.capabilities.AwsCli']}}",false
{'org.alien4cloud.alien4cloud.config.pub.relationships.LocationHostedOnOrchestrator': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.alien4cloud.alien4cloud.config.applications.relationships.AddApplicationsDependsOnCsar': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.alien4cloud.config.csar']}}",false
"{'org.alien4cloud.consul.consul_sh.relationships.JoinCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'The relationship between a consul client agent and a consul server agent.\n', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulServer'], 'interfaces': {'Configure': {'add_target': {'inputs': {'CONSUL_SERVER_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/consul/join_consul_cluster.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.alien4cloud.mock.bash.relationships.BashComponentHostedOnHost': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'valid_target_types': ['org.alien4cloud.mock.bash.nodes.BashMockHost'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'data_endpoint', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'org.alien4cloud.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'interfaces': {'Configure': {'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collector_added.yml', 'dashboard_dir': {'get_attribute': ['TARGET', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['TARGET', 'grafana_url']}, 'grafana_user': {'get_attribute': ['TARGET', 'grafana_user']}, 'grafana_password': {'get_attribute': ['TARGET', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'plugin_archive_url': {'get_property': ['SOURCE', 'plugin_archive_url']}, 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToA4C': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_a4c.yml', 'alien_user': {'get_property': ['TARGET', 'rest', 'user']}, 'alien_password': {'get_property': ['TARGET', 'rest', 'password']}, 'alien_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'hostpool_connected.yml', 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_key']}, 'key_name': {'get_property': ['SOURCE', 'key_name']}, 'key_content': {'get_property': ['SOURCE', 'key_content']}, 'region': {'get_property': ['SOURCE', 'region']}, 'instance_name': {'get_property': ['SOURCE', 'instance_name']}, 'instance_count': {'get_property': ['SOURCE', 'instance_count']}, 'host_per_instance': {'get_property': ['SOURCE', 'host_per_instance']}, 'instance_username': {'get_property': ['SOURCE', 'instance_username']}, 'instance_groups': {'get_property': ['SOURCE', 'instance_groups']}, 'instance_image': {'get_property': ['SOURCE', 'instance_image']}, 'instance_type': {'get_property': ['SOURCE', 'instance_type']}, 'instance_os': {'get_property': ['SOURCE', 'instance_os']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",false
"{'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureAWSKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/aws_configure_key.sh'}}}}}",false
"{'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureOpenstackKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/openstack_configure_key.sh'}}}}}",false
"{'radon.relationships.google.GoogleTriggers': {'description': 'Google Cloud-specific relationship type representing GCResource-to-GCFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.google', 'abstract': 'false', 'final': 'false'}}}",false
"{'radon.relationships.monitoring.GCPIsMonitoredBy': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'user_email': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'user_email']}}, 'monitored_function': {'type': 'string', 'required': True, 'default': {'get_property': ['SOURCE', 'name']}}, 'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'pushgateway_ip']}}, 'grafana_api_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'grafana_api_ip']}}, 'service_account_file': {'type': 'string', 'required': True, 'default': '/tmp/service_account.json'}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'grafana-injection.yml', 'timeout': 30}}}}}}}",false
"{'radon.relationships.monitoring.AWSIsMonitoredBy': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'user_email': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'user_email']}}, 'monitored_function': {'type': 'string', 'required': True, 'default': {'get_property': ['SOURCE', 'function_name']}}, 'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'pushgateway_ip']}}, 'grafana_api_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'grafana_api_ip']}}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'grafana-injection.yml', 'timeout': 30}}}}}}}",false
"{'radon.relationships.aws.AwsTriggers': {'description': 'AWS-specific relationship type representing AwsResource-to-AwsLambdaFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.aws', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'description': 'List of events'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'region']}}, 'bucket_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'bucket_name']}}, 'function_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'arn']}}, 'events': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'events']}}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'event-binding.yml', 'timeout': 0}}}}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}, 'valid_target_types': ['tosca.capabilities.Attachment']}}",false
"{'radon.relationships.apache.kafka.PublishToKafkaTopic': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.apache.kafka', 'abstract': 'false', 'final': 'false'}, 'properties': {'request_required_acks': {'type': 'string', 'default': 'no_ack', 'constraints': [{'valid_values': ['no_ack', 'leader', 'in_syncs']}]}, 'request_timeout': {'type': 'integer', 'required': False, 'default': 10000, 'constraints': [{'greater_or_equal': 0}]}, 'message_send_max_retries': {'type': 'integer', 'required': False, 'default': 3, 'constraints': [{'greater_or_equal': 0}]}, 'retry_backoff': {'type': 'integer', 'required': False, 'default': 100, 'constraints': [{'greater_or_equal': 0}]}}, 'valid_target_types': ['radon.capabilities.kafka.KafkaTopic']}}",false
"{'radon.relationships.apache.openwhisk.OpenWhiskKafkaTriggers': {'description': 'OpenWhisk-specific relationship type representing Kafka-to-OpenWhisk Function communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.apache.openwhisk', 'abstract': 'false', 'final': 'false'}, 'properties': {'trigger_name': {'type': 'string', 'description': 'the name of the trigger created by this relationship. Used for proper cleanup when the relationship is removed.'}, 'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",false
"{'radon.relationships.datapipeline.ConnectNifiLocal': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.datapipeline', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'operations': {'post_configure_source': {'inputs': {'source_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}, 'source_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'id']}}}, 'implementation': {'primary': 'connect.yml', 'timeout': 0}}}}}}}",false
"{'radon.relationships.Triggers': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Event'}}, 'interactions': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Interaction'}}}, 'valid_target_types': ['radon.capabilities.Invocable']}}",false
"{'radon.relationships.openfaas.OpenFaasKafkaTriggers': {'description': 'OpenFaaS-specific relationship type representing Kafka-to-OpenFaaS Function communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.openfaas', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",false
"{'radon.relationships.nifi.ConnectsToNifi': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.nifi', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'operations': {'post_configure_source': {'inputs': {'source_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}, 'source_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'id']}}}, 'implementation': {'primary': 'connect.yml', 'dependencies': ['local.yml', 'remote.yml'], 'timeout': 0}}}}}}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'credential': {'type': 'Credential', 'required': False}}, 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'radon.relationships.azure.AzureTriggers': {'description': 'Azure-specific relationship type representing AzureResource-to-AzureFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",false
"{'radon.relationships.azure.AzureCosmosDBTriggers': {'description': 'Azure-specific relationship type representing CosmosDB-to-AzureFunction communication', 'derived_from': 'radon.relationships.azure.AzureTriggers', 'metadata': {'targetNamespace': 'radon.relationships.azure', 'abstract': 'false', 'final': 'false'}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'radon.relationships.aws.ApiGatewayTriggers': {'description': 'AWS-specific relationship type representing ApiGateway-to-AwsLambdaFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.aws', 'abstract': 'false', 'final': 'false'}, 'properties': {'endpoint': {'type': 'string', 'description': 'Endpoint name'}, 'http_methods': {'type': 'string', 'description': 'List of HTTP methods'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'endpoint': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'endpoint']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'region']}}, 'role_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'role_arn']}}, 'function_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'arn']}}, 'http_methods': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'http_methods']}}}, 'operations': {'pre_configure_source': {'implementation': {'primary': 'pre_configure_source.yml', 'dependencies': ['generator.py'], 'timeout': 0}}}}}}}",unknown
"{'radon.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'interactions': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Interaction'}}}}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'attributes': {'tosca_name': {'type': 'string'}, 'state': {'type': 'string', 'default': 'initial'}, 'tosca_id': {'type': 'string'}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Container', 'tosca.capabilities.Node']}}",false
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",false
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",false
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",false
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",false
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
"{'yorc.tests.relationships.OpImplementationArtifact': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'file': 'something', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",false
"{'yorc.tests.relationships.ValueAssignmentHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'properties': {'literal': {'type': 'string'}, 'mapProp': {'type': 'map'}, 'listProp': {'type': 'list'}, 'literalDefault': {'type': 'string', 'default': 'relDefault'}, 'mapPropDefault': {'type': 'map', 'default': {'relProp1': 'relPropVal1', 'relProp2': 'relPropVal2'}}, 'listPropDefault': {'type': 'list', 'default': ['relPropI1', 'relPropI2', 'relPropI3']}, 'complex': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDef': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplex': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDef': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['reltypeDefL1', 'reltypeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'relnested': 1}}, {'literal': 43, 'mymap': {'relnested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'relnested': 3}}}}}}}, 'attributes': {'containerName': {'get_operation_output': ['TARGET', 'custom', 'publish', 'CONTAINER_NAME']}, 'literalAttr': {'type': 'string'}, 'mapAttr': {'type': 'map'}, 'listAttr': {'type': 'list'}, 'literalDefault': {'type': 'string', 'default': 'relDefault'}, 'mapAttrDefault': {'type': 'map', 'default': {'relAttr1': 'relAttrVal1', 'relAttr2': 'relAttrVal2'}}, 'listAttrDefault': {'type': 'list', 'default': ['relAttrI1', 'relAttrI2', 'relAttrI3']}, 'complexAttr': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDefAttr': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplexAttr': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDefAttr': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['reltypeDefL1', 'reltypeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'relnested': 1}}, {'literal': 43, 'mymap': {'relnested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'relnested': 3}}}}}}}}}",unknown
"{'org.ystia.yorc.test.implem.AppAJoinAppARelType': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects an App A to another App A using its public address \n', 'valid_target_types': ['org.ystia.yorc.test.pub.AppACapBType'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'public_address']}}, 'implementation': 'test_playbook.yml'}}}}}",false
"{'yorc.relationships.AssignsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents an IP address assignment to a Compute node type.', 'valid_target_types': ['yorc.capabilities.Assignable']}}",false
"{'yorc.relationships.MemberOf': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents the membership of a node to a group.', 'valid_target_types': ['yorc.capabilities.Group']}}",false
"{'yorc.relationships.DeploysThrough': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This type assigns a bastion host to use for connecting to a compute instance.', 'valid_target_types': ['yorc.capabilities.SSHBastionHost']}}",false
"{'yorc.tests.relationships.GetOPOutputsRel': {'derived_from': 'tosca.relationships.DependsOn', 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': 'scripts/fdisk.sh', 'post_configure_source': {'inputs': {'PARTITION_NAME': {'get_attribute': ['SELF', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}}}",false
"{'yorc.tests.OperationHosts.relationships.OHRel': {'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'primary': 'myscript.sh', 'operation_host': 'ORCHESTRATOR'}}, 'post_configure_target': {'implementation': {'primary': 'myscript.sh'}}, 'add_source': {'implementation': 'myscript.sh'}, 'remove_target': 'myscript.sh'}}}}",false
"{'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint': {'description': 'This type represents relationship between a K8S endpoint and an external endpoint.', 'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KUBE_SPEC_PATH': {'get_attribute': ['SOURCE', 'spec_path']}, 'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/kubectl_endpoint_join.sh'}}}, 'valid_source_types': ['tosca.capabilities.Endpoint']}}",false
"{'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.lang.java.pub.capabilities.JDK'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'TOMCAT_SEC': {'get_secret': ['/secrets/app/tominput']}}, 'implementation': 'script/my.sh'}}}}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.  See section “Relationship States” for allowed values.', 'default': 'initial'}}, 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to notify the source node of a target node being added via a relationship.'}, 'add_source': {'description': 'Operation to notify the target node of a source node which is now available via a relationship.'}, 'remove_target': {'description': 'Operation to notify the source node of a target node being removed from a relationship.'}, 'remove_source': {'description': 'Operation to notify the target node of a source node being removed from a relationship.'}, 'target_changed': {'description': 'Operation to notify source some property or attribute of the target changed'}, 'source_changed': {'description': 'Operation to notify target some property or attribute of the source'}}}}}",unknown
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.\n', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as ‘/usr/data’\nNote: The user must provide it and it cannot be “root”.\n', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’\n', 'required': False}}, 'attributes': {'device': {'type': 'string', 'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.\n'}}}}",false
{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.AttachesTo'}},lazy
"{'tosca.relationships.Network': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Connectivity']}}",false
"{'tosca.relationships.network.LinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",false
"{'tosca.relationships.network.BindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This type represents a network association relationship between Port and Compute node types.', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",false
"{'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime': {'description': 'null', 'derived_from': 'tosca.relationships.HostedOn', 'valid_source_types': ['org.alien4cloud.extended.container.capabilities.ApplicationHost']}}",false
"{'org.alien4cloud.relationships.MountDockerVolume': {'description': 'null', 'derived_from': 'tosca.relationships.AttachTo', 'properties': {'container_path': {'type': 'string', 'description': 'Specifies where the volume is mounted inside the container.'}, 'container_subPath': {'type': 'string', 'description': ""Path within the volume from which the container's volume should be mounted."", 'required': False}, 'readonly': {'type': 'boolean', 'required': False, 'default': False}}, 'valid_source_types': ['org.alien4cloud.capabilities.DockerVolumeAttachment']}}",false
"{'yorc.types.Rel': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'inputs': {'G1': 'G1', 'G2': {'get_property': ['SOURCE', 'document_root']}, 'G3': {'get_attribute': ['TARGET', 'ip_address']}}, 'pre_configure_source': {'inputs': {'A1': {'get_property': ['SOURCE', 'document_root']}, 'A2': {'get_attribute': ['TARGET', 'ip_address']}, 'OO': {'get_operation_output': ['SELF', 'Configure', 'add_source', 'my_output']}}, 'implementation': '/tmp/pre_configure_source.sh'}, 'add_source': {'inputs': {'A1': {'get_property': ['SOURCE', 'document_root']}, 'A2': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': '/tmp/add_source.sh', 'outputs': {'OUTPUT2': ['SOURCE', 'my_attribute2']}}}}}}",false
"{'yorc.test.relationships.TestComponentOnContainer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['yorc.test.capabilities.TestContainerCapability']}}",false
"{'yorc.test.relationships.TestComponentConnectsToModule': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['yorc.test.capabilities.TestModuleCapability']}}",false
"{'yorc.tests.relationships.imports.OpImplementationArtifact': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'file': 'something', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",false
"{'org.ystia.yorc.test.implem.JoinAppARelType': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to an App A instance\n', 'valid_target_types': ['org.ystia.yorc.test.pub.AppACapAType'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'private_address']}}, 'implementation': 'test_playbook.yml'}}}}}",false
"{'yorc.relationships.google.AttachesTo': {'derived_from': 'tosca.relationships.AttachTo', 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.\n', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'mode': {'type': 'string', 'description': 'The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.\n', 'required': False}}, 'attributes': {'device': {'type': 'string', 'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.\n'}}}}",false
"{'yorc.relationships.google.Network': {'derived_from': 'tosca.relationships.Network', 'valid_target_types': ['tosca.capabilities.Connectivity'], 'properties': {'subnet': {'type': 'string', 'description': 'Specify the sub-network to use for this relationship if network contains multiple sub-networks. If none is defined, the first matching subnet with the target Google region will be associated to it.\n', 'required': False}}}}",false
"{'yorc.tests.relationships.ValueAssignmentConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'empty_prop': {'type': 'string', 'required': False, 'default': ''}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}, 'input_empty_prop': {'get_property': ['SELF', 'empty_prop']}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}, 'pre_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}}}}}",false
"{'starlings.relationships.MountDockerVolume': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['starlings.capabilities.DockerVolumeAttachment'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HOST_PATH': {'get_property': ['SOURCE', 'host_path']}, 'CONTAINER_PATH': {'get_property': ['SOURCE', 'container_path']}}, 'implementation': 'scripts/docker_attach_volume.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",false
"{'starlings.relationships.DependsOnDockerVolume': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['starlings.capabilities.DockerVolume'], 'attributes': {'host_path': {'get_operation_output': ['SELF', 'Configure', 'post_configure_target', 'HOST_PATH']}}, 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HOST_PATH': {'get_property': ['TARGET', 'host_path']}, 'TARGET_DIRECTORY': {'get_property': ['SOURCE', 'target_directory']}}, 'implementation': 'scripts/publisher_configure_copy_directories.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",false
"{'starlings.relationships.HostedOnDockerContainer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['starlings.capabilities.Container.Docker'], 'attributes': {'container_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'CONTAINER_ID']}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'CONTAINER_ID': {'get_attribute': ['TARGET', 'container_id']}}, 'implementation': 'scripts/get_container_id.sh'}}}}}",false
"{'daily_test.relationships.interfaces': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'Configure': {'operations': {'pre_configure_source': '/modules/relationship_types/interfaces/playbooks/pre_configure_source.yaml', 'pre_configure_target': '/modules/relationship_types/interfaces/playbooks/pre_configure_target.yaml', 'post_configure_source': '/modules/relationship_types/interfaces/playbooks/post_configure_source.yaml', 'post_configure_target': '/modules/relationship_types/interfaces/playbooks/post_configure_target.yaml'}}}}}",false
"{'my.relationships.NginxSiteHosting': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'operations': {'post_configure_target': {'inputs': {'marker': {'default': {'get_attribute': ['TARGET', 'host', 'id']}, 'type': 'string'}}, 'implementation': {'primary': 'playbooks/reload.yaml'}}}}}}}",false
"{'steampunk.test.relationships.TeacherTeachesStudent': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Associates a teacher with a student.\n', 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'inputs': {'student_id': {'default': {'get_attribute': ['TARGET', 'student_id']}, 'type': 'string'}, 'student_ids': {'default': {'get_attribute': ['SOURCE', 'student_ids']}, 'type': 'list'}}, 'outputs': {'new_list': ['SOURCE', 'student_ids']}, 'implementation': 'playbooks/teacher-teaches-student--preconfigure-source.yaml'}}}}}}",false
"{'tosca.relationships.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'daily_test.relationships.test': {'derived_from': 'tosca.relationships.HostedOn', 'attributes': {'relationship_attribute': {'type': 'string'}}, 'properties': {'relationship_property': {'type': 'string', 'default': 'test123', 'required': True}}, 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'inputs': {'relationship_property': {'default': {'get_property': ['SELF', 'relationship_property']}, 'type': 'string'}}, 'implementation': {'primary': 'playbooks/test.yaml'}}}}}}}",false
"{'radon.relationships.test': {'derived_from': 'tosca.relationships.HostedOn', 'attributes': {'relationship_attribute': {'type': 'string', 'default': 'Default relationship attribute'}, 'pre_configure_source_attribute': {'description': 'Attribute set by pre_configure_source interface operation', 'type': 'string'}, 'pre_configure_target_attribute': {'description': 'Attribute set by pre_configure_target interface operation', 'type': 'string'}, 'post_configure_source_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_attribute attribute that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_property_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_property property that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_input_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_input input that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_txt_file_attribute': {'description': 'Attribute set by post_configure_source interface operation that includes the contents of the dependent txt file\n', 'type': 'string'}, 'post_configure_target_attribute': {'description': 'Attribute set by post_configure_target interface operation', 'type': 'string'}}, 'properties': {'relationship_property': {'type': 'string', 'default': 'Default relationship property'}}, 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'implementation': 'playbooks/pre_configure_source.yaml'}, 'pre_configure_target': {'implementation': 'playbooks/pre_configure_target.yaml'}, 'post_configure_source': {'inputs': {'relationship_attribute': {'type': 'string', 'default': {'get_attribute': ['SELF', 'relationship_attribute']}}, 'relationship_property': {'type': 'string', 'default': {'get_property': ['SELF', 'relationship_property']}}, 'relationship_input': {'type': 'string', 'default': {'get_input': 'relationship_input'}}}, 'implementation': {'primary': 'playbooks/post_configure_source.yaml', 'dependencies': ['files/file.txt']}}, 'post_configure_target': {'implementation': 'playbooks/post_configure_target.yaml'}}}}}}",false
{'alien.test.relationships.TestComponentConnectsTo': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
{'alien.test.relationships.CapaUpperBoundTest': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
{'alien.test.relationships.ReqUpperBoundTest': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
{'alien.test.relationships.ReqToBeDeleted': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
{'alien.test.relationships.CapaToBeDeleted': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
"{'tosca.relationships.Root': {'description': 'TOSCA Root relationship (used to define the default lifecycle).', 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'Default lifecycle for nodes in TOSCA.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to add a target node.'}, 'remove_target': {'description': 'Operation to remove a target node.'}}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_target_types': ['tosca.capabilities.Feature']}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container'], 'properties': {'password': {'type': 'string', 'description': 'user_pass', 'required': False, 'constraints': [{'min_length': 6}, {'max_length': 10}]}}}}",false
"{'fastconnect.relationships.cloudify.ConnectsToApacheLB': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a http endpoint to an ApacheLB\n', 'tags': {'marurity': 'draft'}, 'valid_target_types': ['calm.capabilities.HttpEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'post_configure_target': 'connecttoscript/invokeAddNode.groovy'}}, 'artifacts': [{'scripts': {'file': 'connecttoscript', 'type': 'fastconnect.artifacts.ResourceDirectory'}}]}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container'], 'properties': {'password': {'type': 'string', 'description': 'user_pass', 'required': False, 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'fake_password': {'type': 'string', 'description': 'user_pass', 'required': False}}}}",false
"{'mycompany.mytypes.myapplication.MyRelationship': {'derived_from': 'tosca.relationships.Relationship', 'description': 'a custom relationship', 'properties': {'my_feature_setting': {'type': 'string'}, 'my_feature_value': {'type': 'integer'}}, 'valid_target_types': ['tosca.capabilities.Feature1', 'tosca.capabilities.Feature2']}}",false
"{'custom.relationships.MyRelationType': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'prop1': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'prop2': {'type': 'string', 'required': False}}}}",false
{'alien.test.relationships.ReqToBeChanged': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
"{'fastconnect.relationships.cloudify.ConnectsTomcatToPostgre': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects Tomcat to an PostgreSQL\n', 'valid_sources': ['alien4cloud.capabilities.JdbcEndpoint'], 'valid_targets': ['alien4cloud.capabilities.JdbcEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'pre_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_configureDatasource.groovy'}}, 'post_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_postgreAddUser.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",false
"{'fastconnect.relationships.cloudify.ConnectsToApacheLB': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects Tomcat to an ApacheLB\n', 'valid_sources': ['alien4cloud.capabilities.HttpEndpoint'], 'valid_targets': ['alien4cloud.capabilities.HttpEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'add_target': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_connectto_apache_addtarget.groovy'}}, 'remove_target': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_connectto_apache_removetarget.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",false
"{'fastconnect.relationships.cloudify.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_sources': ['alien4cloud.capabilities.WarHosting'], 'valid_targets': ['alien4cloud.capabilities.WarHosting'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'post_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/war_hostedon_tomcat_postsource.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",false
{'alien.tests.dependencies.relationships.DDependsOnC': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'test.relationships.DependsOn': {'valid_sources': ['test.requirements.Feature'], 'valid_targets': ['test.capabilities.Feature']}}",false
"{'test.relationships.HostedOn': {'valid_sources': ['test.requirements.hosting'], 'valid_targets': ['test.capabilities.Container']}}",false
{'tosca.relationships.Root': {'description': 'root type'}},lazy
"{'my.maven.relationship': {'derived_from': 'tosca.relationships.Root', 'artifacts': [{'simple_war': 'binary/myWar.war'}, {'remote_war': {'file': 'alien4cloud:alien4cloud-ui:1.3.0-SM3', 'type': 'tosca.artifacts.Deployment.War', 'repository': 'maven_repo'}}]}}",false
{'my.maven.relationship.extended': {'derived_from': 'my.maven.relationship'}},lazy
{'tosca.relationships.Root': {'description': 'the root type'}},lazy
"{'tosca.relations.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.Root']}}",false
{'tosca.relations.HostedOn': {'derived_from': 'tosca.relations.DependsOn'}},lazy
{'tosca.relations.ConnectedTo': {'derived_from': 'tosca.relations.DependsOn'}},lazy
{'alien.test.relationships.TestComponentConnectsToChanged': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
"{'fastconnect.relationships.KarDeployedOn': {'valid_sources': ['fastconnect.nodes.Kar'], 'valid_targets': ['fastconnect.nodes.Karaf']}}",false
"{'fastconnect.relationships.OsgiBundleDeployedOn': {'valid_sources': ['fastconnect.nodes.OsgiBundle'], 'valid_targets': ['fastconnect.nodes.Karaf', 'fastconnect.nodes.Equinox']}}",false
{'tosca.relations.depends_on': {'valid_target': 'tosca.nodes.root'}},false
{'tosca.relations.hosted_on': {'derived_from': 'tosca.relations.depends_on'}},lazy
{'tosca.relations.connected_to': {'derived_from': 'tosca.relations.depends_on'}},lazy
{'org.alien4cloud.relationships.test.MyRelationship': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'alien.test.relationships.DependsOnJVM': {'derived_from': 'tosca.relationships.DependsOn', 'properties': {'context': {'type': 'string', 'required': False}}}}",false
{'alien.test.relationships.HostedOnAppServer': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'my.http.relationship': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'create': 'https://otherCompany/script/short_notation.sh', 'start': {'inputs': {'TOTO': 'tata', 'TITI': 'tutu'}, 'implementation': {'file': 'myScript.abc', 'repository': 'script_repo', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",false
{'my.http.relationship.extended': {'derived_from': 'my.http.relationship'}},lazy
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_sources': ['tosca.capabilities.Feature'], 'valid_targets': ['tosca.capabilities.Feature']}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_sources': ['tosca.capabilities.Container'], 'valid_targets': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_sources': ['tosca.capabilities.Endpoint'], 'valid_targets': ['tosca.capabilities.Endpoint']}}",false
{'alien.test.relationships.DependsOnJVM': {'derived_from': 'tosca.relationships.DependsOn'}},lazy
"{'alien.test.SoftwareHostedOnCompute': {'derived_from': 'tosca.relationships.HostedOn', 'properties': {'install_dir': {'type': 'string'}}}}",false
"{'alien.test.MyRelationshipDerivedFromNothing': {'valid_target_types': ['alien.test.MyCapabilityTypeDerivedFromNothing'], 'interfaces': {'Configure': {'pre_configure_source': 'scripts/myscript.sh'}}}}",false
"{'org.alien4cloud.test.functions.relationships.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_target_types': ['org.alien4cloud.capabilities.WarHosting'], 'properties': {'relName': {'type': 'string'}}, 'interfaces': {'configure': {'post_configure_source': {'inputs': {'contextPath': {'get_property': ['SOURCE', 'context_path']}, 'propFromSourceCompute': {'get_property': ['SOURCE', 'customHostName']}, 'tomcatVersion': {'get_property': ['TARGET', 'component_version']}, 'propFromTargetCompute': {'get_property': ['TARGET', 'customHostName']}, 'tomcatIp': {'get_attribute': ['TARGET', 'ip_address']}, 'warNodeContext': {'get_attribute': ['SOURCE', 'warNodeContext']}, 'relName': {'get_property': ['SELF', 'relName']}, 'valid_node_types': {'get_property': ['TARGET', 'war_host', 'valid_node_types']}, 'bad_valid_node_types': {'get_property': ['SELF', 'war_host', 'valid_node_types']}, 'null_capa_prop1': {'get_property': ['TARGET', 'war_hosttt', 'valid_node_types']}, 'null_capa_prop2': {'get_property': ['TARGET', 'war_host', 'valid_node_typesss']}}, 'implementation': 'scripts/dummy.sh'}}}}}",false
"{'org.alien4cloud.test.relationships.HostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'configure': {'post_configure_source': {'inputs': {'CUSTOM_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'NAME': {'get_property': ['SOURCE', 'name']}, 'COMPUTE_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",false
"{'org.alien4cloud.test.relationships.TestTrigger': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.test.TestCompute'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'post_configure_target': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'add_target': {'inputs': {'MY_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'SOURCE_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'MY_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'add_source': {'inputs': {'MY_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'TARGET_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'MY_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'remove_target': {'inputs': {'MY_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'SOURCE_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'MY_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'remove_source': {'inputs': {'MY_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'TARGET_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'MY_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",true
"{'org.alien4cloud.test.relationships.DependsOnGetIpTest': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'configure': {'post_configure_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_targets': ['tosca.capabilities.Feature']}}",false
"{'alien.relationships.LinuxPartition': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connets a FileSystem to a Volume.', 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/parted.sh'}, 'post_configure_source': {'inputs': {'FS_TYPE': {'get_property': ['SOURCE', 'fs_type']}, 'PARTITION_NAME': {'get_attribute': ['SOURCE', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to notify the source node of a target node being added via a relationship.'}, 'add_source': {'description': 'Operation to notify the target node of a source node which is now available via a relationship.'}, 'remove_target': {'description': 'Operation to notify the source node of a target node being removed from a relationship.'}, 'remove_source': {'description': 'Operation to notify the target node of a source node being removed from a relationship.'}, 'target_changed': {'description': 'Operation to notify source some property or attribute of the target changed'}, 'source_changed': {'description': 'Operation to notify target some property or attribute of the source'}}}}}",false
"{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment']}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",false
"{'my.types.WordpressDbConnection': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': 'scripts/wp_db_configure.sh'}}}}",false
{'MyCustomAttachesTo': {'derived_from': 'tosca.relationships.AttachesTo'}},lazy
"{'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.extended.container.capabilities.ApplicationHost']}}",false
"{'org.alien4cloud.relationships.MountDockerVolume': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['org.alien4cloud.capabilities.DockerVolumeAttachment'], 'properties': {'container_path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the container.'}}}}",false
"{'openstack.relationships.ConnectsTo': {'description': 'ConnectsTo relationship.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['openstack.capabilities.Endpoint']}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
{'type': 'object'},lazy
{'additionalProperties': {'$ref': '#/definitions/relationship_type'}},lazy
"{'org.ystia.python.pub.relationships.HostedOnPythonRuntime': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship between a Python SoftwareComponent and its RunOnPVM', 'valid_target_types': ['org.ystia.python.pub.capabilities.PythonHosting']}}",false
"{'org.ystia.yorc.alien4cloud.relationships.ConnectsToYorc': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.yorc.pub.capabilities.YorcRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'yorc_address_ha': {'get_property': ['SOURCE', 'yorc_address_ha']}, 'yorc_url_ha': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_property': ['SOURCE', 'yorc_address_ha']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}, 'yorc_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}, 'ca_pem': {'get_property': ['TARGET', 'ca_pem']}, 'ca_key': {'get_property': ['TARGET', 'ca_key']}, 'ca_passphrase': {'get_property': ['TARGET', 'ca_passphrase']}}, 'implementation': 'playbook/connect_yorc.yml'}}}}}",false
"{'org.ystia.mysql.linux.bash.relationships.HostedOn.MySQLServer': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'This type represents a hosting relationship between MySQLServer and MySQLDataBase nodes components\n', 'valid_target_types': ['org.ystia.mysql.pub.capabilities.Container.MySQLServer']}}",false
"{'org.ystia.mysql.linux.bash.relationships.DependsOn.MySqlVolume': {'derived_from': 'org.ystia.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TARGET_BLOCKSTORAGE_DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/mysql_pre_configure_volume.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",false
"{'org.ystia.kafka.linux.bash.relationships.HostedOnKafka': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship between a Kafka topic and Kafka', 'valid_target_types': ['org.ystia.kafka.linux.bash.nodes.Kafka']}}",false
"{'org.ystia.kafka.linux.bash.relationships.ConnectsToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Kafka to Block Storage File System', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}, 'implementation': 'scripts/kafka-to-volume.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.flink.linux.bash.relationships.TaskManagerToJobManager': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Flink TaskmManager to a Flink JobManager\n', 'valid_target_types': ['org.ystia.flink.linux.bash.nodes.JobManager'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'JOBMANAGER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'TASKMANAGER_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/taskmanager_to_jobmanager.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
{'org.ystia.yorc.pub.relationships.JoinConsulAgent': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.relationships.JoinConsulAgent'}},lazy
{'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn'}},lazy
"{'org.ystia.yorc.pub.relationships.DependsOnFilessystem': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects Yorc to a FileSystem (BlockStorage, NFS...)\n', 'valid_target_types': ['alien.nodes.LinuxFileSystem']}}",false
"{'org.ystia.yorc.pub.relationships.ConnectsToVaultServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to a Vault Server\n', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",false
"{'org.ystia.yorc.pub.relationships.SaveSecretsToVault': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Saves secrets to a Vault Server\n', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",false
"{'org.ystia.elasticsearch.linux.bash.relationships.ConnectsToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Elasticsearch to Block Storage File System\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'scripts/elasticsearch-to-filesystem.sh', 'inputs': {'ES_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.kubernetes.linux.ansible.relationships.JoinCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'JOIN_URL': {'concat': [{'get_attribute': ['TARGET', 'private_address']}, ':', {'get_attribute': ['TARGET', 'api_server', 'port']}]}, 'JOIN_URL_LB': {'concat': [{'get_attribute': ['SOURCE', 'lb_ip']}, ':', {'get_attribute': ['SOURCE', 'lb_port']}]}, 'ADMIN_TOKEN': {'get_attribute': ['TARGET', 'admin_token']}, 'CA_CERT_HASH': {'get_attribute': ['TARGET', 'ca_cert_hash']}, 'MASTER_PRIVATE_IP': {'get_attribute': ['TARGET', 'private_address']}, 'POD_CIDR': {'get_attribute': ['TARGET', 'pods_cidr']}}, 'implementation': 'playbooks/worker/post_configure.yaml'}, 'remove_source': {'inputs': {'node_name': {'get_attribute': ['SOURCE', 'node_name']}}, 'implementation': 'playbooks/master/remove_worker.yaml'}}}}}",false
"{'org.ystia.kubernetes.linux.ansible.relationships.UseLoadBalancer': {'derived_from': 'tosca.relationships.ConnectsTo', 'attributes': {'lb_ip': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_IP']}, 'lb_port': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_PORT']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'lb_ip': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'playbooks/commons/kubeadm/configure_loadbalancer.yaml'}}}}}",false
"{'org.ystia.kibana.linux.bash.relationships.ConnectsKibanaToElasticsearch': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Kibana to Elasticsearch', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'relationships/elasticsearch/kibana_to_elasticsearch_pre_config_source.sh', 'inputs': {'kibanaIp': {'get_attribute': ['SOURCE', 'ip_address']}, 'elasticsearchIp': {'get_attribute': ['TARGET', 'ip_address']}, 'REPOSITORY': {'get_property': ['SOURCE', 'repository']}, 'ELASTICSEARCH_REPOSITORY': {'get_property': ['TARGET', 'repository']}, 'ELASTICSEARCH_VERSION': {'get_property': ['TARGET', 'component_version']}}}, 'post_configure_source': {'implementation': 'relationships/elasticsearch/kibana_to_elasticsearch_post_config_source.sh', 'inputs': {'cluster_name': {'get_property': ['TARGET', 'search_resource', 'cluster_name']}, 'kibanaIp': {'get_attribute': ['SOURCE', 'ip_address']}, 'elasticsearchIp': {'get_attribute': ['TARGET', 'ip_address']}, 'ELASTICSEARCH_HEAP_SIZE': {'get_property': ['SOURCE', 'es_heap_size']}, 'JAVA_HOME': {'get_attribute': ['SOURCE', 'java_home']}}}}}, 'artifacts': [{'rselasticsearch': {'file': 'relationships/elasticsearch', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.kibana.linux.bash.relationships.DashboardHostedOnKibana': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship that allows to host a Dashboard on Kibana.', 'valid_target_types': ['org.ystia.kibana.pub.capabilities.DashboardHosting']}}",false
"{'org.ystia.kibana.linux.bash.relationships.BeatsDashboardsHostedOnKibana': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship that allows to host Dashboards for Beats components on Kibana.', 'valid_target_types': ['org.ystia.kibana.pub.capabilities.DashboardHosting']}}",false
"{'org.ystia.nfs.linux.ansible.relationships.JoinNFSServer': {'derived_from': 'org.ystia.nfs.pub.relationships.JoinNFSServer', 'interfaces': {'Configure': {'inputs': {'DIRECTORY': {'get_property': ['SOURCE', 'location']}, 'SERVER_IP': {'get_attribute': ['TARGET', 'private_address']}}, 'pre_configure_source': {'implementation': 'playbooks/join_server.yml'}}}}}",false
"{'org.ystia.java.pub.relationships.HostedOnJavaRuntime': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on java', 'valid_target_types': ['org.ystia.java.pub.capabilities.JavaHosting'], 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'JAVA_HOME': {'get_attribute': ['TARGET', 'java_home']}}, 'implementation': 'scripts/hosting_on_java.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.nfs.pub.relationships.JoinNFSServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Joins to a NFS Server\n', 'valid_target_types': ['org.ystia.nfs.pub.capabilities.NFSServer']}}",false
"{'org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Publish or Subscribe to a Kafka topic', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic']}}",false
"{'org.ystia.kafka.pub.relationships.PublishToKafkaTopic': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Publish to a Kafka topic', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'properties': {'request_required_acks': {'description': 'This value controls when a produce request is considered completed.\nSpecifically, how many other brokers must have committed the data to their log and acknowledged this to the leader?\nTypical values are\n- no_ack, which means that the producer never waits for an acknowledgement from the broker (the same behavior as 0.7).\n  This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).\n- leader, which means that the producer gets an acknowledgement after the leader replica has received the data.\n  This option provides better durability as the client waits until the server acknowledges the request as successful\n  (only messages that were written to the now-dead leader but not yet replicated will be lost).\n- in_syncs, The producer gets an acknowledgement after all in-sync replicas have received the data.\n  This option provides the greatest level of durability.\n  However, it does not completely eliminate the risk of message loss because the number of in sync replicas may, in rare cases, shrink to 1.\n  If you want to ensure that some minimum number of replicas (typically a majority) receive a write,\n  then you must set the topic-level min.insync.replicas setting.\n  Please read the Replication section of the design documentation for a more in-depth discussion.\n', 'type': 'string', 'required': True, 'default': 'no_ack', 'constraints': [{'valid_values': ['no_ack', 'leader', 'in_syncs']}]}, 'message_send_max_retries': {'description': 'This property will cause the producer to automatically retry a failed send request. This property specifies the number of retries when such failures occur. Note that setting a non-zero value here can lead to duplicates in the case of network errors that cause a message to be sent but the acknowledgement to be lost.\n', 'type': 'integer', 'required': False, 'default': 3, 'constraints': [{'greater_or_equal': 0}]}, 'retry_backoff_ms': {'description': 'Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.\n', 'type': 'integer', 'required': False, 'default': 100, 'constraints': [{'greater_or_equal': 0}]}, 'request_timeout_ms': {'description': 'The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client.\n', 'type': 'integer', 'required': False, 'default': 10000, 'constraints': [{'greater_or_equal': 0}]}}}}",false
"{'org.ystia.consul.linux.bash.relationships.ConnectsConsulAgentToServer': {'derived_from': 'org.ystia.consul.pub.relationships.ConnectsConsulAgentToServer', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'INSTALL_DIR': {'get_property': ['SOURCE', 'installation_directory']}}, 'implementation': 'scripts/consul_agent_to_server.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",false
"{'org.ystia.logstash.linux.bash.relationships.LogstashToKafka': {'derived_from': 'org.ystia.kafka.pub.relationships.PublishToKafkaTopic', 'description': 'Connects Logstash to Kafka', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TOPIC_NAME': {'get_property': ['TARGET', 'topic_name']}, 'REQUIRED_ACKS': {'get_property': ['SELF', 'request_required_acks']}, 'MESSAGE_MAX_RETRIES': {'get_property': ['SELF', 'message_send_max_retries']}, 'RETRY_BACKOFF_MS': {'get_property': ['SELF', 'retry_backoff_ms']}, 'REQUEST_TIMEOUT_MS': {'get_property': ['SELF', 'request_timeout_ms']}}, 'implementation': 'relationships/kafka/configure-kafka-output.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.logstash.linux.bash.relationships.KafkaToLogstash': {'derived_from': 'org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic', 'description': 'Connects Kafka to Logstash', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TOPIC_NAME': {'get_property': ['TARGET', 'topic_name']}}, 'implementation': 'relationships/kafka/configure-kafka-input.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.logstash.linux.bash.relationships.LogstashToElasticsearch': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Logstash to ElasticSearch', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'properties': {'proxy': {'description': 'Allows to specify a proxy to use to connect to ElasticSearch', 'type': 'string', 'required': False, 'default': '', 'constraints': [{'pattern': '^(https?://.+)?'}]}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'LOGSTASH_HOME': {'get_attribute': ['SOURCE', 'ls_home']}, 'cluster_name': {'get_property': ['TARGET', 'search_resource', 'cluster_name']}, 'ES_CAP_IP': {'get_attribute': ['TARGET', 'search_resource', 'ip_address']}, 'ES_IP': {'get_attribute': ['TARGET', 'private_address']}, 'ES_PUBLIC_IP': {'get_attribute': ['TARGET', 'public_address']}, 'PROXY': {'get_property': ['SELF', 'proxy']}}, 'implementation': 'relationships/elasticsearch/configure.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.logstash.linux.bash.relationships.GeonamesHostedOnLogstash': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Connects Geonames to Logstash', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashConnectorHosting'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/geonames/geonames_to_logstash.sh', 'inputs': {'LOGSTASH_HOME': {'get_attribute': ['TARGET', 'ls_home']}, 'REPOSITORY': {'get_property': ['SOURCE', 'repository']}, 'INDEX': {'get_property': ['SOURCE', 'indexname']}, 'FNAME': {'get_property': ['SOURCE', 'filename']}}}}}, 'artifacts': [{'conf': {'file': 'conf', 'type': 'tosca.artifacts.File'}}, {'geoscripts': {'file': 'geonames', 'type': 'tosca.artifacts.File'}}, {'lsscripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'rsgeoscripts': {'file': 'relationships/geonames', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.logstash.linux.bash.relationships.TwitterConnectorHostedOnLogstash': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Configure the Logstash Twitter input\n', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashConnectorHosting'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'relationships/twitter/twitter_on_logstash.sh', 'inputs': {'CONSUMER_KEY': {'get_property': ['SOURCE', 'consumer_key']}, 'CONSUMER_SECRET': {'get_property': ['SOURCE', 'consumer_secret']}, 'OAUTH_TOKEN': {'get_property': ['SOURCE', 'oauth_token']}, 'OAUTH_TOKEN_SECRET': {'get_property': ['SOURCE', 'oauth_token_secret']}, 'USE_PROXY': {'get_property': ['SOURCE', 'use_proxy']}, 'PROXY_ADDRESS': {'get_property': ['SOURCE', 'proxy_address']}, 'PROXY_PORT': {'get_property': ['SOURCE', 'proxy_port']}, 'KEYWORDS': {'get_property': ['SOURCE', 'keywords']}, 'FOLLOWS': {'get_property': ['SOURCE', 'follows']}, 'LANGUAGES': {'get_property': ['SOURCE', 'languages']}, 'USE_SAMPLES': {'get_property': ['SOURCE', 'use_samples']}, 'FULL_TWEET': {'get_property': ['SOURCE', 'full_tweet']}, 'TAGS': {'get_property': ['SOURCE', 'tags']}, 'IGNORE_RETWEETS': {'get_property': ['SOURCE', 'ignore_retweets']}}}}}, 'artifacts': [{'twitterscripts': {'file': 'relationships/twitter', 'type': 'tosca.artifacts.File'}}, {'lsscripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.yorc.experimental.consul.pub.relationships.JoinConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Joins to a Consul agent\n', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent']}}",lazy
"{'org.ystia.yorc.linux.ansible.relationships.JoinConsulAgent': {'derived_from': 'org.ystia.yorc.pub.relationships.JoinConsulAgent', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'CONSUL_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}, 'TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'CONSUL_CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/join_consul.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.ConnectsToVaultServer': {'derived_from': 'org.ystia.yorc.pub.relationships.ConnectsToVaultServer', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/configure_vault.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.DependsOnFilessystem': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects Yorc to a FileSystem (BlockStorage, NFS...)\n', 'valid_target_types': ['alien.nodes.LinuxFileSystem'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'DIRECTORY': {'get_property': ['TARGET', 'location']}}, 'implementation': 'playbooks/configure_filesystem.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.DependsOnTerraformRuntime': {'derived_from': 'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime', 'description': 'Yorc depends on Terraform runtime\n', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'PLUGINS_DIR': {'get_property': ['TARGET', 'plugins_dir']}}, 'implementation': 'playbooks/configure_terraform.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigGoogleHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with a Google Compute Engine infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'PROJECT': {'get_property': ['SOURCE', 'project']}, 'REGION': {'get_property': ['SOURCE', 'region']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CREDENTIALS': {'get_property': ['SOURCE', 'credentials']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_google.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.GoogleSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'CREDENTIALS': {'get_property': ['SOURCE', 'credentials']}}, 'implementation': 'playbooks/configure_google_secrets.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigOpenstackHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with an openstack infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'DATA_DIR': {'get_property': ['TARGET', 'data_dir']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'AUTH_URL': {'get_property': ['SOURCE', 'auth_url']}, 'TENANT_NAME': {'get_property': ['SOURCE', 'tenant_name']}, 'PROJECT_NAME': {'get_property': ['SOURCE', 'project_name']}, 'PROJECT_ID': {'get_property': ['SOURCE', 'project_id']}, 'USER_DOMAIN_NAME': {'get_property': ['SOURCE', 'user_domain_name']}, 'USER_NAME': {'get_property': ['SOURCE', 'user_name']}, 'PASSWORD': {'get_property': ['SOURCE', 'password']}, 'PRIVATE_NETWORK_NAME': {'get_property': ['SOURCE', 'private_network_name']}, 'DEFAULT_SECURITY_GROUPS': {'get_property': ['SOURCE', 'default_security_groups']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}, 'PROVISIONING_OVER_FIP_ALLOWED': {'get_property': ['SOURCE', 'provisioning_over_fip_allowed']}}, 'implementation': 'playbooks/configure_openstack.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.OpenstackSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'TENANT_NAME': {'get_property': ['SOURCE', 'tenant_name']}, 'PROJECT_NAME': {'get_property': ['SOURCE', 'project_name']}, 'PROJECT_ID': {'get_property': ['SOURCE', 'project_id']}, 'USER_DOMAIN_NAME': {'get_property': ['SOURCE', 'user_domain_name']}, 'USER_NAME': {'get_property': ['SOURCE', 'user_name']}, 'PASSWORD': {'get_property': ['SOURCE', 'password']}}, 'implementation': 'playbooks/configure_openstack_secrets.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigKubernetesHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with a kubernetes infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'MASTER_URL': {'get_property': ['SOURCE', 'master_url']}, 'CA': {'get_property': ['SOURCE', 'ca']}, 'CERT': {'get_property': ['SOURCE', 'cert']}, 'KEY': {'get_property': ['SOURCE', 'key']}, 'INSECURE': {'get_property': ['SOURCE', 'insecure']}}, 'implementation': 'playbooks/configure_kubernetes.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigAWSHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with an aws infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'ACCESS_KEY': {'get_property': ['SOURCE', 'access_key']}, 'SECRET_KEY': {'get_property': ['SOURCE', 'secret_key']}, 'REGION': {'get_property': ['SOURCE', 'region']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_aws.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.AWSSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'ACCESS_KEY': {'get_property': ['SOURCE', 'access_key']}, 'SECRET_KEY': {'get_property': ['SOURCE', 'secret_key']}}, 'implementation': 'playbooks/configure_aws_secrets.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigHostsPoolHostedOnYorc': {'derived_from': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'description': 'Create a Hosts Pool configuration\n', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'DATA_DIR': {'get_property': ['TARGET', 'data_dir']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'HOSTS_POOL': {'get_property': ['SOURCE', 'hosts']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_hostspool.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.HostsPoolSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'HOSTS_POOL': {'get_property': ['SOURCE', 'hosts']}}, 'implementation': 'playbooks/configure_hostspool_secrets.yml'}}}}}",false
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigAnsible': {'description': 'Configure a Yorc server Ansible settings', 'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'USE_OPENSSH': {'get_property': ['SOURCE', 'use_openssh']}, 'INVENTORY': {'get_property': ['SOURCE', 'inventory']}, 'HOST_OPERATIONS_ALLOWED': {'get_property': ['SOURCE', 'host_operations_allowed']}}, 'implementation': 'playbooks/configure_ansible.yml'}}}, 'valid_source_types': ['org.ystia.yorc.pub.nodes.YorcServer']}}",false
"{'org.ystia.ansible.pub.relationships.DependsOnAnsibleRuntime': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.ystia.ansible.pub.nodes.AnsibleRuntime']}}",false
"{'org.ystia.cloudera.linux.bash.relationships.ClouderaAgentConnectsToClouderaServer': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects a Cloudera Manager Agent to its Cloudera Manager Server\n', 'valid_target_types': ['org.ystia.cloudera.pub.capabilities.ClouderaServerEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'IP_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/clouderaagent_to_server.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",false
"{'org.ystia.beats.linux.bash.relationships.ConnectsBeatToES': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Beat to Elasticsearch\n', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/elasticsearch/beat_to_elasticsearch_post_configure_source.sh', 'inputs': {'BT_VERSION': {'get_property': ['SOURCE', 'component_version']}}}}}, 'artifacts': [{'rsscripts': {'file': 'relationships/elasticsearch', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.beats.linux.bash.relationships.ConnectsBeatToLS': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Beat to Logstash\n', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashEndpoint'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'relationships/logstash/beat_to_logstash_post_configure_source.sh'}}}, 'artifacts': [{'rsscripts': {'file': 'relationships/logstash', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.beats.linux.bash.relationships.ConnectsHeartBeatToComponent': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects HeartBeat to any Component\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/component/heartbeat_to_component_post_configure_source.sh'}}}, 'artifacts': [{'scripts': {'file': 'relationships/component', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.slurm.ansible.relationships.SlurmDaemonConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONTROLLER_HOST': {'get_attribute': ['TARGET', 'hostname']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'playbooks/post_configure_daemon.yaml'}, 'add_source': {'inputs': {'hostname': {'get_attribute': ['SOURCE', 'hostname']}, 'sockets': {'get_attribute': ['SOURCE', 'sockets']}, 'cores_per_socket': {'get_attribute': ['SOURCE', 'cores_per_socket']}, 'threads_per_core': {'get_attribute': ['SOURCE', 'threads_per_core']}, 'real_memory': {'get_attribute': ['SOURCE', 'real_memory']}}, 'implementation': 'playbooks/add_source_daemon.yaml'}}}}}",false
"{'org.ystia.consul.pub.relationships.ConnectsToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the SoftwareComponent is connected to a Consul Agent', 'valid_target_types': ['org.ystia.consul.pub.capabilities.ConsulAgent']}}",false
"{'org.ystia.consul.pub.relationships.ConnectsConsulAgentToServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul agent to a Consul server\n', 'valid_target_types': ['org.ystia.consul.pub.capabilities.ConsulServer']}}",false
"{'org.ystia.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Abstract Ystia ConnectsTo relationships', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",false
"{'org.ystia.relationships.HostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Abstract Ystia HostedOn relationships', 'abstract': True, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",false
"{'org.ystia.relationships.DependsOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Abstract Ystia DependsOn relationships', 'abstract': True, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",false
"{'org.ystia.rstudio.linux.bash.relationships.ConnectsRStudioToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects RStudio to a File System\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/rstudio_to_filesystem.sh', 'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'org.ystia.dns.resolvconf.ansible.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}}, 'add_target': 'playbooks/add_target_dns_server.yaml', 'remove_target': 'playbooks/remove_target_dns_server.yaml', 'add_source': {'inputs': {'HOSTNAME': {'get_attribute': ['SOURCE', 'hostname']}, 'IP_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}}, 'implementation': 'playbooks/add_host.yaml'}, 'remove_source': {'inputs': {'HOSTNAME': {'get_attribute': ['SOURCE', 'hostname']}, 'IP_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}}, 'implementation': 'playbooks/remove_host.yaml'}}}}}",false
"{'org.ystia.haproxy.linux.ansible.relationships.HAProxyRoutesTo': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'Configure': {'add_target': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'playbooks/add_route_target.yaml'}, 'remove_target': {'implementation': 'playbooks/remove_route_target.yaml'}}}}}",false
"{'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesTo': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'Configure': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'pre_configure_target': {'inputs': {'LB_IP_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'LB_PRIVATE_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}, 'LB_PUBLIC_ADDRESS': {'get_attribute': ['SOURCE', 'public_address']}, 'LB_CAP_CLIENT_PROTOCOL': {'get_property': ['SOURCE', 'client', 'protocol']}, 'LB_CAP_CLIENT_PORT': {'get_property': ['SOURCE', 'client', 'port']}, 'LB_CAP_CLIENT_URL_PATH': {'get_property': ['SOURCE', 'client', 'url_path']}}, 'implementation': 'playbooks/pre_configure_route_target.yaml'}, 'add_target': {'implementation': 'playbooks/add_route_target.yaml'}, 'remove_target': {'implementation': 'playbooks/remove_route_target.yaml'}}}}}",false
"{'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesHealthCheckHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HC_CONFIG': {'get_property': ['SOURCE', 'configuration']}, 'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}}, 'implementation': 'playbooks/configure_service_health_check.yaml'}}}}}",false
"{'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul agent to a Consul server\n', 'valid_target_types': ['org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP_CAP': {'get_attribute': ['TARGET', 'consul_server', 'ip_address']}, 'SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/consul_connects_agent_to_server.yml'}}}}}",false
"{'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServerWAN': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul server to another Consul server using its WAN address\n', 'valid_target_types': ['org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_WAN_IP': {'get_attribute': ['TARGET', 'public_address']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/consul_connects_servers_wan.yaml'}}}}}",false
"{'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.ystia.terraform.pub.nodes.TerraformRuntime']}}",false
"{'org.ystia.ntp.ansible.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}}, 'add_target': 'playbooks/add_target_ntp_server.yaml', 'remove_target': 'playbooks/remove_target_ntp_server.yaml'}}}}",false
"{'org.ystia.jupyter.linux.bash.relationships.ConnectsJupyterToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Jupyter to a FileSystem to specify where will be stored Jupyter notebooks.', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/jupyter-to-filesystem.sh', 'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",false
"{'org.ystia.xfs.linux.bash.relationships.LinuxPartition': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects a FileSystem to a Volume', 'properties': {'partition_type': {'description': 'The partition type. Default value is 83: a Linux Native Partition\n', 'type': 'integer', 'default': 83}}, 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'PARTITION_TYPE': {'get_property': ['SELF', 'partition_type']}, 'DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/fdisk.sh'}, 'post_configure_source': {'inputs': {'PARTITION_NAME': {'get_attribute': ['SOURCE', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",false
"{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",false
"{'yorc.tests.relationships.ValueAssignmentConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}, 'pre_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}}}}}",unknown
{'tosca.relationships.Root': {'description': 'rel root'}},lazy
"{'org.yorc.samples.relationships.MyRel': {'derived_from': 'tosca.relationships.Root', 'metadata': {'icon': '/images/python.png'}, 'properties': {'hello_message': {'description': 'A simple message to print\nThis description is multiline\n', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': False, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}, 'a1': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'interfaces': {'Configure': {'inputs': {'debug': 'true'}, 'pre_configure_source': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}, 'var3': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'implementation': 'scripts/create.sh'}, 'add_target': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': 'scripts/start.sh'}}, 'custom': {'inputs': {'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}}, 'implementation': 'scripts/op.sh'}}}, 'artifacts': [{'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'type': 'tosca.artifacts.Implementation.Bash', 'file': 'somewhere/here.sh', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}]}}",unknown
"{'org.ystia.yorc.samples.relationships.noscheduler.DisplayResult': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'Configure': {'target_changed': {'inputs': {'DISPLAY_COMMAND_SPAWNED': {'get_attribute': ['TARGET', 'commandSpawned']}, 'DISPLAY_COMMAND_STDOUT': {'get_attribute': ['TARGET', 'commandStdout']}, 'DISPLAY_COMMAND_STDERR': {'get_attribute': ['TARGET', 'commandStderr']}}, 'implementation': 'scripts/operations/on_target_change.sh'}}}}}",false
"{'org.yorc.samples.relationships.MyRel': {'metadata': {'icon': '/images/python.png'}, 'description': 'null', 'derived_from': 'tosca.relationships.Root', 'properties': {'hello_message': {'type': 'string', 'description': 'A simple message to print\nThis description is multiline\n', 'default': 'Hello World!'}, 'outputVar1': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'default': 'ov1'}, 'outputVar2': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'required': False, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}, 'a1': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}, 'var3': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}, 'debug': True}, 'implementation': 'scripts/create.sh'}, 'add_target': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}, 'debug': True}, 'implementation': 'scripts/start.sh'}}, 'custom': {'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}, 'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'implementation': 'scripts/op.sh'}}}, 'artifacts': {'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'file': 'somewhere/here.sh', 'type': 'tosca.artifacts.Implementation.Bash', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}}}",true
"{'com.toscaruntime.docker.relationships.SwarmManagerDependsOnDaemon': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.docker.capabilities.DeployContainer']}}",false
"{'com.toscaruntime.docker.relationships.DeployedOnDaemon': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.docker.capabilities.DeployContainer'], 'interfaces': {'Configure': {'add_source': {'inputs': {'DOCKER_IMAGE': {'concat': [{'get_property': ['SOURCE', 'docker_image']}, ':', {'get_property': ['SOURCE', 'docker_image_tag']}]}, 'DOCKER_COMMAND': {'get_property': ['SOURCE', 'docker_command']}, 'DOCKER_PORTS': {'get_property': ['SOURCE', 'port_mapping']}, 'DOCKER_LABELS': {'get_property': ['SOURCE', 'docker_labels']}, 'DOCKER_URL': {'get_attribute': ['TARGET', 'docker_url']}, 'PUBLIC_DOCKER_URL': {'get_attribute': ['TARGET', 'public_docker_url']}, 'DOCKER_NETWORK_ID': {'get_attribute': ['TARGET', 'docker_network_id']}, 'DOCKER_CONTAINER_NAME': {'get_property': ['SOURCE', 'docker_container_name']}}, 'implementation': 'component/scripts/start_docker_component.sh'}}}}}",false
"{'com.toscaruntime.docker.relationships.AdvertiseConsul': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.ConsulDiscoveryService'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'DOCKER_ADDRESS': {'get_attribute': ['SOURCE', 'docker_address']}, 'CONSUL_CLIENT_ADDRESS': {'get_attribute': ['TARGET', 'consul_client_address']}}, 'implementation': 'consul/scripts/connect_docker_daemon_to_consul.sh'}}}}}",false
"{'com.toscaruntime.docker.relationships.SwarmUseConsul': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.ConsulDiscoveryService'], 'attributes': {'docker_network_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_ID']}, 'docker_network_name': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_NAME']}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'SWARM_PORT': {'get_property': ['SOURCE', 'swarm_port']}, 'CONSUL_CLIENT_ADDRESS': {'get_attribute': ['TARGET', 'consul_client_address']}}, 'implementation': 'consul/scripts/swarm_use_consul.sh'}}}}}",false
"{'com.toscaruntime.consul.relationships.JoinCluster': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.FormCluster'], 'interfaces': {'Configure': {'add_target': {'inputs': {'CONSUL_SERVER_ADDRESS': {'get_attribute': ['TARGET', 'consul_server_address']}}, 'implementation': 'consul/scripts/join_consul_cluster.sh'}}}}}",false
"{'com.toscaruntime.relationships.ConflictRelationship': {'derived_from': 'tosca.relationships.Root', 'valid_sources': ['com.toscaruntime.nodes.SourceConflict'], 'valid_targets': ['com.toscaruntime.capabilities.GenerateConflict'], 'properties': {'pre_configure_source_throw_error': {'type': 'boolean', 'default': False}, 'pre_configure_target_throw_error': {'type': 'boolean', 'default': False}, 'post_configure_source_throw_error': {'type': 'boolean', 'default': False}, 'post_configure_target_throw_error': {'type': 'boolean', 'default': False}, 'remove_source_throw_error': {'type': 'boolean', 'default': False}, 'remove_target_throw_error': {'type': 'boolean', 'default': False}, 'add_source_throw_error': {'type': 'boolean', 'default': False}, 'add_target_throw_error': {'type': 'boolean', 'default': False}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'pre_configure_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'pre_configure_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'pre_configure_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'post_configure_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'post_configure_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'post_configure_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'post_configure_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'add_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'add_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'add_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'add_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'remove_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'remove_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'remove_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'remove_target_throw_error']}}, 'implementation': 'scripts/error.sh'}}}}}",unknown
"{'org.ystia.monitoring.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.ystia.monitoring.service.pub.HttpEndpoint']}}",false
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToFrontEnd': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.monitoring.service.pub.HttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': 'admin', 'grafana_password': 'admin'}, 'implementation': 'playbook/connects_to_grafana.yml'}}}}}",false
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToBackEnd': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.monitoring.service.pub.DataCollectionEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'graphite_host': {'get_attribute': ['TARGET', 'data_collection', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_collection', 'port']}}, 'implementation': 'playbook/connects_to_graphite.yml'}}}}}",false
"{'tosca.relationships.InstalledOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.Compute']}}",false
"{'tosca.relationships.InGroup': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.HostGroup']}}",false
"{'tosca.relationships.InQueue': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.Queue']}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'string', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",false
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}}",false
{'key': '{}'},lazy
"{'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents relationship between a K8S endpoint and an external endpoint.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/kubectl_endpoint_join.sh', 'inputs': {'KUBE_SPEC_PATH': {'get_attribute': ['SOURCE', 'spec_path']}, 'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}}}}}}",false
"{'org.alien4cloud.kubernetes.api.relationships.ConnectUrlTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents relationship between a K8S Ingress and a service.', 'valid_target_types': ['org.alien4cloud.kubernetes.api.capabilities.KubeServiceEndpoint'], 'properties': {'host': {'type': 'string', 'required': False, 'description': 'Specifies the host.'}, 'path': {'type': 'string', 'required': True, 'description': 'Specifies the path.', 'default': '/'}}}}",false
"{'otc.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'otc.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'mongo_db', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'app_endpoint', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",false
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",false
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",false
"{'tosca.relationships.nfv.Vdu.AttachedTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualStorage']}}",false
{'micro.relationships.Root': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.nodes.Root'], 'properties': {'circuit_breaker': {'type': 'boolean', 'default': False}, 'dynamic_discovery': {'type': 'boolean', 'default': False}, 'timeout': {'type': 'boolean', 'default': False}}}}",false
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.nodes.Root'], 'properties': {'timeout': {'type': 'boolean', 'default': False}}}}",false
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.capabilities.Node'], 'properties': {'circuit_breaker': {'type': 'boolean', 'default': False}, 'dynamic_discovery': {'type': 'boolean', 'default': False}, 'timeout': {'type': 'boolean', 'default': False}}}}",false
"{'otc.relationships.AnsibleConnectToScriptComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'ANSIBLE_BECOME': {'get_property': ['SOURCE', 'ansible_become']}, 'IGNORE_ERRORS': {'get_property': ['SOURCE', 'ignore_errors']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/post_configure_source.yaml'}, 'add_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'ANSIBLE_BECOME': {'get_property': ['SOURCE', 'ansible_become']}, 'IGNORE_ERRORS': {'get_property': ['SOURCE', 'ignore_errors']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/add_source.yaml'}}}}}",false
"{'otc.relationships.BashConnectToScriptComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/post_configure_source.sh'}, 'add_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/add_source.sh'}}}}}",unknown
"{'tosca.relationships.MiCADO.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'network': {'type': 'string', 'description': 'Name of Docker network to connect containers over', 'required': True}}}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.compute.Container']}}",false
"{'relationship_type_12': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'test relationship type', 'interfaces': {'relationship_type_12_interface_1': {'type': 'interface_type_2'}}}}",false
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",false
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",false
"{'my.relationships.MockServerClient': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['my.nodes.MockServer']}}",false
{'additionalProperties': {'type': 'object'}},lazy
"{'aria.openstack.port_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > neutron_plugin.port.connect_security_group'}}}}",false
"{'aria.openstack.subnet_connected_to_router': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': 'cloudify-openstack-plugin > neutron_plugin.router.connect_subnet', 'remove_target': 'cloudify-openstack-plugin > neutron_plugin.router.disconnect_subnet'}}}}",false
"{'aria.openstack.server_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.connect_floatingip', 'inputs': {'fixed_ip': {'description': 'The fixed IP to be associated with the floating IP. If omitted, Openstack will choose which port to associate.\n', 'type': 'string', 'default': ''}}}, 'remove_source': 'cloudify-openstack-plugin > nova_plugin.server.disconnect_floatingip'}}}}",false
"{'aria.openstack.port_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > neutron_plugin.floatingip.connect_port', 'remove_source': 'cloudify-openstack-plugin > neutron_plugin.floatingip.disconnect_port'}}}}",false
"{'aria.openstack.server_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > nova_plugin.server.connect_security_group', 'remove_source': 'cloudify-openstack-plugin > nova_plugin.server.disconnect_security_group'}}}}",false
"{'aria.openstack.server_connected_to_port': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'remove_source': 'cloudify-openstack-plugin > neutron_plugin.port.detach'}}}}",false
{'aria.openstack.server_connected_to_keypair': {'derived_from': 'ConnectsTo'}},lazy
{'aria.openstack.port_connected_to_subnet': {'derived_from': 'ConnectsTo'}},lazy
{'aria.openstack.server_depends_on_image': {'derived_from': 'DependsOn'}},lazy
"{'aria.openstack.volume_attached_to_server': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.attach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the attachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the attachment's status\n"", 'type': 'integer', 'default': 2}}}, 'remove_target': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.detach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the detachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the detachment's status\n"", 'type': 'integer', 'default': 2}}}}}}}",false
"{'org.lexis.datatransfer.relationships.MountCloudStagingArea': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Depends on a mounted Cloud Staging Area\n', 'valid_target_types': ['org.ddi.capabilities.CloudStagingAreaAccess']}}",false
"{'org.lexis.datatransfer.relationships.MountedCloudStagingArea': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to a node mouting the staging area\n', 'valid_target_types': ['org.lexis.datatransfer.MountedStagingAreaAccess']}}",false
"{'org.lexis.datatransfer.relationships.FileProvider': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship with a provider of a file\n', 'valid_target_types': ['org.lexis.datatransfer.capabilities.FileProvider']}}",false
"{'org.lexis.datatransfer.relationships.FilesProvider': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship with a provider of files\n', 'valid_target_types': ['org.lexis.datatransfer.capabilities.FilesProvider']}}",false
"{'org.alien4cloud.relationships.MarathonHostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind the Marathon scheduler to a Mesos Master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster']}}",false
"{'org.alien4cloud.relationships.AppHostedOnSlave': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.MesosSlave']}}",false
"{'org.alien4cloud.relationships.MesosSlaveConnectsToMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to bind a slave to a master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'MESOS_MASTER': {'get_attribute': ['TARGET', 'master_url']}}, 'implementation': 'scripts/slave/configure_connectsToMaster.sh'}}}}}",false
"{'org.alien4cloud.relationships.MesosDNSConnectsToMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.Marathon'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'MARATHON_API': {'get_attribute': ['TARGET', 'api_url']}}, 'implementation': 'scripts/service-discovery/configure_mesosdnsConnectsToMaster.sh'}}}}}",false
"{'org.alien4cloud.relationships.AppHostedOnMarathon': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.Marathon']}}",false
"{'org.alien4cloud.relationships.MesosSlaveConnectsToDNS': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.MesosDNS'], 'interfaces': {'Configure': {'add_target': {'inputs': {'DNS_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/slave/configure_connectsToDNS.sh'}}}}}",false
"{'org.alien4cloud.relationships.MesosSlaveDependsOnDocker': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.nodes.DockerEngine'], 'description': 'Relationship used to bind a Mesos slave to a Docker engine', 'interfaces': {'Configure': {'post_configure_source': 'scripts/slave/configure_dependsOnDocker.sh'}}}}",false
"{'org.alien4cloud.relationships.RexrayConnectsToLibStorage': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.RexrayServer'], 'description': 'Connects Rexray clients to the Rexray server', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'REXRAY_SERVER': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/rexray/configure_connectsToLibStorage.sh'}}}}}",false
"{'org.alien4cloud.relationships.AuroraSchedulerHostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind the Aurora scheduler to a Mesos Master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster']}}",false
"{'org.alien4cloud.relationships.AuroraExecutorHostedOnSlave': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind Thermos, the Aurora executor, to a mesos worker', 'valid_target_types': ['org.alien4cloud.nodes.MesosSlave']}}",false
"{'aspide.relationships.AttachData': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['aspide.capabilities.Attachment'], 'properties': {'mode': {'type': 'string', 'required': True, 'description': 'Specifies the mode in which the volume is mounted inside the node.', 'default': 'RO', 'constraints': [{'valid_values': ['RO', 'RW']}]}}}}",false
"{'aspide.relationships.InputFrom': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['aspide.capabilities.DataInput'], 'properties': {'mount_path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the node.', 'default': '/home/aspide'}, 'data_distribution': {'type': 'string', 'default': 'partition', 'constraints': [{'valid_values': ['replicate', 'partition']}]}}}}",false
"{'aspide.relationships.OutputTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['aspide.capabilities.DataOutput'], 'properties': {'path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the node.', 'default': '/home/aspide'}}}}",false
"{'tosca.relationships.Root': {'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",false
"{'tosca.relationships.DependsOn': {'metadata': {'shorthand_name': 'DependsOn', 'type_qualified_name': 'tosca:DependsOn', 'type_uri': 'tosca.relationships.DependsOn'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",false
"{'tosca.relationships.HostedOn': {'metadata': {'shorthand_name': 'HostedOn', 'type_qualified_name': 'tosca:HostedOn', 'type_uri': 'tosca.relationships.HostedOn'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",false
"{'tosca.relationships.ConnectsTo': {'metadata': {'shorthand_name': 'ConnectsTo', 'type_qualified_name': 'tosca:ConnectsTo', 'type_uri': 'tosca.relationships.ConnectsTo'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",false
"{'tosca.relationships.AttachesTo': {'metadata': {'shorthand_name': 'AttachesTo', 'type_qualified_name': 'tosca:AttachesTo', 'type_uri': 'tosca.relationships.AttachesTo'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",false
"{'tosca.relationships.RoutesTo': {'metadata': {'shorthand_name': 'RoutesTo', 'type_qualified_name': 'tosca:RoutesTo', 'type_uri': 'tosca.relationships.RoutesTo'}, 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",false
"{'radon.relationships.datapipelines.ConnectNiFi': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connecting two nifi data pipelines for forwarding data. The pipelines should be on same server.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'inputs': {'source_pipeline_id': {'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'default': {'get_attribute': ['TARGET', 'id']}}, 'source_pipeline_server_ip': {'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}, 'implementation': {'primary': 'dpp/connectPipelines.yml'}}}}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node'], 'workflow': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container'], 'workflow': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'workflow': {'install': {'source_weaving': [{'after': 'configuring', 'wait_target': 'started', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_source'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_source'}, {'before': 'starting', 'wait_target': 'started'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_target'}], 'target_weaving': [{'after': 'configuring', 'after_source': 'created', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_target'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_target'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_source'}]}}}}",false
"{'radon.relationships.LB_WebApp': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Allow the new web App to be connected to a existing load balancer.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'inputs': {'LB_end_point_IP': {'default': {'get_attribute': ['SOURCE', 'host', 'public_address']}}, 'WebApp_end_points_IP': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}, 'implementation': {'primary': 'playbooks/nginx/add_webApp.yml'}}}}}}}",false
"{'my.relationships.NginxSiteHosting': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'post_configure_source': {'implementation': {'primary': 'playbooks/nginx/reload.yml'}}}}}}}",false
"{'radon.relationships.LB_WebApp': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Allow the new web App to be connected to a existing load balancer.', 'interfaces': {'Configure': {'operations': {'post_configure_target': {'inputs': {'WebApp_end_points_IP': {'default': {'get_attribute': ['SOURCE', 'host', 'public_address']}}}, 'implementation': {'primary': 'playbooks/nginx/add_webApp.yml'}}}}}}}",false
"{'sodalite.relationships.jobHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'operations': {'add_source': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}}, 'implementation': {'primary': 'slurm-job/playbooks/dummy-relation-interface.yml'}}}}}}}",false
{'dcae.relationships.component_contained_in': {'derived_from': 'tosca.relationships.Root'}},lazy
{'dcae.relationships.rework_connected_to': {'derived_from': 'tosca.relationships.Root'}},lazy
{'dcae.relationships.publish_events': {'derived_from': 'tosca.relationships.Root'}},lazy
{'dcae.relationships.subscribe_to_events': {'derived_from': 'tosca.relationships.Root'}},lazy
{'dcae.relationships.publish_files': {'derived_from': 'tosca.relationships.Root'}},lazy
{'dcae.relationships.subscribe_to_files': {'derived_from': 'tosca.relationships.Root'}},lazy
{'cloudify.relationships.depends_on': {'derived_from': 'tosca.relationships.Root'}},lazy
"{'tosca.relationships.WordpressHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to describe that the website is deployed on the target Apache server.', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Container'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': {'inputs': {'context_root': 'string', 'doc_root': 'string'}, 'implementation': 'string'}}}}}",false
"{'tosca.relationships.WordpressConnectToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to connect the Wordpress with a Mysql database', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': {'inputs': {'db_ip': 'string', 'db_port': 'integer', 'db_name': 'string', 'db_user': 'string', 'db_password': 'string'}, 'implementation': 'string'}}}}}",false
"{'tosca.relationships.WordpressConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to install the Mysql module for PHP', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Root'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': 'string'}}}}",false
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node'], 'workflows': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",false
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container'], 'workflows': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",false
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'workflows': {'install': {'source_weaving': [{'after': 'configuring', 'wait_target': 'started', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_source'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_source'}, {'before': 'starting', 'wait_target': 'started'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_target'}], 'target_weaving': [{'after': 'configuring', 'after_source': 'created', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_target'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_target'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_source'}]}}}}",false
"{'radon.relationships.datapipelines.ConnectNiFi': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connecting two nifi data pipelines for forwarding data. The pipelines should be on same server.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'implementation': {'primary': 'dpp/connectPipelines.yml'}, 'inputs': {'source_pipeline_id': {'default': {'get_attribute': ['SOURCE', 'id']}}, 'source_pipeline_server_ip': {'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_id': {'default': {'get_attribute': ['TARGET', 'id']}}, 'target_pipeline_server_ip': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}}}}}}}",false
"{'onap.multivim.port_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > neutron_plugin.port.connect_security_group'}}}}",false
"{'onap.multivim.subnet_connected_to_router': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': 'onap-multivim-plugin > neutron_plugin.router.connect_subnet', 'remove_target': 'onap-multivim-plugin > neutron_plugin.router.disconnect_subnet'}}}}",false
"{'onap.multivim.server_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': {'implementation': 'onap-multivim-plugin > nova_plugin.server.connect_floatingip', 'inputs': {'fixed_ip': {'description': 'The fixed IP to be associated with the floating IP. If omitted, Openstack will choose which port to associate.\n', 'type': 'string', 'default': ''}}}, 'remove_source': 'onap-multivim-plugin > nova_plugin.server.disconnect_floatingip'}}}}",false
"{'onap.multivim.port_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > neutron_plugin.floatingip.connect_port', 'remove_source': 'onap-multivim-plugin > neutron_plugin.floatingip.disconnect_port'}}}}",false
"{'onap.multivim.server_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > nova_plugin.server.connect_security_group', 'remove_source': 'onap-multivim-plugin > nova_plugin.server.disconnect_security_group'}}}}",false
"{'onap.multivim.server_connected_to_port': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'remove_source': 'onap-multivim-plugin > neutron_plugin.port.detach'}}}}",false
{'onap.multivim.server_connected_to_keypair': {'derived_from': 'ConnectsTo'}},lazy
{'onap.multivim.port_connected_to_subnet': {'derived_from': 'ConnectsTo'}},lazy
"{'onap.multivim.volume_attached_to_server': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': {'implementation': 'onap-multivim-plugin > nova_plugin.server.attach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the attachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the attachment's status\n"", 'type': 'integer', 'default': 2}}}, 'remove_target': {'implementation': 'onap-multivim-plugin > nova_plugin.server.detach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the detachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the detachment's status\n"", 'type': 'integer', 'default': 2}}}}}}}",false
"{'my.relationships.jobHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'add_source': {'implementation': {'primary': 'playbooks/torque-job/test.yml'}}}}}}",false
