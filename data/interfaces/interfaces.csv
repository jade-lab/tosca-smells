interface,smelly
"{'configure': {'implementation': '../Scripts/rsyslog/config.sh', 'inputs': {'logstash_ip': {'get_attribute': ['logstash_server', 'private_address']}}}}",false
"{'configure': {'implementation': '../Python/collectd/config.py', 'inputs': {'logstash_ip': {'get_attribute': ['logstash_server', 'private_address']}}}}",false
"{'configure': {'implementation': '../Scripts/kibana/config.sh', 'inputs': {'elasticsearch_ip': {'get_attribute': ['elasticsearch_server', 'private_address']}, 'kibana_ip': {'get_attribute': ['kibana_server', 'private_address']}}}}",false
"{'configure': {'implementation': '../Scripts/mongodb/config.sh', 'inputs': {'mongodb_ip': {'get_attribute': ['mongo_server', 'private_address']}}}}",false
"{'configure': {'implementation': '../Scripts/nodejs/config.sh', 'inputs': {'github_url': {'get_property': ['SELF', 'github_url']}, 'mongodb_ip': {'get_attribute': ['mongo_server', 'private_address']}}}}",false
{'CustomOp4': {'inputs': {'param3': {'type': 'string'}}}},false
"{'configure': {'implementation': 'mysql/mysql_database_configure.sh', 'inputs': {'db_port': {'get_property': ['HOST', 'port']}, 'test': {'get_property': ['HOST', 'test']}}}}",false
"{'create': {'implementation': 'mysql/mysql_dbms_install.sh', 'inputs': {'db_root_password': 'passw0rd'}}}",false
"{'configure': {'implementation': 'mysql/mysql_dbms_configure.sh', 'inputs': {'db_port': 3366}}}",false
"{'configure': {'implementation': 'mysql/mysql_database_configure.sh', 'inputs': {'db_name': 'wordpress', 'db_user': 'wp_user', 'db_password': 'wp_pass', 'db_root_password': 'passw0rd'}}}",false
"{'configure': {'implementation': 'wordpress/wordpress_configure.sh', 'inputs': {'wp_db_name': 'wordpress', 'wp_db_user': 'wp_user', 'wp_db_password': 'wp_pass'}}}",false
"{'configure': {'implementation': 'mongodb/config.sh', 'inputs': {'mongodb_ip': {'get_attribute': ['mongo_server', 'private_address']}}}}",false
"{'configure': {'implementation': 'nodejs/config.sh', 'inputs': {'github_url': 'http://github.com/paypal/rest-api-sample-app-nodejs.git', 'mongodb_ip': {'get_attribute': ['mongo_server', 'private_address']}}}}",false
"{'configure': {'implementation': '../Scripts/MYSQLDBMS/configure.sh', 'inputs': {'root_password': {'get_property': ['mysql_dbms', 'root_password']}}}}",false
"{'configure': {'implementation': '../Scripts/MYSQLDatabase/configure.sh', 'inputs': {'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_password': {'get_property': ['SELF', 'password']}, 'db_root_password': {'get_property': ['mysql_dbms', 'root_password']}}}}",false
"{'configure': {'implementation': '../Scripts/WordPress/configure.sh', 'inputs': {'wp_db_name': {'get_property': ['mysql_database', 'name']}, 'wp_db_user': {'get_property': ['mysql_database', 'user']}, 'wp_db_password': {'get_property': ['mysql_database', 'password']}}}}",false
"{'inputs': {'wp_db_name': {'type': 'string'}, 'wp_db_user': {'type': 'string'}, 'wp_db_password': {'type': 'string'}}}",false
"{'configure': {'implementation': 'start_server.sh', 'inputs': {'image_id': {'get_input': 'image_id'}}}}",false
"{'configure': {'inputs': {'github_url': {'type': 'string'}, 'mongodb_ip': {'type': 'string'}}}}",false
{'CustomOp': {'inputs': {'param': {'type': 'string'}}}},false
{'CustomOp3': {'inputs': {'param3': {'type': 'string'}}}},false
"{'configure': {'implementation': 'configure.sh', 'inputs': {'ip_address': {'get_attribute': ['HOST', 'private_address']}}}}",false
"{'configure': {'implementation': 'configure.sh', 'inputs': {'ip_address': {'get_attribute': ['SELF', 'private_address', 0]}}}}",false
"{'create': {'implementation': 'nodejs/create.sh', 'inputs': {'data_dir': {'get_operation_output': ['front_end', 'Standard', 'create', 'data_dir']}}}}",false
"{'configure': {'implementation': 'database_configure.sh', 'inputs': {'db_port': {'get_property': ['SELF', 'database_endpoint', 'unknown']}}}}",false
"{'configure': {'implementation': 'some_script.sh', 'inputs': {'some_input': {'get_property': ['SELF', 'some_req', 'type']}}}}",false
"{'configure': {'implementation': 'configure.sh', 'inputs': {'ip_address': {'get_attribute': ['SELF', 'attr_list', 0]}}}}",false
"{'configure': {'implementation': 'rsyslog/config.sh', 'inputs': {'logstash_ip': {'get_attribute': ['logstash_server', 'private_address']}}}}",false
"{'configure': {'implementation': 'collectd/config.py', 'inputs': {'logstash_ip': {'get_attribute': ['logstash_server', 'private_address']}}}}",false
"{'configure': {'implementation': 'kibana/config.sh', 'inputs': {'elasticsearch_ip': {'get_attribute': ['elasticsearch_server', 'private_address']}, 'kibana_ip': {'get_attribute': ['kibana_server', 'private_address']}}}}",false
"{'configure': {'implementation': 'nodejs/config.sh', 'inputs': {'github_url': {'get_property': ['SELF', 'github_url']}, 'mongodb_ip': {'get_attribute': ['mongo_server', 'private_address']}}}}",false
"{'create': {'implementation': 'mysql/mysql_dbms_install.sh', 'inputs': {'db_root_password': {'get_property': ['mysql_dbms', 'root_password']}}}}",false
"{'configure': {'implementation': 'mysql/mysql_dbms_configure.sh', 'inputs': {'db_port': {'get_property': ['mysql_dbms', 'port']}}}}",false
"{'configure': {'implementation': 'mysql/mysql_database_configure.sh', 'inputs': {'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_password': {'get_property': ['SELF', 'passwords']}, 'db_root_password': {'get_property': ['mysql_dbms', 'root_password']}}}}",false
"{'configure': {'implementation': 'wordpress/wordpress_configure.sh', 'inputs': {'wp_db_name': {'get_property': ['mysql_database', 'name']}, 'wp_db_user': {'get_property': ['mysql_database', 'user']}, 'wp_db_password': {'get_property': ['mysql_database', 'password']}}}}",false
"{'configure': {'implementation': 'wordpress/wordpress_configure.sh', 'inputs': {'wp_endpoint_protocol': {'get_property': ['SELF', 'database_endpoint', 'ports', 'user_port', 'protocol']}, 'wp_list_prop': {'get_property': ['mysql_database', 'list_prop', 2]}}}}",false
"{'create': {'implementation': 'my_image', 'inputs': {'MYSQL_ROOT_PASSWORD': {'get_input': 'mysql_root_pwd'}}}}",false
"{'configure': {'implementation': 'mysql/mysql_database_configure.sh', 'inputs': {'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_password': {'get_property': ['SELF', 'password']}, 'db_root_password': {'get_property': ['mysql_dbms', 'root_password']}}}}",false
"{'configure': {'implementation': 'configure.sh', 'inputs': {'ip_address': {'get_attribute': ['SELF', 'endpoint', 'credential', 0, 'token']}}}}",false
"{'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collector_added.yml', 'dashboard_dir': {'get_attribute': ['TARGET', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['TARGET', 'grafana_url']}, 'grafana_user': {'get_attribute': ['TARGET', 'grafana_user']}, 'grafana_password': {'get_attribute': ['TARGET', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'data_endpoint', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'collectors_conf_path': {'get_property': ['SELF', 'collectors_conf_path']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml', 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'max_file': {'get_property': ['SELF', 'max_file']}}, 'implementation': 'playbook/playbook.ansible'}}",false
"{'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'repositoryUrl': {'get_property': ['SELF', 'repositoryUrl']}, 'repositoryUsername': {'get_property': ['SELF', 'repositoryUsername']}, 'repositoryPassword': {'get_property': ['SELF', 'repositoryPassword']}, 'branchId': {'get_property': ['SELF', 'branchId']}, 'subPath': {'get_property': ['SELF', 'subPath']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'add_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/add_target.sh'}}",false
"{'remove_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/remove_target.sh'}}",false
"{'create': {'inputs': {'SOURCE_CODE': {'get_property': ['SELF', 'source']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/create.sh'}}",false
"{'configure': {'inputs': {'POOL_FILE_NAME': {'get_property': ['SELF', 'pool_file_name']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/configure.sh'}}",false
"{'start': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/start.sh'}}",false
"{'stop': {'inputs': {'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/stop.sh'}}",false
"{'delete': {'inputs': {'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/delete.sh'}}",false
"{'create': {'inputs': {'WORLD_NAME': {'get_property': ['SELF', 'world']}}, 'implementation': 'scripts/install.bat'}}",false
"{'start': {'inputs': {'HELLO_MESSAGE': {'get_operation_output': ['SELF', 'Standard', 'create', 'HELLO_MESSAGE']}}, 'implementation': 'scripts/start.bat'}}",false
"{'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'hostpool_connected.yml', 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_key']}, 'key_name': {'get_property': ['SOURCE', 'key_name']}, 'key_content': {'get_property': ['SOURCE', 'key_content']}, 'region': {'get_property': ['SOURCE', 'region']}, 'instance_name': {'get_property': ['SOURCE', 'instance_name']}, 'instance_count': {'get_property': ['SOURCE', 'instance_count']}, 'host_per_instance': {'get_property': ['SOURCE', 'host_per_instance']}, 'instance_username': {'get_property': ['SOURCE', 'instance_username']}, 'instance_groups': {'get_property': ['SOURCE', 'instance_groups']}, 'instance_image': {'get_property': ['SOURCE', 'instance_image']}, 'instance_type': {'get_property': ['SOURCE', 'instance_type']}, 'instance_os': {'get_property': ['SOURCE', 'instance_os']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'clear': {'description': ""Clear Hostpool from all it's entries and shutdown related EC2 instances.\nThe 'instance_name' property is used to detect and stop EC2 instances.\n"", 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'feed': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}, 'host_per_instance': {'get_property': ['SELF', 'host_per_instance']}, 'instance_username': {'get_property': ['SELF', 'instance_username']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_image': {'get_property': ['SELF', 'instance_image']}, 'instance_type': {'get_property': ['SELF', 'instance_type']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'feed_custom': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_count': {'type': 'integer', 'required': True, 'default': 1}, 'instance_username': {'type': 'string', 'required': True, 'default': 'ubuntu', 'constraints': [{'valid_values': ['ubuntu', 'ec2-user']}], 'description': 'The user to use to connect to the instance'}, 'instance_type': {'type': 'string', 'required': True, 'default': 't2.nano', 'constraints': [{'valid_values': ['t2.nano', 't2.small', 't2.medium', 'm4.large', 'c4.8xlarge']}], 'description': 'The AWS instance type'}, 'instance_image': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ami-4c4b003b', 'ami-47a23a30']}], 'default': 'ami-47a23a30', 'description': 'The AWS ami (Centos:4c or Ubuntu:47)'}, 'host_per_instance': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of host to declare in hostpool per EC2 instance'}, 'instance_name': {'type': 'string', 'required': True, 'default': 'HostpoolInstance', 'description': 'The AWS instance name'}}, 'implementation': 'playbook/playbook.ansible'}}",true
"{'create': {'implementation': 'scripts/create.sh', 'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}}",false
"{'start': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'start', 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}}",false
"{'stop': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'stop'}}}",false
"{'add_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'add_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}}",false
"{'remove_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'remove_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}}",false
"{'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'start.yml', 'name': {'get_property': ['SELF', 'name']}, 'load_balancer_port': {'get_property': ['SELF', 'load_balancer_port']}, 'instance_port': {'get_property': ['SELF', 'instance_port']}, 'region': {'get_property': ['SELF', 'region']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}, 'zone': {'get_property': ['SELF', 'zone']}}, 'implementation': 'playbooks/EC2ELB/playbook.ansible'}}",true
"{'delete': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'delete.yml', 'name': {'get_property': ['SELF', 'name']}, 'region': {'get_property': ['SELF', 'region']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2ELB/playbook.ansible'}}",false
"{'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'start.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'group': {'get_property': ['SELF', 'security_group_ids']}, 'instance_type': {'get_property': ['SELF', 'instance_type']}, 'image': {'get_property': ['SELF', 'image_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}}",true
"{'stop': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'stop.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'instance_id': {'get_attribute': ['SELF', 'instance_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}}",false
"{'delete': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'delete.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'instance_id': {'get_attribute': ['SELF', 'instance_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}}",false
"{'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}",false
"{'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}",false
"{'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}",false
"{'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}",false
"{'start': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'CLASS_NAME': {'get_property': ['SELF', 'class_name']}, 'MEMORY': {'get_property': ['SELF', 'memory']}, 'CORES': {'get_property': ['SELF', 'cores']}, 'OUTPUT_REPOSITORY_URL': {'get_attribute': ['SELF', 'output_repository_url']}, 'INPUT_KAFKA_BROKER_ENDPOINT': {'get_attribute': ['SELF', 'input_kafka_broker_endpoint']}, 'INPUT_TOPIC_NAME': {'get_attribute': ['SELF', 'input_topic_name']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/SparkStreamingHDFSWriter/start.sh'}}",true
"{'start': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'CLASS_NAME': {'get_property': ['SELF', 'class_name']}, 'MEMORY': {'get_property': ['SELF', 'memory']}, 'CORES': {'get_property': ['SELF', 'cores']}, 'INPUT_REPOSITORY_URL': {'get_attribute': ['SELF', 'input_repository_url']}, 'OUTPUT_KAFKA_BROKER_ENDPOINT': {'get_attribute': ['SELF', 'output_kafka_broker_endpoint']}, 'OUTPUT_TOPIC_NAME': {'get_attribute': ['SELF', 'output_topic_name']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/SparkStreamingHDFSCollector/start.sh'}}",true
"{'stop': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'SPARK_SUBMISSION_ID': {'get_attribute': ['SELF', 'spark_submission_id']}}, 'implementation': 'scripts/SparkStreamingModule/stop.sh'}}",false
"{'delete': {'inputs': {'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}}, 'implementation': 'scripts/SparkStreamingModule/delete.sh'}}",false
"{'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'postgresql_repository']}}, 'implementation': 'scripts/install_postgresql.sh'}}",false
"{'configure': {'inputs': {'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'password']}}, 'implementation': 'scripts/configure_postgresql.sh'}}",false
"{'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}}",false
