id,type,smelly
235,"{'org.alien4cloud.www.apache.linux_ans.nodes.Apache': {'derived_from': 'org.alien4cloud.www.apache.pub.nodes.Apache', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type. This version is installed by using Ansible.\n', 'properties': {'document_root': {'type': 'string', 'default': '/var/www/html'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel', 'debian', 'ubuntu']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",False
476,"{'tosca.nodes.MiCADO.Container.Config.ConfigMap': {'description': 'base type for Config files', 'derived_from': 'tosca.nodes.MiCADO.Container.Config', 'properties': {'data': {'type': 'map', 'description': 'data', 'required': False}, 'binaryData': {'type': 'map', 'description': 'datab', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'data': {'get_property': ['SELF', 'data']}, 'binaryData': {'get_property': ['SELF', 'binaryData']}}}}}}}",False
482,"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small': {'description': 'Basic CloudSigma VM (2GHz/2GB) for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo', 'properties': {'num_cpus': {'type': 'integer', 'default': 2000, 'required': True}, 'mem_size': {'type': 'integer', 'default': 2147483648, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",False
1276,"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'type': 'string', 'required': False}, 'order': {'type': 'integer', 'required': True, 'default': 0, 'constraints': [{'greater_or_equal': 0}]}, 'is_default': {'type': 'boolean', 'required': False, 'default': False}, 'ip_range_start': {'type': 'string', 'required': False}, 'ip_range_end': {'type': 'string', 'required': False}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",False
2254,"{'tosca.nodes.indigo.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'properties': {'command': {'required': False, 'type': 'string'}, 'uris': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'environment_variables': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'constraints': {'required': False, 'type': 'list', 'entry_schema': {'type': 'list', 'entry_schema': {'type': 'string'}}}, 'labels': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'priviliged': {'required': False, 'type': 'boolean', 'default': False}, 'force_pull_image': {'required': False, 'type': 'boolean', 'default': False}}}}",False
502,"{'org.alien4cloud.spark.linux_sh.nodes.SparkMaster': {'derived_from': 'org.alien4cloud.spark.linux_sh.nodes.SparkNode', 'capabilities': {'spark_master': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkMaster'}, 'spark_rest': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkREST'}, 'spark_ui': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkMasterUI'}}, 'attributes': {'spark_ui': {'concat': [{'get_attribute': ['SELF', 'spark_ui', 'protocol']}, '://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_attribute': ['SELF', 'spark_ui', 'port']}]}, 'spark_rest_port': {'get_attribute': ['SELF', 'spark_rest', 'port']}}, 'interfaces': {'Standard': {'start': {'inputs': {'SPARK_INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'SPARK_MASTER_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}, 'SPARK_UI_PORT': {'get_property': ['SELF', 'spark_ui', 'port']}, 'SPARK_MASTER_PORT': {'get_property': ['SELF', 'spark_master', 'port']}, 'SPARK_MASTER_REST_PORT': {'get_property': ['SELF', 'spark_rest', 'port']}}, 'implementation': 'scripts/start_master.sh'}}}}}",False
1249,"{'openstack.nodes.Nova': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB_and_Keystone', 'capabilities': {'nova': {'description': 'Nova capability', 'type': 'openstack.capabilities.Endpoint.Nova'}}}}",False
327,"{'tosca.nodes.indigo.Container.Application.Docker.Marathon': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'metadata': {'icon': '/images/marathon.png'}, 'attributes': {'load_balancer_ips': {'type': 'list', 'entry_schema': 'string'}}, 'properties': {'force_pull_image': {'required': False, 'type': 'boolean', 'default': True}, 'enable_https': {'required': False, 'type': 'boolean', 'default': False}}, 'artifacts': {'image': {'file': '', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}",False
245,"{'my.nodes.ScalableContainer': {'derived_from': 'my.nodes.Container.Application.Docker', 'description': 'represents scalable containerized application.', 'capabilities': {'scalable': 'tosca.capabilities.Scalable'}, 'requirements': [{'endpoint': 'tosca.capabilities.Endpoint', 'type': 'tosca.relationships.ConnectsTo', 'lower_bound': 0, 'upper_bound': 'UNBOUNDED'}], 'properties': {'appname': {'description': 'Application name', 'type': 'string', 'required': True}, 'appinstance': {'description': 'Lifecycle', 'type': 'string', 'required': True}, 'image_name': {'description': 'Docker image name', 'type': 'string', 'required': True}, 'image_tag': {'description': 'Docker image tag', 'type': 'string', 'required': True}, 'avail_zone': {'description': 'DC Region', 'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/kube-create.sh', 'inputs': {'image_name': {'type': 'string'}}}, 'configure': 'scripts/kube-configure.sh', 'start': 'scripts/kube-start.sh', 'stop': 'scripts/kube-stop.sh', 'delete': 'scripts/kube-delete.sh'}}}}",False
1004,"{'fastconnect.nodes.apacheLBGroovy': {'derived_from': 'fastconnect.nodes.apacheLB', 'description': 'Installation of apacheLB using Cloudify scripts\n', 'properties': {'version': {'type': 'version', 'default': 2, 'constraints': [{'equal': 2}]}}, 'interfaces': {'lifecycle': {'create': 'scripts/apacheLB_installCalm.groovy', 'start': 'scripts/apacheLB_start.groovy', 'stop': 'scripts/apacheLB_stop.groovy', 'delete': 'scripts/apacheLB_uninstall.groovy'}, 'monitor': {'locator': 'scripts/monitor/locator.groovy', 'startDetection': 'scripts/monitor/startDetection.groovy'}, 'custom': {'addNode': {'inputs': {'instanceId': {'type': 'string', 'required': True}, 'node': {'type': 'string', 'required': True}}, 'implementation': 'scripts/apacheLB_addNode.groovy'}, 'removeNode': 'scripts/apacheLB_removeNode.groovy', 'deployPublic': {'inputs': {'publicUrl': {'type': 'string', 'required': True}}}, 'updateWar': {'inputs': {'warUrl': {'type': 'string', 'required': True}, 'countSlave': {'type': 'integer', 'required': False}, 'tresholdRate': {'type': 'float', 'required': True}}, 'implementation': 'scripts/updateWarUrl.groovy'}, 'updateWarFile': 'scripts/updateWarFile.groovy'}}, 'requirements': [{'httpEndpoint': {'capability': 'calm.capabilities.HttpEndpoint', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}}]}}",False
1911,{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE'}},False
1300,"{'org.ystia.kubernetes.pub.nodes.KubernetesWorker': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/kubernetes-worker-icon.png'}, 'description': 'A KubernetesWorker contains Kubernetes services used to run pods.\n', 'requirements': [{'api_server': {'capability': 'org.ystia.kubernetes.pub.capabilities.KubernetesAPIServer', 'node': 'org.ystia.kubernetes.pub.nodes.KubernetesMaster', 'occurrences': [1, 1]}}]}}",False
1984,"{'org.lexis.nodes.DownloadGEOGData': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'output_directory': {'type': 'string', 'description': 'Absolute path to directory where to store donwloaded data'}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}}, 'custom': {'download': {'inputs': {'OUTPUT_DIRECTORY': {'get_property': ['SELF', 'output_directory']}}, 'implementation': 'playbooks/download_geog.yaml'}}}, 'tags': {'icon': '/images/GEOG.png'}}}",False
706,"{'tosca.nodes.BlockStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.9'}, 'description': '', 'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'description': 'The requested storage size (default unit is MB).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'type': 'string', 'required': False}, 'snapshot_id': {'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",False
908,"{'tosker.nodes.Software': {'derived_from': 'tosker.nodes.Root', 'requirements': [{'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}, {'host': {'capability': 'tosca.capabilities.Container', 'occurrences': 1, 'node': 'tosker.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}}}}",False
1014,"{'alien.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': {'type': 'alien.capabilities.ApacheContainer', 'properties': {'valid_node_types': 'tosca.nodes.WebApplication'}}}, 'properties': {'version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'required': True, 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}, 'fastconnect.cloudify.extensions': {'start_detection': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/apache_start_detection.groovy'}}}}}",False
2413,"{'org.alien4cloud.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",False
58,{'tosca.nodes.SoftwareComponent.Rsyslog.TestRsyslogType': {'derived_from': 'test_namespace_prefix.Rsyslog'}},False
347,"{'tosca.nodes.indigo.OphidiaIO': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/ophidia-io.png'}, 'properties': {'server_ip': {'type': 'string', 'description': 'IP of the OphidiaServer node', 'required': True}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_io_install.yml', 'inputs': {'ophidia_server_ip': {'get_property': ['SELF', 'server_ip']}}}}}}}",False
819,"{'org.alien4cloud.kubernetes.api.types.volume.ArtifactVolumeBase': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractArtifactVolumeBase', 'properties': {'volume_type': {'type': 'string'}, 'spec': {'type': 'tosca.datatypes.Root', 'description': 'may be overriden by concrete implementations', 'required': False}}, 'artifacts': {'resources': {'file': 'README.md', 'type': 'tosca.artifacts.File'}}}}",False
2292,"{'tosca.nodes.indigo.MesosSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",False
944,"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'The Floating (IP) clients on the public network can connect to.\n'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",False
1104,"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.Root', 'description': 'My company’s custom applicaton', 'properties': {'my_simple_secret': {'type': 'string'}}}}",False
1572,"{'SnmpdConfiguringNode': {'derived_from': 'cloudify.nodes.Root', 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': 'scripts/setup_snmpd.sh'}}}}",False
1824,"{'tosca.nodes.nfv.VNF': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string', 'description': 'ID of this VNF'}, 'vendor': {'type': 'string', 'description': 'name of the vendor who generate this VNF'}, 'version': {'type': 'version', 'description': 'version of the software for this VNF'}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable'}}]}}",False
456,"{'tosca.nodes.MiCADO.CloudBroker.Compute': {'description': 'CloudBroker compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'deployment_id': {'type': 'string', 'required': True}, 'instance_type_id': {'type': 'string', 'required': True}, 'key_pair_id': {'type': 'string', 'required': False}, 'opened_port': {'type': 'string', 'required': False}, 'infrastructure_component_id': {'type': 'string', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}}}}",False
2354,"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",False
2717,"{'org.ystia.jupyter.linux.bash.relationships.ConnectsJupyterToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Jupyter to a FileSystem to specify where will be stored Jupyter notebooks.', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/jupyter-to-filesystem.sh', 'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",False
796,"{'yorc.types.ParentA': {'derived_from': 'root', 'artifacts': {'art1': {'file': 'ParentA'}, 'art3': {'file': 'ParentA'}, 'art5': {'file': 'ParentA'}}}}",False
320,"{'tosca.nodes.indigo.LRMS.FrontEnd.SlurmGalaxy': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd.Slurm', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm,cons_res', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Slurm'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_fe_install.yml', 'inputs': {'wn_num': {'get_property': ['SELF', 'wn_num']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",False
2728,"{'com.toscaruntime.docker.relationships.SwarmUseConsul': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.ConsulDiscoveryService'], 'attributes': {'docker_network_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_ID']}, 'docker_network_name': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_NAME']}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'SWARM_PORT': {'get_property': ['SOURCE', 'swarm_port']}, 'CONSUL_CLIENT_ADDRESS': {'get_attribute': ['TARGET', 'consul_client_address']}}, 'implementation': 'consul/scripts/swarm_use_consul.sh'}}}}}",False
2556,"{'yorc.relationships.DeploysThrough': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This type assigns a bastion host to use for connecting to a compute instance.', 'valid_target_types': ['yorc.capabilities.SSHBastionHost']}}",False
2363,"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleDependency': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.demo.spark.streaming.capabilities.SparkStreamingModuleDependency']}}",False
1800,"{'tosca.nodes.Root': {'description': 'The TOSCA root node all other TOSCA base node types derive from.', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",False
2741,"{'org.alien4cloud.kubernetes.api.relationships.ConnectUrlTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents relationship between a K8S Ingress and a service.', 'valid_target_types': ['org.alien4cloud.kubernetes.api.capabilities.KubeServiceEndpoint'], 'properties': {'host': {'type': 'string', 'required': False, 'description': 'Specifies the host.'}, 'path': {'type': 'string', 'required': True, 'description': 'Specifies the path.', 'default': '/'}}}}",False
1915,{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware'}},False
2109,"{'sodalite.nodes.DockerRegistry': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'docker_registry_url': {'type': 'string', 'description': 'Docker Hub login'}, 'docker_user': {'type': 'string', 'description': 'Docker Hub login', 'default': ''}, 'docker_pass': {'type': 'string', 'description': 'Docker Hub password', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'docker_registry_url': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_registry_url']}}, 'docker_user': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_user']}}, 'docker_pass': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_pass']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/login_user.yml'}}, 'delete': {'inputs': {'docker_registry_url': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_registry_url']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/logout_user.yml'}}}}}}}",False
1502,"{'tosca.nodes.openstack.network': {'derived_from': 'tosca.nodes.network.Network', 'description': 'The TOSCA OpenStack Network node type', 'properties': {'is_external': {'type': 'boolean', 'required': False, 'default': False}, 'network_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure or can be used as the name of the newly created network. If network_name is provided and no other properties are provided (with exception of network_id), then an existing network instance will be used. If network_name is provided alongside with more properties then a new network with this name will be created.\n'}, 'network_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name. This can be used alone or together with network_name to identify an existing network.\n'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}, 'attributes': {'network_id': {'type': 'string'}, 'network_name': {'type': 'string'}, 'subnets': {'type': 'list'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.net:network_create'}, 'start': {'implementation': 'openstack_plugin.tasks.net:network_start'}, 'delete': {'implementation': 'openstack_plugin.tasks.net:network_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}}}",False
1606,"{'tosca.nodes.BlockStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'metadata': {'icon': '/images/volume.png'}, 'properties': {'size': {'type': 'integer', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’ Note: this property will be moved in next releases to the AttachTo relationship as it is specified by TOSCA spec.\n', 'required': False}}, 'requirements': [{'attachment': 'tosca.capabilities.Attachment'}]}}",False
453,"{'tosca.nodes.MiCADO.Edge.GCE': {'description': 'GCE edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.GCE.Compute', 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",False
173,"{'org.alien4cloud.nodes.RegistryConfigurer': {'description': 'Put this node on each compute you want to log operations. This component\nwill just add an entry in /etc/hosts in order to connect to the registry.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'registry_host': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'REGISTRY_HOST': {'get_property': ['SELF', 'registry_host']}}, 'implementation': 'scripts/RegistryConfigurer/start.sh'}}}, 'requirements': [{'registry': {'capability': 'tosca.capabilities.Node', 'node': 'org.alien4cloud.nodes.Registry', 'relationship': 'org.alien4cloud.relationships.RegistryConfigurerDependsOnRegistry', 'occurrences': [0, 1]}}]}}",False
2289,"{'tosca.nodes.indigo.MesosMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'mesos_masters_list': {'type': 'string', 'required': False, 'default': {'get_attribute': ['HOST', 'public_address']}}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': False}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': False}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",False
280,"{'brooklyn.nodes.SoftwareProcess': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",False
117,"{'org.alien4cloud.mock.bash.nodes.FailAtStartBashMock': {'description': 'Just fail at start.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/fail.sh'}, 'stop': {'inputs': {'operation': 'stop', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'delete': {'inputs': {'operation': 'delete', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",False
184,"{'org.alien4cloud.automation.cloudify.patches.amqp_client.nodes.AmqpClientPatch': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Fix AMQP client patch.', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",False
1861,{'additionalProperties': {'type': 'object'}},False
472,"{'tosca.nodes.MiCADO.Container.Application.Docker.StatefulSet': {'description': 'An abstraction of the Docker container node, creates a Kubernetes StatefulSet', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Docker', 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'StatefulSet', 'spec': {'updateStrategy': {'type': 'RollingUpdate'}, 'podManagementPolicy': 'Parallel'}}}}}}}",False
2175,"{'tosca.nodes.Container.Database.MySQL': {'description': 'MySQL container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.Database', 'requirements': [{'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 1]}}]}}",False
931,"{'tosca.nodes.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from.\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",False
1494,{'seaclouds.nodes.Compute.Amazon': {'derived_from': 'seaclouds.nodes.Compute'}},False
2313,"{'tosca.nodes.MiCADO.Container.Pod.Kubernetes.Deployment': {'description': 'An abstraction of the above, creates a Deployment', 'derived_from': 'tosca.nodes.MiCADO.Container.Pod.Kubernetes', 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'Deployment', 'spec': {'strategy': {'type': 'Recreate'}}}}}}}}",False
737,"{'cloudify.nodes.SharedResource': {'derived_from': 'cloudify.nodes.Root', 'properties': {'resource_config': {'type': 'cloudify.datatypes.SharedResource', 'default': {}}, 'client': {'description': 'Client configuration, if empty Cloudify manager client will be used.\n', 'type': 'cloudify.datatypes.RemoteCloudifyManagerClient', 'default': {}}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'cfy_extensions.cloudify_types.shared_resource.connect_deployment'}}}}}",False
85,"{'example.SomeApp': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'admin_user': {'type': 'string', 'required': False}, 'pool_size': {'type': 'integer', 'required': False}}, 'capabilities': {'message_receiver': {'type': 'example.capabilities.Receiver'}}, 'requirements': [{'database': {'node': 'tosca.nodes.Database', 'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",False
2040,"{'radon.nodes.nifi.Nifi': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'component_version': {'description': 'The version of Apache Nifi', 'type': 'string', 'required': True}, 'port': {'description': 'The port exposed by Apache Nifi', 'required': True, 'type': 'string', 'default': 8080}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/create.yml'}, 'start': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/start.yml'}, 'stop': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/stop.yml'}, 'delete': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/delete.yml'}, 'configure': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/configure.yml'}}}}}}",False
2749,"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.nodes.Root'], 'properties': {'timeout': {'type': 'boolean', 'default': False}}}}",False
1741,"{'micro.nodes.Database': {'derived_from': 'micro.nodes.Root', 'capabilities': {'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['micro.nodes.Service'], 'occurrences': [0, 'UNBOUNDED']}}}}",False
549,"{'org.alien4cloud.diamond.collectors.nodes.A4CCollector': {'derived_from': 'org.alien4cloud.diamond.collectors.nodes.JolokiaCollector', 'description': 'Collect A4C JVM metrics.', 'requirements': [{'collec_jolokia': {'capability': 'org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector', 'occurrences': [0, 1]}}]}}",False
1810,"{'org.onap.tosca.checker.Dishwasher': {'derived_from': 'org.onap.tosca.checker.Appliance', 'properties': {'waterFiltration': {'type': 'boolean', 'required': False, 'default': False}, 'numberOfCycles': {'type': 'integer', 'required': False}, 'rackMaterial': {'type': 'string', 'required': True}, 'energyStar': {'type': 'boolean', 'required': True}}}}",False
513,"{'org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyAzureParametersConfigurator': {'description': 'Configure azure parameters for cfy orchestrator\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator', 'properties': {'resourceGroupId': {'type': 'string', 'required': True}, 'virtualNetworkId': {'type': 'string', 'required': True}, 'subnetId': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'config_azure_parameters.yml', 'orchestratorId': {'get_attribute': ['SELF', 'orchestratorId']}, 'alien_url': {'get_attribute': ['SELF', 'alien_url']}, 'alien_user': {'get_attribute': ['SELF', 'alien_user']}, 'alien_password': {'get_attribute': ['SELF', 'alien_password']}, 'resourceGroup': {'get_property': ['SELF', 'resourceGroupId']}, 'virtualNetwork': {'get_property': ['SELF', 'virtualNetworkId']}, 'subnet': {'get_property': ['SELF', 'subnetId']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",False
2389,"{'org.alien4cloud.relationships.RegistryHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer']}}",False
1834,{'rnc.nodes.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage'}},False
1088,"{'tosca.nodes.compute': {'derived_from': 'tosca.nodes.root', 'description': 'Represents a compute instance in the IaaS layer.'}}",False
1832,{'rnc.nodes.compute.DM': {'derived_from': 'tosca.nodes.nfv.VDU'}},False
1063,{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.Middleware'}},False
1227,"{'org.alien4cloud.nodes.Application.Docker.Apache': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.capabilities.endpoint.docker.Http'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'httpd:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",False
2126,"{'sodalite.nodes.OpenStack.VM': {'derived_from': 'tosca.nodes.Compute', 'properties': {'network': {'description': 'OpenStack network id (network names are not accepted)', 'type': 'string'}, 'name': {'description': 'Name that should be given to the VM in OpenStack', 'type': 'string'}, 'security_groups': {'description': 'OpenStack names of the security groups to which the instance should be added.Comma separated string.', 'type': 'string'}, 'flavor': {'description': 'OpenStack flavor id (flavor names are not accepted)', 'type': 'string'}, 'image': {'description': 'OpenStack image id (image names are not accepted)', 'type': 'string'}, 'key_name': {'description': 'OpenStack SSH key name that should be placed on the VM', 'type': 'string'}, 'username': {'description': 'Username for SSH connection', 'type': 'string'}, 'ssh_config': {'description': 'Additional ssh config, to be added to default ansible_ssh_common_args', 'type': 'map', 'required': False, 'default': {}}, 'include_exporter': {'description': 'Flag to include exporter', 'type': 'boolean', 'default': True, 'required': False}, 'timeout': {'description': 'Timeout to instantiate the VM', 'type': 'integer', 'default': 600, 'required': False}, 'floating_ip_pools': {'description': 'Name of floating IP pool from which to choose a floating IP', 'type': 'list', 'default': None, 'required': False}, 'userdata': {'description': 'Additional userdata applied to configure the VM', 'type': 'string', 'default': '', 'required': False}, 'env': {'description': 'Optional OpenStack environment', 'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.OpenStack.env'}, 'required': False, 'default': None}}, 'attributes': {'id': {'description': 'OpenStack id of the VM', 'type': 'string'}, 'ansible_ip': {'description': 'ansible ipv4', 'type': 'string'}}, 'requirements': [{'protected_by': {'relationship': 'tosca.relationships.DependsOn', 'node': 'sodalite.nodes.OpenStack.SecurityRules', 'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'network': {'type': 'string', 'default': {'get_property': ['SELF', 'network']}}, 'flavor': {'type': 'string', 'default': {'get_property': ['SELF', 'flavor']}}, 'key_name': {'type': 'string', 'default': {'get_property': ['SELF', 'key_name']}}, 'image': {'type': 'string', 'default': {'get_property': ['SELF', 'image']}}, 'security_groups': {'type': 'string', 'default': {'get_property': ['SELF', 'security_groups']}}, 'vm_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'username']}}, 'ssh_config': {'type': 'string', 'default': {'get_property': ['SELF', 'ssh_config']}}, 'include_exporter': {'type': 'boolean', 'default': {'get_property': ['SELF', 'include_exporter']}}, 'timeout': {'type': 'integer', 'default': {'get_property': ['SELF', 'timeout']}}, 'floating_ip_pools': {'type': 'list', 'default': {'get_property': ['SELF', 'floating_ip_pools']}}, 'userdata': {'type': 'string', 'default': {'get_property': ['SELF', 'userdata']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}, 'implementation': {'primary': 'playbooks/vm_create.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}}, 'delete': {'inputs': {'id': {'type': 'string', 'default': {'get_attribute': ['SELF', 'id']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}, 'implementation': {'primary': 'playbooks/vm_delete.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}}}}}}}",True
488,"{'org.alien4cloud.consul.pub.nodes.ConsulAgent': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Base Consul discovery service installation.\n', 'tags': {'icon': '/images/consul.png'}, 'capabilities': {'consul_agent': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'valid_source_types': ['org.alien4cloud.consul.pub.capabilities.ConsulClient']}}, 'properties': {'download_url': {'description': 'The URL to download the consul archive.', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip'}, 'data_dir': {'description': 'The location on the FS where consul will store data.', 'type': 'string', 'required': True, 'default': '/var/consul'}, 'tls_enabled': {'description': 'Defines if the communication with the consul agent will be secured (HTTPS).', 'type': 'boolean', 'required': True, 'default': False}, 'ca_passphrase': {'description': 'The provided CA certificate passphrase.', 'type': 'string', 'required': False}, 'encrypt_key': {'description': 'The key to encrypt gossip exchanges into consul cluster.', 'type': 'string', 'required': False}}}}",False
2422,"{'org.alien4cloud.relationships.ConnectElasticSearchNodes': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship that models 2 ES nodes connection.', 'valid_target_types': ['alien.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source.sh'}, 'pre_configure_target': {'inputs': {'ES_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/pre_configure_target.sh'}}}}}",False
767,"{'tosca.nodes.DBMS': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.7'}, 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'description': 'The optional root password for the DBMS server.', 'type': 'string', 'required': False}, 'port': {'description': ""The DBMS server's port."", 'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Database']}}}}",False
1138,"{'org.alien4cloud.nodes.mock.openstack.Flavor': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",False
2463,"{'org.alien4cloud.spark.linux_sh.relationships.JoinSparkCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.spark.linux_sh.nodes.SparkMaster'], 'interfaces': {'Configure': {'add_target': {'inputs': {'SPARK_INSTALL_DIR': {'get_property': ['SOURCE', 'install_dir']}, 'SPARK_MASTER_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}, 'SPARK_SLAVE_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'SPARK_MASTER_PORT': {'get_attribute': ['TARGET', 'spark_master', 'port']}}, 'implementation': 'scripts/join_spark_cluster.sh'}}}}}",False
218,"{'org.alien4cloud.nodes.kubernetes.Hyperkube': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/hyperkube.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.2.1'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.DockerHost', 'node': 'org.alien4cloud.nodes.kubernetes.DockerEngine', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'flannel': {'capability': 'org.alien4cloud.capabilities.flannel.Connectivity', 'occurrences': [1, 1]}}]}}",False
947,"{'radon.nodes.test': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'node_attribute': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': 'playbooks/create.yaml'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'radon.relationships.test'}}]}}",False
432,"{'Abstract.Compute': {'derived_from': 'Root', 'description': 'The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.', 'capabilities': {'host': {'type': 'Compute', 'valid_source_types': []}}}}",False
816,"{'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase': {'description': 'https://v1-6.docs.kubernetes.io/docs/api-reference/v1.6/#volume-v1-core', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB).'}}, 'requirements': [{'attachment': {'capability': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'relationship': 'org.alien4cloud.relationships.MountDockerVolume', 'occurrences': [1, 'UNBOUNDED']}}, {'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",False
2715,"{'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.ystia.terraform.pub.nodes.TerraformRuntime']}}",False
2157,"{'dcae.nodes.ContainerizedComponent': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'image': {'type': 'string', 'required': True}, 'application_config': {'type': 'map', 'required': True}, 'docker_config': {'type': 'map'}}}}",False
1046,"{'tosca.nodes.root': {'abstract': True, 'invalid_field': 'value', 'description': 'Root type that every node should derive.', 'requirements': {'dependency': {'type': 'tosca.requirements.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}}}",False
1707,"{'tosca.nodes.indigo.DariahRepository': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': {'dariahrepo_role': {'file': 'indigo-dc.dariahrepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/dariahrepo-setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",False
290,"{'foo': {'derived_from': 'tosca.nodes.Database', 'properties': {'p1': {'type': 'string'}}, 'attributes': None, 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': {'inputs': {'arg1': 'x'}, 'implementation': 'classpath://templates/custom1/scripts/configure.sh'}, 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}}}",False
214,"{'org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker.nodes.ChangeMaxMgmtWorkerPatch': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Increase number of mgmnt workers.', 'properties': {'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 500}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'get_property': ['SELF', 'mgmt_worker_count']}}, 'implementation': 'playbook/playbook.ansible'}}, 'org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker.interfaces.Admin': {'setup': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 100}}, 'implementation': 'playbook/playbook.ansible'}}}}}",False
455,"{'tosca.nodes.MiCADO.Edge.Azure': {'description': 'Azure edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.Azure.Compute', 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",False
362,"{'tosca.nodes.indigo.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'es_version': {'type': 'string', 'required': False, 'default': '7.4.1'}, 'bind_address': {'type': 'string', 'required': False, 'default': '0.0.0.0'}, 'discovery_type': {'type': 'string', 'required': False, 'default': 'single-node'}, 'enable_security': {'type': 'boolean', 'default': True, 'required': False}, 'elastic_password': {'type': 'string', 'required': False, 'default': 'changeme'}, 'kibana_system_password': {'type': 'string', 'required': False, 'default': 'changeme'}}, 'artifacts': {'es_role': {'file': 'elastic.elasticsearch,7.4.1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/add-ek/artifacts/master/elasticsearch_install.yml', 'inputs': {'es_version': {'get_property': ['SELF', 'es_version']}, 'bind_host': {'get_property': ['SELF', 'bind_address']}, 'discovery_type': {'get_property': ['SELF', 'discovery_type']}, 'enable_security': {'get_property': ['SELF', 'enable_security']}, 'elastic_password': {'get_property': ['SELF', 'elastic_password']}, 'kibana_system_password': {'get_property': ['SELF', 'kibana_system_password']}}}}}}}",True
447,"{'tosca.nodes.MiCADO.Compute': {'description': 'Base compute node for MiCADO', 'derived_from': 'tosca.nodes.Compute', 'properties': {'context': {'type': 'context_type', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",False
167,"{'org.alien4cloud.monitoring.pub.nodes.MonitoringAgent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'An agent that collects metrics and store them into a MetricsBackend\n', 'metadata': {'icon': '/images/metrics.png'}}}",False