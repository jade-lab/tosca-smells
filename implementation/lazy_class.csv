type,smelly
"{'tosca.nodes.nfv.VNF': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string', 'description': 'ID of this VNF'}, 'vendor': {'type': 'string', 'description': 'name of the vendor who generate this VNF'}, 'version': {'type': 'version', 'description': 'version of the software for this VNF'}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'tosca.nodes.nfv.VL'}}]}}",0
"{'tosca.nodes.nfv.VDU': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'high_availability': {'type': 'tosca.capabilities.nfv.HA'}, 'virtualbinding': {'type': 'tosca.capabilities.nfv.VirtualBindable'}, 'monitoring_parameter': {'type': 'tosca.capabilities.nfv.Metric'}}, 'requirements': [{'high_availability': {'capability': 'tosca.capabilities.nfv.HA', 'relationship': 'tosca.relationships.nfv.HA', 'node': 'tosca.nodes.nfv.VDU', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.nfv.CP': {'derived_from': 'tosca.nodes.network.Port', 'properties': {'type': {'type': 'string', 'required': False}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'tosca.nodes.nfv.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'tosca.nodes.nfv.VDU'}}], 'attributes': {'address': {'type': 'string'}}}}",0
"{'tosca.nodes.nfv.VL': {'derived_from': 'tosca.nodes.network.Network', 'properties': {'vendor': {'type': 'string', 'required': True, 'description': 'name of the vendor who generate this VL'}}, 'capabilities': {'virtual_linkable': {'type': 'tosca.capabilities.nfv.VirtualLinkable'}}}}",0
"{'tosca.nodes.nfv.VL.ELine': {'derived_from': 'tosca.nodes.nfv.VL', 'capabilities': {'virtual_linkable': {'occurrences': 2}}}}",0
{'tosca.nodes.nfv.VL.ELAN': {'derived_from': 'tosca.nodes.nfv.VL'}},0
{'tosca.nodes.nfv.VL.ETree': {'derived_from': 'tosca.nodes.nfv.VL'}},0
"{'tosca.nodes.nfv.FP': {'derived_from': 'tosca.nodes.Root', 'properties': {'policy': {'type': 'string', 'required': False, 'description': 'name of the vendor who generate this VL'}}, 'requirements': [{'forwarder': {'capability': 'tosca.capabilities.nfv.Forwarder', 'relationship': 'tosca.relationships.nfv.ForwardsTo'}}]}}",0
"{'tosca.nodes.mec.MEA': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string', 'description': 'ID of this MEA'}, 'vendor': {'type': 'string', 'description': 'name of the vendor who generate this MEA'}, 'version': {'type': 'version', 'description': 'version of the software for this MEA'}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.mec.VirtualLinkable', 'relationship': 'tosca.relationships.mec.VirtualLinksTo', 'node': 'tosca.nodes.mec.VL'}}]}}",0
"{'tosca.nodes.mec.VDU': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'high_availability': {'type': 'tosca.capabilities.mec.HA'}, 'virtualbinding': {'type': 'tosca.capabilities.mec.VirtualBindable'}, 'monitoring_parameter': {'type': 'tosca.capabilities.mec.Metric'}}, 'requirements': [{'high_availability': {'capability': 'tosca.capabilities.mec.HA', 'relationship': 'tosca.relationships.mec.HA', 'node': 'tosca.nodes.mec.VDU', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.mec.CP': {'derived_from': 'tosca.nodes.network.Port', 'properties': {'type': {'type': 'string', 'required': False}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.mec.VirtualLinkable', 'relationship': 'tosca.relationships.mec.VirtualLinksTo', 'node': 'tosca.nodes.mec.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.mec.VirtualBindable', 'relationship': 'tosca.relationships.mec.VirtualBindsTo', 'node': 'tosca.nodes.mec.VDU'}}], 'attributes': {'address': {'type': 'string'}}}}",0
"{'tosca.nodes.mec.VL': {'derived_from': 'tosca.nodes.network.Network', 'properties': {'vendor': {'type': 'string', 'required': True, 'description': 'name of the vendor who generate this VL'}}, 'capabilities': {'virtual_linkable': {'type': 'tosca.capabilities.mec.VirtualLinkable'}}}}",0
"{'tosca.nodes.mec.VL.ELine': {'derived_from': 'tosca.nodes.mec.VL', 'capabilities': {'virtual_linkable': {'occurrences': 2}}}}",0
{'tosca.nodes.mec.VL.ELAN': {'derived_from': 'tosca.nodes.mec.VL'}},0
{'tosca.nodes.mec.VL.ETree': {'derived_from': 'tosca.nodes.mec.VL'}},0
"{'tosca.nodes.mec.FP': {'derived_from': 'tosca.nodes.Root', 'properties': {'policy': {'type': 'string', 'required': False, 'description': 'name of the vendor who generate this VL'}}, 'requirements': [{'forwarder': {'capability': 'tosca.capabilities.mec.Forwarder', 'relationship': 'tosca.relationships.mec.ForwardsTo'}}]}}",0
{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'tosca.nodes.SoftwareComponent.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA root node all other TOSCA base node types derive from.\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'type': 'version', 'required': False, 'description': 'Software component version.\n'}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'port': {'required': False, 'type': 'integer', 'description': 'The port the DBMS service will listen to for data and requests.\n'}, 'root_password': {'required': False, 'type': 'string', 'description': 'The root password for the DBMS service.\n'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'user': {'required': False, 'type': 'string', 'description': 'User account name for DB administration\n'}, 'port': {'required': False, 'type': 'integer', 'description': 'The port the database service will use to listen for incoming data and requests.\n'}, 'name': {'required': False, 'type': 'string', 'description': 'The name of the database.\n'}, 'password': {'required': False, 'type': 'string', 'description': 'The password for the DB user account\n'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'attributes': {'volume_id': {'type': 'string'}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.network.Network': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}], 'description': 'The IP version of the requested network. Valid values are 4 for ipv4 or 6 for ipv6.\n'}, 'cidr': {'type': 'string', 'required': False, 'description': 'The cidr block of the requested network.\n'}, 'start_ip': {'type': 'string', 'required': False, 'description': 'The IP address to be used as the start of a pool of addresses within the full IP range derived from the cidr block.\n'}, 'end_ip': {'type': 'string', 'required': False, 'description': 'The IP address to be used as the end of a pool of addresses within the full IP range derived from the cidr block.\n'}, 'gateway_ip': {'type': 'string', 'required': False, 'description': 'The gateway IP address.\n'}, 'network_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure or can be used as the name of the newly created network. If network_name is provided and no other properties are provided (with exception of network_id), then an existing network instance will be used. If network_name is provided alongside with more properties then a new network with this name will be created.\n'}, 'network_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name. This can be used alone or together with network_name to identify an existing network.\n'}, 'segmentation_id': {'type': 'string', 'required': False, 'description': 'A segmentation identifier in the underlying cloud infrastructure. E.g. VLAN ID, GRE tunnel ID, etc..\n'}, 'network_type': {'type': 'string', 'required': False, 'description': 'It specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.\n'}, 'physical_network': {'type': 'string', 'required': False, 'description': 'It identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.\n'}, 'dhcp_enabled': {'type': 'boolean', 'required': False, 'default': True, 'description': 'Indicates should DHCP service be enabled on the network or not.\n'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types. The Port node type effectively represents a single virtual NIC on the Compute node instance.\n', 'properties': {'ip_address': {'type': 'string', 'required': False, 'description': 'Allow the user to set a static IP.\n'}, 'order': {'type': 'integer', 'required': False, 'default': 0, 'constraints': [{'greater_or_equal': 0}], 'description': 'The order of the NIC on the compute instance (e.g. eth2).\n'}, 'is_default': {'type': 'boolean', 'required': False, 'default': False, 'description': 'If is_default=true this port will be used for the default gateway route. Only one port that is associated to single compute node can set as is_default=true.\n'}, 'ip_range_start': {'type': 'string', 'required': False, 'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated with this Port.\n'}, 'ip_range_end': {'type': 'string', 'required': False, 'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated with this Port.\n'}}, 'attributes': {'ip_address': {'type': 'string'}}, 'requirements': [{'binding': {'description': 'Binding requirement expresses the relationship between Port and Compute nodes. Effectively it indicates that the Port will be attached to specific Compute node instance\n', 'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo', 'node': 'tosca.nodes.Compute'}}, {'link': {'description': 'Link requirement expresses the relationship between Port and Network nodes. It indicates which network this port will connect to.\n', 'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo', 'node': 'tosca.nodes.network.Network'}}]}}",0
"{'tosca.nodes.network.FloatingIP': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA FloatingIP node represents a floating IP that can associate to a Port.\n', 'properties': {'floating_network': {'type': 'string', 'required': True}, 'floating_ip_address': {'type': 'string', 'required': False}, 'port_id': {'type': 'string', 'required': False}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo', 'node': 'tosca.nodes.network.Port'}}]}}",0
"{'tosca.nodes.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices\n', 'properties': {'name': {'type': 'string', 'required': True, 'description': 'The logical name of the object store (or container).\n'}, 'size': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_or_equal': '0 GB'}], 'description': 'The requested initial storage size.\n'}, 'maxsize': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_or_equal': '0 GB'}], 'description': 'The requested maximum storage size.\n'}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}]}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container.Docker'}}]}}",0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'inputs': {'wp_db_name': {'type': 'string'}, 'wp_db_user': {'type': 'string'}, 'wp_db_password': {'type': 'string'}}}}}}",0
"{'tosca.nodes.ComputeWithAttrList': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'attr_list': {'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'tosca.nodes.myserver': {'derived_from': 'tosca.nodes.Compute', 'properties': {'key_name': {'type': 'string'}, 'image': {'type': 'string'}, 'flavor': {'type': 'string'}}}}",0
"{'tosca.nodes.WebApplication.PayPalPizzaStore': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'location of the application on the github.', 'default': 'https://github.com/sample.git'}}, 'requirements': [{'database_connection': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'configure': {'inputs': {'github_url': {'type': 'string'}, 'mongodb_ip': {'type': 'string'}}}}}}}",0
"{'tosca.nodes.SomeSoftwareComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'test': {'type': 'string'}}}}",0
"{'tosca.nodes.SoftwareComponentTest': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'some_prop': {'type': 'boolean'}}}}",0
"{'tosca.nodes.ComputeTest': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.SoftwareComponent.Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'MyNodeType': {'derived_from': 'Root', 'properties': {'test_port': {'type': 'PortSpec'}}}}",0
"{'tosca.nodes.SoftwareComponent.Collectd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Collectd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'cap1': {'type': 'tosca.capabilities.SomeCap'}}}}",0
"{'tosca.nodes.SoftwareComponent.Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'sample.SC': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'custom_host': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.Compute'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities1': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.WebApplication.PayPalPizzaStore': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'location of the application on the github.', 'default': 'https://github.com/sample.git'}}, 'requirements': [{'database_connection': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'configure': {'inputs': {'github_url': {'type': 'string'}, 'mongodb_ip': {'type': 'string'}}}}}}}",0
"{'tosca.nodes.nfv.Vdu.Compute': {'derived_from': 'tosca.nodes.Root', 'description': '', 'properties': {'name': {'type': 'string', 'required': True}, 'description': {'type': 'string', 'required': False}, 'monitoring_parameters': {'type': 'list', 'description': '', 'required': False, 'entry_schema': {'type': 'tosca.datatypes.nfv.VnfcMonitoringParameter'}}, 'sw_image_data': {'type': 'tosca.datatypes.nfv.SwImageData', 'required': False}}}}",0
"{'tosca.datatypes.nfv.SwImageData': {'derived_from': 'tosca.datatypes.Root', 'description': 'describes information  related to a software image artifact', 'properties': {'name': {'type': 'string', 'description': 'Name of this software image', 'required': True}}}}",0
"{'tosca.nodes.SoftwareComponent.Kibana': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'lrms': {'type': 'tosca.capabilities.SomeChildCap'}}}}",0
"{'tosca.nodes.ComputeWithProp': {'derived_from': 'tosca.nodes.Compute', 'properties': {'test': {'required': False, 'type': 'integer'}}}}",0
"{'tosca.nodes.ComputeWithCapWithAttr': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'endpoint': {'type': 'tosca.capabilities.indigo.Endpoint'}}}}",0
"{'ServerNode': {'derived_from': 'SoftwareComponent', 'properties': {'notification_port': {'type': 'integer'}}}}",0
{'tosca.nodes.SoftwareComponent.Rsyslog.TestRsyslogType': {'derived_from': 'test_namespace_prefix.Rsyslog'}},0
{'Test2ndRsyslogType': {'derived_from': 'test_2nd_namespace_prefix.Rsyslog'}},0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'inputs': {'wp_db_name': {'type': 'string'}, 'wp_db_user': {'type': 'string'}, 'wp_db_password': {'type': 'string'}}}}}}",0
"{'tosca.nodes.DatabaseWithListParam': {'derived_from': 'tosca.nodes.Database', 'properties': {'list_prop': {'type': 'list', 'entry_schema': {'type': 'integer'}}}}}",0
"{'example.app': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'mq_server_ip': {'type': 'string', 'required': False}, 'receiver_port': {'type': 'integer', 'required': False}}, 'attributes': {'receiver_ip': {'type': 'string'}, 'receiver_port': {'type': 'integer'}}}}",0
"{'tosca.nodes.WebApplication.TestApp': {'derived_from': 'tosca.nodes.WebApplication', 'capabilities': {'test_cap': {'type': 'tosca.capabilities.TestCapabilityAA'}}}}",0
{'tosca.capabilities.TestCapabilityA': {'derived_from': 'tosca.capabilities.Root'}},0
"{'tosca.capabilities.TestCapabilityAA': {'derived_from': 'tosca.capabilities.TestCapabilityA', 'properties': {'test': {'type': 'integer', 'required': False}}}}",0
"{'tosca.nodes.my.SomeNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'people': {'type': 'tosca.my.datatypes.People'}}}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'some_prop': {'type': 'string', 'required': False, 'default': 'some'}}, 'requirements': [{'some_req': {'capability': 'tosca.capabilities.SomeCap', 'node': 'tosca.nodes.NodeWithCap', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.NodeWithCap': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'some_req': {'type': 'tosca.capabilities.SomeCap'}}}}",0
"{'tosca.nodes.SoftwareComponent.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.nfv.VDU.Tacker': {'derived_from': 'tosca.nodes.nfv.VDU', 'capabilities': {'nfv_compute': {'type': 'tosca.datatypes.compute_properties'}}, 'properties': {'name': {'type': 'string', 'required': False}, 'image': {'type': 'string', 'required': False}, 'flavor': {'type': 'string', 'required': False}, 'availability_zone': {'type': 'string', 'required': False}, 'metadata': {'type': 'map', 'entry_schema': {'type': 'string'}, 'required': False}, 'config_drive': {'type': 'boolean', 'default': False, 'required': False}, 'placement_policy': {'type': 'string', 'required': False}, 'monitoring_policy': {'type': 'map', 'required': False}, 'config': {'type': 'string', 'required': False}, 'mgmt_driver': {'type': 'string', 'default': 'noop', 'required': False}, 'service_type': {'type': 'string', 'required': False}, 'user_data': {'type': 'string', 'required': False}, 'user_data_format': {'type': 'string', 'required': False}, 'key_name': {'type': 'string', 'required': False}}}}",0
"{'tosca.nodes.nfv.CP.Tacker': {'derived_from': 'tosca.nodes.nfv.CP', 'properties': {'mac_address': {'type': 'string', 'required': False}, 'name': {'type': 'string', 'required': False}, 'management': {'type': 'boolean', 'required': False}, 'anti_spoofing_protection': {'type': 'boolean', 'required': False}, 'security_groups': {'type': 'list', 'required': False}, 'type': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['sriov', 'vnic']}]}}}}",0
"{'tosca.nodes.nfv.FP.Tacker': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'integer', 'required': False}, 'policy': {'type': 'tosca.nfv.datatypes.policyType', 'required': True, 'description': 'policy to use to match traffic for this FP'}, 'path': {'type': 'tosca.nfv.datatypes.pathType', 'required': True, 'entry_schema': None}}}}",0
"{'tosca.nodes.CustomInterfaceTest': {'derived_from': 'tosca.nodes.WebApplication', 'interfaces': {'CustomInterface': {'type': 'tosca.interfaces.CustomInterface', 'CustomOp3': None}}}}",0
"{'tosca.nodes.NodeWithReq': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.SomeCap', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.NodeWithCap': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.SomeCap'}}}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'some_prop': {'type': 'string'}}, 'requirements': [{'host_child': {'capability': 'tosca.capabilities.ContainerChild', 'node': 'tosca.nodes.SomeNode2', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.SomeNode2': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host_child': {'type': 'tosca.capabilities.ContainerChild'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Kibana': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'example.QueuingSubsystem': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'server_ip': {'type': 'string'}, 'server_port': {'type': 'integer'}}, 'attributes': {'server_ip': {'type': 'string'}, 'server_port': {'type': 'integer'}}, 'requirements': [{'receiver1': {'node': 'example.TransactionSubsystem', 'capability': 'example.capabilities.Receiver', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'receiver2': {'node': 'example.TransactionSubsystem', 'capability': 'example.capabilities.Receiver', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'example.TransactionSubsystem': {'properties': {'mq_server_ip': {'type': 'string', 'required': False}, 'receiver_port': {'type': 'integer', 'required': False}}, 'attributes': {'receiver_ip': {'type': 'string'}, 'receiver_port': {'type': 'integer'}}, 'capabilities': {'message_receiver': {'type': 'example.capabilities.Receiver'}}, 'requirements': [{'database_endpoint': {'node': 'tosca.nodes.Database', 'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
{'example.DatabaseSubsystem': {'derived_from': 'tosca.nodes.Database'}},0
"{'example.SomeApp': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'admin_user': {'type': 'string', 'required': False}, 'pool_size': {'type': 'integer', 'required': False}}, 'capabilities': {'message_receiver': {'type': 'example.capabilities.Receiver'}}, 'requirements': [{'database': {'node': 'tosca.nodes.Database', 'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.my.SomeNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'people': {'type': 'tosca.my.datatypes.People'}}}}",0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'inputs': {'wp_db_name': {'type': 'string'}, 'wp_db_user': {'type': 'string'}, 'wp_db_password': {'type': 'string'}}}}}}",0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'inputs': {'wp_db_name': {'type': 'string'}, 'wp_db_user': {'type': 'string'}, 'wp_db_password': {'type': 'string'}}}}}}",0
{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'org.alien4cloud.automation.a4c.pub.nodes.Alien4CloudService': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'abstract': True, 'description': 'An Alien !\n', 'tags': {'icon': '/images/alien4cloud-logo.png'}, 'capabilities': {'rest': {'type': 'org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi'}, 'http': {'type': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI'}}}}",0
"{'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator': {'derived_from': 'tosca.nodes.Root', 'description': 'Add component that can configure A4C.\n', 'tags': {'icon': '/images/config.png'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.automation.a4c.pub.capabilities.AlienConfigContainer', 'relationship': 'org.alien4cloud.automation.a4c.pub.relationships.AlienConfiguratorHostedOnAlien', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.nodes.InputArtifactDemo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'create': 'scripts/assert.sh'}}}}",0
"{'org.alien4cloud.monitoring.diamond.agent_linux.nodes.DiamondLinuxAgent': {'description': 'Deploy a Diamond Agent on linux.\n', 'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondAgent', 'properties': {'datasource_name': {'type': 'string', 'description': 'The datasource that connects grafana to graphite.\nWe need it to prepare grafana dashboards.\n', 'required': True, 'default': 'Graphite_DS'}, 'collectors_path': {'type': 'string', 'description': 'The path where the collector sources are (read only).', 'required': True, 'default': '/opt/ansible_diamond/env/share/diamond/collectors'}, 'collectors_conf_path': {'type': 'string', 'description': 'The path where the collector configuration are (read only).', 'required': True, 'default': '/etc/ansible_diamond/collectors'}}, 'attributes': {'dashboard_dir': {'get_operation_output': ['SELF', 'Standard', 'create', 'dashboard_dir']}, 'grafana_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_url']}, 'grafana_user': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_user']}, 'grafana_password': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_password']}, 'grafana_dashboads_urls': {'get_operation_output': ['SELF', 'Standard', 'start', 'grafana_dashboads_urls']}}, 'requirements': [{'data_endpoint': {'capability': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite', 'occurrences': [0, 1]}}, {'grafana': {'capability': 'org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana', 'occurrences': [0, 1]}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'collectors_conf_path': {'get_property': ['SELF', 'collectors_conf_path']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml', 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.cloudify.patches.change_max_fd.nodes.ChangeMaxFd': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Increase number of file descriptor for user cloudify.', 'properties': {'max_file': {'type': 'integer', 'required': True, 'default': 500000}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'max_file': {'get_property': ['SELF', 'max_file']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.csar.nodes.AddCsarFromGit': {'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'description': 'Add a git repository and import CSARs.\n', 'tags': {'icon': '/images/git.png'}, 'properties': {'repositoryUrl': {'type': 'string', 'required': True, 'default': 'https://github.com/alien4cloud/tosca-normative-types.git'}, 'repositoryUsername': {'type': 'string', 'required': False}, 'repositoryPassword': {'type': 'string', 'required': False}, 'branchId': {'type': 'string', 'required': True, 'default': 'master'}, 'subPath': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'repositoryUrl': {'get_property': ['SELF', 'repositoryUrl']}, 'repositoryUsername': {'get_property': ['SELF', 'repositoryUsername']}, 'repositoryPassword': {'get_property': ['SELF', 'repositoryPassword']}, 'branchId': {'get_property': ['SELF', 'branchId']}, 'subPath': {'get_property': ['SELF', 'subPath']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.nodes.ELBService': {'derived_from': 'tosca.nodes.LoadBalancer', 'properties': {'lb_name': {'type': 'string', 'required': True}, 'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'region': {'type': 'string', 'required': True}, 'load_balancer_port': {'type': 'integer', 'required': True, 'default': 80}, 'instance_port': {'type': 'integer', 'required': True, 'default': 80}}, 'attributes': {'load_balancer_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'client', 'port']}, '/']}}}}",0
"{'org.alien4cloud.nodes.HostPoolService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The service is a python web service based on flask-restful that exposes a REST API to be consumed by clients who are interested in using hosts from a pool of pre-existing hosts. Based on Cloudfify implementation\n', 'properties': {'pool_file_name': {'type': 'string', 'default': 'pool.yml', 'description': 'Name of the pool configuration file within the configuration directory (artifact ""pool_config"")'}, 'working_directory': {'type': 'string', 'default': '/tmp/host-pool-service', 'description': 'Directory to run the service from'}, 'port': {'type': 'integer', 'description': 'Port to bind to', 'default': 8080}, 'source': {'type': 'string', 'description': 'URL to the source code of the service', 'default': 'https://github.com/cloudify-cosmo/cloudify-host-pool-service/archive/1.1.zip'}}, 'attributes': {'endpoint': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}, '/']}, 'pid_file': {'concat': [{'get_property': ['SELF', 'working_directory']}, '/gunicorn.pid']}}, 'interfaces': {'Standard': {'create': {'inputs': {'SOURCE_CODE': {'get_property': ['SELF', 'source']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/create.sh'}, 'configure': {'inputs': {'POOL_FILE_NAME': {'get_property': ['SELF', 'pool_file_name']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/configure.sh'}, 'start': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/start.sh'}, 'stop': {'inputs': {'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/stop.sh'}, 'delete': {'inputs': {'WORK_DIR': {'get_property': ['SELF', 'working_directory']}}, 'implementation': 'scripts/delete.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'pool_config': {'file': 'config.example/pool.example.yml', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.nodes.HelloWindows': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'world': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'windows'}}]}}]}}}], 'artifacts': [{'powershell_script': {'file': 'scripts/start.ps1', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'create': {'inputs': {'WORLD_NAME': {'get_property': ['SELF', 'world']}}, 'implementation': 'scripts/install.bat'}, 'start': {'inputs': {'HELLO_MESSAGE': {'get_operation_output': ['SELF', 'Standard', 'create', 'HELLO_MESSAGE']}}, 'implementation': 'scripts/start.bat'}}}}}",0
"{'org.alien4cloud.automation.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Feed a hostpool with many instanciated EC2 instances.\nYou can use custom commands to populate and clear the host pool and EC2.\nYou can share EC2 instances between several Hostpool hosts (if host_per_instance > 1). Ideal for isolated and compatibles components, load tests, or containers but just understand it will be a colloc ;)\nHostpool is cleared and instances are stopped at Standard.stop operation.\nTODO: add tags\n', 'metadata': {'icon': 'images/aws.png'}, 'properties': {'aws_access_key': {'type': 'string', 'required': True, 'description': 'The AWS access key'}, 'aws_secret_key': {'type': 'string', 'required': True, 'description': 'The AWS secret key'}, 'key_name': {'type': 'string', 'required': True, 'description': 'The AWS key name'}, 'key_content': {'type': 'string', 'required': True, 'description': 'The AWS key'}, 'region': {'type': 'string', 'required': False, 'description': 'The region where to start instances', 'default': 'eu-west-1'}, 'instance_groups': {'type': 'string', 'required': True, 'description': 'Security groups the instances will be associated with'}, 'instance_username': {'type': 'string', 'required': True, 'default': 'ubuntu', 'constraints': [{'valid_values': ['ubuntu', 'ec2-user']}], 'description': 'The user to use to connect to the instance'}, 'instance_type': {'type': 'string', 'required': True, 'default': 't2.nano', 'constraints': [{'valid_values': ['t2.nano', 't2.small', 't2.medium', 'm4.large', 'c4.8xlarge']}], 'description': 'The AWS instance type'}, 'instance_image': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ami-4c4b003b', 'ami-47a23a30']}], 'default': 'ami-47a23a30', 'description': 'The AWS ami (Centos:4c or Ubuntu:47)'}, 'instance_count': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of instances to start'}, 'host_per_instance': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of host to declare in hostpool per EC2 instance'}, 'instance_name': {'type': 'string', 'required': True, 'default': 'HostpoolInstance', 'description': 'The AWS instance name'}, 'instance_os': {'type': 'string', 'required': True, 'default': 'linux', 'description': 'The instance os for hostpool config', 'constraints': [{'valid_values': ['linux', 'windows']}]}}, 'attributes': {'hostpool_url': {'get_property': ['SELF', 'instance_name']}}, 'requirements': [{'hostpool': {'capability': 'org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.automation.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}}, 'org.alien4cloud.automation.cloudify.hostpool.awsfeeder.Admin': {'clear': {'description': ""Clear Hostpool from all it's entries and shutdown related EC2 instances.\nThe 'instance_name' property is used to detect and stop EC2 instances.\n"", 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}, 'feed': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}, 'host_per_instance': {'get_property': ['SELF', 'host_per_instance']}, 'instance_username': {'get_property': ['SELF', 'instance_username']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_image': {'get_property': ['SELF', 'instance_image']}, 'instance_type': {'get_property': ['SELF', 'instance_type']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}}, 'implementation': 'playbook/playbook.ansible'}, 'feed_custom': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_count': {'type': 'integer', 'required': True, 'default': 1}, 'instance_username': {'type': 'string', 'required': True, 'default': 'ubuntu', 'constraints': [{'valid_values': ['ubuntu', 'ec2-user']}], 'description': 'The user to use to connect to the instance'}, 'instance_type': {'type': 'string', 'required': True, 'default': 't2.nano', 'constraints': [{'valid_values': ['t2.nano', 't2.small', 't2.medium', 'm4.large', 'c4.8xlarge']}], 'description': 'The AWS instance type'}, 'instance_image': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ami-4c4b003b', 'ami-47a23a30']}], 'default': 'ami-47a23a30', 'description': 'The AWS ami (Centos:4c or Ubuntu:47)'}, 'host_per_instance': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of host to declare in hostpool per EC2 instance'}, 'instance_name': {'type': 'string', 'required': True, 'default': 'HostpoolInstance', 'description': 'The AWS instance name'}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.cloudify.ansible.nodes.Ansible4CloudifyManager': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/ansible.png'}, 'properties': {'component_version': {'type': 'version', 'default': '2.0.1.0', 'constraints': [{'valid_values': ['2.0.1.0']}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Ansible4CloudifyManager/install.sh'}}}}}",0
"{'org.alien4cloud.automation.a4c.postdeployment.nodes.Postdeployment': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'properties': {'install_dir': {'type': 'string', 'default': '/opt/alien'}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/create.sh', 'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}, 'start': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'start', 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}, 'stop': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'stop'}}}}, 'artifacts': [{'bin': {'file': 'alien4cloud:alien4cloud-postdeployment-rest:1.4.0-RC3@war', 'repository': 'fastconnect_nexus', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.ansible.EC2Instance': {'description': 'Launch an EC2 instance using Ansible.\n', 'derived_from': 'tosca.nodes.Compute', 'properties': {'agent_config': {'type': 'org.alien4cloud.datatypes.ansible.AgentConfig', 'required': False}, 'key_name': {'type': 'string', 'required': True}, 'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'aws_default_region': {'type': 'string', 'required': True}, 'image_id': {'type': 'string', 'required': True}, 'instance_type': {'type': 'string', 'required': True}, 'security_group_ids': {'type': 'string', 'required': True}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'ip_address']}, 'instance_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'instance_id']}}, 'capabilities': {'ec2instance': {'type': 'org.alien4cloud.ansible.capabilities.EC2Instance'}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'start.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'group': {'get_property': ['SELF', 'security_group_ids']}, 'instance_type': {'get_property': ['SELF', 'instance_type']}, 'image': {'get_property': ['SELF', 'image_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'stop.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'instance_id': {'get_attribute': ['SELF', 'instance_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'delete.yml', 'key_name': {'get_property': ['SELF', 'key_name']}, 'region': {'get_property': ['SELF', 'aws_default_region']}, 'instance_id': {'get_attribute': ['SELF', 'instance_id']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2Instance/playbook.ansible'}}}}}",0
"{'org.alien4cloud.ansible.EC2ELB': {'description': 'Launch an EC2 Elastic Load Balancer.\n', 'metadata': {'icon': '/images/aws-elb.png'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'required': True}, 'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'region': {'type': 'string', 'required': True}, 'load_balancer_port': {'type': 'integer', 'required': True, 'default': 80}, 'instance_port': {'type': 'integer', 'required': True, 'default': 80}, 'zone': {'type': 'string', 'required': True}}, 'attributes': {'dns_name': {'get_operation_output': ['SELF', 'Standard', 'start', 'dns_name']}}, 'requirements': [{'proxy': {'capability': 'org.alien4cloud.ansible.capabilities.EC2Instance', 'relationship': 'org.alien4cloud.ansible.relationships.ELBProxyEC2Instance', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'start.yml', 'name': {'get_property': ['SELF', 'name']}, 'load_balancer_port': {'get_property': ['SELF', 'load_balancer_port']}, 'instance_port': {'get_property': ['SELF', 'instance_port']}, 'region': {'get_property': ['SELF', 'region']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}, 'zone': {'get_property': ['SELF', 'zone']}}, 'implementation': 'playbooks/EC2ELB/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'delete.yml', 'name': {'get_property': ['SELF', 'name']}, 'region': {'get_property': ['SELF', 'region']}, 'aws_access_key': {'get_property': ['SELF', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_access_key']}}, 'implementation': 'playbooks/EC2ELB/playbook.ansible'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.nodes.SparkStreamingModule': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'metadata': {'icon': '/images/spark-streaming.png'}, 'properties': {'spark_url': {'type': 'string'}, 'hdfs_url': {'type': 'string'}, 'class_name': {'type': 'string'}, 'memory': {'type': 'integer'}, 'cores': {'type': 'integer'}, 'app_args': {'type': 'string'}}, 'artifacts': [{'jar_file': {'file': 'test.jar', 'type': 'tosca.artifacts.File'}}], 'capabilities': {'app_dependency': {'type': 'org.alien4cloud.demo.spark.streaming.capabilities.SparkStreamingModuleDependency'}}, 'requirements': [{'app_dependency': {'capability': 'org.alien4cloud.demo.spark.streaming.capabilities.SparkStreamingModuleDependency', 'relationship': 'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleDependency', 'occurrences': [0, 1]}}], 'attributes': {'spark_submission_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'SPARK_SUBMISSION_ID']}}, 'interfaces': {'Standard': {'configure': {'implementation': 'scripts/SparkStreamingHDFSCollector/configure.sh'}, 'stop': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'SPARK_SUBMISSION_ID': {'get_attribute': ['SELF', 'spark_submission_id']}}, 'implementation': 'scripts/SparkStreamingModule/stop.sh'}, 'delete': {'inputs': {'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}}, 'implementation': 'scripts/SparkStreamingModule/delete.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.nodes.SparkStreamingHDFSCollector': {'derived_from': 'org.alien4cloud.demo.spark.streaming.nodes.SparkStreamingModule', 'attributes': {'input_repository_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'INPUT_REPOSITORY_URL']}, 'output_kafka_broker_endpoint': {'get_operation_output': ['SELF', 'Standard', 'configure', 'OUTPUT_KAFKA_BROKER_ENDPOINT']}, 'output_topic_name': {'get_operation_output': ['SELF', 'Standard', 'configure', 'OUTPUT_TOPIC_NAME']}}, 'requirements': [{'input_repository': {'capability': 'org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository', 'relationship': 'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoInput', 'occurrences': [1, 1]}}, {'output_topic': {'capability': 'org.alien4cloud.demo.kafka.pub.capabilities.KafkaTopic', 'relationship': 'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicOutput', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'configure': {'implementation': 'scripts/SparkStreamingHDFSCollector/configure.sh'}, 'start': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'CLASS_NAME': {'get_property': ['SELF', 'class_name']}, 'MEMORY': {'get_property': ['SELF', 'memory']}, 'CORES': {'get_property': ['SELF', 'cores']}, 'INPUT_REPOSITORY_URL': {'get_attribute': ['SELF', 'input_repository_url']}, 'OUTPUT_KAFKA_BROKER_ENDPOINT': {'get_attribute': ['SELF', 'output_kafka_broker_endpoint']}, 'OUTPUT_TOPIC_NAME': {'get_attribute': ['SELF', 'output_topic_name']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/SparkStreamingHDFSCollector/start.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.nodes.SparkStreamingHDFSWriter': {'derived_from': 'org.alien4cloud.demo.spark.streaming.nodes.SparkStreamingModule', 'attributes': {'output_repository_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'OUTPUT_REPOSITORY_URL']}, 'input_kafka_broker_endpoint': {'get_operation_output': ['SELF', 'Standard', 'configure', 'INPUT_KAFKA_BROKER_ENDPOINT']}, 'input_topic_name': {'get_operation_output': ['SELF', 'Standard', 'configure', 'INPUT_TOPIC_NAME']}}, 'requirements': [{'input_topic': {'capability': 'org.alien4cloud.demo.kafka.pub.capabilities.KafkaTopic', 'relationship': 'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicInput', 'occurrences': [1, 1]}}, {'output_repository': {'capability': 'org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository', 'relationship': 'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoOutput', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'configure': {'implementation': 'scripts/SparkStreamingHDFSWriter/configure.sh'}, 'start': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'CLASS_NAME': {'get_property': ['SELF', 'class_name']}, 'MEMORY': {'get_property': ['SELF', 'memory']}, 'CORES': {'get_property': ['SELF', 'cores']}, 'OUTPUT_REPOSITORY_URL': {'get_attribute': ['SELF', 'output_repository_url']}, 'INPUT_KAFKA_BROKER_ENDPOINT': {'get_attribute': ['SELF', 'input_kafka_broker_endpoint']}, 'INPUT_TOPIC_NAME': {'get_attribute': ['SELF', 'input_topic_name']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/SparkStreamingHDFSWriter/start.sh'}}}}}",0
"{'alien.nodes.Postgresql': {'derived_from': 'tosca.nodes.Database', 'description': 'A node to install postgreSQL v9.2 database with data on a specific attached volume.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['rhel', 'centos']}}]}}]}}}], 'capabilities': {'database_endpoint': {'type': 'org.alien4cloud.capabilities.PostgresqlDatabaseEndpoint'}}, 'tags': {'icon': '/images/index.jpg'}, 'properties': {'port': {'type': 'integer', 'default': 5432, 'description': 'The port on which the underlying database service will listen to data.'}, 'name': {'type': 'string', 'required': True, 'description': 'The logical name of the database.'}, 'postgresql_repository': {'type': 'string', 'default': 'http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm', 'required': True}}, 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'postgresql_repository']}}, 'implementation': 'scripts/install_postgresql.sh'}, 'configure': {'inputs': {'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'password']}}, 'implementation': 'scripts/configure_postgresql.sh'}, 'start': {'implementation': 'scripts/start_postgresql.sh'}}}}}",0
"{'org.alien4cloud.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': 'org.alien4cloud.capabilities.ApacheContainer'}, 'attributes': {'apache_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}, '/']}}, 'metadata': {'icon': '/images/Apache_PoweredBy.png'}, 'properties': {'component_version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}}}}",0
"{'org.alien4cloud.automation.cloudify.hostpool.pub.nodes.HostPoolService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': 'images/hostpool.png'}, 'capabilities': {'cloudify_hostpool': {'type': 'org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'occurrences': [0, 'UNBOUNDED']}}, 'attributes': {'hostpool_url': {'concat': [{'get_property': ['SELF', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_hostpool', 'port']}]}, 'hostpool_url_hosts': {'concat': [{'get_property': ['SELF', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_hostpool', 'port']}, '/hosts']}}}}",0
"{'org.alien4cloud.automation.cloudify.manager.v3.nodes.Cloudify3Manager': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyManagerService', 'description': 'Cloudify CLI and Manager in place installation.', 'properties': {'ssh_user': {'type': 'string', 'required': True, 'description': 'User of the manager machine to be used by the cloudify manager.'}, 'ssh_key_filename': {'type': 'string', 'required': True, 'description': 'Name of the file in which we will store the manager ssh key (see required artifact).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas (in case of iaas key).'}, 'agents_user': {'type': 'string', 'required': True, 'description': 'Default ssh user for agents.'}, 'admin_username': {'type': 'string', 'required': True, 'description': 'Administration account username.'}, 'admin_password': {'type': 'string', 'required': True, 'description': 'Administration account password.'}, 'component_version': {'type': 'version', 'default': '3.4.2', 'constraints': [{'valid_values': ['3.4.2']}]}}, 'attributes': {'manager_url': {'concat': ['https://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_api_v3', 'port']}]}}, 'capabilities': {'cloudify_modules': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'occurrences': [0, 'UNBOUNDED']}, 'elastic_search': {'type': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'port': 9200}}, 'rabbitmq_management': {'type': 'org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 15672, 'user': 'cloudify', 'password': 'c10udify'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}, {'tosca.capabilities.Container': {'properties': [{'num_cpus': {'greater_or_equal': 2}}, {'mem_size': {'greater_or_equal': '4 Gib'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Cloudify3Manager/install.sh'}, 'configure': {'inputs': {'SSH_USER': {'get_property': ['SELF', 'ssh_user']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}, 'AGENTS_USER': {'get_property': ['SELF', 'agents_user']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'PRIVATE_IP': {'get_attribute': ['HOST', 'ip_address']}, 'RABBITMQ_USER': {'get_property': ['SELF', 'rabbitmq_management', 'user']}, 'RABBITMQ_PASSWORD': {'get_property': ['SELF', 'rabbitmq_management', 'password']}}, 'implementation': 'scripts/Cloudify3Manager/configure.sh'}, 'start': {'inputs': {'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'API_PORT': {'get_property': ['SELF', 'cloudify_api_v3', 'port']}, 'API_PROTOCOL': 'https', 'MAX_INSTANCES': {'get_property': ['HOST', 'scalable', 'max_instances']}}, 'implementation': 'scripts/Cloudify3Manager/start.sh'}}}, 'artifacts': [{'resources': {'file': 'files/Cloudify3Manager', 'type': 'tosca.artifacts.File'}}, {'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File', 'description': 'This artifact contains the manager ssh key. Note that by default it will also be used'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.v3.nodes.Cloudify3AwsConfiguration': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAwsConfiguration', 'description': 'Configure the cloudify manager for aws.', 'interfaces': {'Standard': {'start': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/Cloudify3Manager/aws_do_configure.sh'}}}, 'artifacts': [{'resources': {'file': 'files/Cloudify3Manager', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.automation.a4c.config.repository.nodes.ArtifactRepositoriesConfigurator': {'description': 'Configure artifact repositories from a resources file.\n', 'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_repositories.yml', 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.a4c.webapp.nodes.Alien4Cloud': {'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.Alien4CloudService', 'description': 'The TOSCA Alien Node Type represents an alien webapp.\n', 'tags': {'icon': '/images/alien4cloud-logo.png'}, 'properties': {'context_root': {'type': 'string', 'default': '/'}, 'app_args': {'description': 'These args will be used as java program arguments.', 'type': 'string', 'required': False, 'default': ''}, 'jvm_args': {'description': 'These args will be used as JVM arguments.', 'type': 'string', 'required': False, 'default': ''}, 'component_version': {'description': 'The version of A4C (important in create stage).', 'type': 'version', 'required': True}, 'data_dir': {'description': 'The location on the file system where A4C will store data (plugins, images ...).', 'type': 'string', 'required': True, 'default': '/opt/alien4cloud/data'}, 'ca_passphrase': {'description': 'the provided CA cert passphrase', 'type': 'string', 'required': False}}, 'capabilities': {'jolokia': {'type': 'org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint'}, 'config': {'type': 'org.alien4cloud.automation.a4c.pub.capabilities.AlienConfigContainer'}, 'http': {'type': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI'}}, 'requirements': [{'elasticsearch': {'capability': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI', 'relationship': 'org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'alien_url']}, 'ALIEN_VERSION': {'get_property': ['SELF', 'component_version']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}}, 'implementation': 'scripts/alien/install_alien.sh'}, 'configure': {'inputs': {'ALIEN_IP': {'get_attribute': ['HOST', 'ip_address']}, 'ALIEN_PORT': {'get_property': ['SELF', 'rest', 'port']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'TLS_ENABLED': {'get_property': ['SELF', 'consul', 'tls_enabled']}, 'KEY_STORE_PATH': {'get_property': ['SELF', 'consul', 'key_store_path']}, 'TRUST_STORE_PATH': {'get_property': ['SELF', 'consul', 'trust_store_path']}, 'KEYSTORE_PWD': {'get_property': ['SELF', 'consul', 'keystore_pwd']}, 'SERVER_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'rest', 'user']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'rest', 'password']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}}, 'implementation': 'scripts/alien/config_alien.sh'}, 'start': {'inputs': {'APP_ARGS': {'get_property': ['SELF', 'app_args']}, 'JVM_ARGS': {'get_property': ['SELF', 'jvm_args']}, 'ALIEN_IP': {'get_attribute': ['HOST', 'ip_address']}, 'ALIEN_PORT': {'get_property': ['SELF', 'rest', 'port']}, 'SERVER_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}}, 'implementation': 'scripts/alien/start_alien.sh'}}}, 'artifacts': [{'bin': {'file': 'bin', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}, {'alien_dist': {'type': 'tosca.artifacts.File'}}], 'attributes': {'alien_url': {'concat': [{'get_property': ['SELF', 'rest', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'rest', 'port']}]}}}}",unknown
"{'org.alien4cloud.storage.elasticsearch.pub.nodes.ElasticSearchService': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'description': 'Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.\n', 'tags': {'icon': 'images/elasticsearch.png'}, 'capabilities': {'elasticsearch': {'type': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI', 'occurrences': [0, 'UNBOUNDED']}, 'http': {'type': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.mock.bash.nodes.SleepingAtStopBashMock': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'stop': {'inputs': {'duration': {'get_property': ['SELF', 'duration']}, 'operation': 'stop'}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}]}}",0
"{'org.alien4cloud.mock.bash.nodes.MiniBashMock': {'description': 'A mock that implements juste minimum operations to fast start & stop.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'start': {'inputs': {'operation': 'start', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'stop': {'inputs': {'operation': 'stop', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.nodes.FailAtStartBashMock': {'description': 'Just fail at start.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/fail.sh'}, 'stop': {'inputs': {'operation': 'stop', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'delete': {'inputs': {'operation': 'delete', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.nodes.FailAtStopBashMock': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'stop': {'inputs': {'operation': 'stop', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/fail.sh'}, 'delete': {'inputs': {'operation': 'delete', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.nodes.BashMock': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'stop': {'inputs': {'operation': 'stop', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}, 'delete': {'inputs': {'operation': 'delete', 'duration': {'get_property': ['SELF', 'duration']}}, 'implementation': 'scripts/operation.sh'}}}, 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.nodes.demo.ServiceType': {'abstract': True, 'description': 'Represent an abstract node that will represent a service.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'offer_service': {'type': 'org.alien4cloud.capabilities.demo.ServiceDemo', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'need_service': {'capability': 'org.alien4cloud.capabilities.demo.ServiceDemo', 'relationship': 'org.alien4cloud.relationships.demo.ConnectsTo', 'occurrences': [0, 'unbounded']}}]}}",0
"{'org.alien4cloud.nodes.demo.ConcreteType': {'description': 'Represent a concrete type that will be related to the service.\n', 'derived_from': 'org.alien4cloud.nodes.demo.ServiceType', 'interfaces': {'Standard': {'create': {'inputs': {'OPERATION': 'create', 'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/standard.sh'}, 'configure': {'inputs': {'OPERATION': 'configure', 'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/standard.sh'}, 'start': {'inputs': {'OPERATION': 'start', 'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/standard.sh'}, 'stop': {'inputs': {'OPERATION': 'stop', 'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/standard.sh'}, 'delete': {'inputs': {'OPERATION': 'delete', 'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/standard.sh'}}}}}",0
"{'org.alien4cloud.nodes.WebSite': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'A static website packaged in a zip file.', 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.ApacheContainer', 'relationship': 'org.alien4cloud.relationships.WebSiteHostedOn'}}], 'properties': {'zip_url': {'type': 'string', 'required': False}, 'context_path': {'type': 'string', 'required': False}}, 'artifacts': [{'website_zip': {'type': 'tosca.artifacts.File'}}]}}",0
"{'alien.nodes.Petclinic': {'derived_from': 'org.alien4cloud.nodes.War', 'description': 'The TOSCA petclinic Type represents spring sample application.', 'artifacts': [{'war_file': {'file': 'org.springframework.samples:spring-petclinic:4.2.6-SNAPSHOT@war', 'type': 'tosca.artifacts.File', 'repository': 'fastconnect_nexus'}}], 'requirements': [{'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.automation.a4c.config.backupRestoreS3.nodes.BackupRestoreS3': {'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'description': 'Backup and Restore alien4cloud.\n', 'requirements': [{'aws_cli': {'capability': 'org.alien4cloud.cloud.amazon.cli.pub.capabilities.AwsCli', 'occurrences': [1, 1], 'relationship': 'org.alien4cloud.automation.a4c.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli'}}], 'properties': {'alien_init': {'type': 'string', 'required': False}, 'es_init': {'type': 'string', 'required': False}, 'aws_access_key': {'type': 'string', 'required': True}, 'aws_secret_key': {'type': 'string', 'required': True}, 'region': {'type': 'string', 'required': True, 'default': 'eu-west-1'}, 's3_url': {'type': 'string', 'required': True, 'default': 's3://a4c-demo'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}}, 'implementation': 'scripts/aws_credentials_config.sh'}, 'start': {'inputs': {'ALIEN_INIT_FILE': {'get_property': ['SELF', 'alien_init']}, 'ES_INIT_FILE': {'get_property': ['SELF', 'es_init']}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/init.sh'}}, 'backup': {'execute': {'inputs': {'TAG_NAME': {'required': True, 'type': 'string'}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/backup.sh'}}, 'restore': {'execute': {'inputs': {'ALIEN_BACKUP_NAME': {'required': True, 'type': 'string'}, 'ES_SNAPSHOT': {'required': True, 'type': 'string'}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/restore.sh'}}}}}",unknown
"{'org.alien4cloud.cloud.amazon.cli.linux_bash.nodes.AwsCli': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'install aws cli.\n', 'tags': {'icon': '/images/aws.png'}, 'properties': {'access_key': {'type': 'string', 'required': False}, 'secret_key': {'type': 'string', 'required': False}, 'region': {'type': 'string', 'default': 'eu-west-1'}}, 'capabilities': {'aws_cli': {'type': 'org.alien4cloud.cloud.amazon.cli.pub.capabilities.AwsCli', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'access_key']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'secret_key']}, 'AWS_REGION': {'get_property': ['SELF', 'region']}}, 'implementation': 'scripts/install_aws_cli.sh'}}}}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyManager': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyManagerService', 'description': 'Cloudify CLI and Manager in place installation.', 'properties': {'ssh_user': {'type': 'string', 'required': True, 'description': 'User of the manager machine to be used by the cloudify manager.'}, 'ssh_key_filename': {'type': 'string', 'required': True, 'description': 'Name of the file in which we will store the manager ssh key (see required artifact).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas (in case of iaas key).'}, 'agents_user': {'type': 'string', 'required': True, 'description': 'Default ssh user for agents.'}, 'component_version': {'type': 'version', 'default': '4.1.1', 'constraints': [{'valid_values': ['4.0.1-ga', '4.1.0', '4.1.1']}]}}, 'attributes': {'manager_url': {'concat': ['https://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_api_v3', 'port']}]}}, 'capabilities': {'cloudify_modules': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'occurrences': [0, 'UNBOUNDED']}, 'rabbitmq_management': {'type': 'org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 15672, 'user': 'cloudify', 'password': 'c10udify'}}, 'postgresql': {'type': 'org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'port': 5432, 'user': 'cloudify', 'password': 'cloudify'}}, 'diamond_collector': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint', 'occurrences': [0, 1]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}, {'tosca.capabilities.Container': {'properties': [{'num_cpus': {'greater_or_equal': 2}}, {'mem_size': {'greater_or_equal': '4 Gib'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}}, 'implementation': 'scripts/install.sh'}, 'configure': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'SSH_USER': {'get_property': ['SELF', 'ssh_user']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}, 'AGENTS_USER': {'get_property': ['SELF', 'agents_user']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'VERSION': {'get_property': ['SELF', 'version']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'PRIVATE_IP': {'get_attribute': ['HOST', 'ip_address']}}, 'implementation': 'scripts/configure.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'API_PORT': {'get_property': ['SELF', 'cloudify_api_v3', 'port']}, 'API_PROTOCOL': 'https', 'MAX_INSTANCES': {'get_property': ['HOST', 'scalable', 'max_instances']}}, 'implementation': 'scripts/start.sh'}}}, 'artifacts': [{'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File', 'description': 'This artifact contains the manager ssh key. Note that by default it will also be used'}}, {'cluster_python_script': {'file': 'scripts/cluster.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is the python script that configure the cluster. It should not be overriden.'}}, {'ssl_ui_conf_python_script': {'file': 'scripts/conf_ip.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is the python script that configure the cluster. It should not be overriden.'}}, {'cli_utils_script': {'file': 'scripts/cli/utils.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is a patch to workaround issue with certificate.'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifySSHKey': {'derived_from': 'tosca.nodes.Root', 'description': 'An SSH key to install on the cloudify manager.', 'properties': {'key_file_name': {'type': 'string', 'required': True, 'description': 'Name of the key file name to be saved on the cloudify manager (for example user_name.pem).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas.'}}, 'capabilities': {'installed_key': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'attributes': {'key_file_path': {'get_operation_output': ['SELF', 'Standard', 'create', 'KEY_FILE_PATH']}}, 'interfaces': {'Standard': {'create': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['SELF', 'key_file_name']}}, 'implementation': 'scripts/install_key.sh'}}}, 'artifacts': [{'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAwsConfiguration': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for aws.', 'properties': {'aws_access_key': {'type': 'string', 'required': True, 'description': 'The aws access key of the account to use to start aws instances.'}, 'aws_secret_key': {'type': 'string', 'required': True, 'description': 'The aws secret key of the account to use to start aws instances.'}, 'aws_region': {'type': 'string', 'required': True, 'default': 'eu-west-1', 'description': 'The aws region to use to start aws instances.'}, 'agent_security_groups': {'type': 'string', 'required': True, 'default': 'sg-cffd98b6', 'description': 'Comma separated list of security groups to use for agents.'}}, 'requirements': [{'agent_key': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey', 'relationship': 'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureAWSKey', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'AWS_REGION': {'get_property': ['SELF', 'aws_region']}, 'AGENT_SECURITY_GROUP': {'get_property': ['SELF', 'agent_security_groups']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}}, 'implementation': 'scripts/aws_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/aws_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAzureConfiguration': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for azure.', 'properties': {'subscription_id': {'type': 'string', 'required': True}, 'tenant_id': {'type': 'string', 'required': True}, 'client_id': {'type': 'string', 'required': True}, 'client_secret': {'type': 'string', 'required': True}, 'location': {'type': 'string', 'required': True, 'default': 'westeurope'}}, 'interfaces': {'Standard': {'create': {'inputs': {'SUBSCRIPTION_ID': {'get_property': ['SELF', 'subscription_id']}, 'TENANT_ID': {'get_property': ['SELF', 'tenant_id']}, 'CLIENT_ID': {'get_property': ['SELF', 'client_id']}, 'CLIENT_SECRET': {'get_property': ['SELF', 'client_secret']}, 'LOCATION': {'get_property': ['SELF', 'location']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}}, 'implementation': 'scripts/azure_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/azure_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyOpenstackConfiguration': {'derived_from': 'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for openstack.', 'properties': {'keystone_url': {'type': 'string', 'required': True, 'description': 'The URL of keystone url (i.e: http://129.185.67.11:5000/v2.0)\n'}, 'username': {'type': 'string', 'required': True, 'description': 'The login to connect to openstack'}, 'password': {'type': 'string', 'required': True, 'description': 'The password to connect to openstack'}, 'region': {'type': 'string', 'required': True, 'default': 'RegionOne', 'description': 'The openstack region to use to create instances'}, 'tenant_name': {'type': 'string', 'required': True, 'description': 'The openstack tenant to use to create instances'}, 'agents_keypair_name': {'type': 'string', 'required': True, 'description': 'The keypair name to connect to the agents'}, 'agents_security_group_name': {'type': 'string', 'required': True, 'description': 'The security group name to use on agents'}, 'management_network_id': {'type': 'string', 'required': True, 'description': 'The network id attached to the manager'}, 'management_network_name': {'type': 'string', 'required': True, 'description': 'The network name attached to the manager'}}, 'requirements': [{'agent_key': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey', 'relationship': 'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureOpenstackKey', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'KEYSTONE_URL': {'get_property': ['SELF', 'keystone_url']}, 'USERNAME': {'get_property': ['SELF', 'username']}, 'PASSWORD': {'get_property': ['SELF', 'password']}, 'REGION': {'get_property': ['SELF', 'region']}, 'TENANT_NAME': {'get_property': ['SELF', 'tenant_name']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}, 'AGENTS_KEYPAIR_NAME': {'get_property': ['SELF', 'agents_keypair_name']}, 'AGENTS_SECURITY_GROUP_NAME': {'get_property': ['SELF', 'agents_security_group_name']}, 'MANAGEMENT_NETWORK_ID': {'get_property': ['SELF', 'management_network_id']}, 'MANAGEMENT_NETWORK_NAME': {'get_property': ['SELF', 'management_network_name']}}, 'implementation': 'scripts/openstack_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/openstack_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.demo.hdfs-repository.nodes.HdfsRepository': {'derived_from': 'tosca.nodes.Root', 'description': 'a distributed repository to store files', 'metadata': {'icon': '/images/hdfs.jpeg'}, 'properties': {'hdfs_url': {'type': 'string'}, 'path': {'type': 'string'}}, 'attributes': {'hdfs_folder_url': {'get_operation_output': ['SELF', 'Standard', 'create', 'HDFS_FOLDER_URL']}, 'hdfs_folder_path': {'get_operation_output': ['SELF', 'Standard', 'create', 'HDFS_FOLDER_PATH']}}, 'capabilities': {'hdfs_repository': {'type': 'org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'}}, 'interfaces': {'Standard': {'create': {'inputs': {'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'HDFS_PATH': {'get_property': ['SELF', 'path']}}, 'implementation': 'scripts/create.sh'}, 'delete': {'inputs': {'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'HDFS_PATH': {'get_property': ['SELF', 'path']}}, 'implementation': 'scripts/delete.sh'}}}}}",0
"{'org.alien4cloud.demo.kafka.topic.nodes.KafkaTopic': {'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/pipeline.png'}, 'properties': {'topic_name': {'type': 'string', 'required': False}}, 'attributes': {'kafka_broker_endpoint': {'get_operation_output': ['SELF', 'Standard', 'start', 'KAFKA_BROKER_ENDPOINT']}, 'zookeeper_endpoint': {'get_operation_output': ['SELF', 'Standard', 'start', 'ZOOKEEPER_ENDPOINT']}, 'topic_name': {'get_operation_output': ['SELF', 'Standard', 'start', 'TOPIC_NAME']}}, 'capabilities': {'kafka_topic': {'type': 'org.alien4cloud.demo.kafka.pub.capabilities.KafkaTopic'}}, 'requirements': [{'zookeeper': {'capability': 'org.alien4cloud.demo.zookeeper.pub.capabilities.Zookeeper', 'relationship': 'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToZookeeper', 'occurrences': [1, 1]}}, {'kafka_broker': {'capability': 'org.alien4cloud.demo.kafka.pub.capabilities.KafkaBroker', 'relationship': 'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToBroker', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'TOPIC_NAME': {'get_property': ['SELF', 'topic_name']}}, 'implementation': 'scripts/KafkaTopic/start.sh'}, 'delete': {'inputs': {'TOPIC_NAME': {'get_attribute': ['SELF', 'topic_name']}, 'ZOOKEEPER_ENDPOINT': {'get_attribute': ['SELF', 'zookeeper_endpoint']}}, 'implementation': 'scripts/KafkaTopic/delete.sh'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondAgent': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.MonitoringAgent', 'abstract': True, 'description': 'A Diamond Agent.', 'metadata': {'icon': '/images/diamond.png'}, 'capabilities': {'collector_container': {'type': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'description': 'A Diamond Collector.', 'metadata': {'icon': '/images/collector.png'}, 'requirements': [{'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyManagerService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': 'images/cloudify.png'}, 'capabilities': {'cloudify_api_v3': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'https', 'port': 443}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'occurrences': [0, 0]}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration': {'derived_from': 'tosca.nodes.Root', 'description': 'Configure the cloudify manager for a given IaaS.', 'metadata': {'icon': 'images/config.png'}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.nodes.Nginx': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': 'org.alien4cloud.capabilities.NginxContainer'}, 'attributes': {'nginx_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}, '/']}}, 'metadata': {'icon': '/images/nginx.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.10.0', 'constraints': [{'equal': '1.10.0'}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'equal': 80}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'windows'}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_nginx.bat', 'start': 'scripts/start_nginx.bat'}}, 'artifacts': [{'install_nginx': {'file': 'scripts/install_nginx.ps1', 'type': 'tosca.artifacts.File'}}, {'start_nginx': {'file': 'scripts/start_nginx.ps1', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.nodes.Alien': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'description': 'The TOSCA Alien Node Type represents an alien component.', 'metadata': {'icon': '/images/alien4cloud-logo.png'}, 'properties': {'alien_url': {'type': 'string', 'required': True, 'default': 'https://fastconnect.org/maven/content/repositories/opensource/alien4cloud/alien4cloud-ui/1.3.0-RC5/alien4cloud-ui-1.3.0-RC5.war'}, 'context_root': {'type': 'string', 'default': '/'}, 'app_args': {'type': 'string', 'required': False, 'default': ''}}, 'capabilities': {'alien': {'type': 'org.alien4cloud.capabilities.Alien', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'elasticsearch': {'capability': 'org.alien4cloud.capabilities.ElasticSearch', 'relationship': 'org.alien4cloud.relationships.AlienConnectToElasticSearch', 'occurrences': [1, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'alien_url']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/alien/install_alien.sh'}, 'start': 'scripts/alien/start_alien.sh'}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}, {'bin': {'file': 'bin', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.nodes.AlienIT': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'description': 'Alien 4 cloud java client application that performs Integration tests against alien4cloud.', 'metadata': {'icon': '/images/alien4cloud-logo.png'}, 'properties': {'branch': {'type': 'string', 'required': True, 'default': 'develop'}, 'openstack_manager_name': {'type': 'string', 'required': False, 'default': ''}, 'amazon_manager_ip': {'type': 'string', 'default': '', 'required': False}, 'plugin_version': {'type': 'string', 'default': ''}, 'it_test': {'type': 'string', 'required': True, 'default': ''}}, 'requirements': [{'elasticsearch': {'capability': 'org.alien4cloud.capabilities.ElasticSearch', 'relationship': 'org.alien4cloud.relationships.AlienITConnectToElasticSearch'}}, {'alien': {'capability': 'org.alien4cloud.capabilities.Alien', 'relationship': 'org.alien4cloud.relationships.AlienITDependsOnAlien'}}], 'interfaces': {'Standard': {'create': {'inputs': {'BRANCH': {'get_property': ['SELF', 'branch']}, 'MANAGER_NAME': {'get_property': ['SELF', 'openstack_manager_name']}, 'PLUGIN_VERSION': {'get_property': ['SELF', 'plugin_version']}}, 'implementation': 'scripts/it/install_it.sh'}, 'start': {'inputs': {'IT_TEST': {'get_property': ['SELF', 'it_test']}, 'AWS_CLOUDIFY3_MANAGER_URL': {'get_property': ['SELF', 'amazon_manager_ip']}}, 'implementation': 'scripts/it/start_it.sh'}}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}, {'bin': {'file': 'bin', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.lang.java.jdk.linux.nodes.OracleJDK': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of Oracle Java Development Kit', 'metadata': {'icon': 'images/jdk.png'}, 'properties': {'java_url': {'type': 'string', 'required': True, 'default': 'https://edelivery.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz'}, 'java_home': {'type': 'string', 'required': True, 'default': '/opt/java'}, 'component_version': {'type': 'version', 'default': '1.8.0-131-b11'}}, 'attributes': {'java_version': {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_VERSION']}, 'java_message': {'concat': ['Java help: ', {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_HELP']}]}}, 'capabilities': {'jdk': {'type': 'org.alien4cloud.lang.java.pub.capabilities.JDK', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'JAVA_URL': {'get_property': ['SELF', 'java_url']}, 'JAVA_HOME': {'get_property': ['SELF', 'java_home']}}, 'implementation': 'scripts/install_jdk.sh'}}}}}",0
"{'org.alien4cloud.lang.php.debian_sh.nodes.PHP': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'PHP install through apt-get.', 'metadata': {'icon': '/images/php.png'}, 'properties': {'component_version': {'type': 'version', 'default': 5, 'constraints': [{'equal': 5}]}}, 'capabilities': {'runtime': {'type': 'org.alien4cloud.lang.php.pub.capabilities.Runtime'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_php.sh'}}}}",0
"{'org.alien4cloud.automation.a4c.demo.nodes.Alien4CloudDemo': {'derived_from': 'org.alien4cloud.automation.a4c.webapp.nodes.Alien4Cloud', 'description': 'Add backup/restore features to the A4C webapp.\n'}}",0
"{'org.alien4cloud.sandbox.services.dummy.client.nodes.DummyClient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'dummy_endpoint': {'capability': 'org.alien4cloud.sandbox.services.dummy.pub.capabilities.DummyAPI', 'relationship': 'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToService', 'occurrences': [0, 'unbounded']}}, {'dummy_public_endpoint': {'capability': 'org.alien4cloud.sandbox.services.dummy.pub.capabilities.DummyPublicAPI', 'relationship': 'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToPublicService', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'start': {'implementation': 'scripts/start.sh'}}}}}",0
"{'org.alien4cloud.storage.elasticsearch.ansible.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.storage.elasticsearch.pub.nodes.ElasticSearchService', 'description': 'Installation of an ElasticSearch with an UI to browse it !.\n', 'tags': {'icon': 'images/elasticsearch.png'}, 'properties': {'component_version': {'description': 'The version of Elasticsearch', 'type': 'version', 'default': '1.7.0', 'constraints': [{'valid_values': ['1.7.0']}]}, 'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb'}, 'cluster_name': {'description': 'The name of the ElasticSearch cluster.', 'type': 'string', 'required': True, 'default': 'escluster'}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/elasticsearch/install_elasticsearch.sh'}, 'configure': {'inputs': {'ES_IP': {'get_attribute': ['HOST', 'ip_address']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HTTP_PORT': {'get_property': ['SELF', 'http', 'port']}}, 'implementation': 'scripts/elasticsearch/configure_elasticsearch.sh'}, 'start': {'implementation': 'scripts/elasticsearch/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'config/elasticsearch', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.demo.spark-jobs.nodes.SparkApplication': {'derived_from': 'org.alien4cloud.nodes.Job', 'metadata': {'icon': '/images/spark.png'}, 'properties': {'spark_url': {'type': 'string'}, 'hdfs_url': {'type': 'string'}, 'default_input_file_url': {'type': 'string', 'required': False}, 'class_name': {'type': 'string'}, 'memory': {'type': 'integer'}, 'cores': {'type': 'integer'}, 'app_args': {'type': 'string'}}, 'attributes': {'input_file_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'INPUT_FILE_URL']}, 'output_file_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'OUTPUT_FILE_URL']}}, 'artifacts': [{'jar_file': {'file': 'test.jar', 'type': 'tosca.artifacts.File'}}], 'capabilities': {'app_dependency': {'type': 'org.alien4cloud.demo.spark-jobs.capabilities.SparkApplicationDependency'}}, 'requirements': [{'input_repository': {'capability': 'org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository', 'relationship': 'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoInput', 'occurrences': [0, 1]}}, {'output_repository': {'capability': 'org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository', 'relationship': 'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoOutput', 'occurrences': [1, 1]}}, {'app_dependency': {'capability': 'org.alien4cloud.demo.spark-jobs.capabilities.SparkApplicationDependency', 'relationship': 'org.alien4cloud.demo.spark-jobs.relationships.SparkAppDependency', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'configure': {'inputs': {'DEFAULT_INPUT_FILE_URL': {'get_property': ['SELF', 'default_input_file_url']}}, 'implementation': 'scripts/configure.sh'}}, 'tosca.interfaces.node.lifecycle.Runnable': {'run': {'inputs': {'SPARK_URL': {'get_property': ['SELF', 'spark_url']}, 'HDFS_URL': {'get_property': ['SELF', 'hdfs_url']}, 'CLASS_NAME': {'get_property': ['SELF', 'class_name']}, 'MEMORY': {'get_property': ['SELF', 'memory']}, 'CORES': {'get_property': ['SELF', 'cores']}, 'INPUT_FILE_URL': {'get_attribute': ['SELF', 'input_file_url']}, 'OUTPUT_FILE_URL': {'get_attribute': ['SELF', 'output_file_url']}, 'APP_ARGS': {'get_property': ['SELF', 'app_args']}}, 'implementation': 'scripts/run.sh'}}}}}",unknown
"{'org.alien4cloud.monitoring.graphite.nodes.Graphite': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.GraphiteService', 'metadata': {'icon': '/images/graphite.png'}, 'description': 'Represente a Graphite Service\n', 'properties': {'component_version': {'type': 'version', 'default': '1.0.0', 'constraints': [{'valid_values': ['1.0.0']}]}}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Endpoint to stream metrics into graphite', 'properties': {'protocol': 'http', 'port': 2003}}, 'http_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI Endpoint to connect to graphite', 'properties': {'protocol': 'http', 'port': 8080}}}, 'attributes': {'graphite_url': {'concat': ['http://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_property': ['SELF', 'http_endpoint', 'port']}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'port_httpd': 8008}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.www.apache.pub.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'abstract': True, 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'attributes': {'apache_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/']}}, 'metadata': {'icon': '/images/Apache_PoweredBy.png'}, 'properties': {'document_root': {'type': 'string', 'default': '/var/www'}}, 'capabilities': {'data_endpoint': 'org.alien4cloud.www.apache.pub.capabilities.ApacheDataEndpoint', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['org.alien4cloud.www.apache.pub.nodes.WebApplication']}}}}",0
"{'org.alien4cloud.www.apache.pub.nodes.WebApplication': {'abstract': True, 'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'org.alien4cloud.www.apache.pub.nodes.Apache', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyAsAService': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'metadata': {'icon': 'images/cloudify.png'}, 'capabilities': {'cloudify_api_v3': {'type': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'https', 'port': 443}}, 'cloudify_hostpool': {'type': 'org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 8080}}}}}",0
"{'org.alien4cloud.automation.a4c.config.location.nodes.SimpleLocationConfigurator': {'derived_from': 'org.alien4cloud.automation.a4c.config.pub.nodes.LocationConfigurator', 'description': 'Configure a location for an A4C orchestrator\n', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyLocation'}, 'type': {'type': 'string', 'required': True, 'default': 'byon', 'constraints': [{'valid_values': ['amazon', 'byon', 'azure']}]}}, 'attributes': {'locationId': {'get_operation_output': ['SELF', 'Standard', 'create', 'locationId']}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location.yml', 'location_name': {'get_property': ['SELF', 'name']}, 'location_type': {'get_property': ['SELF', 'type']}, 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'alien.nodes.AnsibleApache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type. This version is installed by using Ansible.\n', 'metadata': {'icon': '/images/apache.png'}, 'properties': {'port': {'type': 'integer', 'default': 80, 'description': 'The default where Apache will listen.\n'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'port': {'get_property': ['SELF', 'port']}, 'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'configure.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'port': {'get_property': ['SELF', 'port']}, 'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.orchestrator.cfy.nodes.CfyAzureParametersConfigurator': {'description': 'Configure azure parameters for cfy orchestrator\n', 'derived_from': 'org.alien4cloud.automation.a4c.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator', 'properties': {'resourceGroupId': {'type': 'string', 'required': True}, 'virtualNetworkId': {'type': 'string', 'required': True}, 'subnetId': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'config_azure_parameters.yml', 'orchestratorId': {'get_attribute': ['SELF', 'orchestratorId']}, 'alien_url': {'get_attribute': ['SELF', 'alien_url']}, 'alien_user': {'get_attribute': ['SELF', 'alien_user']}, 'alien_password': {'get_attribute': ['SELF', 'alien_password']}, 'resourceGroup': {'get_property': ['SELF', 'resourceGroupId']}, 'virtualNetwork': {'get_property': ['SELF', 'virtualNetworkId']}, 'subnet': {'get_property': ['SELF', 'subnetId']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.aws.cloudify.EC2Instance': {'derived_from': 'org.alien4cloud.aws.EC2Instance', 'description': ""Launch an ec2 instance. Needs aws cli to be installed on the host (usually a 'manager' since this is a compute resource).\nInformation about the key and the user is needed for cloudify manager to establish connection to the created compute\n"", 'properties': {'agent_config': {'type': 'org.alien4cloud.datatypes.AgentConfig'}}}}",0
"{'org.alien4cloud.aws.puccini.EC2Instance': {'derived_from': 'org.alien4cloud.aws.EC2Instance', 'description': 'Launch an ec2 instance. Needs to use an image of micro manager with aws installed.\nInformation about the key and the user is needed for puccini to establish connection to the created compute\n', 'properties': {'user': {'type': 'string', 'required': False}, 'key_content': {'type': 'string', 'required': False}}}}",0
"{'org.alien4cloud.aws.EC2Instance': {'derived_from': 'tosca.nodes.Compute', 'properties': {'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'aws_default_region': {'type': 'string', 'required': True}, 'image_id': {'type': 'string', 'required': True}, 'instance_type': {'type': 'string', 'required': True}, 'security_group_ids': {'type': 'string', 'required': True}, 'key_name': {'type': 'string'}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'IP_ADDRESS']}, 'public_ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'PUBLIC_IP_ADDRESS']}, 'instance_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'INSTANCE_ID']}}, 'interfaces': {'Standard': {'start': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'IMAGE_ID': {'get_property': ['SELF', 'image_id']}, 'INSTANCE_TYPE': {'get_property': ['SELF', 'instance_type']}, 'SECURITY_GROUP_IDS': {'get_property': ['SELF', 'security_group_ids']}, 'KEY_NAME': {'get_property': ['SELF', 'key_name']}}, 'implementation': 'scripts/EC2Instance/start.sh'}, 'stop': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_attribute': ['SELF', 'instance_id']}}, 'implementation': 'scripts/EC2Instance/stop.sh'}, 'delete': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_attribute': ['SELF', 'instance_id']}}, 'implementation': 'scripts/EC2Instance/delete.sh'}}}}}",unknown
"{'org.alien4cloud.aws.AbstractMariaDB': {'derived_from': 'org.alien4cloud.nodes.AbstractMysql', 'abstract': True, 'description': ""create mariaDB instance via aws rds. Needs aws cli to be installed on the host (usually a 'manager' since this is a compute resource)."", 'metadata': {'icon': 'images/mariaDB-aws.png'}}}",0
"{'org.alien4cloud.aws.MariaDB': {'derived_from': 'org.alien4cloud.aws.AbstractMariaDB', 'description': ""create mariaDB instance via aws rds. Needs aws cli to be installed on the host (usually a 'manager' since this is a compute resource)."", 'attributes': {'endpoint_address': {'concat': [{'get_operation_output': ['SELF', 'Standard', 'start', 'ENDPOINT_ADDRESS']}, ':', {'get_property': ['SELF', 'port']}]}, 'bdinstance_arn': {'get_operation_output': ['SELF', 'Standard', 'start', 'DBINSTANCE_ARN']}}, 'properties': {'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'aws_default_region': {'type': 'string', 'required': True}, 'identifier': {'type': 'string', 'description': 'DB instance identifier. This is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.', 'required': True}, 'class': {'type': 'string', 'required': True, 'description': 'Contains the compute and memory capacity of the DB instance.', 'constraints': [{'valid_values': ['db.t1.micro', 'db.m1.small', 'db.m1.medium', 'db.m1.large', 'db.m1.xlarge', 'db.m2.xlarge', 'db.m2.2xlarge', 'db.m2.4xlarge', 'db.cr1.8xlarge', 'db.m3.medium', 'db.m3.large', 'db.m3.xlarge', 'db.m3.2xlarge', 'db.r3.large', 'db.r3.xlarge', 'db.r3.2xlarge', 'db.r3.4xlarge', 'db.r3.8xlarge', 'db.t2.micro', 'db.t2.small', 'db.t2.medium', 'db.t2.large', 'db.m4.large', 'db.m4.xlarge', 'db.m4.2xlarge', 'db.m4.4xlarge', 'db.m4.10xlarge']}], 'default': 'db.t2.micro'}, 'license_model': {'type': 'string', 'required': True, 'description': 'License model for this DB instance.', 'constraints': [{'valid_values': ['license-included', 'bring-your-own-license', 'general-public-license']}], 'default': 'general-public-license'}, 'multi-az': {'type': 'boolean', 'required': True, 'description': 'Specifies if this is a Multi-AZ deployment.', 'default': False}, 'storage-type': {'type': 'string', 'required': True, 'description': 'Specifies the storage type for the DB instance.', 'constraints': [{'valid_values': ['standard', 'gp2', 'io1']}], 'default': 'standard'}, 'name': {'type': 'string', 'required': False, 'description': 'The database name', 'default': 'petclinic'}, 'user': {'type': 'string', 'required': True, 'description': 'The name of the master database user.', 'default': 'root'}, 'password': {'type': 'string', 'required': True, 'description': 'Password for the master DB instance user.', 'constraints': [{'min_length': 8}], 'default': 'petclinic'}, 'allocated-storage': {'type': 'integer', 'required': True, 'description': 'Amount of storage to be initially allocated for the DB instance, in gigabytes.', 'constraints': [{'greater_than': 4}], 'default': 5}, 'security_group_ids': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'start': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_property': ['SELF', 'identifier']}, 'INSTANCE_CLASS': {'get_property': ['SELF', 'class']}, 'LICENSE_MODEL': {'get_property': ['SELF', 'license_model']}, 'MULTI_AZ': {'get_property': ['SELF', 'multi-az']}, 'STORAGE_TYPE': {'get_property': ['SELF', 'storage-type']}, 'PORT': {'get_property': ['SELF', 'database_endpoint', 'port']}, 'ALLOCATED_STORAGE': {'get_property': ['SELF', 'allocated-storage']}, 'DB_NAME': {'get_property': ['SELF', 'name']}, 'MASTER': {'get_property': ['SELF', 'user']}, 'PASSWORD': {'get_property': ['SELF', 'password']}, 'SECURITY_GROUP_IDS': {'get_property': ['SELF', 'security_group_ids']}}, 'implementation': 'scripts/MariaDB/start.sh'}, 'delete': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_property': ['SELF', 'identifier']}}, 'implementation': 'scripts/MariaDB/delete.sh'}}}}}",0
"{'org.alien4cloud.aws.MariaDBService': {'derived_from': 'org.alien4cloud.aws.MariaDB', 'description': 'Re-use an up and running MariaDB instance', 'attributes': {'ip_address': {'type': 'string', 'description': 'ip or domain name of the MariaDB instance'}}}}",0
"{'org.alien4cloud.sandbox.services.dummy.implem.nodes.DummyImplem': {'derived_from': 'org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService', 'description': 'A dummy service implem that do nothing', 'properties': {'my_service_property_1': {'type': 'string', 'required': True, 'default': 'A simple value'}, 'my_service_property_2': {'type': 'string', 'required': True, 'default': '/a/path/to/something'}}, 'attributes': {'host_uname': {'get_operation_output': ['SELF', 'Standard', 'create', 'HOST_UNAME']}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/create.sh'}}}}}",0
"{'org.alien4cloud.mock.ansible.nodes.AnsibleMockHost': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'create AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'configure AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'sleep_factor': {'get_property': ['SELF', 'sleep_factor']}, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'start AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mock.ansible.nodes.AnsibleMockComponent': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockComponent', 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'host': {'type': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.mock.ansible.relationships.AnsibleComponentHostedOnHost', 'occurrences': [1, 1]}}, {'mock_endpoint': {'type': 'org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint', 'relationship': 'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'create AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'configure AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'start AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.automation.a4c.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator': {'description': 'Configure a CFY orchestrator for A4C\n', 'derived_from': 'org.alien4cloud.automation.a4c.config.pub.nodes.OrchestratorConfigurator', 'properties': {'disableDiamondMonitorAgent': {'type': 'boolean', 'required': True, 'default': True}}, 'requirements': [{'cfy': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'relationship': 'org.alien4cloud.automation.a4c.config.orchestrator.cfy.relationships.ConnectsToCfy', 'occurrences': [1, 1]}}], 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_orchestrator.yml', 'name': {'get_property': ['SELF', 'name']}, 'pluginId': {'get_property': ['SELF', 'pluginId']}, 'pluginBean': {'get_property': ['SELF', 'pluginBean']}, 'disableDiamondMonitorAgent': {'get_property': ['SELF', 'disableDiamondMonitorAgent']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'discriminator': {'get_property': ['SELF', 'discriminator']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.automation.a4c.config.location_resources.on_demand.nodes.OnDemandLocationResourcesConfigurator': {'description': 'Configure a location for A4C, resources are fed using a on-demand resource yaml description\n', 'derived_from': 'org.alien4cloud.automation.a4c.config.location.nodes.SimpleLocationConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location_resources.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.plugin.nodes.UploadPlugin': {'description': 'Upload CFY orchestrator plugin and configure a CFY orchestrator for A4C\n', 'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'upload_plugin.yml', 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}, 'artifacts': [{'plugin_artifact': {'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A dummy service that do nothing.', 'abstract': True, 'properties': {'my_service_property_1': {'type': 'string', 'required': True}, 'my_service_property_2': {'type': 'string', 'required': True}}, 'attributes': {'host_uname': {'type': 'string'}}, 'capabilities': {'dummy_api': {'type': 'org.alien4cloud.sandbox.services.dummy.pub.capabilities.DummyAPI', 'occurrences': [0, 'UNBOUNDED']}, 'dummy_public_api': {'type': 'org.alien4cloud.sandbox.services.dummy.pub.capabilities.DummyPublicAPI', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.mock.ansible.nodes.AnsibleMockComponent': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockComponent', 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.mock.ansible.relationships.AnsibleComponentHostedOnHost', 'occurrences': [1, 1]}}, {'mock_endpoint': {'capability': 'org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint', 'relationship': 'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'create AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'configure AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'start AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.monitoring.pub.nodes.MonitoringAgent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'An agent that collects metrics and store them into a MetricsBackend\n', 'metadata': {'icon': '/images/metrics.png'}}}",0
"{'org.alien4cloud.monitoring.pub.nodes.MetricsBackend': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'Represente a Metrics Database like Graphite\n', 'metadata': {'icon': '/images/metrics.png'}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.MetricsDataEndpoint', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.monitoring.pub.nodes.GraphiteService': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.MetricsBackend', 'abstract': True, 'metadata': {'icon': '/images/graphite.png'}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint', 'occurrences': [0, 'UNBOUNDED']}, 'http_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteHttpEndpoint', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.monitoring.pub.nodes.MonitoringService': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.MetricsBackend', 'abstract': True, 'metadata': {'icon': '/images/metrics.png'}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Data endpoint to collec data.'}, 'http_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Grafana endpoint for dashboard publication.'}}}}",0
"{'org.alien4cloud.monitoring.pub.nodes.GrafanaService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/images/grafana.png'}, 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI endpoint'}}}}",0
"{'org.alien4cloud.nodes.Registry': {'description': 'Few PHP scripts that act as a registry for node and relationship operations.\nLogs are stored in files and restituted by index.php.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'host': {'get_attribute': ['HOST', 'ip_address']}, 'port': {'get_property': ['HOST', 'port']}, 'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['HOST', 'port']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.ApacheContainer', 'relationship': 'org.alien4cloud.relationships.RegistryHostedOnApache'}}, {'php': {'capability': 'org.alien4cloud.capabilities.PHPModule', 'relationship': 'org.alien4cloud.relationships.RegistryConnectToPHP'}}], 'interfaces': {'Standard': {'create': 'scripts/Registry/create.sh', 'start': 'scripts/Registry/start.sh'}}, 'artifacts': [{'php_scripts': {'file': 'php', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.nodes.RegistryConfigurer': {'description': 'Put this node on each compute you want to log operations. This component\nwill just add an entry in /etc/hosts in order to connect to the registry.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'registry_host': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'REGISTRY_HOST': {'get_property': ['SELF', 'registry_host']}}, 'implementation': 'scripts/RegistryConfigurer/start.sh'}}}, 'requirements': [{'registry': {'capability': 'tosca.capabilities.Node', 'node': 'org.alien4cloud.nodes.Registry', 'relationship': 'org.alien4cloud.relationships.RegistryConfigurerDependsOnRegistry', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.nodes.GenericHost': {'description': 'A software component that hosts Generic.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Generic/create.sh'}, 'configure': {'inputs': {'IP_ADDR': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/Generic/configure.sh'}, 'start': {'implementation': 'scripts/Generic/start.sh'}, 'stop': {'implementation': 'scripts/Generic/stop.sh'}, 'delete': {'implementation': 'scripts/Generic/delete.sh'}}}}}",0
"{'org.alien4cloud.nodes.Generic': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'generic_property': {'type': 'string', 'required': False, 'default': 'default_value'}, 'complex_prop': {'type': 'alien.nodes.test.ComplexDataType', 'required': False}}, 'capabilities': {'generic_capability': {'type': 'org.alien4cloud.capabilities.GenericCapability', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.relationships.GenericHostedOnGenericHost', 'occurrences': [1, 1]}}, {'generic_requirement': {'capability': 'org.alien4cloud.capabilities.GenericCapability', 'relationship': 'org.alien4cloud.relationships.GenericConnectToGeneric', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Generic/create.sh'}, 'configure': {'implementation': 'scripts/Generic/configure.sh'}, 'start': {'implementation': 'scripts/Generic/start.sh'}, 'stop': {'implementation': 'scripts/Generic/stop.sh'}, 'delete': {'implementation': 'scripts/Generic/delete.sh'}}}}}",0
"{'org.alien4cloud.www.http-proxy.pub.nodes.HttpProxy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'attributes': {'apache_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/']}}, 'capabilities': {'proxy_endpoint': 'org.alien4cloud.www.http-proxy.pub.capabilities.HttpProxyEndpoint'}}}",0
"{'org.alien4cloud.www.http-proxy.squid3.linux_sh.Squid3': {'derived_from': 'org.alien4cloud.www.http-proxy.pub.nodes.HttpProxy', 'description': 'This TOSCA type represents a Squid3 http proxy server.\n', 'attributes': {'http_proxy': {'concat': [{'get_property': ['SELF', 'proxy_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'proxy_endpoint', 'port']}, '/']}}, 'properties': {'component_version': {'type': 'version', 'default': '3.3.8', 'constraints': [{'equal': '3.3.8'}]}, 'username': {'type': 'string', 'default': 'squid'}, 'password': {'type': 'string', 'default': 'squid'}}, 'metadata': {'icon': 'images/icon.jpg'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu', 'debian']}}]}}]}}}], 'artifacts': [{'squid_conf_file': {'file': 'conf/squid.conf', 'type': 'tosca.artifacts.File', 'description': 'This is the configuration file of /etc/squid/squid.conf'}}], 'interfaces': {'Standard': {'create': 'scripts/install_squid3.sh', 'configure': {'inputs': {'USERNAME': {'get_property': ['SELF', 'username']}, 'PASSWORD': {'get_property': ['SELF', 'password']}, 'HTTP_PORT': {'get_property': ['SELF', 'proxy_endpoint', 'port']}}, 'implementation': 'scripts/configure_squid3.sh'}, 'start': 'scripts/start_squid3.sh', 'stop': 'scripts/stop_squid3.sh', 'delete': 'scripts/uninstall_squid3.sh'}}}}",unknown
"{'org.alien4cloud.automation.cloudify.config.offline_plugin.nodes.PluginConfigurator': {'derived_from': 'org.alien4cloud.www.apache.pub.nodes.WebApplication', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'tags': {'icon': '/images/config.png'}, 'properties': {'plugin_archive_url': {'type': 'string', 'required': True, 'default': 'https://gigaspaces-repository-eu.s3.amazonaws.com/cloudify/wagons/cloudify-host-pool-plugin/1.5/cloudify_host_pool_plugin-1.5-py27-none-linux_x86_64-centos-Core.wgn'}}, 'requirements': [{'cfy': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'relationship': 'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToCfy', 'occurrences': [1, 1]}}, {'alien': {'capability': 'org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi', 'relationship': 'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToA4C', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'document_root': {'get_property': ['HOST', 'document_root']}, 'offline_ip': {'get_attribute': ['HOST', 'ip_address']}, 'offline_port': {'get_property': ['HOST', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.nodes.PHP': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'PHP install through apt-get.', 'metadata': {'icon': '/images/php.png'}, 'properties': {'component_version': {'type': 'version', 'default': 5, 'constraints': [{'equal': 5}]}}, 'capabilities': {'attachWebsite': {'type': 'org.alien4cloud.capabilities.PHPModule'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_php.sh'}}}}",0
"{'org.alien4cloud.nodes.ArtifactDemo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': [{'http_artifact': {'file': 'alien4cloud/alien4cloud-cloudify3-provider/1.3.0-SM2/alien4cloud-cloudify3-provider-1.3.0-SM2.zip', 'repository': 'fastconnect', 'type': 'tosca.artifacts.File'}}, {'git_artifact': {'file': 'demo-repository/artifacts/settings.properties', 'repository': 'aliengithub', 'type': 'tosca.artifacts.File'}}, {'maven_artifact': {'file': 'alien4cloud:alien4cloud-cloudify3-provider:1.2.0@zip', 'repository': 'fastconnect_nexus', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'create': 'https://github.com/alien4cloud/samples/raw/master/demo-repository/scripts/implementation/assert.sh', 'configure': 'scripts/implementation/assert.sh', 'start': {'implementation': {'file': 'demo-repository/scripts/implementation/assert.sh', 'repository': 'aliengithub'}}}}}}",0
"{'org.alien4cloud.www.apache.linux_sh.Apache': {'derived_from': 'org.alien4cloud.www.apache.pub.nodes.Apache', 'properties': {'component_version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu', 'debian']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}}}}",0
"{'org.alien4cloud.nodes.Git': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Git install through apt-get.', 'metadata': {'icon': '/images/git.png'}, 'properties': {'git_user': {'type': 'string', 'default': 'Git User'}, 'git_email': {'type': 'string', 'default': 'user@mydomain.org'}}, 'interfaces': {'Standard': {'create': {'inputs': {'GIT_USER': {'get_property': ['SELF', 'git_user']}, 'GIT_EMAIL': {'get_property': ['SELF', 'git_email']}}, 'implementation': 'scripts/installGit.sh'}}}}}",0
"{'org.alien4cloud.mock.jobs.nodes.SimpleJobMock': {'description': 'A mock job.\n', 'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'duration': {'type': 'integer', 'description': 'The total duration for all operations (create, configure, start) in seconds.\nEach one is pondered in implementation.\n', 'required': True, 'default': 10}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'run': {'inputs': {'duration': {'get_property': ['SELF', 'duration']}, 'operation': 'run'}, 'implementation': 'scripts/operation.sh'}}}}}",0
"{'org.alien4cloud.automation.cloudify.patches.amqp_client.nodes.AmqpClientPatch': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Fix AMQP client patch.', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMock': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'duration': {'type': 'integer', 'description': 'The total duration for all operations (create, configure, start) in seconds.\nEach one is pondered in implementation.\n', 'required': True, 'default': 120}, 'variation': {'type': 'integer', 'description': 'The variation percent.\n20 means 20% of variation. Example, with an operation duration of 100s, if the\nvariation is 20%, the duration will be randomized between 80s and 120s.\n', 'required': True, 'default': 20, 'constraints': [{'in_range': [1, 100]}]}, 'log_length': {'type': 'integer', 'default': 2000, 'description': 'Words count in the generated logs.\n'}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMockHost': {'description': 'A software component that hosts MockComponent.\n', 'abstract': True, 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMock', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMockComponent': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'abstract': True, 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMock', 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'type': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'occurrences': [1, 1]}}, {'mock_endpoint': {'type': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'relationship': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}]}}",0
"{'org.alien4cloud.nodes.AbstractMongod': {'derived_from': 'tosca.nodes.DBMS', 'abstract': True, 'capabilities': {'endpoint': {'type': 'org.alien4cloud.capabilities.endpoint.Mongo'}}, 'metadata': {'icon': '/images/mongodb.jpg'}, 'properties': {'port': {'type': 'integer', 'default': 27017, 'constraints': [{'in_range': [8000, 65535]}]}}}}",0
"{'org.alien4cloud.nodes.Mongod': {'derived_from': 'org.alien4cloud.nodes.AbstractMongod', 'description': 'A node to install Mongodb nosql database.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'metadata': {'icon': '/images/mongodb.jpg'}, 'interfaces': {'Standard': {'create': 'scripts/install-mongo.sh', 'configure': {'inputs': {'DB_IP': {'get_attribute': ['HOST', 'ip_address']}, 'DB_PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/configure-mongo.sh'}, 'start': 'scripts/start-mongo.sh', 'stop': 'scripts/stop-mongo.sh'}}}}",0
"{'org.alien4cloud.nodes.ApacheLoadBalancer': {'derived_from': 'tosca.nodes.LoadBalancer', 'description': 'The TOSCA Apache Node Type represents an apache load balancer that can be run on a debian based os.\n', 'metadata': {'icon': '/images/Apache_PoweredBy.png'}, 'properties': {'component_version': {'type': 'version', 'description': ""Using apt-get we don't really know which is the exact installed version as it depends from the repo settings."", 'default': 2, 'constraints': [{'equal': 2}]}}, 'attributes': {'load_balancer_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'client', 'port']}, '/']}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to', 'properties': {'protocol': 'http', 'port': 80}}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.alien4cloud.relationships.RoutesToApacheLoadBalancer', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'client', 'port']}}, 'implementation': 'scripts/install_apache_load_balancer.sh'}, 'start': 'scripts/start_apache_load_balancer.sh', 'stop': 'scripts/stop_apache_load_balancer.sh'}}}}",unknown
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.ElasticSearchCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collect elasticsearch health metrics.', 'requirements': [{'collec_elasticsearch': {'capability': 'org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCollectElasticSearch', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.JolokiaCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collect a JVM health metrics (need a jolokia java agent the target JVM).', 'requirements': [{'collec_jolokia': {'capability': 'org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondJolokiaCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.A4CCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.collectors.nodes.JolokiaCollector', 'description': 'Collect A4C JVM metrics.', 'requirements': [{'collec_jolokia': {'capability': 'org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondA4CCollector', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.RabbitmqCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collect RabbitMQ metrics.', 'requirements': [{'collec_rabbitmq': {'capability': 'org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondRabbitmqCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.PostgresqlCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collect RabbitMQ metrics.', 'requirements': [{'collec_postgresql': {'capability': 'org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondPostgresqlCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.CloudifyCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collects cloudify manager indicators eg. mgmtworker count ...', 'requirements': [{'collect_cloudify': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.nodes.CloudifyHostpoolCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.nodes.DiamondCollector', 'description': 'Collects indicator concerning hostpool eg. (allocated) instances count.', 'requirements': [{'cloudify_hostpool': {'capability': 'org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.monitoring.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch': {'derived_from': 'tosca.nodes.Root', 'description': 'A patch to apply on CFY.', 'metadata': {'icon': 'images/patch.png'}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.automation.a4c.config.applications.nodes.AddApplications': {'description': 'Create application using a template topology\n', 'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_applications.yml', 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.cloudify.hostpool.service.nodes.HostPool': {'derived_from': 'org.alien4cloud.automation.cloudify.hostpool.pub.nodes.HostPoolService', 'description': ""Configurable hostpool service. The artifact 'archive' should be provided before deploying.\nYou can have it in the maven repository:\nurl:  https://fastconnect.org/maven/content/repositories/fastconnect[-snapshot]\nid: cloudify-hostpool-service-pkg\npackage: tar.gz\n"", 'properties': {'homedir': {'description': 'Path to the directory where to install the hostpool', 'type': 'string', 'default': '/opt/cloudify-hostpool-service'}, 'user': {'description': 'System user to create dedicated to the hostpool service', 'type': 'string', 'default': 'cfyhostpool'}, 'group': {'description': 'System group to create dedicated to the hostpool service', 'type': 'string', 'default': 'cfyhostpool'}, 'data_path': {'description': 'Where to store the pool data.\nFor HA for example, you might want to configure here the path to the mounted shared filesystem amongs the others instances.\n', 'type': 'string', 'required': False, 'default': '/opt/cloudify-hostpool-service-shared'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'inputs': {'SVC_PORT': {'get_property': ['SELF', 'cloudify_hostpool', 'port']}, 'DATA_PATH': {'get_property': ['SELF', 'data_path']}, 'HOSTPOOL_HOMEDIR': {'get_property': ['SELF', 'homedir']}, 'HOSTPOOL_USER': {'get_property': ['SELF', 'user']}, 'HOSTPOOL_GROUP': {'get_property': ['SELF', 'group']}}, 'create': 'scripts/HostPoolService/install.sh', 'start': 'scripts/HostPoolService/start.sh', 'stop': 'scripts/HostPoolService/stop.sh', 'delete': 'scripts/HostPoolService/uninstall.sh'}}, 'artifacts': [{'archive': {'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.nodes.Nodejs': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Nodejs Node Type represents an Nodejs component that can be managed and run by a TOSCA Compute Node Type.\n', 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False, 'default': '0.12'}}, 'capabilities': {'host': 'org.alien4cloud.capabilities.NodeJSAppContainer'}, 'metadata': {'icon': '/images/nodejs.jpg'}, 'interfaces': {'Standard': {'create': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/install-nodejs.sh'}}}}}",0
"{'org.alien4cloud.nodes.AbstractMysql': {'abstract': True, 'derived_from': 'tosca.nodes.Database', 'description': 'A node that provides a mysql endpoint.', 'metadata': {'icon': '/images/mysql.png'}, 'capabilities': {'database_endpoint': 'org.alien4cloud.capabilities.MysqlDatabaseEndpoint'}}}",0
"{'org.alien4cloud.nodes.Mysql': {'derived_from': 'org.alien4cloud.nodes.AbstractMysql', 'description': 'A node to install MySQL v5.5 database with data on a specific attached volume.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'metadata': {'icon': '/images/mysql.png'}, 'properties': {'port': {'type': 'integer', 'default': 3306, 'description': 'The port on which the underlying database service will listen to data.'}, 'name': {'type': 'string', 'required': True, 'default': 'wordpress', 'description': 'The logical name of the database.'}, 'db_user': {'type': 'string', 'default': 'pass', 'description': 'The special user account used for database administration.'}, 'db_password': {'type': 'string', 'default': 'pass', 'description': 'The password associated with the user account provided in the ‘db_user’ property.'}, 'bind_address': {'type': 'boolean', 'default': True, 'required': False, 'description': 'If true,the server accepts TCP/IP connections on all server host IPv4 interfaces.'}, 'storage_path': {'type': 'string', 'default': '/mountedStorage', 'constraints': [{'valid_values': ['/mountedStorage', '/var/mysql']}]}}, 'interfaces': {'Standard': {'create': 'scripts/install_mysql.sh', 'start': {'inputs': {'VOLUME_HOME': {'get_property': ['SELF', 'storage_path']}, 'PORT': {'get_property': ['SELF', 'port']}, 'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'db_user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'db_password']}, 'BIND_ADDRESS': {'get_property': ['SELF', 'bind_address']}}, 'implementation': 'scripts/start_mysql.sh'}}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.nodes.Wordpress': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Wordpress Node Type represents a Wordpress CMS.', 'metadata': {'icon': '/images/wordpress.png'}, 'properties': {'zip_url': {'type': 'string', 'default': 'https://wordpress.org/latest.zip'}, 'context_root': {'type': 'string', 'default': '/'}}, 'attributes': {'max_user_number': {'type': 'integer', 'default': 10, 'description': 'Max user number'}, 'wordpress_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['HOST', 'port']}, {'get_property': ['SELF', 'context_root']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.ApacheContainer', 'relationship': 'org.alien4cloud.relationships.WordpressHostedOnApache'}}, {'database': {'capability': 'org.alien4cloud.capabilities.MysqlDatabaseEndpoint', 'relationship': 'org.alien4cloud.relationships.WordpressConnectToMysql', 'occurrences': [1, 1]}}, {'php': {'capability': 'org.alien4cloud.capabilities.PHPModule', 'relationship': 'org.alien4cloud.relationships.WordpressConnectToPHP', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'WEBFILE_URL': {'get_property': ['SELF', 'zip_url']}}, 'implementation': 'scripts/install_wordpress.sh'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.location_resources.cfy_byon.nodes.ByonLocationResourcesConfigurator': {'description': 'Configure a BYON location for A4C with a single on-demand resource\n', 'derived_from': 'org.alien4cloud.automation.a4c.config.location.nodes.SimpleLocationConfigurator', 'properties': {'type': {'type': 'string', 'required': True, 'default': 'byon', 'constraints': [{'valid_values': ['byon']}]}, 'resourceType': {'type': 'string', 'required': True, 'default': 'alien.cloudify.byon.nodes.LinuxCompute'}, 'resourceName': {'type': 'string', 'required': True, 'default': 'MyResource'}, 'resourceArchiveName': {'type': 'string', 'required': True, 'default': 'cloudify-byon-types'}, 'resourceArchiveVersion': {'type': 'string', 'required': True, 'default': '1.4.0'}, 'resourceAgentInstallMethod': {'type': 'string', 'required': True, 'default': 'none'}}, 'requirements': [{'hostpool': {'capability': 'org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.automation.a4c.config.location_resources.cfy_byon.LocationConnectsToHostpool', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_byon_location_resource.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}, 'resourceType': {'get_property': ['SELF', 'resourceType']}, 'resourceName': {'get_property': ['SELF', 'resourceName']}, 'resourceArchiveName': {'get_property': ['SELF', 'resourceArchiveName']}, 'resourceArchiveVersion': {'get_property': ['SELF', 'resourceArchiveVersion']}, 'resourceAgentInstallMethod': {'get_property': ['SELF', 'resourceAgentInstallMethod']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.storage.elasticsearch.ubuntu.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.storage.elasticsearch.pub.nodes.ElasticSearchService', 'description': 'Installation of replicated ElasticSearch (if this node is scaled, will be replicated).\n', 'properties': {'component_version': {'description': 'The version of Elasticsearch', 'type': 'version', 'default': '1.7.0', 'constraints': [{'valid_values': ['1.7.0']}]}, 'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb'}, 'cluster_name': {'description': 'The name of the ElasticSearch cluster.', 'type': 'string', 'required': True, 'default': 'escluster'}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/elasticsearch/install_elasticsearch.sh'}, 'configure': {'inputs': {'ES_IP': {'get_attribute': ['HOST', 'ip_address']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HTTP_PORT': {'get_property': ['SELF', 'http', 'port']}}, 'implementation': 'scripts/elasticsearch/configure_elasticsearch.sh'}, 'start': {'implementation': 'scripts/elasticsearch/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'config/elasticsearch', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.demo.zookeeper.pub.nodes.ZookeeperService': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'tags': {'icon': '/images/ApacheZookeeper.png'}, 'capabilities': {'zookeeper_endpoint': {'type': 'org.alien4cloud.demo.zookeeper.pub.capabilities.Zookeeper'}}}}",0
"{'org.alien4cloud.www.wordpress.nodes.Wordpress': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Wordpress Node Type represents a Wordpress CMS.', 'metadata': {'icon': '/images/wordpress.png'}, 'properties': {'zip_url': {'type': 'string', 'default': 'https://wordpress.org/latest.zip'}, 'context_root': {'type': 'string', 'default': '/'}}, 'attributes': {'max_user_number': {'type': 'integer', 'default': 10, 'description': 'Max user number'}, 'wordpress_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['HOST', 'port']}, {'get_property': ['SELF', 'context_root']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.ApacheContainer', 'relationship': 'org.alien4cloud.relationships.WordpressHostedOnApache'}}, {'database': {'capability': 'org.alien4cloud.capabilities.MysqlDatabaseEndpoint', 'relationship': 'org.alien4cloud.relationships.WordpressConnectToMysql', 'occurrences': [1, 1]}}, {'php': {'capability': 'org.alien4cloud.capabilities.PHPModule', 'relationship': 'org.alien4cloud.relationships.WordpressConnectToPHP', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'WEBFILE_URL': {'get_property': ['SELF', 'zip_url']}}, 'implementation': 'scripts/install_wordpress.sh'}}}}}",unknown
"{'org.alien4cloud.nodes.DockerEngine': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The Docker Engine.\n', 'metadata': {'icon': '/images/icon.png'}, 'capabilities': {'docker_host': 'org.alien4cloud.capabilities.DockerHost', 'docker_cli': 'org.alien4cloud.capabilities.DockerCLI'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu', 'centos']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_docker_engine.sh', 'start': 'scripts/start_docker_engine.sh', 'stop': 'scripts/stop_docker_engine.sh'}}}}",0
"{'org.alien4cloud.automation.a4c.config.pub.nodes.OrchestratorConfigurator': {'derived_from': 'org.alien4cloud.automation.a4c.pub.nodes.AlienConfigurator', 'abstract': True, 'description': 'Configure an orchestrator for A4C\n', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyOrchestrator'}, 'discriminator': {'type': 'string', 'description': 'a prefix for all deployments', 'required': True, 'default': 'YourInitials'}, 'pluginId': {'type': 'string', 'required': True, 'default': 'alien-cloudify-4-orchestrator-premium'}, 'pluginBean': {'type': 'string', 'required': True, 'default': 'cloudify-orchestrator'}}, 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}}, 'capabilities': {'location_config': {'type': 'org.alien4cloud.automation.a4c.config.pub.capabilities.OrchestratorConfigurator', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.automation.a4c.config.pub.nodes.LocationConfigurator': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'description': 'Configure a location for an A4C orchestrator\n', 'tags': {'icon': '/images/config.png'}, 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyLocation'}, 'type': {'type': 'string', 'required': True, 'default': 'byon'}}, 'attributes': {'locationId': {'get_operation_output': ['SELF', 'Standard', 'create', 'locationId']}}, 'requirements': [{'orchestrator': {'capability': 'org.alien4cloud.automation.a4c.config.pub.capabilities.OrchestratorConfigurator', 'relationship': 'org.alien4cloud.automation.a4c.config.pub.relationships.LocationHostedOnOrchestrator', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.demo.kafka.pub.nodes.KafkaService': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'tags': {'icon': '/images/kafka-logo-no-text.png'}, 'capabilities': {'kafka_endpoint': {'type': 'org.alien4cloud.demo.kafka.pub.capabilities.KafkaBroker'}}}}",0
"{'org.alien4cloud.nodes.Nodecellar': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Nodecellar Node Type represents a Nodecellar Application.', 'metadata': {'icon': '/images/nodecellar.jpg'}, 'properties': {'port': {'type': 'integer', 'default': 8088}}, 'attributes': {'nodecellar_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.NodeJSAppContainer', 'relationship': 'org.alien4cloud.relationships.NodecellarHostedOnNodejs'}}, {'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'org.alien4cloud.relationships.NodejsConnectToMongo', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/install-nodecellar-app.sh', 'start': 'scripts/start-nodecellar-app.sh', 'stop': 'scripts/stop-nodecellar-app.sh'}}}}",0
"{'org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker.nodes.ChangeMaxMgmtWorkerPatch': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Increase number of mgmnt workers.', 'properties': {'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 500}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'get_property': ['SELF', 'mgmt_worker_count']}}, 'implementation': 'playbook/playbook.ansible'}}, 'org.alien4cloud.automation.cloudify.patches.change_max_mgmtworker.interfaces.Admin': {'setup': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 100}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.DockerEngine': {'derived_from': 'org.alien4cloud.nodes.DockerEngine', 'interfaces': {'Standard': {'start': 'scripts/docker/start_docker.sh', 'stop': 'scripts/docker/stop_docker.sh'}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Etcd': {'description': 'Installs ETCD on k8s master.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/etcd.png'}, 'properties': {'component_version': {'type': 'version', 'default': '2.2.1'}}, 'capabilities': {'etcd': 'org.alien4cloud.capabilities.kubernetes.ETCD'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.DockerHost', 'node': 'org.alien4cloud.nodes.kubernetes.DockerEngine', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/etcd/create_etcd.sh', 'inputs': {'LOCAL_IP': {'get_attribute': ['HOST', 'ip_address']}, 'ETCD_VERSION': {'get_property': ['SELF', 'component_version']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Flannel': {'description': 'Installs Flannel & configure docker.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/flannel.png'}, 'properties': {'component_version': {'type': 'version', 'default': '0.5.5'}, 'ip_mask': {'type': 'boolean', 'default': True}}, 'capabilities': {'flannel': {'type': 'org.alien4cloud.capabilities.flannel.Connectivity'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.DockerHost', 'node': 'org.alien4cloud.nodes.kubernetes.DockerEngine', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'etcd': {'capability': 'org.alien4cloud.capabilities.kubernetes.ETCD', 'node': 'org.alien4cloud.nodes.kubernetes.Etcd', 'relationship': 'org.alien4cloud.relationships.kubernetes.RetrieveEtcdIpAddress', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'implementation': 'scripts/flannel/start_flannel.sh', 'inputs': {'FLANNEL_VERSION': {'get_property': ['SELF', 'component_version']}, 'FLANNEL_IFACE': {'get_property': ['SELF', 'flannel', 'interface']}, 'FLANNEL_IPMASQ': {'get_property': ['SELF', 'ip_mask']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Hyperkube': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/hyperkube.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.2.1'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.DockerHost', 'node': 'org.alien4cloud.nodes.kubernetes.DockerEngine', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'flannel': {'capability': 'org.alien4cloud.capabilities.flannel.Connectivity', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.nodes.kubernetes.KubeMaster': {'description': 'Installs kubernetes master components.\n', 'derived_from': 'org.alien4cloud.nodes.kubernetes.Hyperkube', 'metadata': {'icon': 'images/kube_master.png'}, 'attributes': {'api_endpoint': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8080']}}, 'capabilities': {'kube_master': {'type': 'org.alien4cloud.capabilities.kubernetes.MasterHost'}, 'configuration': {'type': 'org.alien4cloud.capabilities.kubernetes.MasterConfiguration'}}, 'interfaces': {'Standard': {'start': {'implementation': 'scripts/kubernetes/master/start_master.sh', 'inputs': {'MASTER_IP': {'get_attribute': ['HOST', 'ip_address']}, 'K8S_VERSION': {'get_property': ['SELF', 'component_version']}, 'DNS_DOMAIN': {'get_property': ['SELF', 'dns_domain']}, 'FLANNEL_IFACE': {'get_property': ['SELF', 'flannel', 'interface']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Namespace': {'description': 'Creates a namespace in Kubernetes.\n', 'derived_from': 'tosca.nodes.Container.Application', 'metadata': {'icon': 'images/kube.png'}, 'capabilities': {'namespace': {'type': 'org.alien4cloud.capabilities.kubernetes.Namespace'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.kubernetes.MasterHost', 'occurrences': [1, 1]}}], 'artifacts': [{'namespace_pod_file': {'type': 'tosca.artifacts.File', 'file': 'scripts/kubernetes/namespace/namespace.yaml'}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/kubernetes/namespace/namespace.sh', 'inputs': {'MASTER_IP': {'get_attribute': ['HOST', 'ip_address']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace', 'namespace']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Dashboard': {'description': 'Install the kubernetes dashboard (on k8s master)\n', 'derived_from': 'tosca.nodes.Container.Application', 'metadata': {'icon': 'images/kube.png'}, 'attributes': {'kubernetes_ui': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8080/ui']}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.kubernetes.MasterHost', 'occurrences': [1, 1]}}, {'namespace': {'capability': 'org.alien4cloud.capabilities.kubernetes.Namespace', 'occurrences': [0, 1]}}], 'artifacts': [{'dashboard_rc_file': {'file': 'scripts/kubernetes/dashboard/dashboard-rc.yaml', 'type': 'tosca.artifacts.File'}}, {'dashboard_svc_file': {'file': 'scripts/kubernetes/dashboard/dashboard-svc.yaml', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'implementation': 'scripts/kubernetes/dashboard/dashboard.sh', 'inputs': {'NAMESPACE': {'get_property': ['SELF', 'namespace', 'namespace']}, 'MASTER_IP': {'get_attribute': ['HOST', 'ip_address']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.Kubectl': {'description': 'Install the kubectl\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/kube.png'}, 'requirements': [{'docker_cli': {'capability': 'org.alien4cloud.capabilities.DockerCLI', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}], 'properties': {'component_version': {'type': 'version', 'default': '1.5.3'}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/kubernetes/kubectl/kubectl.sh', 'inputs': {'KUBECTL_VERSION': {'get_property': ['SELF', 'component_version']}}}}}}}",0
"{'org.alien4cloud.nodes.kubernetes.KubeNode': {'description': 'Installs the Hyperkube process and a proxy on the node host.\n', 'derived_from': 'org.alien4cloud.nodes.kubernetes.Hyperkube', 'metadata': {'icon': 'images/kube.png'}, 'requirements': [{'join_master': {'capability': 'org.alien4cloud.capabilities.kubernetes.MasterConfiguration', 'relationship': 'org.alien4cloud.relationships.kubernetes.RetrieveMasterConfigurations', 'node': 'org.alien4cloud.nodes.kubernetes.KubeMaster', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'implementation': 'scripts/kubernetes/node/start_node.sh', 'inputs': {'K8S_VERSION': {'get_property': ['SELF', 'component_version']}, 'DNS_DOMAIN': {'get_property': ['SELF', 'join_master', 'dns_domain']}, 'FLANNEL_IFACE': {'get_property': ['SELF', 'flannel', 'interface']}}}, 'stop': {'implementation': 'scripts/kubernetes/node/stop_node.sh', 'inputs': {'FLANNEL_IFACE': {'get_property': ['SELF', 'flannel', 'interface']}}}}}}}",0
"{'org.alien4cloud.monitoring.grafana.nodes.Grafana': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.GrafanaService', 'metadata': {'icon': '/images/grafana.png'}, 'description': 'Grafana frontend\n', 'properties': {'component_version': {'type': 'version', 'default': '4.1.2', 'constraints': [{'valid_values': ['4.1.2']}]}}, 'attributes': {'grafana_url': {'concat': ['http://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_property': ['SELF', 'http_endpoint', 'port']}]}}, 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI endpoint', 'properties': {'protocol': 'http', 'port': 3000, 'user': 'admin', 'password': 'admin'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}, {'graphite': {'capability': 'org.alien4cloud.monitoring.pub.capabilities.GraphiteHttpEndpoint', 'relationship': 'org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToGraphite', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'description': 'Installation of ElasticSearch\n', 'metadata': {'icon': 'images/elasticsearch.png'}, 'properties': {'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb'}}, 'requirements': [{'elasticsearch': {'capability': 'org.alien4cloud.capabilities.ElasticSearch', 'relationship': 'org.alien4cloud.relationships.ConnectElasticSearchNodes', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'elasticsearch': {'type': 'org.alien4cloud.capabilities.ElasticSearch', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/install_elasticsearch.sh'}, 'start': {'implementation': 'scripts/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.automation.a4c.config.location_resources.autoconfig.nodes.ResourcesConfigurator': {'description': 'Configure a location for A4C, resources are fed using a resource yaml file\n', 'derived_from': 'org.alien4cloud.automation.a4c.config.location.nodes.SimpleLocationConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location_resources.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMock': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'duration': {'type': 'integer', 'description': 'The total duration for all operations (create, configure, start) in seconds.\nEach one is pondered in implementation.\n', 'required': True, 'default': 120}, 'variation': {'type': 'integer', 'description': 'The variation percent.\n20 means 20% of variation. Example, with an operation duration of 100s, if the\nvariation is 20%, the duration will be randomized between 80s and 120s.\n', 'required': True, 'default': 20, 'constraints': [{'in_range': [1, 100]}]}, 'log_length': {'type': 'integer', 'default': 2000, 'description': 'Words count in the generated logs.\n'}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMockHost': {'description': 'A mock that can be hosted and that can also host other mocks.\n', 'abstract': True, 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMock', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}, {'mock_endpoint': {'capability': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'relationship': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'mock_endpoint': {'type': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'occurrences': [0, 'unbounded']}}}}",0
"{'org.alien4cloud.mock.pub.nodes.AbstractMockComponent': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'abstract': True, 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMock', 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'occurrences': [1, 1]}}, {'mock_endpoint': {'capability': 'org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint', 'relationship': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}]}}",0
"{'org.alien4cloud.automation.a4c.tests.loadtest.nodes.JMeterTestLauncher': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.lang.java.pub.nodes.JavaSoftware', 'properties': {'rampup': {'type': 'string', 'description': 'A CSV list of user count for rampup (ex: 10,20,50,100)', 'default': '10,20,30,40,50', 'required': True}, 'test_name_prefix': {'type': 'string', 'description': 'A prefix for naming the test. Will be used with the launch date and the user count when executing the test. The test name is used to name result and log files and application in target A4C so just use Word chars please.\n', 'default': 'LoadTest', 'required': True}, 'loop_count': {'type': 'integer', 'description': 'In conjonction with a single value rampup, you can loop.', 'default': 1, 'required': True}}, 'requirements': [{'alien_rest_api': {'capability': 'org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi', 'relationship': 'org.alien4cloud.automation.a4c.tests.loadtest.relationships.LoadtestConnectToAlien', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'create AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'configure AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'sleep_factor': {'get_property': ['SELF', 'sleep_factor']}, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'start AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'stop AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.automation.cloudify.patches.patch_mgmtworker.nodes.PatchMgmtworkTasksPy': {'derived_from': 'org.alien4cloud.automation.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Patch /opt/mgmtworker/env/lib/python2.7/site-packages/script_runner/tasks.py to fix the temporary folder deletion.\n', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.nodes.Tomcat': {'derived_from': 'tosca.nodes.WebServer', 'description': 'TOSCA node to install and run Apache Tomcat java web server. The Apache Tomcat® software is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.\n', 'metadata': {'icon': '/images/tomcat.png'}, 'properties': {'tomcat_home': {'type': 'string', 'required': True, 'description': 'Directory in which to install tomcat on the host.', 'default': '/opt/tomcat'}, 'download_url': {'type': 'string', 'required': True, 'description': 'Url from which to download the tomcat tar.gz package', 'default': 'https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.39/bin/apache-tomcat-8.0.39.tar.gz'}, 'component_version': {'type': 'version', 'description': 'Version of tomcat to install (this should match the provided download url).', 'default': '8.0.39'}}, 'attributes': {'server_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.lang.java.pub.capabilities.JDK', 'relationship': 'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK', 'occurrences': [1, 1]}}], 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint', 'occurrences': [0, 0], 'properties': {'protocol': 'http', 'port': 80}}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin', 'occurrences': [0, 0]}, 'host': {'type': 'org.alien4cloud.capabilities.WarContainer', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'TOMCAT_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/tomcat_install.sh'}, 'start': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}}, 'implementation': 'scripts/tomcat_start.sh'}, 'stop': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}}, 'implementation': 'scripts/tomcat_stop.sh'}}}}}",unknown
"{'org.alien4cloud.nodes.War': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'A war element', 'metadata': {'icon': '/images/war.jpg'}, 'attributes': {'application_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['HOST', 'data_endpoint', 'port']}, '/', {'get_property': ['SELF', 'app_endpoint', 'url_path']}]}, 'local_application_url': {'concat': ['http://', {'get_attribute': ['HOST', 'ip_address']}, ':', {'get_property': ['HOST', 'data_endpoint', 'port']}, '/', {'get_property': ['SELF', 'app_endpoint', 'url_path']}]}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': {'get_property': ['HOST', 'data_endpoint', 'protocol']}, 'port': {'get_property': ['HOST', 'data_endpoint', 'port']}, 'url_path': 'hello'}}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.WarContainer', 'occurrences': [1, 1]}}], 'artifacts': [{'war_file': {'file': 'warFiles/helloWorld.war', 'type': 'org.alien4cloud.lang.java.pub.artifacts.WarFile'}}], 'interfaces': {'custom': {'update_war_file': {'inputs': {'CONTEXT_PATH': {'get_property': ['SELF', 'app_endpoint', 'url_path']}, 'TOMCAT_HOME': {'get_property': ['HOST', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['HOST', 'data_endpoint', 'port']}, 'WAR_URL': {'type': 'string', 'description': 'url of the war to upload to update the current one', 'required': True}}, 'implementation': 'scripts/tomcat_install_war.sh'}}}}}",unknown
"{'org.alien4cloud.lang.java.pub.nodes.JavaSoftware': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The JavaSoftware node represents a generic software component that can be launch by Java.', 'metadata': {'icon': 'images/javabean.png'}, 'requirements': [{'java': {'capability': 'org.alien4cloud.lang.java.pub.capabilities.JDK', 'relationship': 'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.www.apache.linux_ans.nodes.Apache': {'derived_from': 'org.alien4cloud.www.apache.pub.nodes.Apache', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type. This version is installed by using Ansible.\n', 'properties': {'document_root': {'type': 'string', 'default': '/var/www/html'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel', 'debian', 'ubuntu']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.doc.kube.containers.nodes.Apache': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.doc.kube.containers.capabilities.Http'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'httpd:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.doc.kube.containers.nodes.Nodecellar': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'string', 'default': 'cd /nodecellar && nodejs server.js'}, 'docker_options': {'type': 'org.alien4cloud.doc.kube.containers.datatypes.Nodecellar', 'required': False}, 'docker_env_vars': {'type': 'map', 'description': 'Environment variables for the Docker container.', 'entry_schema': {'type': 'string'}, 'default': {'LOG_LEVEL': None}}}, 'requirements': [{'mongo_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'nodecellar_app': {'type': 'org.alien4cloud.doc.kube.containers.capabilities.Nodecellar'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MONGO_HOST': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'ENV_MONGO_PORT': {'get_attribute': ['TARGET', 'mongo_db', 'port']}, 'ENV_MONGO_API_VERSION': {'get_property': ['TARGET', 'mongo_db', 'api_version']}, 'ENV_NODECELLAR_PORT': {'get_property': ['SELF', 'nodecellar_app', 'port']}}, 'implementation': {'file': 'afraisse/nodecellar:exp', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",unknown
"{'org.alien4cloud.doc.kube.containers.nodes.BusyboxBash': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'string', 'default': ""echo 'Hello World'""}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'blang/busybox-bash', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.doc.kube.containers.nodes.Mongo': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'mongo_db': {'type': 'org.alien4cloud.doc.kube.containers.capabilities.Mongo'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'mongo:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'tosca.nodes.vendor.VDU': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'virtualbinding': {'type': 'tosca.capabilities.vendor.VendorBindable'}}}}",0
"{'tosca.nodes.vendor.CP': {'derived_from': 'tosca.nodes.network.Port', 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.VendorLinkable', 'relationship': 'tosca.relationships.vendor.VendorLinksTo', 'node': 'tosca.nodes.vendor.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.vendor.VendorBindable', 'node': 'tosca.nodes.vendor.VDU', 'relationship': 'tosca.relationships.vendor.VendorBindsTo'}}]}}",0
"{'tosca.nodes.vendor.VL': {'derived_from': 'tosca.nodes.network.Network', 'capabilities': {'virtual_linkable': {'type': 'tosca.capabilities.vendor.VendorLinkable'}}}}",0
"{'tosca.nodes.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'host': None, 'capability': 'tosca.capabilities.Container.Docker'}]}}",0
"{'my.nodes.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'description': 'represents a containerized application.', 'capabilities': {'endpoint': 'tosca.capabilities.Endpoint'}, 'attributes': {'uuid': {'type': 'string'}}, 'properties': {'env_vars': {'type': 'map', 'required': False, 'entry_schema': {'description': 'Environment variables for the Docker container.', 'type': 'string'}}}, 'artifacts': {'my_image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}",0
"{'my.nodes.ScalableContainer': {'derived_from': 'my.nodes.Container.Application.Docker', 'description': 'represents scalable containerized application.', 'capabilities': {'scalable': 'tosca.capabilities.Scalable'}, 'requirements': [{'endpoint': 'tosca.capabilities.Endpoint', 'type': 'tosca.relationships.ConnectsTo', 'lower_bound': 0, 'upper_bound': 'UNBOUNDED'}], 'properties': {'appname': {'description': 'Application name', 'type': 'string', 'required': True}, 'appinstance': {'description': 'Lifecycle', 'type': 'string', 'required': True}, 'image_name': {'description': 'Docker image name', 'type': 'string', 'required': True}, 'image_tag': {'description': 'Docker image tag', 'type': 'string', 'required': True}, 'avail_zone': {'description': 'DC Region', 'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/kube-create.sh', 'inputs': {'image_name': {'type': 'string'}}}, 'configure': 'scripts/kube-configure.sh', 'start': 'scripts/kube-start.sh', 'stop': 'scripts/kube-stop.sh', 'delete': 'scripts/kube-delete.sh'}}}}",0
"{'my.nodes.GSLB': {'derived_from': 'tosca.nodes.LoadBalancer', 'description': 'represents a Global Server Load Balancer.', 'properties': {'domain_name': {'description': 'Resolved domain name', 'type': 'string', 'required': True}, 'policy': {'description': 'Balancing policy', 'type': 'string', 'required': True, 'constraints': [{'valid_values': ['oredered_list', 'static_dns', 'round_robin', 'weighted_round_robin', 'least_loaded', 'geo_database']}]}}, 'interfaces': {'Standard': {'configure': {'implementation': 'scripts/gslb-configure.sh', 'inputs': {'policy': {'type': 'string'}, 'targets': {'type': 'string'}}}, 'create': {'implementation': 'scripts/gslb-create.sh', 'inputs': {'domain_name': {'type': 'string'}}}}}}}",0
"{'my.nodes.HostedMongo': {'derived_from': 'tosca.nodes.Database', 'attributes': {'uuid': {'type': 'string'}}, 'properties': {'port': {'default': 27017}}, 'interfaces': {'Standard': {'create': 'scripts/mongo-create.sh', 'configure': {'inputs': {'port': {'type': 'integer'}}, 'implementation': 'scripts/mongo-configure.sh'}, 'start': 'scripts/mongo-start.sh', 'stop': 'scripts/mongo-stop.sh'}}}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'some_req': {'capability': 'tosca.capabilities.SomeCap', 'node': 'tosca.nodes.NodeWithCap', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DatabaseWithListParam': {'derived_from': 'tosca.nodes.Database', 'properties': {'list_prop': {'type': 'list', 'entry_schema': {'type': 'integer'}}, 'map_prop': {'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'ServerNode': {'derived_from': 'SoftwareComponent', 'properties': {'notification_port': {'type': 'integer'}}, 'capabilities': None}}",0
"{'ClientNode': {'derived_from': 'SoftwareComponent', 'properties': None, 'requirements': [{'server': {'capability': 'Endpoint', 'node': 'ServerNode', 'relationship': 'ConnectsTo'}}]}}",0
"{'tosca.capabilities.custom.Endpoint': {'derived_from': 'tosca.capabilities.Endpoint', 'attributes': {'credential': {'type': 'tosca.datatypes.Credential'}}}}",0
"{'tosca.capabilities.MyFeature': {'derived_from': 'tosca.capabilities.Root', 'properties': {'my_list': {'type': 'list'}, 'my_map': {'type': 'map'}}}}",0
"{'tosca.nodes.WebApplication.MyApp': {'derived_from': 'tosca.nodes.WebApplication', 'requirements': [{'myfeature': {'capability': 'tosca.capabilities.MyFeature', 'node': 'tosca.nodes.MyDatabase', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.MyDatabase': {'derived_from': 'tosca.nodes.Database', 'capabilities': {'myfeature': {'type': 'tosca.capabilities.MyFeature'}}}}",0
"{'tosca.nodes.custom.Compute': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'endpoint': {'type': 'tosca.capabilities.custom.Endpoint'}}}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'javaSysProps': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure'}]}}",0
"{'org.apache.brooklyn.entity.database.mysql.MySqlNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A MySQL server\n', 'properties': {'datastore.creation.script.url': {'type': 'string', 'required': False}}, 'capabilities': {'dbConnection': 'tosca.capabilities.Endpoint.Database'}}}",0
"{'org.apache.brooklyn.entity.webapp.DynamicWebAppCluster': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Dynamic Cluster\n', 'properties': {'x': {'type': 'string', 'required': False}, 'parent': {'type': 'string', 'required': False}}}}",0
"{'x-node': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'x.url': {'type': 'string'}}}}",0
{'x-instance': {'derived_from': 'tosca.nodes.WebServer'}},0
"{'brooklyn.nodes.Test': {'derived_from': 'tosca.nodes.Root', 'properties': {'another': {'type': 'string', 'required': False}}, 'attributes': {'my_message': {'concat': ['Message: ', 'Hello']}}}}",0
"{'org.apache.brooklyn.entity.webapp.DynamicWebAppCluster': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Dynamic Cluster\n'}}",0
"{'tomcat-node': {'derived_from': 'tosca.nodes.Root', 'description': 'The Tomcat Server\n', 'properties': {'root.war': {'type': 'string', 'required': False}, 'catalina.properties': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}}}",0
"{'org.apache.brooklyn.entity.database.mysql.MySqlNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A MySQL server\n', 'properties': {'datastore.creation.script.url': {'type': 'string', 'required': False}}}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'properties': {'p1': {'type': 'string'}, 'p2': {'type': 'string'}}, 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': {'inputs': {'arg1': {'get_property': ['SELF', 'p1']}}, 'implementation': 'classpath://templates/custom1/scripts/configure.sh'}, 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}}}",0
"{'test.nodes.Compute': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'test_attribute': {'default': 'my attribute', 'type': 'string'}}}}",0
"{'brooklyn.nodes.Test': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'my_message': {'concat': ['Message: ', {'get_attribute': ['HOST', 'test_attribute']}]}}}}",0
"{'org.apache.brooklyn.entity.group.DynamicCluster': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Dynamic Cluster\n', 'properties': {'cluster.initial.size': {'type': 'string', 'required': False}, 'dynamiccluster.memberspec': {'type': 'string', 'required': False}}}}",0
{'org.apache.brooklyn.core.test.entity.TestEntity': {'derived_from': 'tosca.nodes.Root'}},0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'unbounded'}]}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'capabilities': {'endpoint_configuration': 'tosca.capabilities.Endpoint'}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'unbounded'}, {'endpoint_configuration': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'unbounded'}]}}",0
"{'org.apache.brooklyn.entity.database.mysql.MySqlNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A MySQL server\n', 'properties': {'creationScriptUrl': {'type': 'string', 'required': False}}, 'capabilities': {'dbConnection': 'tosca.capabilities.Endpoint.Database'}}}",0
"{'brooklyn.nodes.Test': {'derived_from': 'tosca.nodes.Root', 'properties': {'message': {'type': 'string', 'required': True, 'default': 'It Works!'}}, 'attributes': {'my_message': {'concat': ['Message: ', {'get_property': ['SELF', 'message']}]}}}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'artifacts': [{'wars.root': None, 'type': 'tosca.artifacts.File'}]}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'properties': {'p2': {'type': 'string'}}, 'attributes': {'a1': {'concat': [{'get_property': ['SELF', 'p2']}]}}, 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': {'inputs': {'arg1': {'get_attribute': ['SELF', 'a1']}}, 'implementation': 'classpath://templates/custom1/scripts/configure.sh'}, 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': 'classpath://templates/custom1/scripts/configure.sh', 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}, 'artifacts': [{'my_art': '/templates/family-chat.to_be_overridden', 'type': 'tosca.artifacts.File', 'archive_name': 'a1', 'archive_version': 1}]}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'https.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure'}]}}",0
{'brooklyn.nodes.Compute': {'derived_from': 'tosca.nodes.Compute'}},0
"{'brooklyn.nodes.SoftwareProcess': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",0
"{'brooklyn.nodes.Database': {'derived_from': 'brooklyn.nodes.SoftwareProcess', 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database', 'upper_bound': 'UNBOUNDED'}}}}",0
"{'brooklyn.nodes.WebServer': {'derived_from': 'brooklyn.nodes.SoftwareProcess', 'requirements': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database', 'relationship': 'brooklyn.relationships.Configure', 'upper_bound': 'UNBOUNDED', 'lower_bound': 0}}, 'capabilities': {'loadbalancer_endpoint': {'type': 'tosca.capabilities.Endpoint', 'upper_bound': 'UNBOUNDED'}}}}",0
"{'brooklyn.nodes.LoadBalancer': {'derived_from': 'brooklyn.nodes.SoftwareProcess', 'properties': {'port': {'type': 'integer', 'description': 'The port that the service should listen on', 'default': 80, 'constraint': {'greater_than': 0, 'less_or_equal': 65535}}}, 'requirements': {'load_balancer_target': {'type': 'tosca.capabilities.Endpoint', 'relationship': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'UNBOUNDED'}}}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure'}]}}",0
"{'brooklyn.entity.webapp.tomcat.TomcatServer': {'tags': {'brooklyn_property_map__port': 'http.port', 'brooklyn_blueprint_catalog_id': 'brooklyn.entity.webapp.tomcat.TomcatServer'}, 'derived_from': 'alien.nodes.Tomcat', 'description': 'Brooklyn implementation of tomcat webserver.', 'properties': {'port': {'type': 'integer', 'required': True, 'default': 80}, 'war': {'type': 'string', 'required': False, 'description': 'The normal way to inject a WAR or WARs is with the HostedOn relationship,\nbut as Brooklyn accepts it as config, a user can supply a URL here for convenience.\n'}}, 'requirements': [{'host': 'tosca.nodes.Compute', 'lower_bound': 0, 'upper_bound': 0}]}}",0
"{'alien.nodes.Tomcat': {'derived_from': 'tosca.nodes.WebServer', 'description': 'Abstraction of tomcat webserver.', 'abstract': True, 'tags': {'icon': '/images/tomcat.gif'}, 'properties': {'port': {'type': 'integer', 'required': True, 'default': 80}}, 'capabilities': {'host': 'alien.capabilities.WarHosting'}}}",0
"{'alien.nodes.War': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'TOSCA node that represents a war element.', 'tags': {'icon': '/images/war.jpg'}, 'properties': {'context_path': {'description': 'Context path to access the deployed war ( ex: www.server.com/<context_path>)', 'type': 'string'}}, 'requirements': [{'host': 'alien.capabilities.WarHosting', 'lower_bound': 1, 'upper_bound': 1}], 'artifacts': [{'war_file': 'alien.artifacts.WarFile'}]}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'properties': {'p1': {'type': 'string'}, 'p2': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'p3': {'type': 'map', 'entry_schema': {'type': 'string'}}}, 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': {'inputs': {'arg1': {'get_property': ['SELF', 'p1']}, 'arg2': {'get_property': ['SELF', 'p2.0']}, 'arg3': {'get_property': ['SELF', 'p3.baz']}}, 'implementation': 'classpath://templates/custom1/scripts/configure.sh'}, 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': 'classpath://templates/custom1/scripts/configure.sh', 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}, 'artifacts': [{'my_art': 'classpath://templates/family-chat.to_be_overridden', 'type': 'tosca.artifacts.File'}]}}",0
"{'foo': {'derived_from': 'tosca.nodes.Database', 'properties': {'p1': {'type': 'string'}}, 'attributes': None, 'interfaces': {'Standard': {'create': 'classpath://templates/custom1/scripts/create.sh', 'configure': {'inputs': {'arg1': 'x'}, 'implementation': 'classpath://templates/custom1/scripts/configure.sh'}, 'start': 'classpath://templates/custom1/scripts/start.sh', 'stop': 'classpath://templates/custom1/scripts/stop.sh'}}}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'database_endpoint': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure'}, {'host': 'tosca.capabilities.Container'}]}}",0
"{'org.apache.brooklyn.entity.database.mysql.MySqlNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A MySQL server\n', 'properties': {'datastore.creation.script.url': {'type': 'string', 'required': False}}, 'requirements': [{'host': 'tosca.capabilities.Container'}], 'capabilities': {'database_endpoint': 'tosca.capabilities.Endpoint.Database'}}}",0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'wars.root': {'type': 'string', 'required': False}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}}}}",0
"{'vcloud_configuration': {'derived_from': 'cloudify.nodes.Root', 'properties': {'vcloud_config': {}}}}",0
"{'agentless-nodecellar.nodes.ParentTypeServer': {'derived_from': 'cloudify.vcloud.nodes.Server', 'properties': {'install_agent': {'default': False}}}}",0
{'wordpress_installation': {'derived_from': 'cloudify.nodes.Root'}},0
"{'tosca.nodes.Database.MySQL': {'derived_from': 'tosca.nodes.Database', 'metadata': {'icon': '/images/mysql-db.png'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': '', 'db_access_host': '%'}}}}}}",0
"{'tosca.nodes.DBMS.MySQL': {'derived_from': 'tosca.nodes.DBMS', 'metadata': {'icon': '/images/mysql-server.png'}, 'properties': {'port': {'type': 'integer', 'description': 'reflect the default MySQL server port', 'default': 3306}, 'root_password': {'type': 'string', 'required': True}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database.MySQL']}}, 'interfaces': {'Standard': {'create': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_install.yml', 'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_configure.yml', 'inputs': {'root_password': {'get_property': ['SELF', 'root_password']}, 'port': {'get_property': ['SELF', 'port']}}}}}}}",0
"{'tosca.nodes.WebServer.Apache': {'derived_from': 'tosca.nodes.WebServer', 'metadata': {'icon': '/images/apache.png'}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_install.yml'}, 'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_start.yml'}}}}}",0
"{'tosca.nodes.indigo.Database.MySQL': {'derived_from': 'tosca.nodes.Database.MySQL', 'metadata': {'icon': '/images/mysql-db-indigo.png'}, 'properties': {'access_host': {'type': 'string', 'required': False, 'default': '%'}, 'root_password': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': {'get_property': ['SELF', 'root_password']}, 'db_access_host': {'get_property': ['SELF', 'access_host']}}}}}}}",0
"{'tosca.nodes.indigo.Compute': {'derived_from': 'tosca.nodes.Compute', 'metadata': {'icon': '/images/compute.png'}, 'attributes': {'private_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'public_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'ctxt_log': {'type': 'string'}}, 'properties': {'os_users': {'type': 'list', 'description': 'Users creation', 'entry_schema': {'type': 'tosca.datatypes.indigo.User'}, 'default': [], 'required': False}}, 'capabilities': {'scalable': {'type': 'tosca.capabilities.indigo.Scalable'}, 'os': {'type': 'tosca.capabilities.indigo.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.indigo.Endpoint'}, 'host': {'type': 'tosca.capabilities.indigo.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}}, 'artifacts': {'os_users_role': {'file': 'indigo-dc.os_users', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/os/configure_users.yml', 'inputs': {'os_users': {'get_property': ['SELF', 'os_users']}}}}}}}",0
"{'tosca.nodes.indigo.ZabbixAgent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/zabbix.png'}, 'properties': {'zabbix_server': {'type': 'string', 'required': True}, 'zabbix_server_port': {'type': 'tosca.datatypes.network.PortDef', 'required': False, 'default': 10051}, 'zabbix_server_metadata': {'type': 'string', 'required': True}}, 'artifacts': {'zabbix_agent_role': {'file': 'indigo-dc.zabbix-agent,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/zabbix/zabbix_agent_install.yml', 'inputs': {'zabbix_server': {'get_property': ['SELF', 'zabbix_server']}, 'zabbix_server_port': {'get_property': ['SELF', 'zabbix_server_port']}, 'zabbix_server_metadata': {'get_property': ['SELF', 'zabbix_server_metadata']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyPortal': {'derived_from': 'tosca.nodes.WebServer', 'metadata': {'icon': '/images/galaxy.png'}, 'properties': {'admin_email': {'type': 'string', 'description': 'email of the admin user', 'default': 'admin@admin.com', 'required': False}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'user': {'type': 'string', 'description': 'username to launch the galaxy daemon', 'default': 'galaxy', 'required': False}, 'install_path': {'type': 'string', 'description': 'path to install the galaxy tool', 'default': '/home/galaxy/galaxy', 'required': False}, 'export_dir': {'type': 'string', 'description': 'path to store galaxy data', 'default': '/export', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version to install', 'default': 'master', 'required': False}, 'instance_description': {'type': 'string', 'description': 'galaxy instance description', 'default': 'INDIGO Galaxy test'}, 'instance_key_pub': {'type': 'string', 'description': 'galaxy instance ssh public key', 'default': 'your_ssh_public_key'}, 'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': False, 'default': 'galaxy-no-tools'}, 'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': False}}, 'requirements': [{'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_install.yml', 'inputs': {'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyPortalAndStorage': {'derived_from': 'tosca.nodes.indigo.GalaxyPortal', 'properties': {'storage_encryption': {'type': 'boolean', 'description': 'Enable storage encryption using Vault to store secrets and LUKS to encrypt', 'default': False, 'required': True}, 'vault_url': {'type': 'string', 'description': 'Hashicorp Vault server url', 'default': 'vault_url', 'required': False}, 'vault_wrapping_token': {'type': 'string', 'description': 'Vault Wrapping token to write secret', 'default': 'not_a_valid_token', 'required': False}, 'vault_secret_path': {'type': 'string', 'description': 'Vault path to store secret', 'default': 'path_to_secret', 'required': False}, 'vault_secret_key': {'type': 'string', 'description': 'Vault secret key name', 'default': 'secret_key_name', 'required': False}, 'wn_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the WNs', 'required': False, 'default': []}}, 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_os_install.yml', 'inputs': {'storage_encryption': {'get_property': ['SELF', 'storage_encryption']}, 'vault_url': {'get_property': ['SELF', 'vault_url']}, 'vault_wrapping_token': {'get_property': ['SELF', 'vault_wrapping_token']}, 'vault_secret_path': {'get_property': ['SELF', 'vault_secret_path']}, 'vault_secret_key': {'get_property': ['SELF', 'vault_secret_key']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyPortalFastConfig': {'derived_from': 'tosca.nodes.indigo.GalaxyPortalAndStorage', 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role_fastconfig': {'file': 'indigo-dc.galaxycloud-fastconfig,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_fastconfig.yml', 'inputs': {'storage_encryption': {'get_property': ['SELF', 'storage_encryption']}, 'vault_url': {'get_property': ['SELF', 'vault_url']}, 'vault_wrapping_token': {'get_property': ['SELF', 'vault_wrapping_token']}, 'vault_secret_path': {'get_property': ['SELF', 'vault_secret_path']}, 'vault_secret_key': {'get_property': ['SELF', 'vault_secret_key']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyWN': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/galaxy.png'}, 'properties': {'front_end_ip': {'type': 'string', 'description': 'IP of the Front-End node', 'required': True}, 'export_dir': {'type': 'string', 'description': 'path to store galaxy data', 'default': '/export', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure.yml', 'inputs': {'galaxy_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyWNCVMFS': {'derived_from': 'tosca.nodes.indigo.GalaxyWN', 'properties': {'storage_encryption': {'type': 'boolean', 'description': 'Install api when storage is encrypted', 'default': False}, 'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': True}, 'refdata_cvmfs_configuration': {'type': 'string', 'description': 'Configure cvmfs or load preconfigured repository', 'default': 'cvmfs_preconfigured', 'required': False}, 'refdata_cvmfs_repository_name': {'type': 'string', 'description': 'CernVM-FS repository name', 'default': 'elixir-italy.galaxy.refdata', 'required': False}, 'refdata_cvmfs_server_url': {'type': 'string', 'description': 'CernVM-FS server, replica or stratum-zero', 'default': 'server_url', 'required': False}, 'refdata_cvmfs_key_file': {'type': 'string', 'description': 'CernVM-FS public key', 'default': 'not_a_key', 'required': False}, 'refdata_cvmfs_proxy_url': {'type': 'string', 'description': 'CernVM-FS proxy url', 'default': 'DIRECT', 'required': False}, 'refdata_cvmfs_proxy_port': {'type': 'integer', 'description': 'CernVM-FS proxy port', 'default': 80, 'required': False}, 'refdata_dir': {'type': 'string', 'description': 'path to store galaxy reference data', 'default': '/cvmfs', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'os_role': {'file': 'indigo-dc.galaxycloud-os,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'cvmfs_role': {'file': 'indigo-dc.cvmfs-client,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure_cvmfs.yml', 'inputs': {'galaxy_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'storage_encryption': {'get_property': ['SELF', 'storage_encryption']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}, 'refdata_cvmfs_configuration': {'get_property': ['SELF', 'refdata_cvmfs_configuration']}, 'refdata_cvmfs_repository_name': {'get_property': ['SELF', 'refdata_cvmfs_repository_name']}, 'refdata_cvmfs_server_url': {'get_property': ['SELF', 'refdata_cvmfs_server_url']}, 'refdata_cvmfs_key_file': {'get_property': ['SELF', 'refdata_cvmfs_key_file']}, 'refdata_cvmfs_proxy_url': {'get_property': ['SELF', 'refdata_cvmfs_proxy_url']}, 'refdata_cvmfs_proxy_port': {'get_property': ['SELF', 'refdata_cvmfs_proxy_port']}, 'refdata_dir': {'get_property': ['SELF', 'refdata_dir']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyShedTool': {'derived_from': 'tosca.nodes.WebApplication', 'metadata': {'icon': '/images/galaxy-toolshed.png'}, 'properties': {'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version installed', 'default': 'master', 'required': False}, 'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxycloud-tools,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_tools_configure.yml', 'inputs': {'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_admin_api_key': {'get_property': ['HOST', 'admin_api_key']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyReferenceData': {'derived_from': 'tosca.nodes.WebApplication', 'metadata': {'icon': '/images/galaxydata.png'}, 'properties': {'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': True}, 'refdata_cvmfs_configuration': {'type': 'string', 'description': 'Configure cvmfs or load preconfigured repository', 'default': 'cvmfs_preconfigured', 'required': False}, 'refdata_cvmfs_repository_name': {'type': 'string', 'description': 'CernVM-FS repository name', 'default': 'elixir-italy.galaxy.refdata', 'required': False}, 'refdata_cvmfs_server_url': {'type': 'string', 'description': 'CernVM-FS server, replica or stratum-zero', 'default': 'server_url', 'required': False}, 'refdata_cvmfs_key_file': {'type': 'string', 'description': 'CernVM-FS public key', 'default': 'not_a_key', 'required': False}, 'refdata_cvmfs_proxy_url': {'type': 'string', 'description': 'CernVM-FS proxy url', 'default': 'DIRECT', 'required': False}, 'refdata_cvmfs_proxy_port': {'type': 'integer', 'description': 'CernVM-FS proxy port', 'default': 80, 'required': False}, 'refdata_dir': {'type': 'string', 'description': 'path to store galaxy reference data', 'default': '/cvmfs', 'required': False}, 'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'cvmfs_role': {'file': 'indigo-dc.cvmfs-client,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud-refdata,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_redfata_configure.yml', 'inputs': {'get_refdata': {'get_property': ['SELF', 'reference_data']}, 'refdata_cvmfs_configuration': {'get_property': ['SELF', 'refdata_cvmfs_configuration']}, 'refdata_cvmfs_repository_name': {'get_property': ['SELF', 'refdata_cvmfs_repository_name']}, 'refdata_cvmfs_server_url': {'get_property': ['SELF', 'refdata_cvmfs_server_url']}, 'refdata_cvmfs_key_file': {'get_property': ['SELF', 'refdata_cvmfs_key_file']}, 'refdata_cvmfs_proxy_url': {'get_property': ['SELF', 'refdata_cvmfs_proxy_url']}, 'refdata_cvmfs_proxy_port': {'get_property': ['SELF', 'refdata_cvmfs_proxy_port']}, 'refdata_dir': {'get_property': ['SELF', 'refdata_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyPortalDocker': {'derived_from': 'tosca.nodes.indigo.GalaxyPortalAndStorage', 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'docker_role': {'file': 'indigo-dc.docker,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role_docker': {'file': 'indigo-dc.galaxycloud_docker,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_docker.yml', 'inputs': {'storage_encryption': {'get_property': ['SELF', 'storage_encryption']}, 'vault_url': {'get_property': ['SELF', 'vault_url']}, 'vault_wrapping_token': {'get_property': ['SELF', 'vault_wrapping_token']}, 'vault_secret_path': {'get_property': ['SELF', 'vault_secret_path']}, 'vault_secret_key': {'get_property': ['SELF', 'vault_secret_key']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",0
"{'tosca.nodes.indigo.TeskAPI': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'auth_mode': {'type': 'string', 'description': 'Authentication mode', 'default': 'noauth', 'required': False}, 'mount_ftp': {'description': 'Flag used to specify that the ftp has to be enabled', 'type': 'boolean', 'required': False, 'default': True}, 'teskmaster_ftp_url': {'type': 'string', 'description': 'ftp url', 'default': 'ftp://ftp_url', 'required': False}, 'teskmaster_ftp_user': {'type': 'string', 'description': 'ftp username', 'default': 'user', 'required': False}, 'teskmaster_ftp_password': {'type': 'string', 'description': 'ftp password', 'default': 'password', 'required': False}}, 'requirements': [{'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.tesk,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ga4gh_cloud_apis/tesk_install.yml', 'inputs': {'auth_mode': {'get_property': ['SELF', 'auth_mode']}, 'mount_ftp': {'get_property': ['SELF', 'mount_ftp']}, 'teskmaster_ftp_url': {'get_property': ['SELF', 'teskmaster_ftp_url']}, 'teskmaster_ftp_user': {'get_property': ['SELF', 'teskmaster_ftp_user']}, 'teskmaster_ftp_password': {'get_property': ['SELF', 'teskmaster_ftp_password']}}}}}}}",0
"{'tosca.nodes.indigo.ElasticCluster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/ec3.png'}, 'properties': {'secret_token': {'type': 'string', 'description': 'Token to access CLUES web interface', 'default': 'not_very_secret_token', 'required': False}, 'deployment_id': {'type': 'string', 'description': 'ID of the deployment of this elastic cluster in the orchestrator', 'required': False, 'default': ''}, 'orchestrator_url': {'type': 'string', 'description': 'URL of the orchestrator', 'required': False, 'default': 'http://orchestrator01-indigo.cloud.ba.infn.it:8080/orchestrator'}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': False, 'default': 'iam_access_token'}, 'iam_clues_client_id': {'type': 'string', 'description': 'INDIGO IAM client id to be used by CLUES', 'required': False, 'default': 'iam_clues_client_id'}, 'iam_clues_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret to be used by CLUES', 'required': False, 'default': 'iam_clues_client_secret'}, 'marathon_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the marathon endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password', 'token_type': 'password'}, 'required': False}, 'chronos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the chronos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password', 'token_type': 'password'}, 'required': False}, 'mesos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the mesos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password', 'token_type': 'password'}, 'required': False}, 'hybrid': {'type': 'boolean', 'description': 'Flag to specify that this ElasticCluster will work in a hybrid environment', 'default': False, 'required': False}, 'powermanager_plugin': {'type': 'string', 'description': 'Plugin that will manage the VMs (indigo_orchestrator or im)', 'default': 'indigo_orchestrator', 'required': False}, 'im_auth': {'type': 'string', 'description': 'IM auth data', 'default': '', 'required': False}}, 'artifacts': {'clues_role': {'file': 'indigo-dc.clues,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'im_role': {'file': 'grycap.im,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ec3/ec3_install.yml', 'inputs': {'clues_secret_token': {'get_property': ['SELF', 'secret_token']}, 'clues_queue_system': {'get_property': ['SELF', 'lrms', 'type']}, 'ec3_max_instances': {'get_property': ['SELF', 'wn', 'max_instances']}, 'ec3_deployment_id': {'get_property': ['SELF', 'deployment_id']}, 'orchestrator_url': {'get_property': ['SELF', 'orchestrator_url']}, 'ec3_iam_access_token': {'get_property': ['SELF', 'iam_access_token']}, 'ec3_iam_clues_client_id': {'get_property': ['SELF', 'iam_clues_client_id']}, 'ec3_iam_clues_client_secret': {'get_property': ['SELF', 'iam_clues_client_secret']}, 'clues_marathon_credentials': {'get_property': ['SELF', 'marathon_credentials']}, 'clues_chronos_credentials': {'get_property': ['SELF', 'chronos_credentials']}, 'clues_mesos_credentials': {'get_property': ['SELF', 'mesos_credentials']}, 'clues_powermanager_plugin': {'get_property': ['SELF', 'powermanager_plugin']}, 'im_auth_data': {'get_property': ['SELF', 'im_auth']}}}}}, 'requirements': [{'wn': {'capability': 'tosca.capabilities.Scalable', 'node': 'tosca.nodes.indigo.LRMS.WorkerNode', 'relationship': 'tosca.relationships.indigo.Manages'}}, {'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.WorkerNode': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'front_end_ip': {'type': 'string', 'description': 'IP of the Front-End node', 'required': True}, 'hybrid': {'type': 'boolean', 'description': 'Flag to specify that this WorkerNode will work in a hybrid environment', 'default': False, 'required': False}, 'public_front_end_ip': {'type': 'string', 'description': 'Public IP of the Front-End node', 'required': False, 'default': ''}}, 'capabilities': {'wn': {'type': 'tosca.capabilities.Scalable', 'valid_source_types': ['tosca.nodes.indigo.ElasticCluster']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_wn_install.yml', 'inputs': {'torque_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'metadata': {'icon': '/images/slurm.png'}, 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_wn_install.yml', 'inputs': {'slurm_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'slurm_public_front_end_ip': {'get_property': ['SELF', 'public_front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.SlurmGalaxy': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode.Slurm', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm,cons_res', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_wn_install.yml', 'inputs': {'slurm_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'slurm_public_front_end_ip': {'get_property': ['SELF', 'public_front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'wn_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the WNs', 'required': False, 'default': []}, 'hybrid': {'type': 'boolean', 'description': 'Flag to specify that this FrontEnd will work in a hybrid environment', 'default': False, 'required': False}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Torque'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_fe_install.yml', 'inputs': {'torque_wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'metadata': {'icon': '/images/slurm.png'}, 'properties': {'wn_num': {'type': 'integer', 'description': 'Number of WNs', 'required': False, 'default': -1}}, 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Slurm'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_fe_install.yml', 'inputs': {'wn_num': {'get_property': ['SELF', 'wn_num']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.SlurmGalaxy': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd.Slurm', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm,cons_res', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Slurm'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_fe_install.yml', 'inputs': {'wn_num': {'get_property': ['SELF', 'wn_num']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Local': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Local'}}}}",0
"{'tosca.nodes.indigo.Container.Runtime.Docker': {'derived_from': 'tosca.nodes.Root', 'metadata': {'icon': '/images/docker.png'}, 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'properties': {'command': {'required': False, 'type': 'string'}, 'uris': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'environment_variables': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'constraints': {'required': False, 'type': 'list', 'entry_schema': {'type': 'list', 'entry_schema': {'type': 'string'}}}, 'secrets': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'labels': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'privileged': {'required': False, 'type': 'boolean', 'default': False}, 'force_pull_image': {'required': False, 'type': 'boolean', 'default': False}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker.Chronos': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'metadata': {'icon': '/images/chronos.jpg'}, 'properties': {'schedule': {'required': False, 'type': 'string'}, 'command': {'required': True, 'type': 'string'}, 'description': {'required': False, 'type': 'string'}, 'retries': {'required': False, 'type': 'integer'}, 'epsilon': {'required': False, 'type': 'string', 'default': 'PT10S'}, 'privileged': {'required': False, 'type': 'boolean', 'default': True}, 'force_pull_image': {'required': False, 'type': 'boolean', 'default': True}}, 'capabilities': {'parent_job': {'type': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'valid_source_types': ['tosca.nodes.indigo.Container.Application.Docker.Chronos'], 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'parent_job': {'capability': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'node': 'tosca.nodes.indigo.Container.Application.Docker.Chronos', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.indigo.DariahRepository': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/dariah.png'}, 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'cache_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'cache_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'cache_image': {'type': 'string', 'required': False, 'default': 'redis'}, 'db_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'db_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'db_image': {'type': 'string', 'required': False, 'default': 'postgres'}, 'es_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'es_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'es_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:elasticsearch'}, 'mq_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'mq_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'mq_image': {'type': 'string', 'required': False, 'default': 'rabbitmq:3-management'}, 'statsd_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'statsd_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'statsd_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:statsd'}, 'web_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'web_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'web_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}, 'worker_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'worker_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'worker_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}}, 'artifacts': {'dariahrepo_role': {'file': 'indigo-dc.dariahrepo,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/dariahrepo-setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'dariahrepo_app_cache_cpus': {'get_property': ['SELF', 'cache_cpus']}, 'dariahrepo_app_cache_mem': {'get_property': ['SELF', 'cache_mem']}, 'dariahrepo_app_cache_image': {'get_property': ['SELF', 'cache_image']}, 'dariahrepo_app_db_cpus': {'get_property': ['SELF', 'db_cpus']}, 'dariahrepo_app_db_mem': {'get_property': ['SELF', 'db_mem']}, 'dariahrepo_app_db_image': {'get_property': ['SELF', 'db_image']}, 'dariahrepo_app_es_cpus': {'get_property': ['SELF', 'es_cpus']}, 'dariahrepo_app_es_mem': {'get_property': ['SELF', 'es_mem']}, 'dariahrepo_app_es_image': {'get_property': ['SELF', 'es_image']}, 'dariahrepo_app_mq_cpus': {'get_property': ['SELF', 'mq_cpus']}, 'dariahrepo_app_mq_mem': {'get_property': ['SELF', 'mq_mem']}, 'dariahrepo_app_mq_image': {'get_property': ['SELF', 'mq_image']}, 'dariahrepo_app_statsd_cpus': {'get_property': ['SELF', 'statsd_cpus']}, 'dariahrepo_app_statsd_mem': {'get_property': ['SELF', 'statsd_mem']}, 'dariahrepo_app_statsd_image': {'get_property': ['SELF', 'statsd_image']}, 'dariahrepo_app_web_cpus': {'get_property': ['SELF', 'web_cpus']}, 'dariahrepo_app_web_mem': {'get_property': ['SELF', 'web_mem']}, 'dariahrepo_app_web_image': {'get_property': ['SELF', 'web_image']}, 'dariahrepo_app_worker_cpus': {'get_property': ['SELF', 'worker_cpus']}, 'dariahrepo_app_worker_mem': {'get_property': ['SELF', 'worker_mem']}, 'dariahrepo_app_worker_image': {'get_property': ['SELF', 'worker_image']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.TensorflowOnMesos': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/tensorflow.png'}, 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'marathon_username': {'type': 'string', 'default': 'admin', 'required': False}, 'marathon_protocol': {'type': 'string', 'required': False, 'default': 'https'}, 'marathon_host': {'type': 'string', 'required': False, 'default': 'localhost'}, 'marathon_port': {'required': False, 'type': 'integer', 'default': 8443}, 'tensorflow_image': {'required': False, 'type': 'string', 'default': 'tensorflow/tensorflow:latest-gpu'}, 'tensorflow_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'tensorflow_gpus': {'type': 'integer', 'required': False, 'default': 1}, 'tensorflow_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'tensorflow_port': {'type': 'integer', 'required': False, 'default': 10001}, 'tensorflow_password': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/start_tensorflow.yml', 'inputs': {'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'marathon_protocol': {'get_property': ['SELF', 'marathon_protocol']}, 'marathon_host': {'get_property': ['SELF', 'marathon_host']}, 'marathon_port': {'get_property': ['SELF', 'marathon_port']}, 'marathon_tensorflow_image': {'get_property': ['SELF', 'tensorflow_image']}, 'marathon_tensorflow_cpus': {'get_property': ['SELF', 'tensorflow_cpus']}, 'marathon_tensorflow_gpus': {'get_property': ['SELF', 'tensorflow_gpus']}, 'marathon_tensorflow_mem': {'get_property': ['SELF', 'tensorflow_mem']}, 'marathon_tensorflow_password': {'get_property': ['SELF', 'tensorflow_password']}, 'marathon_tensorflow_port': {'get_property': ['SELF', 'tensorflow_port']}}}}}}}",unknown
"{'tosca.nodes.indigo.Container.Application.Docker.Marathon': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'metadata': {'icon': '/images/marathon.png'}, 'attributes': {'load_balancer_ips': {'type': 'list', 'entry_schema': 'string'}}, 'properties': {'force_pull_image': {'required': False, 'type': 'boolean', 'default': True}, 'enable_https': {'required': False, 'type': 'boolean', 'default': False}}, 'artifacts': {'image': {'file': '', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'metadata': {'icon': '/images/mesos.png'}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Mesos'}, 'host': {'type': 'tosca.capabilities.indigo.MesosMaster'}}, 'properties': {'mesos_masters_list': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False, 'default': ['127.0.0.1']}, 'mesos_authenticate_http': {'type': 'boolean', 'required': False, 'default': True}, 'mesos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'mesos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'enable_chronos': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'enable_consul_sd': {'type': 'boolean', 'required': False, 'default': True}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}, 'enable_gpu_support': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'mesos_authenticate_http': {'get_property': ['SELF', 'mesos_authenticate_http']}, 'mesos_username': {'get_property': ['SELF', 'mesos_username']}, 'mesos_password': {'get_property': ['SELF', 'mesos_password']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'enable_chronos': {'get_property': ['SELF', 'enable_chronos']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'enable_consul_sd': {'get_property': ['SELF', 'enable_consul_sd']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'marathon_enable_gpu_support': {'get_property': ['SELF', 'enable_gpu_support']}, 'mesos_enable_gpu_support': {'get_property': ['SELF', 'enable_gpu_support']}, 'chronos_enable_gpu_support': {'get_property': ['SELF', 'enable_gpu_support']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",unknown
{'tosca.nodes.indigo.MesosMaster': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd.Mesos'}},0
"{'tosca.nodes.indigo.CmsServices': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/cms.png'}, 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_squid_image': {'type': 'string', 'required': False, 'default': 'spiga/frontiersquidv1'}, 'cms_wn_image': {'type': 'string', 'default': 'cloudpg/dodas-cms:cern', 'required': False}, 'cms_proxycache_image': {'type': 'string', 'required': False, 'default': 'cloudpg/ttscache'}, 'cms_input_protocol': {'type': 'string', 'required': False, 'default': 'xrootd'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}, 'iam_client_id': {'type': 'string', 'description': 'INDIGO IAM client id', 'required': True}, 'iam_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret', 'required': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'cms_proxycache_token_manager': {'type': 'string', 'required': False, 'default': 'ZOOKEEPER'}, 'watts_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'iam_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-iam.cloud.cnaf.infn.it/'}, 'iam_credential_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it/api/v2/iam/credential'}, 'audience': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'oneclient_token': {'type': 'string', 'required': False, 'default': 'dummy'}, 'oneprovider_name': {'type': 'string', 'required': False, 'default': 'dummy'}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_services_start.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_iam_token': {'get_property': ['SELF', 'iam_access_token']}, 'cms_config_iam_client_id': {'get_property': ['SELF', 'iam_client_id']}, 'cms_config_iam_client_secret': {'get_property': ['SELF', 'iam_client_secret']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_squid_image': {'get_property': ['SELF', 'cms_squid_image']}, 'cms_config_wn_image': {'get_property': ['SELF', 'cms_wn_image']}, 'cms_config_proxycache_image': {'get_property': ['SELF', 'cms_proxycache_image']}, 'cms_input_protocol': {'get_property': ['SELF', 'cms_input_protocol']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'proxy_cache_manager': {'get_property': ['SELF', 'cms_proxycache_token_manager']}, 'proxy_tts': {'get_property': ['SELF', 'watts_endpoint']}, 'proxy_iam_endpoint': {'get_property': ['SELF', 'iam_endpoint']}, 'proxy_credential_endpoint': {'get_property': ['SELF', 'iam_credential_endpoint']}, 'proxy_audience': {'get_property': ['SELF', 'audience']}, 'oneclient_token': {'get_property': ['SELF', 'oneclient_token']}, 'oneprovider_name': {'get_property': ['SELF', 'oneprovider_name']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.WorkerNode.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'metadata': {'icon': '/images/mesos.png'}, 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.MesosSlave'}}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}, 'enable_consul_sd': {'type': 'boolean', 'required': False, 'default': True}, 'enable_gpu_support': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'enable_consul_sd': {'get_property': ['SELF', 'enable_consul_sd']}, 'mesos_enable_gpu_support': {'get_property': ['SELF', 'enable_gpu_support']}, 'front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'public_front_end_ip': {'get_property': ['SELF', 'public_front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",unknown
{'tosca.nodes.indigo.MesosSlave': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode.Mesos'}},0
"{'tosca.nodes.indigo.CmsOneclient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'oneclient_pkg': {'type': 'string', 'required': True}}, 'artifacts': {'oneclient_role': {'file': 'indigo-dc.oneclient,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/onedata/cms_oneclient.yml', 'inputs': {'oneclient_pkg': {'get_property': ['SELF', 'oneclient_pkg']}}}}}}}",0
"{'tosca.nodes.indigo.CmsWnConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/cms.png'}, 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_stageoutsite': {'type': 'string', 'required': True}, 'cms_stageoutprotocol': {'type': 'string', 'required': True}, 'cms_phedexnode': {'type': 'string', 'required': True}, 'cms_stageoutcommand': {'type': 'string', 'required': True}, 'cms_fallback_phedexnode': {'type': 'string', 'required': False, 'default': 'T2_IT_myt2'}, 'cms_fallback_lfn_prefix': {'type': 'string', 'required': False, 'default': 'srm://t2-srm-02.lnl.infn.it:8443/srm/managerv2?SFN=xxxxxxx'}, 'cms_fallback_command': {'type': 'string', 'required': False, 'default': 'gfal2'}, 'cms_input_path': {'type': 'string', 'required': False, 'default': 'my/oneclient/path'}, 'cms_input_protocol': {'type': 'string', 'required': False, 'default': 'xrootd'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'monitordb_ip': {'type': 'string', 'required': False}, 'elasticsearch_secret': {'type': 'string', 'required': False}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_wn_configure.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_stageoutsite': {'get_property': ['SELF', 'cms_stageoutsite']}, 'cms_config_stageoutprotocol': {'get_property': ['SELF', 'cms_stageoutprotocol']}, 'cms_config_stageoutcommand': {'get_property': ['SELF', 'cms_stageoutcommand']}, 'cms_config_phedexnode': {'get_property': ['SELF', 'cms_phedexnode']}, 'cms_config_fallback_phedexnode': {'get_property': ['SELF', 'cms_fallback_phedexnode']}, 'cms_config_fallback_lfn_prefix': {'get_property': ['SELF', 'cms_fallback_lfn_prefix']}, 'cms_config_fallback_command': {'get_property': ['SELF', 'cms_fallback_command']}, 'cms_input_path': {'get_property': ['SELF', 'cms_input_path']}, 'cms_input_protocol': {'get_property': ['SELF', 'cms_input_protocol']}, 'cms_config_elastic_secret': {'get_property': ['SELF', 'elasticsearch_secret']}, 'monitordb_ip': {'get_property': ['SELF', 'monitordb_ip']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosSlave', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.MesosLoadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/mesos.png'}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'enable_consul_sd': {'type': 'boolean', 'required': False, 'default': True}, 'hybrid': {'type': 'boolean', 'description': 'Flag to specify that this ElasticCluster will work in a hybrid environment', 'default': False, 'required': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_lb_role': {'file': 'indigo-dc.marathon-lb,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_lb_install.yml', 'inputs': {'enable_consul_sd': {'get_property': ['SELF', 'enable_consul_sd']}, 'master_ips': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'lb_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.SparkMesos': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/spark-mesos.png'}, 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'zookeeper_peers': {'type': 'string', 'required': True}, 'spark_mesos_deploy_app': {'type': 'string', 'constraints': [{'valid_values': ['apache-zeppelin', 'spark-dispatcher']}], 'required': False}, 'spark_hdfs_uri': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_auth_url': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_http_port': {'type': 'string', 'required': False, 'default': '8080'}, 'spark_swift_region': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_tenant': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_username': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_password': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_provider': {'type': 'string', 'required': False, 'default': 'Test'}, 'spark_cores_max': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_cores': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_cores': {'type': 'integer', 'required': False, 'default': '-1'}}, 'artifacts': {'spark_mesos_role': {'file': 'indigo-dc.spark-mesos,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/spark_mesos_setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_peers': {'get_property': ['SELF', 'zookeeper_peers']}, 'spark_mesos_deploy_app': {'get_property': ['SELF', 'spark_mesos_deploy_app']}, 'spark_hdfs_uri': {'get_property': ['SELF', 'spark_hdfs_uri']}, 'spark_swift_auth_url': {'get_property': ['SELF', 'spark_swift_auth_url']}, 'spark_mesos_swift_http_port': {'get_property': ['SELF', 'spark_swift_http_port']}, 'spark_mesos_swift_region': {'get_property': ['SELF', 'spark_swift_region']}, 'spark_mesos_swift_tenant': {'get_property': ['SELF', 'spark_swift_tenant']}, 'spark_mesos_swift_username': {'get_property': ['SELF', 'spark_swift_username']}, 'spark_mesos_swift_password': {'get_property': ['SELF', 'spark_swift_password']}, 'spark_mesos_swift_provider': {'get_property': ['SELF', 'spark_swift_provider']}, 'spark_mesos_cores_max': {'get_property': ['SELF', 'spark_cores_max']}, 'spark_mesos_executor_cores': {'get_property': ['SELF', 'spark_executor_cores']}, 'spark_mesos_executor_mem': {'get_property': ['SELF', 'spark_executor_mem']}, 'spark_mesos_driver_mem': {'get_property': ['SELF', 'spark_driver_mem']}, 'spark_mesos_driver_cores': {'get_property': ['SELF', 'spark_driver_cores']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.indigo.OneDataStorage': {'derived_from': 'tosca.nodes.BlockStorage', 'metadata': {'icon': '/images/onedata.png'}, 'properties': {'size': {'type': 'scalar-unit.size', 'required': False}, 'oneprovider_host': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'onezone_endpoint': {'type': 'string', 'required': False}, 'dataspace': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'credential': {'type': 'tosca.datatypes.Credential', 'required': True}}}}",0
"{'tosca.nodes.indigo.HadoopMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/hadoop-master.jpg'}, 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_master_install.yml', 'inputs': {'hadoop_master_ip': {'get_attribute': ['HOST', 'private_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.HadoopSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/hadoop-wn.jpg'}, 'properties': {'master_ip': {'required': True, 'type': 'string'}}, 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_wn_install.yml', 'inputs': {'hadoop_master_ip': {'get_property': ['SELF', 'master_ip']}}}}}}}",0
"{'tosca.nodes.indigo.HaddockApp': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/Haddock.png'}, 'properties': {'haddock_app_name': {'type': 'string', 'description': 'Haddocking application', 'required': True, 'constraints': [{'valid_values': ['disvis', 'powerfit']}]}}, 'artifacts': {'galaxy_role': {'file': 'indigo-dc.disvis-powerfit,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/haddock/haddock_install.yml', 'inputs': {'haddock_app_name': {'get_property': ['SELF', 'haddock_app_name']}}}}}}}",0
"{'tosca.nodes.indigo.Disvis': {'derived_from': 'tosca.nodes.indigo.HaddockApp', 'metadata': {'icon': '/images/disvis.png'}, 'properties': {'haddock_app_name': {'type': 'string', 'required': True, 'default': 'disvis', 'constraints': [{'equal': 'disvis'}]}}}}",0
"{'tosca.nodes.indigo.Powerfit': {'derived_from': 'tosca.nodes.indigo.HaddockApp', 'metadata': {'icon': '/images/powerfit.png'}, 'properties': {'haddock_app_name': {'type': 'string', 'required': True, 'default': 'powerfit', 'constraints': [{'equal': 'powerfit'}]}}}}",0
"{'tosca.nodes.indigo.Eubiosteo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.eubiosteo,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/eubiosteo/eubiosteo_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Ambertools': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/amber.jpg'}, 'artifacts': {'galaxy_role': {'file': 'indigo-dc.ambertools,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ambertools/ambertools_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Kepler': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/kepler.jpeg'}, 'artifacts': {'galaxy_role': {'file': 'indigo-dc.kepler,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/kepler/kepler_install.yml'}}}}}",0
"{'tosca.nodes.indigo.OphidiaServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/ophidia-server.png'}, 'properties': {'io_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the Ophidia IO nodes', 'required': False, 'default': []}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_server_install.yml', 'inputs': {'ophidia_io_ips': {'get_property': ['SELF', 'io_ips']}}}}}}}",0
"{'tosca.nodes.indigo.OphidiaIO': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/ophidia-io.png'}, 'properties': {'server_ip': {'type': 'string', 'description': 'IP of the OphidiaServer node', 'required': True}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_io_install.yml', 'inputs': {'ophidia_server_ip': {'get_property': ['SELF', 'server_ip']}}}}}}}",0
"{'tosca.nodes.indigo.Batch.Job': {'derived_from': 'tosca.nodes.Root', 'properties': {'executable': {'required': True, 'type': 'string', 'description': 'Name of the executable file'}, 'arguments': {'required': False, 'type': 'string', 'description': 'Arguments for the job executable'}, 'environment': {'type': 'map', 'entry_schema': {'type': 'string'}, 'description': 'A map of string representing environment settings'}}}}",0
"{'tosca.nodes.indigo.Qcg.Job': {'derived_from': 'tosca.nodes.indigo.Batch.Job', 'properties': {'schema': {'required': False, 'type': 'string', 'description': 'Job schema'}, 'note': {'required': False, 'type': 'string', 'description': ""User's note for the Job""}, 'arguments': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'list of arguments for the executable'}, 'directory': {'required': False, 'type': 'string', 'description': 'Work directory for the Job'}, 'stdout': {'required': False, 'type': 'string', 'description': 'file name to place standard output stream'}, 'stderr': {'required': False, 'type': 'string', 'description': 'file name to place standard error stream'}, 'std_outerr': {'required': False, 'type': 'string', 'description': 'file name to place standard output and error streams'}, 'stdin': {'required': False, 'type': 'string', 'description': 'file name with the standard input stream'}, 'total_cores': {'required': False, 'type': 'integer', 'description': 'total number of cores'}, 'total_nodes': {'required': False, 'type': 'integer', 'description': 'total number of nodes'}, 'cores_per_node': {'required': False, 'type': 'integer', 'description': 'number of cores per single node'}, 'memory_per_node': {'required': False, 'type': 'integer', 'description': 'available memory per single node'}, 'memory_per_core': {'required': False, 'type': 'integer', 'description': 'available memory per single core'}, 'gpus': {'required': False, 'type': 'integer', 'description': 'number of gpus'}, 'queue': {'required': False, 'type': 'string', 'description': 'queue/partition name'}, 'wall_clock': {'required': False, 'type': 'string', 'description': 'maximum total execution time'}, 'batch_system_options': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'batch system extra options'}}}}",0
"{'tosca.nodes.indigo.Grid.Job': {'derived_from': 'tosca.nodes.indigo.Batch.Job', 'properties': {'ce_urls': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of CREAM CE identifiers to launch the job'}, 'stdoutput': {'required': False, 'description': 'Name of the file to get the standard output stream of the user application', 'type': 'string'}, 'stderror': {'required': False, 'type': 'string', 'description': 'Name of the file to get the standard error stream of the user application'}, 'outputsandbox': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of output sandbox files'}, 'inputsandbox': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of input sandbox files (URL of files located in gridFTP servers)'}, 'virtualorganisation': {'required': False, 'type': 'string', 'description': 'Specify the VO of the user'}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'metadata': {'icon': '/images/kubernetesWN.png'}, 'artifacts': {'kube_role': {'file': 'indigo-dc.kubernetes,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/kubernetes/kube_wn_install.yml', 'inputs': {'kube_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'kube_public_front_end_ip': {'get_property': ['SELF', 'public_front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'metadata': {'icon': '/images/kubernetesFE.png'}, 'properties': {'admin_username': {'required': False, 'type': 'string', 'default': 'kubeuser'}, 'admin_token': {'required': False, 'type': 'string', 'default': 'some_insecure_token'}, 'install_kubeapps': {'required': False, 'type': 'boolean', 'default': False}, 'install_metrics': {'required': False, 'type': 'boolean', 'default': True}, 'install_nfs_client': {'required': False, 'type': 'boolean', 'default': True}, 'install_ingress': {'required': False, 'type': 'boolean', 'default': True}, 'version': {'required': False, 'type': 'string', 'default': '1.15.7'}}, 'artifacts': {'kube_role': {'file': 'indigo-dc.kubernetes,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Kubernetes'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/kubernetes/kube_fe_install.yml', 'inputs': {'kube_front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'kube_admin_username': {'get_property': ['SELF', 'admin_username']}, 'kube_admin_token': {'get_property': ['SELF', 'admin_token']}, 'kube_install_kubeapps': {'get_property': ['SELF', 'install_kubeapps']}, 'kube_install_metrics': {'get_property': ['SELF', 'install_metrics']}, 'kube_install_nfs_client': {'get_property': ['SELF', 'install_nfs_client']}, 'kube_install_ingress': {'get_property': ['SELF', 'install_ingress']}, 'kube_version': {'get_property': ['SELF', 'version']}}}}}}}",0
"{'tosca.nodes.indigo.JupyterHub': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/jupyterhub.png'}, 'properties': {'spawner': {'required': False, 'type': 'string', 'default': 'local', 'constraints': [{'valid_values': ['local', 'kubernetes']}]}, 'authenticator': {'required': False, 'type': 'string', 'default': 'local', 'constraints': [{'valid_values': ['local', 'dummy']}]}}, 'artifacts': {'kube_role': {'file': 'indigo-dc.jupyterhub,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/jupyter/jupyterhub_install.yml', 'inputs': {'jupyterhub_spawner': {'get_property': ['SELF', 'spawner']}, 'jupyterhub_authenticator': {'get_property': ['SELF', 'spawner']}}}}}}}",0
"{'tosca.nodes.indigo.OnedataSpace': {'derived_from': 'tosca.nodes.Root', 'attributes': {'selected_provider': {'type': 'string'}}, 'properties': {'token': {'required': False, 'type': 'string'}, 'space': {'required': True, 'type': 'string'}, 'oneproviders': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'onezone': {'required': False, 'type': 'string'}, 'smartScheduling': {'type': 'boolean', 'required': False, 'default': False}}}}",0
"{'tosca.nodes.indigo.OnedataServiceSpace': {'derived_from': 'tosca.nodes.Root', 'attributes': {'space': {'type': 'string'}, 'path': {'type': 'string'}, 'selected_provider': {'type': 'string'}, 'token': {'type': 'string'}, 'onezone': {'type': 'string'}}, 'properties': {'smartScheduling': {'type': 'boolean', 'required': False, 'default': False}}}}",0
"{'tosca.nodes.indigo.Dynafed': {'derived_from': 'tosca.nodes.Root', 'properties': {'files': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}}}",0
"{'tosca.nodes.indigo.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'type': {'type': 'string', 'required': False}}}}",0
"{'tosca.nodes.indigo.VR.CentralPoint': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'indigovr_subnet': {'type': 'string', 'description': 'Cluster network', 'required': False, 'default': '192.168.0.0'}}, 'artifacts': {'indigovr_role': {'file': 'indigo-dc.indigovr,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'central_point': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosca.nodes.indigo.VR.Client', 'tosca.nodes.indigo.VR.VRouter']}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/indigovr/central_point_install.yml', 'inputs': {'INDIGOVR_SUBNET': {'get_property': ['SELF', 'indigovr_subnet']}}}}}}}",0
"{'tosca.nodes.indigo.VR.Client': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'indigovr_role': {'file': 'indigo-dc.indigovr,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'requirements': [{'central_point': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.indigo.VR.CentralPoint', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/indigovr/standalone_install.yml', 'inputs': {'INDIGOVR_CENTRALPOINT_IP': {'get_attribute': ['SELF', 'central_point', 'ip_address']}}}}}}}",0
"{'tosca.nodes.indigo.VR.VRouter': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'indigovr_role': {'file': 'indigo-dc.indigovr,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'requirements': [{'central_point': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.indigo.VR.CentralPoint', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/indigovr/vrouter_install.yml', 'inputs': {'INDIGOVR_CENTRALPOINT_IP': {'get_attribute': ['SELF', 'central_point', 'ip_address']}}}}}}}",0
"{'tosca.nodes.indigo.DEEPaaScont': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/deep.png'}, 'properties': {'dockerhub_img': {'type': 'string', 'description': 'docker image from Docker Hub to deploy', 'required': True}, 'rclone_conf': {'type': 'string', 'description': 'rclone.conf location', 'required': False, 'default': '/srv/.rclone.conf'}, 'rclone_url': {'type': 'string', 'description': 'remote storage link to access via webdav', 'default': '', 'required': False}, 'rclone_vendor': {'type': 'string', 'description': 'rclone vendor', 'required': False, 'default': 'nextcloud'}, 'rclone_user': {'type': 'string', 'description': 'rclone user to access remote storage', 'required': False, 'default': ''}, 'rclone_password': {'type': 'string', 'description': 'rclone user password', 'required': False, 'default': ''}}, 'artifacts': {'docker_role': {'file': 'grycap.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/deepaas/deepaas_cont.yml', 'inputs': {'deepaas_dockerhub_img': {'get_property': ['SELF', 'dockerhub_img']}, 'deepaas_rclone_conf': {'get_property': ['SELF', 'rclone_conf']}, 'deepaas_rclone_type': 'webdav', 'deepaas_rclone_url': {'get_property': ['SELF', 'rclone_url']}, 'deepaas_rclone_vendor': {'get_property': ['SELF', 'rclone_vendor']}, 'deepaas_rclone_user': {'get_property': ['SELF', 'rclone_user']}, 'deepaas_rclone_pass': {'get_property': ['SELF', 'rclone_password']}}}}}}}",0
"{'tosca.nodes.indigo.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'es_version': {'type': 'string', 'required': False, 'default': '7.4.1'}, 'bind_address': {'type': 'string', 'required': False, 'default': '0.0.0.0'}, 'discovery_type': {'type': 'string', 'required': False, 'default': 'single-node'}, 'enable_security': {'type': 'boolean', 'default': True, 'required': False}, 'elastic_password': {'type': 'string', 'required': False, 'default': 'changeme'}, 'kibana_system_password': {'type': 'string', 'required': False, 'default': 'changeme'}}, 'artifacts': {'es_role': {'file': 'elastic.elasticsearch,7.4.1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/add-ek/artifacts/master/elasticsearch_install.yml', 'inputs': {'es_version': {'get_property': ['SELF', 'es_version']}, 'bind_host': {'get_property': ['SELF', 'bind_address']}, 'discovery_type': {'get_property': ['SELF', 'discovery_type']}, 'enable_security': {'get_property': ['SELF', 'enable_security']}, 'elastic_password': {'get_property': ['SELF', 'elastic_password']}, 'kibana_system_password': {'get_property': ['SELF', 'kibana_system_password']}}}}}}}",0
"{'tosca.nodes.indigo.Kibana': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'kibana_version': {'type': 'string', 'required': False, 'default': '7.4.1'}, 'elasticsearch_url': {'type': 'string', 'required': False, 'default': 'http://localhost:9200'}, 'elasticsearch_username': {'type': 'string', 'required': False, 'default': 'kibana'}, 'elasticsearch_password': {'type': 'string', 'required': False, 'default': 'changeme'}}, 'artifacts': {'es_role': {'file': 'maricaantonacci.kibana,7.4.1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/add-ek/artifacts/master/kibana_install.yml', 'inputs': {'kibana_version': {'get_property': ['SELF', 'kibana_version']}, 'kibana_elasticsearch_url': {'get_property': ['SELF', 'elasticsearch_url']}, 'kibana_elasticsearch_username': {'get_property': ['SELF', 'elasticsearch_username']}, 'kibana_elasticsearch_password': {'get_property': ['SELF', 'elasticsearch_password']}}}}}}}",0
"{'tosca.nodes.indigo.GlusterFSVolume': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'size': {'type': 'scalar-unit.size', 'required': False}, 'wn_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the GlusteFS nodes (WNs)', 'required': False, 'default': []}, 'fe_ip': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'IP of the GlusteFS nodes (FE)', 'required': False, 'default': []}, 'brick_dir': {'type': 'string', 'description': 'Set the gluster brid dir', 'required': True, 'default': '/data'}, 'brick_name': {'type': 'string', 'description': 'Set the gluster brid name', 'required': False, 'default': 'brick_name'}, 'replicas': {'type': 'integer', 'description': 'Numner of replicas', 'required': False, 'default': 2}, 'options': {'type': 'map', 'entry_schema': {'type': 'string'}, 'description': 'A dictionary/hash with options/settings for the volume.', 'required': False, 'default': {}}}}}",0
{'LightBulb': {'requirements': [{'socket': 'Socket'}]}},0
"{'Fan': {'requirements': [{'socket': {'capability': 'SuperSocket', 'node': 'PowerPanel', 'relationship': 'SmartPlug', 'occurrences': [2, 'UNBOUNDED']}}]}}",0
"{'PowerPanel': {'properties': {'age': {'type': 'scalar-unit.time'}}, 'capabilities': {'main': 'Socket', 'aux': 'Socket', 'emergency': {'type': 'SuperSocket', 'occurrences': [2, 4]}}}}",0
"{'tosca.nodes.Root': {'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends.  This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance. See section “Node States” for allowed values.', 'default': 'initial'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.  Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",unknown
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'description': 'The optional credential that can be used to authenticate to the software component.', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.\n', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node.  Specific types of web applications such as Java, etc. could be derived from this type.\n', 'properties': {'context_root': {'type': 'string', 'required': False, 'description': 'The web application’s context root which designates the application’s URL path within the web server it is hosted on.'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database', 'required': True}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data', 'required': False}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'required': True}, 'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not\n  available.\n- If volume_id is provided, size is ignored.  Resize of\n  existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.\n', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application’s traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).\n', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}]}}",0
"{'Asterisk': {'capabilities': {'metadata': 'k8s:Metadata', 'deployment': 'k8s:Deployment', 'udp': 'k8s:LoadBalancer', 'connection': 'ns:Connectable'}, 'requirements': [{'data-plane': {'capability': 'ns:Connectable', 'node': 'ns:NetworkPlane'}}], 'interfaces': {'normal': {'type': 'k8s:ContainerCommand'}}}}",0
{'燈泡': {'requirements': [{'插座': '插座'}]}},0
"{'電源面板': {'properties': {'年齡': {'type': 'scalar-unit.time'}}, 'capabilities': {'主要': '插座'}}}",0
"{'Application': {'derived_from': 'tosca:WebServer', 'properties': {'url': {'type': 'string'}}}}",0
"{'SuperLoadBalancer': {'derived_from': 'tosca:LoadBalancer', 'properties': {'version': {'type': 'version', 'required': False}}, 'attributes': {'admin_state': {'type': 'string'}, 'db_state': {'type': 'string'}}, 'requirements': [{'admin_host': {'capability': 'tosca:Compute', 'node': 'tosca:Compute', 'relationship': 'tosca:HostedOn'}}, {'db_host': {'capability': 'tosca:Compute', 'node': 'tosca:Compute', 'relationship': 'tosca:HostedOn'}}]}}",0
{'NginX': {'derived_from': 'tosca:WebServer'}},0
"{'Service': {'description': 'Represents a collection of workloads (pods and controllers) and resources that all use the same selector.', 'capabilities': {'metadata': 'Metadata', 'service': 'Service', 'deployment': 'Deployment'}, 'requirements': [{'route': {'capability': 'Service', 'relationship': 'Route', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
{'Machine': {'properties': {'cpu': {'type': 'CPU'}}}},0
"{'Server': {'derived_from': 'tosca:Compute', 'description': 'A really good server for our application.\nOn a scale of 1 to 10, this is an ""11"" server. That\'s how good it is.', 'properties': {'cost': {'type': 'float', 'description': 'Cost in US dollars'}}}}",unknown
"{'SuperServer': {'derived_from': 'Server', 'properties': {'memory_configurations': {'description': 'Tiers of memory', 'type': 'map', 'entry_schema': {'type': 'RAMSize', 'description': 'Soldered RAM size'}, 'default': {'low': '1 gib', 'mid': '4 gib', 'hi': '16 gib'}}}}}",unknown
"{'NetworkPlane': {'properties': {'annotations': {'type': 'map', 'entry_schema': 'string', 'required': False}}, 'capabilities': {'connection': 'Connectable'}}}",0
"{'NetworkFunction': {'properties': {'annotations': {'type': 'map', 'entry_schema': 'string', 'required': False}}, 'capabilities': {'deployment': 'Deployable'}, 'requirements': [{'connection': {'capability': 'Connectable', 'relationship': 'Connection'}}]}}",0
"{'Router': {'derived_from': 'NetworkFunction', 'capabilities': {'route': 'Routable'}}}",0
"{'NetworkAttachmentDefinition': {'metadata': {'turandot.generateNames': 'false'}, 'capabilities': {'metadata': 'k8s:Metadata', 'network-attachment-definition': 'k8s:BridgeNetworkAttachmentDefinition'}}}",0
"{'tosca.nodes.Database.MySQL': {'description': 'The TOSCA Database.MySQL node type is a non-normative type that represents a logical database that can be managed and hosted by a TOSCA MySQL DBMS node.', 'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': {'node': 'tosca.nodes.DBMS.MySQL'}}]}}",0
"{'tosca.nodes.DBMS.MySQL': {'description': 'The TOSCA DBMS node type is a non-normative type that represents MySQL Database Management System software.', 'derived_from': 'tosca.nodes.DBMS', 'properties': {'port': {'description': 'The default MySQL server port.', 'default': 3306}, 'root_password': {'required': True}}, 'capabilities': {'host': {'valid_source_types': ['tosca.nodes.Database.MySQL']}}}}",0
"{'tosca.nodes.WebServer.Apache': {'description': 'The TOSCA WebServer.Apache node type is a non-normative type that represents Apache Web Server software.', 'derived_from': 'tosca.nodes.WebServer'}}",0
"{'tosca.nodes.WebApplication.WordPress': {'description': 'The TOSCA WebApplication.WordPress node type is a non-normative type that represents the WordPress web application.', 'derived_from': 'tosca.nodes.WebApplication', 'properties': {'admin_user': {'description': 'The user account name for WordPress administration.\n', 'type': 'string'}, 'admin_password': {'description': 'The password for the WordPress admin user account.\n', 'type': 'string'}, 'db_host': {'description': 'The logical name of the server hosting the WordPress database.\n', 'type': 'string'}}, 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.WebServer.Nodejs': {'description': 'The TOSCA WebServer.NodeJS node type is a non-normative type that represents NodeJS Web Server software.', 'derived_from': 'tosca.nodes.WebServer', 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'Location of the the desired implementation in the Github repository.', 'default': 'https://github.com/mmm/testnode.git'}}, 'interfaces': {'Standard': {'inputs': {'github_url': {'type': 'string'}}}}}}",0
"{'tosca.nodes.Container.Runtime.Docker': {'description': 'The TOSCA Container.Docker Runtime node represents a Docker runtime environment\n', 'derived_from': 'tosca.nodes.Container.Runtime', 'capabilities': {'host': {'type': 'tosca.capabilities.Container.Docker'}}}}",0
"{'tosca.nodes.Container.Application.Docker': {'description': 'The TOSCA Container.Application.Docker node type is a non-normative type that represents application software packaged to run in a Docker container.', 'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.Container.Runtime.Docker'}}]}}",0
"{'nova.Server': {'metadata': {'heat_name': 'OS::Nova::Server'}, 'properties': {'admin_pass': {'description': 'The administrator password for the server.', 'type': 'string', 'required': False}, 'availability_zone': {'description': 'Name of the availability zone for server placement.', 'type': 'string', 'required': False}, 'block_device_mapping': {'description': 'Block device mappings for this server.', 'type': 'list', 'entry_schema': 'nova.Server.BlockDevice', 'required': False}, 'block_device_mapping_v2': {'description': 'Block device mappings v2 for this server.', 'type': 'list', 'entry_schema': 'nova.Server.BlockDevice2', 'required': False}, 'config_drive': {'description': 'If True, enable config drive on the server.', 'type': 'boolean', 'required': False}, 'deployment_swift_data': {'description': 'Swift container and object to use for storing deployment data for the server resource. The parameter is a map value with the keys ""container"" and ""object"", and the values are the corresponding container and object names. The software_config_transport parameter must be set to POLL_TEMP_URL for swift to be used. If not specified, and software_config_transport is set to POLL_TEMP_URL, a container will be automatically created from the resource name, and the object name will be a generated uuid.', 'type': 'map', 'entry_schema': 'nova.Server.SwiftData', 'required': False}, 'diskConfig': {'description': 'Control how the disk is partitioned when the server is created.', 'type': 'string', 'constraints': [{'valid_values': ['AUTO', 'MANUAL']}], 'required': False}, 'flavor': {'description': 'The ID or name of the flavor to boot onto.', 'type': 'nova.Flavor'}, 'flavor_update_policy': {'description': 'Policy on how to apply a flavor update; either by requesting a server resize or by replacing the entire server.', 'type': 'string', 'default': 'RESIZE', 'constraints': [{'valid_values': ['RESIZE', 'REPLACE']}], 'required': False}, 'image': {'description': 'The ID or name of the image to boot with.', 'type': 'glance.Image', 'required': False}, 'image_update_policy': {'description': 'Policy on how to apply an image-id update; either by requesting a server rebuild or by replacing the entire server.', 'type': 'string', 'default': 'REBUILD', 'constraints': [{'valid_values': ['REBUILD', 'REPLACE', 'REBUILD_PRESERVE_EPHEMERAL']}], 'required': False}, 'key_name': {'description': 'Name of keypair to inject into the server.', 'type': 'nova.Keypair', 'required': False}, 'metadata': {'description': 'Arbitrary key/value metadata to store for this server. Both keys and values must be 255 characters or less. Non-string values will be serialized to JSON (and the serialized string must be 255 characters or less).', 'type': 'map', 'entry_schema': 'string', 'required': False}, 'name': {'description': 'Server name.', 'type': 'string', 'required': False}, 'networks': {'description': 'An ordered list of nics to be added to this server, with information about connected networks, fixed ips, port etc.', 'type': 'list', 'entry_schema': 'nova.Server.Network', 'required': False}, 'personality': {'description': 'A map of files to create/overwrite on the server upon boot. Keys are file names and values are the file contents.', 'type': 'map', 'entry_schema': 'string', 'required': False}, 'reservation_id': {'description': 'A UUID for the set of servers being requested.', 'type': 'string', 'required': False}, 'scheduler_hints': {'description': 'Arbitrary key-value pairs specified by the client to help boot a server.', 'type': 'map', 'entry_schema': 'string', 'required': False}, 'security_groups': {'description': 'List of security group names or IDs. Cannot be used if neutron ports are associated with this server; assign security groups to the ports instead.', 'type': 'list', 'entry_schema': 'string', 'required': False}, 'software_config_transport': {'description': 'How the server should receive the metadata required for software configuration. POLL_SERVER_CFN will allow calls to the cfn API action DescribeStackResource authenticated with the provided keypair. POLL_SERVER_HEAT will allow calls to the Heat API resource-show using the provided keystone credentials. POLL_TEMP_URL will create and populate a Swift TempURL with metadata for polling. ZAQAR_MESSAGE will create a dedicated zaqar queue and post the metadata for polling.', 'type': 'string', 'default': 'POLL_SERVER_CFN', 'constraints': [{'valid_values': ['POLL_SERVER_CFN', 'POLL_SERVER_HEAT', 'POLL_TEMP_URL', 'ZAQAR_MESSAGE']}], 'required': False}, 'tags': {'description': 'Server tags.', 'type': 'list', 'entry_schema': 'string', 'required': False}, 'user_data': {'description': 'User data script to be executed by cloud-init. Changes cause replacement of the resource by default, but can be ignored altogether by setting the ""user_data_update_policy"" property.', 'type': 'string', 'required': False}, 'user_data_format': {'description': 'How the user_data should be formatted for the server. For HEAT_CFNTOOLS, the user_data is bundled as part of the heat-cfntools cloud-init boot configuration data. For RAW the user_data is passed to Nova unmodified. For SOFTWARE_CONFIG user_data is bundled as part of the software config data, and metadata is derived from any associated SoftwareDeployment resources.', 'type': 'string', 'default': 'HEAT_CFNTOOLS', 'constraints': [{'valid_values': ['HEAT_CFNTOOLS', 'RAW', 'SOFTWARE_CONFIG']}], 'required': False}, 'user_data_update_policy': {'description': 'Policy on how to apply a user_data update; either by ignoring it or by replacing the entire server.', 'type': 'string', 'default': 'REPLACE', 'constraints': [{'valid_values': ['REPLACE', 'IGNORE']}], 'required': False}}, 'attributes': {'accessIPv4': {'description': 'The manually assigned alternative public IPv4 address of the server.', 'type': 'string'}, 'accessIPv6': {'description': 'The manually assigned alternative public IPv6 address of the server.', 'type': 'string'}, 'addresses': {'description': 'A dict of all network addresses with corresponding port_id. Each network will have two keys in dict, they are network name and network id. The port ID may be obtained through the following expression: ""{get_attribute: [<server>, addresses, <network name_or_id>, 0, port]}"".', 'type': 'string'}, 'console_urls': {'description': ""URLs of server's consoles. To get a specific console type, the requested type can be specified as parameter to the get_attribute function, e.g. get_attribute: [ <server>, console_urls, novnc ]. Currently supported types are novnc, xvpvnc, spice-html5, rdp-html5, serial and webmks."", 'type': 'string'}, 'instance_name': {'description': 'AWS compatible instance name.', 'type': 'string'}, 'name': {'description': 'Name of the server.', 'type': 'string'}, 'networks': {'description': 'A dict of assigned network addresses of the form: {""public"": [ip1, ip2...],\n ""private"": [ip3, ip4],\n ""public_uuid"": [ip1, ip2...],\n ""private_uuid"": [ip3, ip4]}.\nEach network will have two keys in dict, they are network name and network id.', 'type': 'string'}, 'os_collect_config': {'description': ""The os-collect-config configuration for the server's local agent to be configured to connect to Heat to retrieve deployment data."", 'type': 'string'}, 'show': {'description': 'Detailed information about resource.', 'type': 'string'}, 'tags': {'description': 'Tags from the server.', 'type': 'list', 'entry_schema': 'string'}}, 'capabilities': {'resource': {'type': 'Resource'}}, 'requirements': [{'dependency': {'capability': 'Resource', 'relationship': 'Depends', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'Backup': {'attributes': {'days': {'type': 'list', 'entry_schema': 'DayOfWeek'}, 'max_size': {'description': 'Max size', 'type': 'scalar-unit.size'}}}}",0
"{'Server': {'derived_from': 'tosca:Compute', 'interfaces': {'Maintenance': {'type': 'Maintenance'}, 'Standard': {'operations': {'create': {'inputs': {'retries': {'type': 'integer'}}}}}}, 'attributes': {'progress': {'type': 'string'}}}}",0
"{'BetterServer': {'derived_from': 'Server', 'interfaces': {'Standard': {'operations': {'create': {'inputs': {'retries': {'type': 'Retries'}}}}}}}}",0
"{'tosca.nodes.samples.basic.SampleSourceNode': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A sample node type that must be hosted on a compute node and is the source of the sample relationship.', 'properties': {'component_version': {'type': 'version', 'description': 'Sample definition and constraint to override the SoftwareComponent component_version property', 'default': 2, 'constraints': [{'equal': 2}]}}, 'requirements': [{'target': {'capability': 'tosca.capabilities.samples.basic.SampleEndpoint', 'relationship': 'tosca.relationships.samples.basic.SampleRelationship', 'description': 'Sample mandatory requirement on a single target node.', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/samplesourcenode-create.sh'}, 'start': 'scripts/samplesourcenode-start.sh', 'stop': 'scripts/samplesourcenode-stop.sh'}}}}",0
"{'tosca.nodes.samples.basic.SampleTargetNode': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A sample node type that must be hosted on a compute node and is the target of the sample relationship.', 'capabilities': {'sample_endpoint': {'type': 'tosca.capabilities.samples.basic.SampleEndpoint', 'description': 'A sample endpoint to connect the SampleSourceNode', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 80}}}, 'interfaces': {'Standard': {'create': 'scripts/sampletargetnode-create.sh', 'configure': 'scripts/sampletargetnode-configure.sh', 'start': 'scripts/sampletargetnode-start.sh', 'stop': 'scripts/sampletargetnode-stop.sh', 'delete': 'scripts/sampletargetnode-delete.sh'}}}}",0
"{'Server': {'derived_from': 'tosca:Compute', 'metadata': {'galactic.planet': 'Jupiter'}}}",0
"{'MyDB': {'derived_from': 'tosca:DBMS', 'interfaces': {'Backup': {'type': 'Backup'}}}}",0
"{'SuperCompute': {'derived_from': 'tosca:Compute', 'interfaces': {'backup': {'type': 'Backup'}}}}",0
"{'tosca.nodes.nfv.VDU.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.9.2'}, 'description': 'The TOSCA nfv.VDU.Compute node type represents the virtual compute part of a VDU entity which it mainly describes the deployment and operational behavior of a VNF component (VNFC), as defined by [ETSI NFV IFA011].', 'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'description': 'Human readable name of the VDU.', 'type': 'string', 'required': True}, 'description': {'description': 'Human readable description of the VDU.', 'type': 'string', 'required': True}, 'boot_order': {'description': 'The key indicates the boot index (lowest index defines highest boot priority). The Value references a descriptor from which a valid boot device is created e.g. VirtualStorageDescriptor from which a VirtualStorage instance is created. If no boot order is defined the default boot order defined in the VIM or NFVI shall be used.', 'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'nfvi_constraints': {'description': 'Describes constraints on the NFVI for the VNFC instance(s) created from this VDU. For example, aspects of a secure hosting environment for the VNFC instance that involve additional entities or processes. More software images can be attached to the virtualization container using virtual_storage.', 'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'configurable_properties': {'description': 'Describes the configurable properties of all VNFC instances based on this VDU.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.nfv.VnfcConfigurableProperties'}, 'required': True}}, 'attributes': {'private_address': {'type': 'string', 'status': 'deprecated'}, 'public_address': {'type': 'string', 'status': 'deprecated'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}, 'status': 'deprecated'}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}, 'status': 'deprecated'}}, 'capabilities': {'virtual_compute': {'description': 'Describes virtual compute resources capabilities.', 'type': 'tosca.capabilities.nfv.VirtualCompute'}, 'virtual_binding': {'description': 'Defines ability of VirtualBindable.', 'type': 'tosca.capabilities.nfv.VirtualBindable'}, 'monitoring_parameter': {'description': 'Monitoring parameter, which can be tracked for a VNFC based on this VDU. Examples include: memory-consumption, CPU-utilisation, bandwidth-consumption, VNFC downtime, etc.', 'type': 'tosca.capabilities.nfv.Metric'}}, 'artifacts': {'sw_image': {'description': 'Describes the software image which is directly loaded on the virtualization container realizing this virtual storage.', 'file': '', 'type': 'tosca.artifacts.nfv.SwImage'}}}}",unknown
"{'tosca.nodes.nfv.VDU.VirtualStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.9.3'}, 'description': 'The NFV VirtualStorage node type represents a virtual storage entity which it describes the deployment and operational behavior of a virtual storage resources, as defined by [ETSI NFV IFA011].', 'derived_from': 'tosca.nodes.Root', 'properties': {'type_of_storage': {'description': 'Type of virtualized storage resource.', 'type': 'string', 'required': True}, 'size_of_storage': {'description': 'Size of virtualized storage resource (in GB).', 'type': 'scalar-unit.size', 'required': True}, 'rdma_enabled': {'description': 'Indicate if the storage support RDMA.', 'type': 'boolean', 'required': False}}, 'artifacts': {'sw_image': {'description': 'Describes the software image which is directly loaded on the virtualization container realizing this virtual storage.', 'file': '', 'type': 'tosca.artifacts.nfv.SwImage'}}}}",0
"{'tosca.nodes.nfv.Cpd': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.9.4'}, 'description': 'The TOSCA nfv.Cpd node represents network connectivity to a compute resource or a VL as defined by [ETSI GS NFV-IFA 011]. This is an abstract type used as parent for the various Cpd types.', 'derived_from': 'tosca.nodes.Root', 'properties': {'layer_protocol': {'description': 'Identifies which protocol the connection point uses for connectivity purposes.', 'type': 'string', 'constraints': [{'valid_values': ['ethernet', 'mpls', 'odu2', 'ipv4', 'ipv6', 'pseudo_wire']}], 'required': False}, 'role': {'description': 'Identifies the role of the port in the context of the traffic flow patterns in the VNF or parent NS. For example a VNF with a tree flow pattern within the VNF will have legal cpRoles of ROOT and LEAF.', 'type': 'string', 'constraints': [{'valid_values': ['root', 'leaf']}], 'required': False}, 'description': {'description': 'Provides human-readable information on the purpose of the connection point (e.g. connection point for control plane traffic).', 'type': 'string', 'required': False}, 'address_data': {'description': 'Provides information on the addresses to be assigned to the connection point(s) instantiated from this Connection Point Descriptor.', 'type': 'list', 'entry_schema': {'type': 'tosca.datatypes.nfv.AddressData'}, 'required': False}}}}",unknown
"{'tosca.nodes.nfv.VduCpd': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.9.5'}, 'description': 'The TOSCA nfv.VduCpd node type represents a type of TOSCA Cpd node and describes network connectivity between a VNFC instance (based on this VDU) and an internal VL as defined by [ETSI GS NFV-IFA 011].', 'derived_from': 'tosca.nodes.nfv.Cpd', 'properties': {'bitrate_requirement': {'description': 'Bitrate requirement on this connection point.', 'type': 'integer', 'required': False}, 'virtual_network_interface_requirements': {'description': 'Specifies requirements on a virtual network interface realising the CPs instantiated from this CPD.', 'type': 'list', 'entry_schema': {'type': 'tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements'}, 'required': False}}, 'requirements': [{'virtual_binding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'tosca.nodes.nfv.VDU.Compute'}}]}}",0
"{'tosca.nodes.nfv.VnfVirtualLinkDesc': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.9.6'}, 'description': 'The TOSCA nfv.VnfVirtualLinkDesc node type represents a logical internal virtual link as defined by [ETSI GS NFV-IFA 011].', 'derived_from': 'tosca.nodes.Root', 'properties': {'connectivity_type': {'description': 'specifies the protocol exposed by the VL and the flow pattern supported by the VL.', 'type': 'tosca.datatypes.nfv.ConnectivityType', 'required': True}, 'description': {'description': 'Provides human-readable information on the purpose of the VL (e.g. control plane traffic).', 'type': 'string', 'required': False}, 'test_access': {'description': 'Test access facilities available on the VL (e.g. none, passive, monitoring, or active (intrusive) loopbacks at endpoints.', 'type': 'string', 'required': False}}}}",0
"{'Application': {'capabilities': {'metadata': 'k8s:Metadata', 'deployment': 'k8s:Deployment', 'web': 'k8s:LoadBalancer'}, 'interfaces': {'normal.1': {'type': 'k8s:ContainerCommand'}, 'normal.2': {'type': 'o11n:Scriptlet'}}}}",0
"{'tosca.nodes.Abstract.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': []}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Abstract.Compute', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.  Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.Abstract.Storage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Abstract.Storage node represents an abstract storage resource without any requirements on compute or network resources.', 'properties': {'name': {'type': 'string', 'description': 'The logical name (or ID) of the storage resource.'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested initial storage size (default unit is in Gigabytes).', 'default': '0 MB', 'constraints': [{'greater_or_equal': '0 MB'}]}}}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'properties': {'maxsize': {'type': 'scalar-unit.size', 'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'size': {'default': '1 MB', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.\n', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Container.Application']}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.EndPoint'}}]}}",0
"{'tosca.tests.nodes.MyType': {'derived_from': 'tosca.nodes.Root', 'description': 'Sample empty type'}}",0
"{'Asterisk': {'capabilities': {'metadata': 'k8s:Metadata', 'virtual-machine': 'kubevirt:VirtualMachine', 'tcp': 'k8s:LoadBalancer', 'udp': 'k8s:LoadBalancer', 'connection': 'ns:Connectable'}, 'requirements': [{'db': {'capability': 'mariadb:Connectable'}}, {'data-plane': {'capability': 'ns:Connectable', 'node': 'ns:NetworkPlane'}}], 'interfaces': {'normal': {'type': 'k8s:SSHCommand'}}}}",0
"{'Orchestrator': {'derived_from': 'tosca:Compute', 'artifacts': {'image': {'type': 'QCOW', 'artifact_version': '2', 'repository': 'centos', 'file': 'CentOS-7-x86_64-GenericCloud-1804_02.qcow2', 'properties': {'os': 'CentOS', 'version': '7.0'}}}}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'properties': {'name': {'type': 'string', 'description': 'The logical name of the object store (or container).', 'required': True}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested initial storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'type': 'scalar-unit.size', 'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.EndPoint'}}]}}",0
"{'PBX': {'derived_from': 'ns:NetworkFunction', 'properties': {'endpoints': {'type': 'map', 'entry_schema': 'Endpoint', 'required': False}}, 'capabilities': {'trunks': 'Trunks'}, 'requirements': [{'trunk': {'capability': 'Trunks', 'relationship': 'Trunk'}}]}}",0
"{'Release': {'description': 'Helm release.', 'properties': {'name': {'description': 'Release name. If not specified will use node template name.', 'type': 'string', 'required': False}, 'chart': {'description': 'URL to the chart (as with ""helm install""). Can point to an archive (tarball) or path to a local directory. This can be a ""get_artifact"" function call (see the Chart artifact type).', 'type': 'string'}, 'version': {'type': 'string', 'required': False}, 'namespace': {'type': 'string', 'required': False}, 'hooks': {'description': 'Set to true to install hooks.', 'type': 'boolean', 'default': False}, 'values': {'description': 'Set chart values (as with ""helm install --set-string""). If both ""values"" and ""valuesUrl"" are used and overlap, ""values"" will override ""valuesUrl"".', 'type': 'map', 'entry_schema': 'string', 'required': False}, 'valuesUrl': {'description': 'URL to a YAML file with chart values (as with ""helm install --values"").', 'type': 'string', 'required': False}}}}",0
{'MongoDB': {'derived_from': 'tosca:DBMS'}},0
"{'Root': {'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends.  This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance. See section “Node States” for allowed values.', 'default': 'initial'}}, 'capabilities': {'feature': {'type': 'Node'}}, 'requirements': [{'dependency': {'capability': 'Node', 'node': 'Root', 'relationship': 'DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'node.lifecycle.Standard'}}}}",0
"{'Abstract.Compute': {'derived_from': 'Root', 'description': 'The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.', 'capabilities': {'host': {'type': 'Compute', 'valid_source_types': []}}}}",0
"{'Compute': {'derived_from': 'Abstract.Compute', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.  Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'Attachment', 'node': 'BlockStorage', 'relationship': 'AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'Compute', 'valid_source_types': ['SoftwareComponent']}, 'os': {'type': 'OperatingSystem'}, 'endpoint': {'type': 'Endpoint.Admin'}, 'scalable': {'type': 'Scalable'}, 'binding': {'type': 'network.Bindable'}}}}",0
"{'SoftwareComponent': {'derived_from': 'Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False}, 'admin_credential': {'type': 'Credential', 'description': 'The optional credential that can be used to authenticate to the software component.', 'required': False}}, 'requirements': [{'host': {'capability': 'Container', 'node': 'Compute', 'relationship': 'HostedOn'}}]}}",0
"{'WebServer': {'derived_from': 'SoftwareComponent', 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.\n', 'capabilities': {'data_endpoint': 'Endpoint', 'admin_endpoint': 'Endpoint.Admin', 'host': {'type': 'Container', 'valid_source_types': ['WebApplication']}}}}",0
"{'WebApplication': {'derived_from': 'Root', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node.  Specific types of web applications such as Java, etc. could be derived from this type.\n', 'properties': {'context_root': {'type': 'string', 'required': False, 'description': 'The web application’s context root which designates the application’s URL path within the web server it is hosted on.'}}, 'capabilities': {'app_endpoint': {'type': 'Endpoint'}}, 'requirements': [{'host': {'capability': 'Container', 'node': 'WebServer', 'relationship': 'HostedOn'}}]}}",0
"{'DBMS': {'derived_from': 'SoftwareComponent', 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'Container', 'valid_source_types': ['Database']}}}}",0
"{'Database': {'derived_from': 'Root', 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database', 'required': True}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data', 'required': False}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'Container', 'node': 'DBMS', 'relationship': 'HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'Endpoint.Database'}}}}",0
"{'Abstract.Storage': {'derived_from': 'Root', 'description': 'The TOSCA Abstract.Storage node represents an abstract storage resource without any requirements on compute or network resources.', 'properties': {'name': {'type': 'string', 'description': 'The logical name (or ID) of the storage resource.'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested initial storage size (default unit is in Gigabytes).', 'default': '0 MB', 'constraints': [{'greater_or_equal': '0 MB'}]}}}}",0
"{'Storage.ObjectStorage': {'derived_from': 'Abstract.Storage', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'properties': {'maxsize': {'type': 'scalar-unit.size', 'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'Endpoint'}}}}",0
"{'BlockStorage': {'derived_from': 'Abstract.Storage', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'size': {'default': '1 MB', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'Attachment'}}}}",0
"{'Container.Runtime': {'derived_from': 'SoftwareComponent', 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.\n', 'capabilities': {'host': {'type': 'Compute', 'valid_source_types': ['Container.Application']}, 'scalable': {'type': 'Scalable'}}}}",0
"{'Container.Application': {'derived_from': 'Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'Compute', 'node': 'Container.Runtime', 'relationship': 'HostedOn'}}, {'storage': {'capability': 'Storage'}}, {'network': {'capability': 'EndPoint'}}]}}",0
"{'LoadBalancer': {'derived_from': 'Root', 'description': 'The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application’s traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).\n', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'Endpoint', 'relationship': 'RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}]}}",0
"{'tosca.nodes.MiCADO.network.Network.Docker': {'description': 'description of a Docker network', 'derived_from': 'tosca.nodes.network.Network', 'properties': {'attachable': {'type': 'boolean', 'description': 'is attachable', 'required': False}, 'driver': {'type': 'string', 'description': 'network driver', 'required': False}, 'external': {'type': 'boolean', 'required': False}, 'driver_opts': {'type': 'map', 'description': 'network driver options (incl. mtu)', 'required': False}, 'ip_version': {'type': 'integer', 'required': False, 'default': None}, 'dhcp_enabled': {'type': 'boolean', 'required': False, 'default': None}}}}",0
"{'tosca.nodes.MiCADO.Edge': {'description': 'Base edge node for MiCADO', 'derived_from': 'tosca.nodes.Root', 'properties': {'public_ip': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}}}}",0
"{'tosca.nodes.MiCADO.Compute': {'description': 'Base compute node for MiCADO', 'derived_from': 'tosca.nodes.Compute', 'properties': {'context': {'type': 'context_type', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute': {'description': 'CloudSigma compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'num_cpus': {'type': 'integer', 'required': True, 'constraints': [{'greater_or_equal': 250}, {'less_or_equal': 100000}]}, 'mem_size': {'type': 'integer', 'required': True, 'constraints': [{'greater_or_equal': 268435456}, {'less_or_equal': 137438953472}]}, 'libdrive_id': {'type': 'string', 'required': True}, 'vnc_password': {'type': 'string', 'required': True}, 'public_key_id': {'type': 'string', 'required': True}, 'host_name': {'type': 'string', 'required': False}, 'hv_relaxed': {'type': 'boolean', 'required': False}, 'hv_tsc': {'type': 'boolean', 'required': False}, 'nics': {'type': 'list', 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}}}}",0
"{'tosca.nodes.MiCADO.Edge.CloudSigma': {'description': 'CS edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute', 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}}}}",0
"{'tosca.nodes.MiCADO.EC2.Compute': {'description': 'Amazon EC2 compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'region_name': {'type': 'string', 'required': True}, 'image_id': {'type': 'string', 'required': True}, 'instance_type': {'type': 'string', 'required': True}, 'key_name': {'type': 'string', 'required': False}, 'security_group_ids': {'type': 'list', 'required': False}, 'subnet_id': {'type': 'string', 'required': False}, 'tags': {'type': 'map', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Edge.EC2': {'description': 'EC2 edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.EC2.Compute', 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.GCE.Compute': {'description': 'Google Compute Engine compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'region': {'type': 'string', 'required': True}, 'project': {'type': 'string', 'required': True}, 'machine_type': {'type': 'string', 'required': True}, 'zone': {'type': 'string', 'required': True}, 'image': {'type': 'string', 'required': True}, 'network': {'type': 'string', 'required': True}, 'ssh-keys': {'type': 'string', 'required': False}, 'tags': {'type': 'map', 'required': False}}, 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Edge.GCE': {'description': 'GCE edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.GCE.Compute', 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Azure.Compute': {'description': 'Microsoft Azure compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'resource_group': {'type': 'string', 'required': True}, 'virtual_network': {'type': 'string', 'required': True}, 'subnet': {'type': 'string', 'required': True}, 'network_security_group': {'type': 'string', 'required': True}, 'size': {'type': 'string', 'required': True}, 'admin_username': {'type': 'string', 'required': False}, 'admin_password': {'type': 'string', 'required': False}, 'image_sku': {'type': 'string', 'required': False}, 'source_image_id': {'type': 'string', 'required': False}, 'public_key': {'type': 'string', 'required': False}, 'public_ip': {'type': 'boolean', 'required': False}}, 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Edge.Azure': {'description': 'Azure edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.Azure.Compute', 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.CloudBroker.Compute': {'description': 'CloudBroker compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'deployment_id': {'type': 'string', 'required': True}, 'instance_type_id': {'type': 'string', 'required': True}, 'key_pair_id': {'type': 'string', 'required': False}, 'opened_port': {'type': 'string', 'required': False}, 'infrastructure_component_id': {'type': 'string', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}}}}",0
"{'tosca.nodes.MiCADO.Edge.CloudBroker': {'description': 'CB edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.CloudBroker.Compute', 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}}}}",0
"{'tosca.nodes.MiCADO.Nova.Compute': {'description': 'Openstack Nova Compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'image_id': {'type': 'string', 'required': True}, 'flavor_name': {'type': 'string', 'required': False}, 'flavor_id': {'type': 'string', 'required': False}, 'tenant_name': {'type': 'string', 'required': False}, 'auth_url': {'type': 'string', 'required': False}, 'project_id': {'type': 'string', 'required': True}, 'user_domain_name': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': True}, 'server_name': {'type': 'string', 'required': False}, 'availability_zone': {'type': 'string', 'required': False}, 'key_name': {'type': 'string', 'required': False}, 'security_groups': {'type': 'list', 'required': False}, 'floating_ip': {'type': 'string', 'required': False}, 'floating_ip_pool': {'type': 'string', 'required': False}, 'config_drive': {'type': 'boolean', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Edge.Nova': {'description': 'Base edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.Nova.Compute', 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.OCI.Compute': {'description': 'Oracle Cloud Instance compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'region': {'type': 'string', 'required': True}, 'availability_domain': {'type': 'string', 'required': True}, 'compartment_id': {'type': 'string', 'required': True}, 'shape': {'type': 'string', 'required': True}, 'network_security_group': {'type': 'string', 'required': True}, 'subnet_id': {'type': 'string', 'required': True}, 'source_id': {'type': 'string', 'required': False}, 'ssh_keys': {'type': 'string', 'required': False}}, 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Edge.OCI': {'description': 'OCI edge node for MiCADO', 'derived_from': 'tosca.nodes.MiCADO.OCI.Compute', 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.EC2.Compute.Terra': {'description': 'Basic EC2 VM for MiCADO, by Terraform, on eu-west-2', 'derived_from': 'tosca.nodes.MiCADO.EC2.Compute', 'properties': {'region_name': {'type': 'string', 'default': 'eu-west-2', 'required': True}}, 'interfaces': {'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform', 'create': None}}}}",0
"{'tosca.nodes.MiCADO.Container.Application': {'description': 'Generic description of a container\n', 'derived_from': 'tosca.nodes.Container.Application'}}",0
"{'tosca.nodes.MiCADO.Container.Application.Pod': {'description': '""Generic"" description of a container enclosure (ie. Kubernetes Pod)\n', 'derived_from': 'tosca.nodes.MiCADO.Container.Application', 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'container': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.HostedOn'}}, {'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker': {'description': 'description of a Docker container in the style of a Kubernetes\nContainerSpec or Docker Compose long syntax\n', 'derived_from': 'tosca.nodes.MiCADO.Container.Application', 'properties': {'args': {'description': 'arguments to pass to entrypoint', 'type': 'list', 'required': False}, 'command': {'description': 'command run by container (Kubernetes-style & Docker-list-style)', 'type': 'list', 'required': False}, 'env': {'description': 'environment variables to pass to the container', 'type': 'list', 'required': False}, 'envFrom': {'description': 'environment variables from a source', 'type': 'list', 'required': False}, 'image': {'description': 'container image', 'type': 'string', 'required': False}, 'imagePullPolicy': {'description': 'Force pull an image', 'type': 'string', 'required': False, 'constraints': [{'valid_values': ['Always', 'IfNotPresent']}]}, 'lifecycle': {'description': 'Kubernetes hooks for lifecycle management', 'type': 'map', 'required': False}, 'livenessProbe': {'description': 'Kubernetes-style healthcheck', 'type': 'map', 'required': False}, 'name': {'description': 'define the container name', 'type': 'string', 'required': False}, 'ports': {'description': 'ports to be forwarded (long-syntax Compose or flat Kubernetes ServiceSpec)', 'type': 'list', 'required': False, 'entry_schema': {'type': 'ports_type'}}, 'readinessProbe': {'description': 'Kubernetes-style ready-check', 'type': 'map', 'required': False}, 'resources': {'description': 'resource requirements for the container (Kubernetes-style)', 'type': 'map', 'required': False}, 'securityContext': {'description': 'specify security options (Kubernetes-style)', 'type': 'map', 'required': False}, 'stdin': {'description': 'allocate a buffer for stdin for this container (Kubernetes-style)', 'type': 'boolean', 'required': False}, 'stdinOnce': {'description': 'close the stdin channel after one attach', 'type': 'boolean', 'required': False}, 'terminationMessagePath': {'description': 'Kubernetes container path to write termination message', 'type': 'string', 'required': False}, 'terminationMessagePolicy': {'description': 'Kubernetes container termination message', 'type': 'string', 'required': False}, 'tty': {'description': 'allocate a TTY for the container (requires stdin set to true)', 'type': 'boolean', 'required': False}, 'volumeDevices': {'description': 'block volume devices to be used by the container', 'type': 'list', 'required': False}, 'volumeMounts': {'description': 'pod volumes to mount inside container filesystems', 'type': 'list', 'required': False}, 'workingDir': {'description': 'Kubernetes container working directory', 'type': 'string', 'required': False}, 'configs': {'description': 'point to created configs', 'type': 'list', 'required': False}, 'container_name': {'description': 'the container name *translates to Kubernetes name*', 'type': 'string', 'required': False}, 'deploy': {'description': 'supports Swarm-only options of a Compose file', 'type': 'deploy_type', 'required': False}, 'dns': {'description': 'custom DNS servers *translates to Kubernetes PodSpec dnsConfig*', 'type': 'list', 'required': False}, 'dns_search': {'description': 'custom DNS searches *translates to Kubernetes PodSpec dnsConfig*', 'type': 'list', 'required': False}, 'entrypoint': {'description': 'command run by container (string) *translates to Kubernetes command*', 'type': 'string', 'required': False}, 'env_file': {'description': 'load environment vars from a file', 'type': 'list', 'required': False}, 'environment': {'description': 'environment variables (map-style) *translates to Kubernetes env*', 'type': 'map', 'required': False}, 'expose': {'description': 'ports to expose to other linked services', 'type': 'list', 'required': False}, 'extra_hosts': {'description': 'host aliases to add to /etc/hosts', 'type': 'list', 'required': False}, 'healthcheck': {'description': 'Docker-style healthcheck', 'type': 'map', 'required': False}, 'init': {'description': 'run an init to forward signals, reap processes', 'type': 'boolean', 'required': False}, 'labels': {'description': 'Labels *translates to Kubernetes PodSpec labels*', 'type': 'map', 'required': False}, 'logging': {'description': 'logging configuration', 'type': 'map', 'required': False}, 'networks': {'description': 'network configuration', 'type': 'map', 'required': False}, 'pid': {'description': 'option for using host PID *translates to Kubernetes hostPID*', 'type': 'string', 'required': False}, 'privileged': {'description': 'run with root equivalency *translates to Kubernetes SecurityContext*', 'type': 'boolean', 'required': False}, 'secrets': {'description': 'passing secrets', 'type': 'list', 'required': False}, 'stdin_open': {'description': 'allocate a buffer for stdin *translates to Kubernetes stdin*', 'type': 'boolean', 'required': False}, 'stop_grace_period': {'description': 'when container is killed after shutdown *translates to Kubernetes grace...*', 'type': 'string', 'required': False}, 'stop_signal': {'description': 'signal to stop the container', 'type': 'string', 'required': False}, 'ulimits': {'description': 'override default ulimits of container', 'type': 'map', 'required': False}, 'volumes': {'description': 'volumes to mount', 'type': 'list', 'required': False}, 'working_dir': {'description': 'working directory *translates to Kubernetes workingDir*', 'type': 'string', 'required': False}}, 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}, 'attributes': {'port': {'type': 'integer'}}, 'capabilities': {'service': {'type': 'tosca.capabilities.Container.Docker'}, 'container': {'type': 'tosca.capabilities.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'container': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.HostedOn'}}, {'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'volume': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.MiCADO.Container.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}]}}",unknown
"{'tosca.nodes.MiCADO.Container.Application.Docker.Init': {'description': 'Description of an init Docker container for Kubernetes', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Docker'}}",0
"{'tosca.nodes.MiCADO.Container.Config': {'description': 'base type for Config files', 'derived_from': 'tosca.nodes.Root', 'properties': {'path': {'type': 'string', 'description': 'path on disk (and/or default mount path)', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume': {'description': 'description of a container volume', 'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'name': {'type': 'string', 'description': 'name of the volume', 'required': False}, 'labels': {'type': 'map', 'description': 'map of metadata labels', 'required': False}, 'path': {'type': 'string', 'description': 'path on disk (and/or default mount path)', 'required': False}, 'size': {'type': 'string', 'description': 'overwrite size requirement', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}}}",0
"{'tosca.nodes.MiCADO.Kubernetes': {'description': 'Base type for defining custom Kubernetes resources', 'derived_from': 'tosca.nodes.Root', 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker.Deployment': {'description': 'An abstraction of the Docker container node, creates a Kubernetes Deployment', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Docker', 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'Deployment', 'spec': {'strategy': {'type': 'Recreate'}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker.DaemonSet': {'description': 'An abstraction which creates a Kubernetes DaemonSet', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Docker', 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'DaemonSet'}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker.StatefulSet': {'description': 'An abstraction of the Docker container node, creates a Kubernetes StatefulSet', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Docker', 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'StatefulSet', 'spec': {'updateStrategy': {'type': 'RollingUpdate'}, 'podManagementPolicy': 'Parallel'}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Pod.Kubernetes': {'description': 'A bare Kubernetes Pod, which supports hosting containers', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Pod', 'properties': None, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'container': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.HostedOn'}}, {'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.MiCADO.Container.Application.Pod.Deployment': {'description': 'An abstraction of a generic Pod, creates a Deployment', 'derived_from': 'tosca.nodes.MiCADO.Container.Application.Pod', 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'Deployment', 'spec': {'strategy': {'type': 'Recreate'}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Config.Kubernetes': {'description': 'base type for Config files', 'derived_from': 'tosca.nodes.MiCADO.Container.Config', 'properties': {'data': {'type': 'map', 'description': 'data', 'required': False}, 'binaryData': {'type': 'map', 'description': 'datab', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'data': {'get_property': ['SELF', 'data']}, 'binaryData': {'get_property': ['SELF', 'binaryData']}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Config.ConfigMap': {'description': 'base type for Config files', 'derived_from': 'tosca.nodes.MiCADO.Container.Config', 'properties': {'data': {'type': 'map', 'description': 'data', 'required': False}, 'binaryData': {'type': 'map', 'description': 'datab', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'data': {'get_property': ['SELF', 'data']}, 'binaryData': {'get_property': ['SELF', 'binaryData']}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume.EmptyDir': {'description': 'description of a Kubernetes HostPath Volume', 'derived_from': 'tosca.nodes.MiCADO.Container.Volume', 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'spec': {'emptyDir': {}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume.HostPath': {'description': 'description of a Kubernetes HostPath Volume', 'derived_from': 'tosca.nodes.MiCADO.Container.Volume', 'properties': {'path': {'type': 'string', 'description': 'path on host', 'required': True}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'spec': {'hostPath': {'path': {'get_property': ['SELF', 'path']}}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume.NFS': {'description': 'description of a Kubernetes NFS Volume', 'derived_from': 'tosca.nodes.MiCADO.Container.Volume', 'properties': {'path': {'type': 'string', 'description': 'path on host', 'required': True}, 'server': {'type': 'string', 'description': 'NFS server IP', 'required': True}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'spec': {'nfs': {'path': {'get_property': ['SELF', 'path']}, 'server': {'get_property': ['SELF', 'server']}}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume.GlusterFS': {'description': 'description of a Kubernetes GFS Volume', 'derived_from': 'tosca.nodes.MiCADO.Container.Volume', 'properties': {'path': {'type': 'string', 'description': 'path on host', 'required': True}, 'endpoints': {'type': 'string', 'description': 'NFS server IP', 'required': True}, 'readOnly': {'type': 'boolean', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'spec': {'glusterfs': {'path': {'get_property': ['SELF', 'path']}, 'endpoints': {'get_property': ['SELF', 'endpoints']}, 'readOnly': {'get_property': ['SELF', 'readOnly']}}}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo': {'description': 'Basic CloudSigma VM for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute', 'properties': {'endpoint': {'type': 'string', 'default': 'https://zrh.cloudsigma.com/api/2.0', 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small': {'description': 'Basic CloudSigma VM (2GHz/2GB) for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo', 'properties': {'num_cpus': {'type': 'integer', 'default': 2000, 'required': True}, 'mem_size': {'type': 'integer', 'default': 2147483648, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.big': {'description': 'Bigger CloudSigma VM (4GHz/4GB) for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo', 'properties': {'num_cpus': {'type': 'integer', 'default': 4000, 'required': True}, 'mem_size': {'type': 'integer', 'default': 4294967296, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small.NFS': {'description': 'CloudSigma VM (2GHz/2GB) with NFS dependencies, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small', 'properties': {'context': {'type': 'map', 'default': {'append': True, 'cloud_config': 'runcmd:\n- apt-get install -y nfs-kernel-server nfs-common\n'}, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.EC2.Compute.Occo': {'description': 'Basic EC2 VM for MiCADO, by Occopus, on eu-west-2', 'derived_from': 'tosca.nodes.MiCADO.EC2.Compute', 'properties': {'region_name': {'type': 'string', 'default': 'eu-west-2', 'required': True}, 'endpoint': {'type': 'string', 'default': 'https://ec2.eu-west-2.amazonaws.com', 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'endpoint': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'org.alien4cloud.graphite.pub.nodes.GraphiteService': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.MetricsBackend', 'abstract': True, 'metadata': {'icon': '/images/graphite.png'}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint', 'occurrences': [0, 'UNBOUNDED']}, 'http_endpoint': {'type': 'org.alien4cloud.graphite.pub.capabilities.GraphiteHttpEndpoint', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.cloudify.hostpool.pub.nodes.HostPoolService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': 'images/hostpool.png'}, 'capabilities': {'cloudify_hostpool': {'type': 'org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'occurrences': [0, 'UNBOUNDED']}}, 'attributes': {'hostpool_url': {'concat': [{'get_property': ['SELF', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_hostpool', 'port']}]}, 'hostpool_url_hosts': {'concat': [{'get_property': ['SELF', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_hostpool', 'port']}, '/hosts']}}}}",0
"{'org.alien4cloud.consul.pub.nodes.ConsulAgent': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Base Consul discovery service installation.\n', 'tags': {'icon': '/images/consul.png'}, 'capabilities': {'consul_agent': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'valid_source_types': ['org.alien4cloud.consul.pub.capabilities.ConsulClient']}}, 'properties': {'download_url': {'description': 'The URL to download the consul archive.', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip'}, 'data_dir': {'description': 'The location on the FS where consul will store data.', 'type': 'string', 'required': True, 'default': '/var/consul'}, 'tls_enabled': {'description': 'Defines if the communication with the consul agent will be secured (HTTPS).', 'type': 'boolean', 'required': True, 'default': False}, 'ca_passphrase': {'description': 'The provided CA certificate passphrase.', 'type': 'string', 'required': False}, 'encrypt_key': {'description': 'The key to encrypt gossip exchanges into consul cluster.', 'type': 'string', 'required': False}}}}",0
"{'org.alien4cloud.consul.pub.nodes.ConsulServer': {'derived_from': 'org.alien4cloud.consul.pub.nodes.ConsulAgent', 'description': 'Consul discovery service installation (server node).\n', 'properties': {'agent_mode': {'description': 'Indicate the consul agent mode (actually server).', 'type': 'string', 'constraints': [{'equal': 'server'}], 'required': True, 'default': 'server'}}, 'capabilities': {'consul_server': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulServer', 'valid_source_types': ['org.alien4cloud.consul.pub.capabilities.ConsulClient']}}}}",0
"{'org.alien4cloud.elasticsearch.ansible.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.elasticsearch.pub.nodes.ElasticSearchService', 'description': 'Installation of an ElasticSearch with an UI to browse it !.\n', 'tags': {'icon': 'images/elasticsearch.png'}, 'properties': {'component_version': {'description': 'The version of Elasticsearch', 'type': 'version', 'default': '1.7.0', 'constraints': [{'valid_values': ['1.7.0']}]}, 'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb'}, 'cluster_name': {'description': 'The name of the ElasticSearch cluster.', 'type': 'string', 'required': True, 'default': 'escluster'}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/elasticsearch/install_elasticsearch.sh'}, 'configure': {'inputs': {'ES_IP': {'get_attribute': ['HOST', 'ip_address']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HTTP_PORT': {'get_property': ['SELF', 'http', 'port']}}, 'implementation': 'scripts/elasticsearch/configure_elasticsearch.sh'}, 'start': {'implementation': 'scripts/elasticsearch/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'config/elasticsearch', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.patches.change_max_mgmtworker.nodes.ChangeMaxMgmtWorkerPatch': {'derived_from': 'org.alien4cloud.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Increase number of mgmnt workers.', 'properties': {'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 500}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'get_property': ['SELF', 'mgmt_worker_count']}}, 'implementation': 'playbook/playbook.ansible'}}, 'org.alien4cloud.cloudify.patches.change_max_mgmtworker.interfaces.Admin': {'setup': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'mgmt_worker_count': {'type': 'integer', 'required': True, 'default': 100}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
{'org.alien4cloud.terraform.openstack.nodes.TerraInstance': {'derived_from': 'org.alien4cloud.terraform.openstack.nodes.AbstractTerraInstance'}},0
"{'org.alien4cloud.terraform.openstack.nodes.AbstractTerraInstance': {'abstract': True, 'derived_from': 'tosca.nodes.Compute', 'description': ""Launch an openstack instance. Needs terraform cli to be installed on the host (usually a 'manager' since this is a compute resource).\nInformation about the key and the user is needed for cloudify manager to establish connection to the created compute.\n"", 'properties': {'agent_config': {'type': 'org.alien4cloud.terraform.openstack.datatypes.AgentConfig'}, 'openstack_config': {'type': 'org.alien4cloud.terraform.openstack.datatypes.OpenstackConfig'}, 'image_id': {'type': 'string'}, 'flavor_id': {'type': 'string'}, 'key_name': {'type': 'string'}, 'openstack_prefix': {'type': 'string'}, 'external_network_name': {'type': 'string'}, 'internal_network_name': {'type': 'string'}, 'metadata': {'type': 'map', 'entry_schema': {'type': 'string'}}, 'floating_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'pool_name': {'type': 'string', 'required': False}, 'internal_secgroup_ids': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'external_secgroup_ids': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'TF_LOG': {'type': 'string', 'default': 'INFO', 'constraints': [{'valid_values': ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR']}]}, 'OS_DEBUG': {'type': 'integer', 'default': 0}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'IP_ADDRESS']}, 'public_ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'PUBLIC_IP_ADDRESS']}, 'instance_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'INSTANCE_ID']}, 'instance_name': {'get_operation_output': ['SELF', 'Standard', 'start', 'INSTANCE_NAME']}}, 'capabilities': {'secgroup': {'type': 'org.alien4cloud.terraform.openstack.capabilities.SecurityGroup', 'occurrences': [0, 1]}}, 'requirements': [{'network': {'capability': 'org.alien4cloud.terraform.openstack.capabilities.Unimplemented', 'occurrences': [0, 0]}}], 'artifacts': [{'ARTIFACT_TERRAFORM': {'file': 'templates/template-compute.tf', 'type': 'tosca.artifacts.File', 'description': 'Terraform file to provision a compute with a new floating'}}, {'ARTIFACT_TERRAFORM_EXISTING_FIP': {'file': 'templates/template-compute-existing-floatingips.tf', 'type': 'tosca.artifacts.File', 'description': 'Terraform file to provision a compute with an existing floating'}}, {'ARTIFACT_PORT_OVERRIDE': {'file': 'templates/template-compute-port-override.tf', 'type': 'tosca.artifacts.File', 'description': 'Terraform file to override ports with secgroups ids (used in secgroup relationship)'}}, {'ARTIFACT_PYTHON': {'file': 'scripts/render-inputs.py', 'type': 'tosca.artifacts.File', 'description': 'Python script to convert env to terraform inputs file (to handle structures like map or list)'}}], 'interfaces': {'Standard': {'create': {'inputs': {'_TF_OPENSTACK_CONFIG': {'get_property': ['SELF', 'openstack_config']}, '_TF_IMAGE_ID': {'get_property': ['SELF', 'image_id']}, '_TF_FLAVOR_ID': {'get_property': ['SELF', 'flavor_id']}, '_TF_KEY_NAME': {'get_property': ['SELF', 'key_name']}, '_TF_OPENSTACK_PREFIX': {'get_property': ['SELF', 'openstack_prefix']}, '_TF_EXTERNAL_NETWORK_NAME': {'get_property': ['SELF', 'external_network_name']}, '_TF_INTERNAL_NETWORK_NAME': {'get_property': ['SELF', 'internal_network_name']}, '_TF_EXTERNAL_SECGROUP_IDS': {'get_property': ['SELF', 'external_secgroup_ids']}, '_TF_INTERNAL_SECGROUP_IDS': {'get_property': ['SELF', 'internal_secgroup_ids']}, '_TF_METADATA': {'get_property': ['SELF', 'metadata']}, '_TFL_FLOATING_IP': {'get_property': ['SELF', 'floating_ips']}, '_TF_POOL_NAME': {'get_property': ['SELF', 'pool_name']}}, 'implementation': 'scripts/prepare_terraform.sh'}, 'start': {'inputs': {'INPUT_FILE': {'get_operation_output': ['SELF', 'Standard', 'create', 'INPUT_FILE']}, 'TF_LOG': {'get_property': ['SELF', 'TF_LOG']}, 'OS_DEBUG': {'get_property': ['SELF', 'OS_DEBUG']}}, 'implementation': 'scripts/apply_terraform.sh'}, 'configure': {'inputs': {'FLOATING_IPS': {'get_property': ['SELF', 'floating_ips']}}, 'implementation': 'scripts/tf_compute_configure.sh'}, 'delete': {'inputs': {'INPUT_FILE': {'get_operation_output': ['SELF', 'Standard', 'create', 'INPUT_FILE']}, 'TF_LOG': {'get_property': ['SELF', 'TF_LOG']}, 'OS_DEBUG': {'get_property': ['SELF', 'OS_DEBUG']}}, 'implementation': 'scripts/destroy_terraform.sh'}}}}}",unknown
"{'org.alien4cloud.terraform.openstack.nodes.CustomSecurityGroup': {'derived_from': 'tosca.nodes.Root', 'description': 'Create a security group and rules and attach it to the port linked to the ""internal"" network\n', 'properties': {'openstack_config': {'type': 'org.alien4cloud.terraform.openstack.datatypes.OpenstackConfig'}, 'TF_LOG': {'type': 'string', 'default': 'INFO', 'constraints': [{'valid_values': ['TRACE', 'DEBUG', 'INFO', 'WARN', 'ERROR']}]}, 'OS_DEBUG': {'type': 'integer', 'default': 0}}, 'requirements': [{'secgroup': {'capability': 'org.alien4cloud.terraform.openstack.capabilities.SecurityGroup', 'relationship': 'org.alien4cloud.terraform.openstack.relationships.SecurityGroup', 'occurrences': [1, 'unbounded']}}], 'artifacts': [{'ARTIFACT_TERRAFORM': {'file': 'templates/template-secgroup.tf', 'type': 'tosca.artifacts.File', 'description': 'Terraform file to apply'}}, {'ARTIFACT_REL_SG_TERRAFORM': {'file': 'templates/template-rel-add-sgrule.tf', 'type': 'tosca.artifacts.File', 'description': 'Terraform file to add a rule for floating ip (used in relationship)'}}, {'ARTIFACT_PYTHON': {'file': 'scripts/render-inputs.py', 'type': 'tosca.artifacts.File', 'description': 'Python script to convert env to terraform inputs file (to handle structures like map or list)'}}], 'interfaces': {'Standard': {'create': {'inputs': {'_TF_OPENSTACK_CONFIG': {'get_property': ['SELF', 'openstack_config']}}, 'implementation': 'scripts/prepare_terraform.sh'}, 'start': {'inputs': {'INPUT_FILE': {'get_operation_output': ['SELF', 'Standard', 'create', 'INPUT_FILE']}, 'TF_LOG': {'get_property': ['SELF', 'TF_LOG']}, 'OS_DEBUG': {'get_property': ['SELF', 'OS_DEBUG']}}, 'implementation': 'scripts/apply_terraform.sh'}, 'delete': {'inputs': {'INPUT_FILE': {'get_operation_output': ['SELF', 'Standard', 'create', 'INPUT_FILE']}, 'TF_LOG': {'get_property': ['SELF', 'TF_LOG']}, 'OS_DEBUG': {'get_property': ['SELF', 'OS_DEBUG']}}, 'implementation': 'scripts/destroy_terraform.sh'}}}}}",0
"{'org.alien4cloud.alien4cloud.config.csar.nodes.AddCsarFromGit': {'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'description': 'Add a git repository and import CSARs.\n', 'tags': {'icon': '/images/git.png'}, 'properties': {'repositoryUrl': {'type': 'string', 'required': True, 'default': 'https://github.com/alien4cloud/tosca-normative-types.git'}, 'repositoryUsername': {'type': 'string', 'required': False}, 'repositoryPassword': {'type': 'string', 'required': False}, 'branchId': {'type': 'string', 'required': True, 'default': 'master'}, 'subPath': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'repositoryUrl': {'get_property': ['SELF', 'repositoryUrl']}, 'repositoryUsername': {'get_property': ['SELF', 'repositoryUsername']}, 'repositoryPassword': {'get_property': ['SELF', 'repositoryPassword']}, 'branchId': {'get_property': ['SELF', 'branchId']}, 'subPath': {'get_property': ['SELF', 'subPath']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.grafana.linux_ans.nodes.Grafana': {'derived_from': 'org.alien4cloud.grafana.pub.nodes.GrafanaService', 'metadata': {'icon': '/images/grafana.png'}, 'description': 'Grafana frontend\n', 'properties': {'component_version': {'type': 'version', 'default': '4.1.2', 'constraints': [{'valid_values': ['4.1.2']}]}}, 'attributes': {'grafana_url': {'concat': ['http://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_property': ['SELF', 'http_endpoint', 'port']}]}}, 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI endpoint', 'properties': {'protocol': 'http', 'port': 3000, 'user': 'admin', 'password': 'admin'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}, {'graphite': {'capability': 'org.alien4cloud.graphite.pub.capabilities.GraphiteHttpEndpoint', 'relationship': 'org.alien4cloud.grafana.linux_ans.relationships.GrafanaConnectToGraphite', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.java.jdk.linux.nodes.OracleJDK': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of Oracle Java Development Kit', 'metadata': {'icon': 'images/jdk.png'}, 'properties': {'java_url': {'type': 'string', 'required': True, 'default': 'https://download.oracle.com/otn-pub/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.tar.gz'}, 'java_home': {'type': 'string', 'required': True, 'default': '/opt/java'}, 'component_version': {'type': 'version', 'default': '1.8.0-202-b08'}}, 'attributes': {'java_version': {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_VERSION']}, 'java_message': {'concat': ['Java help: ', {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_HELP']}]}}, 'capabilities': {'jdk': {'type': 'org.alien4cloud.java.pub.capabilities.JDK', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'JAVA_URL': {'get_property': ['SELF', 'java_url']}, 'JAVA_HOME': {'get_property': ['SELF', 'java_home']}}, 'implementation': 'scripts/install_jdk.sh'}}}}}",0
"{'org.alien4cloud.alien4cloud.postdeployment.nodes.Postdeployment': {'derived_from': 'org.alien4cloud.java.pub.nodes.JavaSoftware', 'properties': {'install_dir': {'type': 'string', 'default': '/opt/alien'}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/create.sh', 'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}, 'start': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'start', 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}}, 'stop': {'implementation': 'scripts/alien.sh', 'inputs': {'CMD': 'stop'}}}}, 'artifacts': [{'bin': {'file': 'alien4cloud:alien4cloud-postdeployment-rest:1.4.0-RC3@war', 'repository': 'fastconnect_nexus', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.spark.jobs-linux-sh.nodes.SparkJob': {'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'submission': {'type': 'org.alien4cloud.spark.jobs-linux-sh.datatypes.Submission'}, 'jar_download': {'type': 'string', 'required': False}, 'jar_install_path': {'type': 'string', 'required': False}}, 'requirements': [{'spark_rest_api': {'capability': 'org.alien4cloud.spark.pub.capabilities.SparkREST', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'inputs': {'SPARK_IP': {'get_attribute': ['REQ_TARGET', 'spark_rest_api', 'ip_address']}, 'SPARK_REST_PORT': {'get_attribute': ['REQ_TARGET', 'spark_rest_api', 'spark_rest_port']}}, 'submit': {'inputs': {'SUBMIT_PROPS': {'get_property': ['SELF', 'submission', 'submit_props']}, 'MAIN_CLASS': {'get_property': ['SELF', 'submission', 'main_class']}, 'APP_ARGS': {'get_property': ['SELF', 'submission', 'app_args']}, 'JAR_DOWNLOAD': {'get_property': ['SELF', 'jar_download']}, 'JAR_INSTALL_PATH': {'get_property': ['SELF', 'jar_install_path']}}, 'implementation': 'scripts/submit.sh'}, 'run': 'scripts/run.sh', 'cancel': 'scripts/cancel.sh'}}}}",0
"{'org.alien4cloud.apache.linux_ans.nodes.Apache': {'derived_from': 'org.alien4cloud.apache.pub.nodes.Apache', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type. This version is installed by using Ansible.\n', 'properties': {'document_root': {'type': 'string', 'default': '/var/www/html'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel', 'debian', 'ubuntu']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.spark.linux_sh.nodes.SparkNode': {'abstract': True, 'derived_from': 'org.alien4cloud.java.pub.nodes.JavaSoftware', 'properties': {'component_version': {'type': 'version', 'default': '2.2.2', 'constraints': [{'equal': '2.2.2'}]}, 'download_url': {'type': 'string', 'default': 'http://mirror.ibcp.fr/pub/apache/spark/spark-2.2.2/spark-2.2.2-bin-hadoop2.7.tgz', 'constraints': [{'pattern': 'https?://.+/spark-2.2.2-bin-hadoop2.7.tgz'}]}, 'install_dir': {'type': 'string', 'default': '/opt/spark'}}, 'interfaces': {'Standard': {'create': {'inputs': {'SPARK_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}, 'SPARK_INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}, 'implementation': 'scripts/install_spark.sh'}}}}}",0
"{'org.alien4cloud.spark.linux_sh.nodes.SparkMaster': {'derived_from': 'org.alien4cloud.spark.linux_sh.nodes.SparkNode', 'capabilities': {'spark_master': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkMaster'}, 'spark_rest': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkREST'}, 'spark_ui': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkMasterUI'}}, 'attributes': {'spark_ui': {'concat': [{'get_attribute': ['SELF', 'spark_ui', 'protocol']}, '://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_attribute': ['SELF', 'spark_ui', 'port']}]}, 'spark_rest_port': {'get_attribute': ['SELF', 'spark_rest', 'port']}}, 'interfaces': {'Standard': {'start': {'inputs': {'SPARK_INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'SPARK_MASTER_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}, 'SPARK_UI_PORT': {'get_property': ['SELF', 'spark_ui', 'port']}, 'SPARK_MASTER_PORT': {'get_property': ['SELF', 'spark_master', 'port']}, 'SPARK_MASTER_REST_PORT': {'get_property': ['SELF', 'spark_rest', 'port']}}, 'implementation': 'scripts/start_master.sh'}}}}}",0
"{'org.alien4cloud.spark.linux_sh.nodes.SparkSlave': {'derived_from': 'org.alien4cloud.spark.linux_sh.nodes.SparkNode', 'capabilities': {'spark_master': {'type': 'org.alien4cloud.spark.pub.capabilities.SparkMaster'}}, 'requirements': [{'spark_master': {'capability': 'org.alien4cloud.spark.pub.capabilities.SparkMaster', 'relationship': 'org.alien4cloud.spark.linux_sh.relationships.JoinSparkCluster'}}]}}",0
"{'org.alien4cloud.alien4cloud.config.repository.nodes.ArtifactRepositoriesConfigurator': {'description': 'Configure artifact repositories from a resources file.\n', 'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_repositories.yml', 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.patches.patch_mgmtworker.nodes.PatchMgmtworkTasksPy': {'derived_from': 'org.alien4cloud.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Patch /opt/mgmtworker/env/lib/python2.7/site-packages/script_runner/tasks.py to fix the temporary folder deletion.\n', 'artifacts': [{'safe_clean_patch': {'file': 'artifact/safe_clean_patch.sh', 'type': 'tosca.artifacts.File', 'description': 'This script to patch the cloudify manager'}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/apply_patch.sh'}}}}}",0
"{'org.alien4cloud.java.pub.nodes.JavaSoftware': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The JavaSoftware node represents a generic software component that can be launch by Java.', 'metadata': {'icon': 'images/javabean.png'}, 'requirements': [{'java': {'capability': 'org.alien4cloud.java.pub.capabilities.JDK', 'relationship': 'org.alien4cloud.java.pub.relationships.JavaSoftwareHostedOnJDK', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.elasticsearch.ubuntu.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.elasticsearch.pub.nodes.ElasticSearchService', 'description': 'Installation of replicated ElasticSearch (if this node is scaled, will be replicated).\n', 'properties': {'component_version': {'description': 'The version of Elasticsearch', 'type': 'version', 'default': '1.7.0', 'constraints': [{'valid_values': ['1.7.0']}]}, 'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.deb'}, 'cluster_name': {'description': 'The name of the ElasticSearch cluster.', 'type': 'string', 'required': True, 'default': 'escluster'}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/elasticsearch/install_elasticsearch.sh'}, 'configure': {'inputs': {'ES_IP': {'get_attribute': ['HOST', 'ip_address']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HTTP_PORT': {'get_property': ['SELF', 'http', 'port']}}, 'implementation': 'scripts/elasticsearch/configure_elasticsearch.sh'}, 'start': {'implementation': 'scripts/elasticsearch/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'config/elasticsearch', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.vault.vault_dev.nodes.VaultServer': {'derived_from': 'org.alien4cloud.vault.pub.nodes.VaultServer', 'description': 'Vault server in dev mode.\n', 'tags': {'icon': '/images/vault.png'}, 'properties': {'download_url': {'description': 'The URL to download the vault archive.', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/vault/0.8.3/vault_0.8.3_linux_amd64.zip'}, 'install_dir': {'description': 'The location on the FS where install Vault.', 'type': 'string', 'required': True, 'default': '/var/vault'}}, 'interfaces': {'Standard': {'create': {'inputs': {'VAULT_INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'VAULT_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/vault_dev/create_vault.sh'}, 'start': {'implementation': 'scripts/vault_dev/start_vault.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.patches.pub.nodes.CloudifyPatch': {'derived_from': 'tosca.nodes.Root', 'description': 'A patch to apply on CFY.', 'metadata': {'icon': 'images/patch.png'}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.apache.pub.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'abstract': True, 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'attributes': {'apache_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/']}}, 'metadata': {'icon': '/images/Apache_PoweredBy.png'}, 'properties': {'document_root': {'type': 'string', 'default': '/var/www'}}, 'capabilities': {'data_endpoint': 'org.alien4cloud.apache.pub.capabilities.ApacheDataEndpoint', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['org.alien4cloud.apache.pub.nodes.WebApplication']}}}}",0
"{'org.alien4cloud.apache.pub.nodes.WebApplication': {'abstract': True, 'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'org.alien4cloud.apache.pub.nodes.Apache', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.alien4cloud.mysql.pub.nodes.Mysql': {'derived_from': 'tosca.nodes.Database', 'abstract': True, 'description': 'A node that provides a mysql endpoint.', 'metadata': {'icon': '/images/mysql.png'}, 'capabilities': {'database_endpoint': 'org.alien4cloud.mysql.pub.capabilities.MysqlDatabaseEndpoint'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'port': {'type': 'integer', 'default': 3306, 'description': 'The port on which the underlying database service will listen to data. </p>'}, 'name': {'type': 'string', 'required': True, 'default': 'wordpress', 'description': 'The logical name of the database.'}, 'user': {'type': 'string', 'default': 'pass', 'description': 'The special user account used for database administration.'}, 'password': {'type': 'string', 'default': 'pass', 'description': 'The password associated with the user account provided in the ‘db_user’ property.</p>'}}}}",0
"{'org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyAzureParametersConfigurator': {'description': 'Configure azure parameters for cfy orchestrator\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator', 'properties': {'resourceGroupId': {'type': 'string', 'required': True}, 'virtualNetworkId': {'type': 'string', 'required': True}, 'subnetId': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'config_azure_parameters.yml', 'orchestratorId': {'get_attribute': ['SELF', 'orchestratorId']}, 'alien_url': {'get_attribute': ['SELF', 'alien_url']}, 'alien_user': {'get_attribute': ['SELF', 'alien_user']}, 'alien_password': {'get_attribute': ['SELF', 'alien_password']}, 'resourceGroup': {'get_property': ['SELF', 'resourceGroupId']}, 'virtualNetwork': {'get_property': ['SELF', 'virtualNetworkId']}, 'subnet': {'get_property': ['SELF', 'subnetId']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.alien4cloud.tests.loadtest.nodes.JMeterTestLauncher': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.java.pub.nodes.JavaSoftware', 'properties': {'rampup': {'type': 'string', 'description': 'A CSV list of user count for rampup (ex: 10,20,50,100)', 'default': '10,20,30,40,50', 'required': True}, 'test_name_prefix': {'type': 'string', 'description': 'A prefix for naming the test. Will be used with the launch date and the user count when executing the test. The test name is used to name result and log files and application in target A4C so just use Word chars please.\n', 'default': 'LoadTest', 'required': True}, 'loop_count': {'type': 'integer', 'description': 'In conjonction with a single value rampup, you can loop.', 'default': 1, 'required': True}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'create AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'configure AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'sleep_factor': {'get_property': ['SELF', 'sleep_factor']}, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'start AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'stop AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.pub.nodes.DiamondAgent': {'derived_from': 'org.alien4cloud.monitoring.pub.nodes.MonitoringAgent', 'abstract': True, 'description': 'A Diamond Agent.', 'metadata': {'icon': '/images/diamond.png'}, 'capabilities': {'collector_container': {'type': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.diamond.pub.nodes.DiamondCollector': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'description': 'A Diamond Collector.', 'metadata': {'icon': '/images/collector.png'}, 'requirements': [{'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.alien4cloud.config.orchestrator.cfy.nodes.CfyOrchestratorConfigurator': {'description': 'Configure a CFY orchestrator for A4C\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator', 'properties': {'disableDiamondMonitorAgent': {'type': 'boolean', 'required': True, 'default': True}}, 'requirements': [{'cfy': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'relationship': 'org.alien4cloud.alien4cloud.config.orchestrator.cfy.relationships.ConnectsToCfy', 'occurrences': [1, 1]}}], 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}}, 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_orchestrator.yml', 'name': {'get_property': ['SELF', 'name']}, 'pluginId': {'get_property': ['SELF', 'pluginId']}, 'pluginBean': {'get_property': ['SELF', 'pluginBean']}, 'disableDiamondMonitorAgent': {'get_property': ['SELF', 'disableDiamondMonitorAgent']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'discriminator': {'get_property': ['SELF', 'discriminator']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.samba.pub.nodes.SambaServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Configure a samba server\n', 'tags': {'icon': '/images/samba.png'}, 'properties': {'share_name': {'type': 'string', 'default': 'ALIEN4CLOUD'}, 'share_path': {'type': 'string', 'default': '/srv/samba/alien4cloud'}}, 'capabilities': {'smb_server': 'org.alien4cloud.samba.pub.capabilities.SambaServer'}}}",0
"{'org.alien4cloud.alien4cloud.webapp.nodes.Alien4Cloud': {'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.Alien4CloudService', 'description': 'The TOSCA Alien Node Type represents an alien webapp.\n', 'tags': {'icon': '/images/alien4cloud-logo.png'}, 'properties': {'context_root': {'type': 'string', 'default': '/'}, 'app_args': {'description': 'These args will be used as java program arguments.', 'type': 'string', 'required': False, 'default': ''}, 'jvm_args': {'description': 'These args will be used as JVM arguments.', 'type': 'string', 'required': False, 'default': ''}, 'component_version': {'description': 'The version of A4C (important in create stage).', 'type': 'version', 'required': True}, 'data_dir': {'description': 'The location on the file system where A4C will store data (plugins, images ...).', 'type': 'string', 'required': True, 'default': '/opt/alien4cloud/data'}, 'ca_pem': {'description': 'PEM-encoded certificate authority content, used to check the authenticity of client and server connections', 'type': 'string', 'required': False}, 'ca_key': {'description': 'Certificate authority private key content', 'type': 'string', 'required': False}, 'ca_passphrase': {'description': 'Certificate authority private key passphrase', 'type': 'string', 'required': False}, 'extra_env': {'description': 'Extra environment sourced before startup. This will be written as it in a file sourced in the bash process before running Alien', 'type': 'string', 'required': False}}, 'capabilities': {'consul': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulClient'}, 'jolokia': {'type': 'org.alien4cloud.alien4cloud.pub.capabilities.JolokiaA4CEndpoint'}, 'config': {'type': 'org.alien4cloud.alien4cloud.pub.capabilities.AlienConfigContainer'}, 'http': {'type': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI'}}, 'requirements': [{'elasticsearch': {'capability': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchTransportAPI', 'relationship': 'org.alien4cloud.alien4cloud.webapp.relationships.AlienConnectToElasticSearch', 'occurrences': [0, 1]}}, {'consul': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.alien4cloud.consul.relationships.ConnectToConsulAgent', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'ALIEN_VERSION': {'get_property': ['SELF', 'component_version']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}}, 'implementation': 'scripts/alien/install_alien.sh'}, 'configure': {'inputs': {'ALIEN_IP': {'get_attribute': ['HOST', 'ip_address']}, 'ALIEN_PUBLIC_ADDRESS': {'get_attribute': ['HOST', 'public_address']}, 'ALIEN_PORT': {'get_property': ['SELF', 'rest', 'port']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'SERVER_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'rest', 'user']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'rest', 'password']}, 'CA_PEM': {'get_property': ['SELF', 'ca_pem']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'EXTRA_ENV': {'get_property': ['SELF', 'extra_env']}}, 'implementation': 'scripts/alien/config_alien.sh'}, 'start': {'inputs': {'APP_ARGS': {'get_property': ['SELF', 'app_args']}, 'JVM_ARGS': {'get_property': ['SELF', 'jvm_args']}, 'ALIEN_IP': {'get_attribute': ['HOST', 'ip_address']}, 'ALIEN_PORT': {'get_property': ['SELF', 'rest', 'port']}, 'SERVER_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}}, 'implementation': 'scripts/alien/start_alien.sh'}, 'stop': 'scripts/alien/stop_alien.sh', 'delete': {'inputs': {'SERVER_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}}, 'implementation': 'scripts/alien/cleanup_alien.sh'}}}, 'artifacts': [{'bin': {'file': 'bin', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}, {'alien_dist': {'type': 'tosca.artifacts.File'}}], 'attributes': {'alien_url': {'concat': [{'get_property': ['SELF', 'rest', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'rest', 'port']}]}}}}",unknown
"{'org.alien4cloud.alien4cloud.config.location_resources.on_demand.nodes.OnDemandLocationResourcesConfigurator': {'description': 'Configure a location for A4C, resources are fed using a on-demand resource yaml description\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.location.nodes.SimpleLocationConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location_resources.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.vault.vault_sh.nodes.VaultServer': {'derived_from': 'org.alien4cloud.vault.pub.nodes.VaultServer', 'description': 'Vault server installation.\n', 'tags': {'icon': '/images/vault.png'}, 'requirements': [{'consul': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.alien4cloud.vault.relationships.ConnectToConsulAgent', 'occurrences': [0, 1]}}], 'properties': {'port': {'description': 'The port of Vault.', 'type': 'integer', 'required': True, 'default': 8200}, 'download_url': {'description': 'The URL to download the vault archive.', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/vault/1.0.3/vault_1.0.3_linux_amd64.zip'}, 'install_dir': {'description': 'The location on the FS where install Vault.', 'type': 'string', 'required': True, 'default': '/var/vault'}, 'tls_disable': {'description': 'If true, Vault will not use tls for http.', 'type': 'boolean', 'required': True, 'default': False}, 'auto_unsealed': {'description': 'If true, Vault will be unsealed automatically and the tokens will be found in the repository /etc/vault', 'type': 'boolean', 'required': True, 'default': False}, 'ldap_enable': {'description': 'If true, Vault will use ldap as the authentification server', 'type': 'boolean', 'required': True, 'default': False}}, 'attributes': {'vault_addr': {'get_operation_output': ['SELF', 'Standard', 'start', 'VAULT_ADDR']}, 'unsealed_keys_file': {'get_operation_output': ['SELF', 'Standard', 'start', 'UNSEALED_KEYS_FILE']}, 'vault_token_encrypted': {'get_operation_output': ['SELF', 'Standard', 'start', 'VAULT_TOKEN_ENCRYPTED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'VAULT_INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'VAULT_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/vault/create_vault.sh'}, 'start': {'inputs': {'VAULT_IP': {'get_attribute': ['SELF', 'private_address']}, 'VAULT_PORT': {'get_property': ['SELF', 'port']}, 'PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'AUTO_UNSEALED': {'get_property': ['SELF', 'auto_unsealed']}, 'TLS_DISABLE': {'get_property': ['SELF', 'tls_disable']}, 'LDAP_ENABLE': {'get_property': ['SELF', 'ldap_enable']}}, 'implementation': 'scripts/vault/start_vault.sh'}, 'stop': 'scripts/vault/stop_vault.sh', 'delete': 'scripts/vault/cleanup_vault.sh'}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}, {'ldap_config': {'file': 'configs/ldap_config_example.json', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.vault.vault_sh.Policy': {'derived_from': 'org.alien4cloud.vault.pub.Policy', 'description': 'Represent the vault policy\n', 'tags': {'icon': '/images/vault.png'}, 'properties': {'policy_name': {'description': 'The name for the policy', 'type': 'string', 'required': True}, 'groups': {'description': 'The groups associating this policy', 'type': 'list', 'entry_schema': {'type': 'string'}}, 'users': {'description': 'The users associating this policy', 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'requirements': [{'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.alien4cloud.vault.vault_sh.relationships.PolicyHostedOnVaultServer', 'occurrences': [0, 1]}}], 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}, {'policy_definition_file': {'description': 'The HCL file for defining policies.', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'POLICY_NAME': {'get_property': ['SELF', 'policy_name']}, 'VAULT_ADDR': {'get_attribute': ['HOST', 'vault_addr']}, 'UNSEALED_KEYS_FILE': {'get_attribute': ['HOST', 'unsealed_keys_file']}, 'GROUP_ARRAY': {'get_property': ['SELF', 'groups']}, 'USER_ARRAY': {'get_property': ['SELF', 'users']}}, 'implementation': 'scripts/policy/write_policy.sh'}}}}}",0
"{'org.alien4cloud.nginx.nginx_sh.nodes.Nginx': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'NGINX web server and reverse proxy installation.\n', 'tags': {'icon': '/images/nginx.png'}, 'properties': {'listen_port': {'description': 'The port onto the http server will be listening.', 'type': 'integer', 'required': True, 'default': 80}, 'target_protocol': {'type': 'string', 'required': True, 'default': 'http', 'constraints': [{'valid_values': ['http', 'https']}]}, 'ca_passphrase': {'description': 'The provided CA certificate passphrase.', 'type': 'string', 'required': False}, 'front_protocol': {'type': 'string', 'required': True, 'default': 'http', 'constraints': [{'valid_values': ['http', 'https']}]}}, 'attributes': {'service_url': {'concat': [{'get_property': ['SELF', 'front_protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'listen_port']}]}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/nginx/create.sh'}, 'configure': {'inputs': {'LISTEN_PORT': {'get_property': ['SELF', 'listen_port']}, 'SERVER_NAME': {'get_attribute': ['HOST', 'public_ip_address']}, 'TARGET_PROTOCOL': {'get_property': ['SELF', 'target_protocol']}, 'FRONT_PROTOCOL': {'get_property': ['SELF', 'front_protocol']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}}, 'implementation': 'scripts/nginx/configure.sh'}, 'start': {'implementation': 'scripts/nginx/start.sh'}}}, 'artifacts': [{'config': {'file': 'config/nginx', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.nginx.nginx_sh.nodes.ConsulTemplate4Nginx': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Consul-Template is a smart tool that can listen for consul changes,\nuse templates to update config files on changes, and call a command. It can be\nused for example to update reverse proxy config and reload it.\n', 'tags': {'icon': '/images/consul_template.png'}, 'capabilities': {'consul': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulClient'}}, 'requirements': [{'consul': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.alien4cloud.consul.relationships.ConnectToConsulAgent', 'occurrences': [1, 1]}}], 'properties': {'download_url': {'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/consul-template/0.15.0/consul-template_0.15.0_linux_amd64.zip'}, 'listen_port': {'type': 'integer', 'required': True, 'default': 8080}, 'front_protocol': {'type': 'string', 'required': True, 'default': 'http', 'constraints': [{'valid_values': ['http', 'https']}]}, 'target_protocol': {'type': 'string', 'required': True, 'default': 'http', 'constraints': [{'valid_values': ['http', 'https']}]}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/consul_template/create.sh'}, 'configure': {'inputs': {'LISTEN_PORT': {'get_property': ['SELF', 'listen_port']}, 'SERVER_NAME': {'get_attribute': ['HOST', 'public_ip_address']}, 'TLS_ENABLED': {'get_property': ['SELF', 'consul', 'tls_enabled']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'consul', 'ca_passphrase']}, 'TARGET_PROTOCOL': {'get_property': ['SELF', 'target_protocol']}, 'FRONT_PROTOCOL': {'get_property': ['SELF', 'front_protocol']}}, 'implementation': 'scripts/consul_template/configure.sh'}, 'start': {'implementation': 'scripts/consul_template/start.sh'}}}, 'artifacts': [{'config': {'file': 'config/consul_template', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.ansible.nodes.Ansible4CloudifyManager': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/ansible.png'}, 'properties': {'component_version': {'type': 'version', 'default': '2.0.1.0', 'constraints': [{'valid_values': ['2.0.1.0']}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Ansible4CloudifyManager/install.sh'}}}}}",0
"{'org.alien4cloud.cloudify.patches.change_max_fd.nodes.ChangeMaxFd': {'derived_from': 'org.alien4cloud.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Increase number of file descriptor for user cloudify.', 'properties': {'max_file': {'type': 'integer', 'required': True, 'default': 500000}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'max_file': {'get_property': ['SELF', 'max_file']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.squid3.linux_sh.Squid3': {'derived_from': 'org.alien4cloud.http-proxy.pub.nodes.HttpProxy', 'description': 'This TOSCA type represents a Squid3 http proxy server.\n', 'attributes': {'http_proxy': {'concat': [{'get_property': ['SELF', 'proxy_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'proxy_endpoint', 'port']}, '/']}}, 'properties': {'component_version': {'type': 'version', 'default': '3.3.8', 'constraints': [{'equal': '3.3.8'}]}, 'username': {'type': 'string', 'default': 'squid'}, 'password': {'type': 'string', 'default': 'squid'}}, 'metadata': {'icon': 'images/icon.jpg'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu', 'debian']}}]}}]}}}], 'artifacts': [{'squid_conf_file': {'file': 'conf/squid.conf', 'type': 'tosca.artifacts.File', 'description': 'This is the configuration file of /etc/squid/squid.conf'}}], 'interfaces': {'Standard': {'create': 'scripts/install_squid3.sh', 'configure': {'inputs': {'USERNAME': {'get_property': ['SELF', 'username']}, 'PASSWORD': {'get_property': ['SELF', 'password']}, 'HTTP_PORT': {'get_property': ['SELF', 'proxy_endpoint', 'port']}}, 'implementation': 'scripts/configure_squid3.sh'}, 'start': 'scripts/start_squid3.sh', 'stop': 'scripts/stop_squid3.sh', 'delete': 'scripts/uninstall_squid3.sh'}}}}",0
"{'org.alien4cloud.vault.pub.nodes.VaultServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Vault server installation.\n', 'tags': {'icon': '/images/vault.png'}, 'properties': {'ca_pem': {'description': 'PEM-encoded certificate authority content, used to check the authenticity of client and server connections', 'type': 'string', 'required': False}, 'ca_key': {'description': 'Certificate authority private key content', 'type': 'string', 'required': False}, 'ca_passphrase': {'description': 'Certificate authority private key passphrase', 'type': 'string', 'required': False}}, 'capabilities': {'vault_server': {'type': 'org.alien4cloud.vault.pub.capabilities.VaultServer'}}}}",0
"{'org.alien4cloud.vault.pub.Policy': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Represent the vault policy\n', 'tags': {'icon': '/images/vault.png'}, 'requirements': [{'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.alien4cloud.vault.pub.relationships.PolicyHostedOnVaultServer', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.kubernetes.kubeadm.nodes.DockerEngine': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The Docker Engine.\n', 'metadata': {'icon': '/images/icon.png'}, 'capabilities': {'docker_host': 'org.alien4cloud.kubernetes.kubeadm.capabilities.DockerHost'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['centos']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/docker/create-docker.sh', 'configure': 'scripts/docker/configure-docker.sh', 'start': 'scripts/docker/start-docker.sh'}}}}",0
"{'org.alien4cloud.kubernetes.kubeadm.nodes.Kube': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'images/hyperkube.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.2.1'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.kubernetes.kubeadm.capabilities.DockerHost', 'node': 'org.alien4cloud.kubernetes.kubeadm.nodes.DockerEngine', 'relationship': 'org.alien4cloud.kubernetes.kubeadm.relationships.HostedOnDocker', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/kubernetes/create-kubelet.sh'}}}}",0
"{'org.alien4cloud.kubernetes.kubeadm.nodes.KubeMaster': {'description': 'Installs kubernetes master components.\n', 'derived_from': 'org.alien4cloud.kubernetes.kubeadm.nodes.Kube', 'metadata': {'icon': 'images/kube_master.png'}, 'attributes': {'kube_token': {'get_operation_output': ['SELF', 'Standard', 'start', 'KUBE_TOKEN']}, 'kube_sha256': {'get_operation_output': ['SELF', 'Standard', 'start', 'KUBE_SHA256']}, 'api_endpoint': {'concat': ['https://', {'get_attribute': ['HOST', 'public_ip_address']}, ':30000']}}, 'capabilities': {'kube_master': {'type': 'org.alien4cloud.kubernetes.kubeadm.capabilities.MasterCluster'}}, 'interfaces': {'Standard': {'start': {'implementation': 'scripts/kubernetes/start-master.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.kubeadm.nodes.KubeNode': {'description': 'Installs the Hyperkube process and a proxy on the node host.\n', 'derived_from': 'org.alien4cloud.kubernetes.kubeadm.nodes.Kube', 'metadata': {'icon': 'images/kube.png'}, 'requirements': [{'join_master': {'capability': 'org.alien4cloud.kubernetes.kubeadm.capabilities.MasterCluster', 'relationship': 'org.alien4cloud.kubernetes.kubeadm.relationships.JoinMaster', 'node': 'org.alien4cloud.kubernetes.kubeadm.nodes.KubeMaster', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.alien4cloud.config.location_resources.cfy_byon.nodes.ByonLocationResourcesConfigurator': {'description': 'Configure a BYON location for A4C with a single on-demand resource\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.location.nodes.SimpleLocationConfigurator', 'properties': {'type': {'type': 'string', 'required': True, 'default': 'byon', 'constraints': [{'valid_values': ['byon']}]}, 'resourceType': {'type': 'string', 'required': True, 'default': 'alien.cloudify.byon.nodes.LinuxCompute'}, 'resourceName': {'type': 'string', 'required': True, 'default': 'MyResource'}, 'resourceArchiveName': {'type': 'string', 'required': True, 'default': 'cloudify-byon-types'}, 'resourceArchiveVersion': {'type': 'string', 'required': True, 'default': '2.2.0'}, 'resourceAgentInstallMethod': {'type': 'string', 'required': True, 'default': 'none'}}, 'requirements': [{'hostpool': {'capability': 'org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.alien4cloud.config.location_resources.cfy_byon.LocationConnectsToHostpool', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_byon_location_resource.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}, 'resourceType': {'get_property': ['SELF', 'resourceType']}, 'resourceName': {'get_property': ['SELF', 'resourceName']}, 'resourceArchiveName': {'get_property': ['SELF', 'resourceArchiveName']}, 'resourceArchiveVersion': {'get_property': ['SELF', 'resourceArchiveVersion']}, 'resourceAgentInstallMethod': {'get_property': ['SELF', 'resourceAgentInstallMethod']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mysql.linux_pup.nodes.Mysql': {'derived_from': 'org.alien4cloud.mysql.pub.nodes.Mysql', 'description': 'A node that provides a mysql endpoint.', 'metadata': {'icon': '/images/mysql.png'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.agentpuppet.capabilities.PuppetAgentContainer', 'node': 'org.alien4cloud.agentpuppet.nodes.Agent', 'relationship': 'org.alien4cloud.mysql.linux_pup.relationships.MysqlHostedOnAgentPuppet'}}], 'properties': {'port': {'type': 'integer', 'default': 3306, 'description': 'The port on which the underlying database service will listen to data. </p>'}, 'name': {'type': 'string', 'required': True, 'default': 'wordpress', 'description': 'The logical name of the database.'}, 'user': {'type': 'string', 'default': 'pass', 'description': 'The special user account used for database administration.'}, 'password': {'type': 'string', 'default': 'pass', 'description': 'The password associated with the user account provided in the ‘db_user’ property.</p>'}, 'puppet_home': {'type': 'string', 'default': '/etc/puppet/mysql', 'description': 'home to move your puppet environment'}}, 'artifacts': [{'puppet_file': {'file': 'PuppetFiles/recipe.puppet'}}], 'interfaces': {'Standard': {'create': {'inputs': {'FACTER_db_password': {'get_property': ['SELF', 'password']}, 'PUPPET_HOME': {'get_property': ['SELF', 'puppet_home']}}, 'implementation': 'scripts/create_mysql.sh'}, 'configure': {'inputs': {'FACTER_db_name': {'get_property': ['SELF', 'name']}, 'FACTER_db_user': {'get_property': ['SELF', 'user']}, 'FACTER_db_password': {'get_property': ['SELF', 'password']}, 'PUPPET_HOME': {'get_property': ['SELF', 'puppet_home']}}, 'implementation': 'scripts/configure_mysql.sh'}, 'start': {'inputs': {'PUPPET_HOME': {'get_property': ['SELF', 'puppet_home']}}, 'implementation': 'scripts/start_mysql.sh'}, 'stop': {'inputs': {'PUPPET_HOME': {'get_property': ['SELF', 'puppet_home']}}, 'implementation': 'scripts/stop_mysql.sh'}, 'delete': {'inputs': {'PUPPET_HOME': {'get_property': ['SELF', 'puppet_home']}}, 'implementation': 'scripts/delete_mysql.sh'}}}}}",0
"{'org.alien4cloud.graphite.linux_ans.nodes.Graphite': {'derived_from': 'org.alien4cloud.graphite.pub.nodes.GraphiteService', 'metadata': {'icon': '/images/graphite.png'}, 'description': 'Represente a Graphite Service\n', 'properties': {'component_version': {'type': 'version', 'default': '1.0.0', 'constraints': [{'valid_values': ['1.0.0']}]}}, 'capabilities': {'data_endpoint': {'type': 'org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Endpoint to stream metrics into graphite', 'properties': {'protocol': 'http', 'port': 2003}}, 'http_endpoint': {'type': 'org.alien4cloud.graphite.pub.capabilities.GraphiteHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI Endpoint to connect to graphite', 'properties': {'protocol': 'http', 'port': 8080}}}, 'attributes': {'graphite_url': {'concat': ['http://', {'get_attribute': ['SELF', 'public_ip_address']}, ':', {'get_property': ['SELF', 'http_endpoint', 'port']}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'port_httpd': 8008}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.elasticsearch.centos.nodes.ElasticSearch': {'derived_from': 'org.alien4cloud.elasticsearch.pub.nodes.ElasticSearchService', 'description': 'Installation of replicated ElasticSearch (if this node is scaled, will be replicated).\n', 'properties': {'component_version': {'description': 'The version of Elasticsearch', 'type': 'version', 'default': '1.7.0', 'constraints': [{'valid_values': ['1.7.0']}]}, 'elasticsearch_url': {'type': 'string', 'required': True, 'default': 'https://download.elastic.co/elasticsearch/elasticsearch/elasticsearch-1.7.0.noarch.rpm'}, 'cluster_name': {'description': 'The name of the ElasticSearch cluster.', 'type': 'string', 'required': True, 'default': 'escluster'}}, 'interfaces': {'Standard': {'create': {'inputs': {'APPLICATION_URL': {'get_property': ['SELF', 'elasticsearch_url']}}, 'implementation': 'scripts/elasticsearch/install_elasticsearch.sh'}, 'configure': {'inputs': {'ES_IP': {'get_attribute': ['HOST', 'ip_address']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HTTP_PORT': {'get_property': ['SELF', 'http', 'port']}}, 'implementation': 'scripts/elasticsearch/configure_elasticsearch.sh'}, 'start': {'implementation': 'scripts/elasticsearch/start_elasticsearch.sh'}}}, 'artifacts': [{'configs': {'file': 'config/elasticsearch', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.alien4cloud.config.plugin.nodes.UploadPlugin': {'description': 'Upload CFY orchestrator plugin and configure a CFY orchestrator for A4C\n', 'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'upload_plugin.yml', 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}}, 'implementation': 'playbook/playbook.ansible'}}}, 'artifacts': [{'plugin_artifact': {'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.apache.linux_sh.Apache': {'derived_from': 'org.alien4cloud.apache.pub.nodes.Apache', 'properties': {'component_version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu', 'debian']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}}}}",0
"{'org.alien4cloud.alien4cloud.pub.nodes.Alien4CloudService': {'derived_from': 'org.alien4cloud.java.pub.nodes.JavaSoftware', 'abstract': True, 'description': 'An Alien !\n', 'tags': {'icon': '/images/alien4cloud-logo.png'}, 'capabilities': {'rest': {'type': 'org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi'}, 'http': {'type': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI'}}}}",0
"{'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator': {'derived_from': 'tosca.nodes.Root', 'description': 'Add component that can configure A4C.\n', 'tags': {'icon': '/images/config.png'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.alien4cloud.pub.capabilities.AlienConfigContainer', 'relationship': 'org.alien4cloud.alien4cloud.pub.relationships.AlienConfiguratorHostedOnAlien', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.php.debian_sh.nodes.PHP': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'PHP install through apt-get.', 'metadata': {'icon': '/images/php.png'}, 'properties': {'component_version': {'type': 'version', 'default': 5, 'constraints': [{'equal': 5}]}}, 'capabilities': {'runtime': {'type': 'org.alien4cloud.php.pub.capabilities.Runtime'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_php.sh'}}}}",0
"{'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyManagerService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': 'images/cloudify.png'}, 'capabilities': {'cloudify_api_v3': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'https', 'port': 443}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'occurrences': [0, 0]}}]}}",0
"{'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration': {'derived_from': 'tosca.nodes.Root', 'description': 'Configure the cloudify manager for a given IaaS.', 'metadata': {'icon': 'images/config.png'}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.grafana.pub.nodes.GrafanaService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/images/grafana.png'}, 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'UI endpoint'}}}}",0
"{'org.alien4cloud.alien4cloud.demo.nodes.Alien4CloudDemo': {'derived_from': 'org.alien4cloud.alien4cloud.webapp.nodes.Alien4Cloud', 'description': 'Add backup/restore features to the A4C webapp.\n'}}",0
"{'org.alien4cloud.diamond.collectors.nodes.ElasticSearchCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collect elasticsearch health metrics.', 'requirements': [{'collec_elasticsearch': {'capability': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondCollectElasticSearch', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.JolokiaCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collect a JVM health metrics (need a jolokia java agent the target JVM).', 'requirements': [{'collec_jolokia': {'capability': 'org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.A4CCollector': {'derived_from': 'org.alien4cloud.diamond.collectors.nodes.JolokiaCollector', 'description': 'Collect A4C JVM metrics.', 'requirements': [{'collec_jolokia': {'capability': 'org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.RabbitmqCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collect RabbitMQ metrics.', 'requirements': [{'collec_rabbitmq': {'capability': 'org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.PostgresqlCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collect RabbitMQ metrics.', 'requirements': [{'collec_postgresql': {'capability': 'org.alien4cloud.postgresql.pub.PostgresqlEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondPostgresqlCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.CloudifyCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collects cloudify manager indicators eg. mgmtworker count ...', 'requirements': [{'collect_cloudify': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.diamond.collectors.nodes.CloudifyHostpoolCollector': {'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondCollector', 'description': 'Collects indicator concerning hostpool eg. (allocated) instances count.', 'requirements': [{'cloudify_hostpool': {'capability': 'org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector', 'occurrences': [0, 1]}}, {'diamond': {'capability': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.aws-cli.linux_bash.nodes.AwsCli': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'install aws cli.\n', 'tags': {'icon': '/images/aws.png'}, 'properties': {'access_key': {'type': 'string', 'required': False}, 'secret_key': {'type': 'string', 'required': False}, 'region': {'type': 'string', 'default': 'eu-west-1'}}, 'capabilities': {'aws_cli': {'type': 'org.alien4cloud.aws-cli.pub.capabilities.AwsCli', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'access_key']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'secret_key']}, 'AWS_REGION': {'get_property': ['SELF', 'region']}}, 'implementation': 'scripts/install_aws_cli.sh'}}}}}",0
"{'org.alien4cloud.alien4cloud.config.backupRestoreS3.nodes.BackupRestoreS3': {'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'description': 'Backup and Restore alien4cloud.\n', 'requirements': [{'aws_cli': {'capability': 'org.alien4cloud.aws-cli.pub.capabilities.AwsCli', 'occurrences': [1, 1], 'relationship': 'org.alien4cloud.alien4cloud.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli'}}], 'properties': {'alien_init': {'type': 'string', 'required': False}, 'es_init': {'type': 'string', 'required': False}, 'aws_access_key': {'type': 'string', 'required': True}, 'aws_secret_key': {'type': 'string', 'required': True}, 'region': {'type': 'string', 'required': True, 'default': 'eu-west-1'}, 's3_url': {'type': 'string', 'required': True, 'default': 's3://a4c-demo'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}}, 'implementation': 'scripts/aws_credentials_config.sh'}, 'start': {'inputs': {'ALIEN_INIT_FILE': {'get_property': ['SELF', 'alien_init']}, 'ES_INIT_FILE': {'get_property': ['SELF', 'es_init']}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/restore_app.sh'}}, 'backup': {'execute': {'inputs': {'TAG_NAME': {'required': True, 'type': 'string'}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/backup.sh'}}, 'restore': {'execute': {'inputs': {'ALIEN_BACKUP_NAME': {'required': True, 'type': 'string'}, 'ES_SNAPSHOT': {'required': True, 'type': 'string'}, 'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'REGION': {'get_property': ['SELF', 'region']}, 'S3_URL': {'get_property': ['SELF', 's3_url']}, 'DATA_DIR': {'get_property': ['HOST', 'data_dir']}}, 'implementation': 'scripts/restore.sh'}}}}}",0
"{'org.alien4cloud.samba.samba_sh.nodes.SambaServer': {'derived_from': 'org.alien4cloud.samba.pub.nodes.SambaServer', 'description': 'Configure a samba server\n', 'tags': {'icon': '/images/samba.png'}, 'properties': {'share_name': {'type': 'string', 'default': 'ALIEN4CLOUD'}, 'share_path': {'type': 'string', 'default': '/srv/samba/alien4cloud'}}, 'capabilities': {'smb_server': 'org.alien4cloud.samba.pub.capabilities.SambaServer'}, 'interfaces': {'Standard': {'create': 'scripts/smbServer/install.sh', 'configure': {'inputs': {'SHARE_NAME': {'get_property': ['SELF', 'share_name']}, 'SHARE_PATH': {'get_property': ['SELF', 'share_path']}}, 'implementation': 'scripts/smbServer/configure.sh'}, 'start': 'scripts/smbServer/start.sh', 'stop': 'scripts/smbServer/stop.sh'}}, 'artifacts': [{'config': {'file': 'config/samba/smb.conf', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.samba.samba_sh.nodes.SambaClient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Configure a samba client\n', 'tags': {'icon': '/images/samba.png'}, 'properties': {'mount_point': {'type': 'string', 'default': '/var/alien4cloud'}}, 'requirements': [{'smb_server': {'capability': 'org.alien4cloud.samba.pub.capabilities.SambaServer', 'relationship': 'org.alien4cloud.samba.relationships.ConnectsToSambaServer'}}], 'interfaces': {'Standard': {'create': 'scripts/smbClient/install.sh'}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.hostpool.service.nodes.HostPool': {'derived_from': 'org.alien4cloud.cloudify.hostpool.pub.nodes.HostPoolService', 'description': ""Configurable hostpool service. The artifact 'archive' should be provided before deploying.\nYou can have it in the maven repository:\nurl:  https://fastconnect.org/maven/content/repositories/fastconnect[-snapshot]\nid: cloudify-hostpool-service-pkg\npackage: tar.gz\n"", 'properties': {'homedir': {'description': 'Path to the directory where to install the hostpool', 'type': 'string', 'default': '/opt/cloudify-hostpool-service'}, 'user': {'description': 'System user to create dedicated to the hostpool service', 'type': 'string', 'default': 'cfyhostpool'}, 'group': {'description': 'System group to create dedicated to the hostpool service', 'type': 'string', 'default': 'cfyhostpool'}, 'data_path': {'description': 'Where to store the pool data.\nFor HA for example, you might want to configure here the path to the mounted shared filesystem amongs the others instances.\n', 'type': 'string', 'required': False, 'default': '/opt/cloudify-hostpool-service-shared'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}]}}}], 'interfaces': {'Standard': {'inputs': {'SVC_PORT': {'get_property': ['SELF', 'cloudify_hostpool', 'port']}, 'DATA_PATH': {'get_property': ['SELF', 'data_path']}, 'HOSTPOOL_HOMEDIR': {'get_property': ['SELF', 'homedir']}, 'HOSTPOOL_USER': {'get_property': ['SELF', 'user']}, 'HOSTPOOL_GROUP': {'get_property': ['SELF', 'group']}}, 'create': 'scripts/HostPoolService/install.sh', 'start': 'scripts/HostPoolService/start.sh', 'stop': 'scripts/HostPoolService/stop.sh', 'delete': 'scripts/HostPoolService/uninstall.sh'}}, 'artifacts': [{'archive': {'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator': {'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'abstract': True, 'description': 'Configure an orchestrator for A4C\n', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyOrchestrator'}, 'discriminator': {'type': 'string', 'description': 'a prefix for all deployments', 'required': True, 'default': 'YourInitials'}, 'pluginId': {'type': 'string', 'required': True, 'default': 'alien-cloudify-4-orchestrator-premium'}, 'pluginBean': {'type': 'string', 'required': True, 'default': 'cloudify-orchestrator'}}, 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}}, 'capabilities': {'location_config': {'type': 'org.alien4cloud.alien4cloud.config.pub.capabilities.OrchestratorConfigurator', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.alien4cloud.config.pub.nodes.LocationConfigurator': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'description': 'Configure a location for an A4C orchestrator\n', 'tags': {'icon': '/images/config.png'}, 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyLocation'}, 'type': {'type': 'string', 'required': True, 'default': 'byon'}}, 'attributes': {'locationId': {'get_operation_output': ['SELF', 'Standard', 'create', 'locationId']}}, 'requirements': [{'orchestrator': {'capability': 'org.alien4cloud.alien4cloud.config.pub.capabilities.OrchestratorConfigurator', 'relationship': 'org.alien4cloud.alien4cloud.config.pub.relationships.LocationHostedOnOrchestrator', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.alien4cloud.config.applications.nodes.AddApplications': {'description': 'Create application using a template topology\n', 'derived_from': 'org.alien4cloud.alien4cloud.pub.nodes.AlienConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_applications.yml', 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.alien4cloud.config.location_resources.autoconfig.nodes.ResourcesConfigurator': {'description': 'Configure a location for A4C, resources are fed using a resource yaml file\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.location.nodes.SimpleLocationConfigurator', 'artifacts': [{'resources_file_artifact': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location_resources.yml', 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'locationId': {'get_attribute': ['SELF', 'locationId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.alien4cloud.config.location.nodes.SimpleLocationConfigurator': {'derived_from': 'org.alien4cloud.alien4cloud.config.pub.nodes.LocationConfigurator', 'description': 'Configure a location for an A4C orchestrator\n', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'MyLocation'}, 'type': {'type': 'string', 'required': True, 'default': 'byon', 'constraints': [{'valid_values': ['amazon', 'byon', 'azure']}]}}, 'attributes': {'locationId': {'get_operation_output': ['SELF', 'Standard', 'create', 'locationId']}}, 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create_location.yml', 'location_name': {'get_property': ['SELF', 'name']}, 'location_type': {'get_property': ['SELF', 'type']}, 'orchestratorId': {'get_attribute': ['HOST', 'orchestratorId']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'alien_user': {'get_attribute': ['HOST', 'alien_user']}, 'alien_password': {'get_attribute': ['HOST', 'alien_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.patches.amqp_client.nodes.AmqpClientPatch': {'derived_from': 'org.alien4cloud.cloudify.patches.pub.nodes.CloudifyPatch', 'description': 'Fix AMQP client patch.', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.consul.consul_sh.nodes.ConsulAgent': {'abstract': True, 'derived_from': 'org.alien4cloud.consul.pub.nodes.ConsulAgent', 'description': 'Base Consul discovery service installation.\n', 'tags': {'icon': '/images/consul.png'}, 'capabilities': {'consul_agent': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'valid_source_types': ['org.alien4cloud.consul.pub.capabilities.ConsulClient']}}, 'properties': {'download_url': {'description': 'The URL to download the consul archive.', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip'}, 'data_dir': {'description': 'The location on the FS where consul will store data.', 'type': 'string', 'required': True, 'default': '/var/consul'}, 'tls_enabled': {'description': 'Defines if the communication with the consul agent will be secured (HTTPS).', 'type': 'boolean', 'required': True, 'default': False}, 'ca_passphrase': {'description': 'The provided CA certificate passphrase.', 'type': 'string', 'required': False}, 'encrypt_key': {'description': 'The key to encrypt gossip exchanges into consul cluster.', 'type': 'string', 'required': False}}}}",0
"{'org.alien4cloud.consul.consul_sh.nodes.ConsulServer': {'derived_from': 'org.alien4cloud.consul.pub.nodes.ConsulAgent', 'description': 'Consul discovery service installation (server node).\n', 'properties': {'agent_mode': {'description': 'Indicate the consul agent mode (actually server).', 'type': 'string', 'constraints': [{'equal': 'server'}], 'required': True, 'default': 'server'}}, 'capabilities': {'consul_server': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulServer', 'valid_source_types': ['org.alien4cloud.consul.pub.capabilities.ConsulClient']}}, 'interfaces': {'Standard': {'create': {'inputs': {'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/consul/create_consul.sh'}, 'configure': {'inputs': {'CONSUL_AGENT_MODE': {'get_property': ['SELF', 'agent_mode']}, 'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_BIND_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}, 'CONSUL_API_PORT': {'get_property': ['SELF', 'consul_agent', 'port']}, 'TLS_ENABLED': {'get_property': ['SELF', 'tls_enabled']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'ENCRYPT_KEY': {'get_property': ['SELF', 'encrypt_key']}}, 'implementation': 'scripts/consul/start_consul_agent.sh'}, 'start': {'inputs': {'CONSUL_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}}, 'implementation': 'scripts/consul/join_consul_servers.sh'}}}, 'artifacts': [{'configs': {'file': 'config/consul', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.consul.consul_sh.nodes.ConsulClient': {'derived_from': 'org.alien4cloud.consul.pub.nodes.ConsulAgent', 'description': 'Consul discovery service installation (client node).\n', 'properties': {'agent_mode': {'description': 'Indicate the consul agent mode (actually client).', 'type': 'string', 'constraints': [{'equal': 'client'}], 'default': 'client'}}, 'requirements': [{'consul_server': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulServer', 'relationship': 'org.alien4cloud.consul.consul_sh.relationships.JoinCluster'}}], 'interfaces': {'Standard': {'create': {'inputs': {'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/consul/create_consul.sh'}, 'start': {'inputs': {'CONSUL_AGENT_MODE': {'get_property': ['SELF', 'agent_mode']}, 'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_BIND_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}, 'CONSUL_API_PORT': {'get_property': ['SELF', 'consul_agent', 'port']}, 'TLS_ENABLED': {'get_property': ['SELF', 'tls_enabled']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'ENCRYPT_KEY': {'get_property': ['SELF', 'encrypt_key']}}, 'implementation': 'scripts/consul/start_consul_agent.sh'}}}, 'artifacts': [{'configs': {'file': 'config/consul', 'type': 'tosca.artifacts.File'}}, {'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.elasticsearch.pub.nodes.ElasticSearchService': {'derived_from': 'org.alien4cloud.java.pub.nodes.JavaSoftware', 'description': 'Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected.\n', 'tags': {'icon': 'images/elasticsearch.png'}, 'capabilities': {'elasticsearch': {'type': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchTransportAPI', 'occurrences': [0, 'UNBOUNDED']}, 'http': {'type': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.http-proxy.pub.nodes.HttpProxy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'attributes': {'apache_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/']}}, 'capabilities': {'proxy_endpoint': 'org.alien4cloud.http-proxy.pub.capabilities.HttpProxyEndpoint'}}}",0
"{'org.alien4cloud.mock.bash.nodes.BashMockHost': {'description': 'A software component that hosts MockComponent.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockHost', 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start AnsibleMockHost', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.nodes.BashMockComponent': {'description': 'A software component hosted on GenericHost and that can connect to many other Generic.\n', 'derived_from': 'org.alien4cloud.mock.pub.nodes.AbstractMockComponent', 'capabilities': {'mock_endpoint': {'type': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentHostedOnHost', 'occurrences': [1, 1]}}, {'mock_endpoint': {'capability': 'org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint', 'relationship': 'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'create': {'inputs': {'operation': 'create AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 50, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'configure': {'inputs': {'operation': 'configure AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'start': {'inputs': {'operation': 'start AnsibleMockComponent', 'duration': {'get_property': ['SELF', 'duration']}, 'variation': {'get_property': ['SELF', 'variation']}, 'weight': 20, 'log_length': {'get_property': ['SELF', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyAsAService': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'metadata': {'icon': 'images/cloudify.png'}, 'capabilities': {'cloudify_api_v3': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'https', 'port': 443}}, 'cloudify_hostpool': {'type': 'org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 8080}}}}}",0
"{'org.alien4cloud.diamond.agent_linux.nodes.DiamondLinuxAgent': {'description': 'Deploy a Diamond Agent on linux.\n', 'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondAgent', 'properties': {'datasource_name': {'type': 'string', 'description': 'The datasource that connects grafana to graphite.\nWe need it to prepare grafana dashboards.\n', 'required': True, 'default': 'Graphite_DS'}, 'collectors_path': {'type': 'string', 'description': 'The path where the collector sources are (read only).', 'required': True, 'default': '/opt/ansible_diamond/env/share/diamond/collectors'}, 'collectors_conf_path': {'type': 'string', 'description': 'The path where the collector configuration are (read only).', 'required': True, 'default': '/etc/ansible_diamond/collectors'}}, 'attributes': {'dashboard_dir': {'get_operation_output': ['SELF', 'Standard', 'create', 'dashboard_dir']}, 'grafana_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_url']}, 'grafana_user': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_user']}, 'grafana_password': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_password']}, 'grafana_dashboads_urls': {'get_operation_output': ['SELF', 'Standard', 'start', 'grafana_dashboads_urls']}}, 'requirements': [{'data_endpoint': {'capability': 'org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite', 'occurrences': [0, 1]}}, {'grafana': {'capability': 'org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana', 'occurrences': [0, 1]}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'collectors_conf_path': {'get_property': ['SELF', 'collectors_conf_path']}}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml', 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.config.offline_plugin.nodes.PluginConfigurator': {'derived_from': 'org.alien4cloud.apache.pub.nodes.WebApplication', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'tags': {'icon': '/images/config.png'}, 'properties': {'plugin_archive_url': {'type': 'string', 'required': True, 'default': 'https://gigaspaces-repository-eu.s3.amazonaws.com/cloudify/wagons/cloudify-host-pool-plugin/1.5/cloudify_host_pool_plugin-1.5-py27-none-linux_x86_64-centos-Core.wgn'}}, 'requirements': [{'cfy': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3', 'relationship': 'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToCfy', 'occurrences': [1, 1]}}, {'alien': {'capability': 'org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi', 'relationship': 'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToA4C', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'document_root': {'get_property': ['HOST', 'document_root']}, 'offline_ip': {'get_attribute': ['HOST', 'ip_address']}, 'offline_port': {'get_property': ['HOST', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.manager.v3.nodes.Cloudify3Manager': {'derived_from': 'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyManagerService', 'description': 'Cloudify CLI and Manager in place installation.', 'properties': {'ssh_user': {'type': 'string', 'required': True, 'description': 'User of the manager machine to be used by the cloudify manager.'}, 'ssh_key_filename': {'type': 'string', 'required': True, 'description': 'Name of the file in which we will store the manager ssh key (see required artifact).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas (in case of iaas key).'}, 'agents_user': {'type': 'string', 'required': True, 'description': 'Default ssh user for agents.'}, 'admin_username': {'type': 'string', 'required': True, 'description': 'Administration account username.'}, 'admin_password': {'type': 'string', 'required': True, 'description': 'Administration account password.'}, 'component_version': {'type': 'version', 'default': '3.4.2', 'constraints': [{'valid_values': ['3.4.2']}]}}, 'attributes': {'manager_url': {'concat': ['https://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_api_v3', 'port']}]}}, 'capabilities': {'cloudify_modules': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'occurrences': [0, 'UNBOUNDED']}, 'elastic_search': {'type': 'org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'port': 9200}}, 'rabbitmq_management': {'type': 'org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 15672, 'user': 'cloudify', 'password': 'c10udify'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}, {'tosca.capabilities.Container': {'properties': [{'num_cpus': {'greater_or_equal': 2}}, {'mem_size': {'greater_or_equal': '4 Gib'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'implementation': 'scripts/Cloudify3Manager/install.sh'}, 'configure': {'inputs': {'SSH_USER': {'get_property': ['SELF', 'ssh_user']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}, 'AGENTS_USER': {'get_property': ['SELF', 'agents_user']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'PRIVATE_IP': {'get_attribute': ['HOST', 'ip_address']}, 'RABBITMQ_USER': {'get_property': ['SELF', 'rabbitmq_management', 'user']}, 'RABBITMQ_PASSWORD': {'get_property': ['SELF', 'rabbitmq_management', 'password']}}, 'implementation': 'scripts/Cloudify3Manager/configure.sh'}, 'start': {'inputs': {'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'API_PORT': {'get_property': ['SELF', 'cloudify_api_v3', 'port']}, 'API_PROTOCOL': 'https', 'MAX_INSTANCES': {'get_property': ['HOST', 'scalable', 'max_instances']}}, 'implementation': 'scripts/Cloudify3Manager/start.sh'}}}, 'artifacts': [{'resources': {'file': 'files/Cloudify3Manager', 'type': 'tosca.artifacts.File'}}, {'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File', 'description': 'This artifact contains the manager ssh key. Note that by default it will also be used'}}]}}",unknown
"{'org.alien4cloud.cloudify.manager.v3.nodes.Cloudify3AwsConfiguration': {'derived_from': 'org.alien4cloud.cloudify.manager.v4.nodes.CloudifyAwsConfiguration', 'description': 'Configure the cloudify manager for aws.', 'interfaces': {'Standard': {'start': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/Cloudify3Manager/aws_do_configure.sh'}}}, 'artifacts': [{'resources': {'file': 'files/Cloudify3Manager', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.agentpuppet.nodes.Agent': {'abstract': False, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A node that provides a mysql endpoint.', 'metadata': {'icon': '/images/Puppet_Logo.jpg'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['ubuntu']}}]}}]}}}], 'capabilities': {'host': 'org.alien4cloud.agentpuppet.capabilities.PuppetAgentContainer'}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/create.sh'}, 'delete': {'implementation': 'scripts/delete.sh'}}}}}",0
"{'org.alien4cloud.cloudify.hostpool.awsfeeder.nodes.AWSHostpoolFeeder': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Feed a hostpool with many instanciated EC2 instances.\nYou can use custom commands to populate and clear the host pool and EC2.\nYou can share EC2 instances between several Hostpool hosts (if host_per_instance > 1). Ideal for isolated and compatibles components, load tests, or containers but just understand it will be a colloc ;)\nHostpool is cleared and instances are stopped at Standard.stop operation.\nTODO: add tags\n', 'metadata': {'icon': 'images/aws.png'}, 'properties': {'aws_access_key': {'type': 'string', 'required': True, 'description': 'The AWS access key'}, 'aws_secret_key': {'type': 'string', 'required': True, 'description': 'The AWS secret key'}, 'key_name': {'type': 'string', 'required': True, 'description': 'The AWS key name'}, 'key_content': {'type': 'string', 'required': True, 'description': 'The AWS key'}, 'region': {'type': 'string', 'required': False, 'description': 'The region where to start instances', 'default': 'eu-west-1'}, 'instance_groups': {'type': 'string', 'required': True, 'description': 'Security groups the instances will be associated with'}, 'instance_username': {'type': 'string', 'required': True, 'default': 'ubuntu', 'constraints': [{'valid_values': ['ubuntu', 'ec2-user']}], 'description': 'The user to use to connect to the instance'}, 'instance_type': {'type': 'string', 'required': True, 'default': 't2.nano', 'constraints': [{'valid_values': ['t2.nano', 't2.small', 't2.medium', 'm4.large', 'c4.8xlarge']}], 'description': 'The AWS instance type'}, 'instance_image': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ami-4c4b003b', 'ami-47a23a30']}], 'default': 'ami-47a23a30', 'description': 'The AWS ami (Centos:4c or Ubuntu:47)'}, 'instance_count': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of instances to start'}, 'host_per_instance': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of host to declare in hostpool per EC2 instance'}, 'instance_name': {'type': 'string', 'required': True, 'default': 'HostpoolInstance', 'description': 'The AWS instance name'}, 'instance_os': {'type': 'string', 'required': True, 'default': 'linux', 'description': 'The instance os for hostpool config', 'constraints': [{'valid_values': ['linux', 'windows']}]}}, 'attributes': {'hostpool_url': {'get_property': ['SELF', 'instance_name']}}, 'requirements': [{'hostpool': {'capability': 'org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi', 'relationship': 'org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}}, 'org.alien4cloud.cloudify.hostpool.awsfeeder.Admin': {'clear': {'description': ""Clear Hostpool from all it's entries and shutdown related EC2 instances.\nThe 'instance_name' property is used to detect and stop EC2 instances.\n"", 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}}, 'implementation': 'playbook/playbook.ansible'}, 'feed': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_name': {'get_property': ['SELF', 'instance_name']}, 'instance_count': {'get_property': ['SELF', 'instance_count']}, 'host_per_instance': {'get_property': ['SELF', 'host_per_instance']}, 'instance_username': {'get_property': ['SELF', 'instance_username']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_image': {'get_property': ['SELF', 'instance_image']}, 'instance_type': {'get_property': ['SELF', 'instance_type']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}}, 'implementation': 'playbook/playbook.ansible'}, 'feed_custom': {'description': 'Start EC2 instances and populate Hostpool.\nThe node properties are used for instance properties and count.\n', 'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'feed.yml', 'aws_access_key': {'get_property': ['SELF', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SELF', 'aws_secret_key']}, 'key_name': {'get_property': ['SELF', 'key_name']}, 'key_content': {'get_property': ['SELF', 'key_content']}, 'region': {'get_property': ['SELF', 'region']}, 'instance_os': {'get_property': ['SELF', 'instance_os']}, 'instance_groups': {'get_property': ['SELF', 'instance_groups']}, 'instance_count': {'type': 'integer', 'required': True, 'default': 1}, 'instance_username': {'type': 'string', 'required': True, 'default': 'ubuntu', 'constraints': [{'valid_values': ['ubuntu', 'ec2-user']}], 'description': 'The user to use to connect to the instance'}, 'instance_type': {'type': 'string', 'required': True, 'default': 't2.nano', 'constraints': [{'valid_values': ['t2.nano', 't2.small', 't2.medium', 'm4.large', 'c4.8xlarge']}], 'description': 'The AWS instance type'}, 'instance_image': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ami-4c4b003b', 'ami-47a23a30']}], 'default': 'ami-47a23a30', 'description': 'The AWS ami (Centos:4c or Ubuntu:47)'}, 'host_per_instance': {'type': 'integer', 'required': True, 'default': 1, 'description': 'Number of host to declare in hostpool per EC2 instance'}, 'instance_name': {'type': 'string', 'required': True, 'default': 'HostpoolInstance', 'description': 'The AWS instance name'}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.cloudify.manager.v4.nodes.CloudifyManager': {'derived_from': 'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyManagerService', 'description': 'Cloudify CLI and Manager in place installation.', 'properties': {'ssh_user': {'type': 'string', 'required': True, 'description': 'User of the manager machine to be used by the cloudify manager.'}, 'ssh_key_filename': {'type': 'string', 'required': True, 'description': 'Name of the file in which we will store the manager ssh key (see required artifact).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas (in case of iaas key).'}, 'agents_user': {'type': 'string', 'required': True, 'description': 'Default ssh user for agents.'}, 'component_version': {'type': 'version', 'default': '4.1.1', 'constraints': [{'valid_values': ['4.0.1-ga', '4.1.0', '4.1.1']}]}}, 'attributes': {'manager_url': {'concat': ['https://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'cloudify_api_v3', 'port']}]}}, 'capabilities': {'cloudify_modules': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'occurrences': [0, 'UNBOUNDED']}, 'rabbitmq_management': {'type': 'org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'protocol': 'http', 'port': 15672, 'user': 'cloudify', 'password': 'c10udify'}}, 'postgresql': {'type': 'org.alien4cloud.postgresql.pub.PostgresqlEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'properties': {'port': 5432, 'user': 'cloudify', 'password': 'cloudify'}}, 'diamond_collector': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint', 'occurrences': [0, 1]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel']}}]}}, {'tosca.capabilities.Container': {'properties': [{'num_cpus': {'greater_or_equal': 2}}, {'mem_size': {'greater_or_equal': '4 Gib'}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}}, 'implementation': 'scripts/install.sh'}, 'configure': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'SSH_USER': {'get_property': ['SELF', 'ssh_user']}, 'SSH_KEY_FILENAME': {'get_property': ['SELF', 'ssh_key_filename']}, 'AGENTS_USER': {'get_property': ['SELF', 'agents_user']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'VERSION': {'get_property': ['SELF', 'version']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'PRIVATE_IP': {'get_attribute': ['HOST', 'ip_address']}}, 'implementation': 'scripts/configure.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['SELF', 'component_version']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'ADMIN_USERNAME': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['SELF', 'cloudify_api_v3', 'admin_password']}, 'API_PORT': {'get_property': ['SELF', 'cloudify_api_v3', 'port']}, 'API_PROTOCOL': 'https', 'MAX_INSTANCES': {'get_property': ['HOST', 'scalable', 'max_instances']}}, 'implementation': 'scripts/start.sh'}}}, 'artifacts': [{'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File', 'description': 'This artifact contains the manager ssh key. Note that by default it will also be used'}}, {'cluster_python_script': {'file': 'scripts/cluster.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is the python script that configure the cluster. It should not be overriden.'}}, {'ssl_ui_conf_python_script': {'file': 'scripts/conf_ip.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is the python script that configure the cluster. It should not be overriden.'}}, {'cli_utils_script': {'file': 'scripts/cli/utils.py', 'type': 'tosca.artifacts.File', 'description': 'This artifact is a patch to workaround issue with certificate.'}}]}}",unknown
"{'org.alien4cloud.cloudify.manager.v4.nodes.CloudifySSHKey': {'derived_from': 'tosca.nodes.Root', 'description': 'An SSH key to install on the cloudify manager.', 'properties': {'key_file_name': {'type': 'string', 'required': True, 'description': 'Name of the key file name to be saved on the cloudify manager (for example user_name.pem).'}, 'keypair_name': {'type': 'string', 'required': False, 'description': 'Optional name of the key as known by the iaas.'}}, 'capabilities': {'installed_key': {'type': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifySSHKey', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'cfy_manager': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyManagerContainer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'attributes': {'key_file_path': {'get_operation_output': ['SELF', 'Standard', 'create', 'KEY_FILE_PATH']}}, 'interfaces': {'Standard': {'create': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['SELF', 'key_file_name']}}, 'implementation': 'scripts/install_key.sh'}}}, 'artifacts': [{'key_file': {'file': 'key.pem', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.manager.v4.nodes.CloudifyAwsConfiguration': {'derived_from': 'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for aws.', 'properties': {'aws_access_key': {'type': 'string', 'required': True, 'description': 'The aws access key of the account to use to start aws instances.'}, 'aws_secret_key': {'type': 'string', 'required': True, 'description': 'The aws secret key of the account to use to start aws instances.'}, 'aws_region': {'type': 'string', 'required': True, 'default': 'eu-west-1', 'description': 'The aws region to use to start aws instances.'}, 'agent_security_groups': {'type': 'string', 'required': True, 'default': 'sg-cffd98b6', 'description': 'Comma separated list of security groups to use for agents.'}}, 'requirements': [{'agent_key': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifySSHKey', 'relationship': 'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureAWSKey', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'AWS_ACCESS_KEY': {'get_property': ['SELF', 'aws_access_key']}, 'AWS_SECRET_KEY': {'get_property': ['SELF', 'aws_secret_key']}, 'AWS_REGION': {'get_property': ['SELF', 'aws_region']}, 'AGENT_SECURITY_GROUP': {'get_property': ['SELF', 'agent_security_groups']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}}, 'implementation': 'scripts/aws_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/aws_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.manager.v4.nodes.CloudifyAzureConfiguration': {'derived_from': 'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for azure.', 'properties': {'subscription_id': {'type': 'string', 'required': True}, 'tenant_id': {'type': 'string', 'required': True}, 'client_id': {'type': 'string', 'required': True}, 'client_secret': {'type': 'string', 'required': True}, 'location': {'type': 'string', 'required': True, 'default': 'westeurope'}}, 'interfaces': {'Standard': {'create': {'inputs': {'SUBSCRIPTION_ID': {'get_property': ['SELF', 'subscription_id']}, 'TENANT_ID': {'get_property': ['SELF', 'tenant_id']}, 'CLIENT_ID': {'get_property': ['SELF', 'client_id']}, 'CLIENT_SECRET': {'get_property': ['SELF', 'client_secret']}, 'LOCATION': {'get_property': ['SELF', 'location']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}}, 'implementation': 'scripts/azure_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/azure_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.cloudify.manager.v4.nodes.CloudifyOpenstackConfiguration': {'derived_from': 'org.alien4cloud.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration', 'description': 'Configure the cloudify manager for openstack.', 'properties': {'keystone_url': {'type': 'string', 'required': True, 'description': 'The URL of keystone url (i.e: http://129.185.67.11:5000/v2.0)\n'}, 'username': {'type': 'string', 'required': True, 'description': 'The login to connect to openstack'}, 'password': {'type': 'string', 'required': True, 'description': 'The password to connect to openstack'}, 'region': {'type': 'string', 'required': True, 'default': 'RegionOne', 'description': 'The openstack region to use to create instances'}, 'tenant_name': {'type': 'string', 'required': True, 'description': 'The openstack tenant to use to create instances'}, 'agents_keypair_name': {'type': 'string', 'required': True, 'description': 'The keypair name to connect to the agents'}, 'agents_security_group_name': {'type': 'string', 'required': True, 'description': 'The security group name to use on agents'}, 'management_network_id': {'type': 'string', 'required': True, 'description': 'The network id attached to the manager'}, 'management_network_name': {'type': 'string', 'required': True, 'description': 'The network name attached to the manager'}}, 'requirements': [{'agent_key': {'capability': 'org.alien4cloud.cloudify.manager.pub.capabilities.CloudifySSHKey', 'relationship': 'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureOpenstackKey', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'KEYSTONE_URL': {'get_property': ['SELF', 'keystone_url']}, 'USERNAME': {'get_property': ['SELF', 'username']}, 'PASSWORD': {'get_property': ['SELF', 'password']}, 'REGION': {'get_property': ['SELF', 'region']}, 'TENANT_NAME': {'get_property': ['SELF', 'tenant_name']}, 'AGENT_SH_USER': {'get_property': ['HOST', 'agents_user']}, 'AGENTS_KEYPAIR_NAME': {'get_property': ['SELF', 'agents_keypair_name']}, 'AGENTS_SECURITY_GROUP_NAME': {'get_property': ['SELF', 'agents_security_group_name']}, 'MANAGEMENT_NETWORK_ID': {'get_property': ['SELF', 'management_network_id']}, 'MANAGEMENT_NETWORK_NAME': {'get_property': ['SELF', 'management_network_name']}}, 'implementation': 'scripts/openstack_init_conf_file.sh'}, 'start': {'inputs': {'CFY_VERSION': {'get_property': ['HOST', 'component_version']}, 'SSH_KEY_FILENAME': {'get_property': ['HOST', 'ssh_key_filename']}, 'KEYPAIR_NAME': {'get_property': ['HOST', 'keypair_name']}, 'ADMIN_USERNAME': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_username']}, 'ADMIN_PASSWORD': {'get_property': ['HOST', 'cloudify_api_v3', 'admin_password']}}, 'implementation': 'scripts/openstack_do_configure.sh'}}}, 'artifacts': [{'python_script': {'file': 'scripts/iaas/cfy_config_iaas.py', 'type': 'tosca.artifacts.File'}}]}}",0
"{'radon.nodes.google.GoogleCloudResource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.google', 'abstract': 'false', 'final': 'false'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.google.GoogleCloudPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.google.GoogleCloudFunction', 'relationship': 'radon.relationships.google.GoogleTriggers', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'radon.nodes.mongodb.MongoDBMS': {'derived_from': 'tosca.nodes.DBMS', 'metadata': {'targetNamespace': 'radon.nodes.mongodb', 'abstract': 'false', 'final': 'false'}, 'attributes': {'url': {'type': 'string'}}, 'properties': {'administrator': {'type': 'string', 'required': False}, 'port': {'type': 'string', 'default': 27017}, 'authorization_enabled': {'type': 'boolean', 'default': False}, 'component_version': {'type': 'version', 'default': 3.6, 'constraints': [{'valid_values': [3.2, 3.4, 3.6]}]}, 'db_path': {'type': 'string', 'default': '/var/lib/mongo'}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.mongodb.MongoDBDatabase'], 'type': 'tosca.capabilities.Compute'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'MONGODB_VERSION': {'type': 'version', 'required': True, 'default': {'get_property': ['SELF', 'component_version']}}, 'MONGODB_ADMIN': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'administrator']}}, 'MONGODB_AUTHORIZATION': {'type': 'boolean', 'required': True, 'default': {'get_property': ['SELF', 'authorization_enabled']}}, 'IP_ADDRESS': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'host', 'private_address']}}, 'MONGODB_DB_PATH': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'db_path']}}, 'MONGODB_ROOT_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'root_password']}}, 'MONGODB_PORT': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'port']}}}}}}}",0
"{'radon.nodes.docker.DockerEngine': {'derived_from': 'radon.nodes.abstract.ContainerRuntime', 'metadata': {'targetNamespace': 'radon.nodes.docker', 'abstract': 'false', 'final': 'false'}, 'attributes': {'port': {'type': 'integer', 'default': {'get_attribute': ['SELF', 'docker', 'port']}}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.docker.DockerApplication'], 'type': 'radon.capabilities.container.DockerRuntime'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'radon.nodes.apache.openwhisk.OpenWhiskPlatform': {'derived_from': 'radon.nodes.abstract.CloudPlatform', 'metadata': {'targetNamespace': 'radon.nodes.apache.openwhisk', 'abstract': 'false', 'final': 'false'}, 'attributes': {'api_url': {'type': 'string'}, 'auth_key': {'type': 'string'}}, 'properties': {'auth_username': {'type': 'string', 'description': 'the username part of the authorization key used to gain access to the OpenWhisk API'}, 'kubernetes_version': {'type': 'version', 'required': False, 'default': 1.8}, 'auth_password': {'type': 'string', 'description': 'the password part of the authorization key used to gain access to the OpenWhisk API'}, 'api_host': {'type': 'string'}, 'default_namespace': {'type': 'string'}, 'api_port': {'type': 'integer', 'default': 31001}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.apache.openwhisk.OpenWhiskFunction'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'KUBERNETES_VERSION': {'type': 'version', 'required': False, 'default': {'get_property': ['SELF', 'kubernetes_version']}}}}, 'configure': {'inputs': {'AUTH_KEY': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'auth_key']}}, 'API_URL': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'api_url']}}}}}}}}}",0
"{'radon.nodes.abstract.ContainerRuntime': {'derived_from': 'tosca.nodes.Container.Runtime', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.abstract.ContainerApplication'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'radon.nodes.opefaas.OpenFaasPlatform': {'derived_from': 'radon.nodes.abstract.CloudPlatform', 'metadata': {'targetNamespace': 'radon.nodes.opefaas', 'abstract': 'false', 'final': 'false'}, 'attributes': {'url': {'type': 'string', 'default': {'concat': ['http://', {'get_property': ['SELF', 'api_gateway_host']}, ':', {'get_property': ['SELF', 'api_gateway_port']}]}}}, 'properties': {'api_gateway_port': {'type': 'integer', 'description': 'port to access OpenFAAS API gateway at', 'default': 31112}, 'prometheus_port': {'type': 'integer', 'default': 31119}, 'basic_auth_user': {'type': 'string', 'description': 'username used for basic authentication'}, 'basic_auth_password': {'type': 'string', 'description': 'password used for basic authentication'}, 'kubernetes_version': {'type': 'version', 'required': False, 'default': 1.8}, 'api_gateway_host': {'type': 'string', 'description': 'host name to access OpenFAAS API gateway at'}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.openfaas.OpenFaasFunction'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'BASIC_AUTH_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'basic_auth_password']}}, 'KUBERNETES_VERSION': {'type': 'version', 'required': False, 'default': {'get_property': ['SELF', 'kubernetes_version']}}, 'URL': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'url']}}, 'BASIC_AUTH_USER': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'basic_auth_user']}}}}}}}",0
"{'radon.nodes.apache.openwhisk.OpenWhiskFunction': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.apache.openwhisk', 'abstract': 'false', 'final': 'false'}, 'attributes': {'rest_api_endpoint': {'type': 'string'}}, 'properties': {'function_name': {'type': 'string'}, 'function_package_name': {'type': 'string'}, 'function_runtime': {'type': 'string', 'constraints': [{'valid_values': ['go_1_11', 'java_8', 'ballerina_0_990', 'nodejs_12', 'nodejs_10', 'nodejs_8', 'nodejs_6', 'php_7_3', 'python_2', 'python_3', 'ruby_2_5', 'swift_4_2', 'dotnet_2_2']}]}, 'entry_point': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.apache.openwhisk.OpenWhiskPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'invocable': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.Invocable'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'FUNCTION_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_name']}}, 'FUNCTION_RUNTIME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_runtime']}}, 'ENTRY_POINT': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'entry_point']}}}}}}}",0
"{'radon.nodes.Workstation': {'derived_from': 'tosca.nodes.Compute', 'metadata': {'targetNamespace': 'radon.nodes', 'abstract': 'false', 'final': 'false'}, 'attributes': {'private_address': {'type': 'string', 'default': 'localhost'}, 'public_address': {'type': 'string', 'default': 'localhost'}}, 'properties': {'pypi_dependencies': {'type': 'list', 'description': 'pypi_dependencies that will be installed in workstation', 'entry_schema': {'type': 'string'}}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'pypi_dependencies': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'pypi_dependencies']}}}, 'operations': {'create': {'description': 'The standard create operation', 'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yaml'}}}}",0
"{'radon.nodes.datapipeline.destination.PublishLocal': {'derived_from': 'radon.nodes.datapipeline.destination.PublishDataEndPoint', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.destination', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'PublishLocal_localConn'}}, 'properties': {'create_if_missing': {'type': 'boolean', 'required': False, 'default': True}, 'directory': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'PublishLocal_localConn.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['templateFile_localConn'], 'timeout': 0}}, 'configure': {'inputs': {'create_if_missing': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'create_if_missing']}}, 'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'directory': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'directory']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'templateFile_localConn': {'type': 'tosca.artifacts.File', 'file': 'PublishLocal_localConn.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}}}}",0
"{'radon.nodes.datapipeline.SourcePB': {'derived_from': 'radon.nodes.datapipeline.PipelineBlock', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline', 'abstract': 'true', 'final': 'false'}, 'requirements': [{'connectToPipeline': {'capability': 'radon.capabilities.datapipeline.ConnectToPipeline', 'node': 'radon.nodes.abstract.DataPipeline', 'relationship': 'radon.relationships.datapipeline.ConnectNifiLocal', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.datapipeline.destination.PubsS3Bucket': {'derived_from': 'radon.nodes.datapipeline.destination.PublishRemote', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.destination', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'S3Bucket_dest_PG_LocalConn'}}, 'properties': {'BucketName': {'type': 'string'}, 'cred_file_path': {'type': 'string'}, 'Region': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'S3Bucket_dest_PG_LocalConn.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['templateFile_localConn'], 'timeout': 0}}, 'configure': {'inputs': {'cred_file_path': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'cred_file_path']}}, 'BucketName': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'BucketName']}}, 'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'Region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'Region']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'templateFile_LocalConn': {'type': 'tosca.artifacts.File', 'file': 'S3Bucket_dest_PG_LocalConn.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}, 'templateFile_RmtConn': {'type': 'tosca.artifacts.File', 'file': 'S3Bucket_dest_PG_RmtConn.xml'}}}}",0
"{'radon.nodes.nifi.Nifi': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.nifi', 'abstract': 'false', 'final': 'false'}, 'properties': {'port': {'type': 'string', 'description': 'The port exposed by Apache Nifi', 'default': 8080}, 'component_version': {'type': 'string', 'description': 'The version of Apache Nifi'}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.abstract.DataPipeline'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'stop': {'implementation': {'primary': 'stop', 'timeout': 0}}, 'start': {'implementation': {'primary': 'start', 'timeout': 0}}, 'create': {'inputs': {'tarball_version': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'tarball_version': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}, 'delete': {'inputs': {'tarball_version': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'stop': {'type': 'radon.artifacts.Ansible', 'file': 'stop.yml'}, 'start': {'type': 'radon.artifacts.Ansible', 'file': 'start.yml'}, 'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.nodejs.NodeJSApplication': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.nodejs', 'abstract': 'false', 'final': 'false'}, 'properties': {'node_version': {'type': 'version', 'default': '10.16.0'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'NODE_VERSION': {'type': 'version', 'required': True, 'default': {'get_property': ['SELF', 'node_version']}}}}}}}",0
"{'radon.nodes.testing.Locust': {'derived_from': 'radon.nodes.testing.LoadTestAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'false', 'final': 'false'}, 'properties': {'worker_hostnames': {'type': 'string', 'description': 'Comma-separated list of worker hostnames', 'required': False}}}}",0
"{'radon.nodes.datapipeline.PipelineBlock': {'derived_from': 'radon.nodes.abstract.DataPipeline', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline', 'abstract': 'true', 'final': 'false'}, 'attributes': {'id': {'type': 'string'}}, 'properties': {'name': {'type': 'string', 'description': 'Name of the pipeline node', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.nifi.Nifi', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'stop': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'stop', 'timeout': 0}}, 'start': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'start', 'timeout': 0}}, 'delete': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'stop': {'type': 'tosca.artifacts.File', 'file': 'stop.yml'}, 'start': {'type': 'tosca.artifacts.File', 'file': 'start.yml'}, 'delete': {'type': 'tosca.artifacts.File', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.azure.AzureCosmosDB': {'derived_from': 'radon.nodes.azure.AzureResource', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'resource_group': {'type': 'string'}, 'account_name': {'type': 'string'}, 'connection_string_setting': {'type': 'string'}, 'collection_name': {'type': 'string'}}, 'requirements': [{'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.azure.AzureResourceTriggeredFunction', 'relationship': 'radon.relationships.azure.AzureCosmosDBTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'COLLECTION_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['collection_name']}}, 'ACCOUNT_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['account_name']}}, 'RESOURCE_GROUP': {'type': 'string', 'required': True, 'default': {'get_property': ['resource_group']}}, 'CONNECTION_STRING_SETTING': {'type': 'string', 'required': True, 'default': {'get_property': ['connection_string_setting']}}}}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'properties': {'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'name': {'type': 'string', 'description': 'the logical name of the database'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'database_endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'example.org.tosca.nodetypes.OpenFaaS': {'derived_from': 'radon.nodes.datapipeline.process.FaaSFunction', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}, 'attributes': {'id': {'description': 'Unique ID of the pipeline', 'type': 'string'}, 'pipeline_type': {'description': 'type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc', 'type': 'string'}}, 'properties': {'content_type': {'type': 'string', 'description': 'The type of the content (text/html, text/plain, image/jpeg, ... )'}, 'schedulingStrategy': {'type': 'string', 'description': 'Either EVENT_DRIVEN (default) or CRON_DRIVEN. EVENT_DRIVEN is similar with TIMER_DRIVEN with 0 sec value in NiFi.', 'required': False, 'default': 'EVENT_DRIVEN'}, 'function_URL': {'type': 'string', 'description': 'Remote URL of the OpenFaaS function'}, 'schedulingPeriodCRON': {'type': 'string', 'description': 'For CRON_DRIVEN give in CRON syntax.', 'required': False, 'default': '* * * * * ?'}, 'HTTP_method': {'type': 'string', 'description': 'Function invokation method.', 'required': False, 'default': 'POST'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'stop': {'inputs': {'pipeline_id': {'type': 'string', 'required': False, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'stop', 'timeout': 0}}, 'start': {'inputs': {'pipeline_id': {'type': 'string', 'required': False, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'start', 'timeout': 0}}, 'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'FaaS_localConn.xml'}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'content_type': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'content_type']}}, 'schedulingStrategy': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'schedulingStrategy']}}, 'function_URL': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'function_URL']}}, 'schedulingPeriodCRON': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'schedulingPeriodCRON']}}, 'pipeline_id': {'type': 'string', 'required': False, 'default': {'get_attribute': ['SELF', 'id']}}, 'HTTP_method': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'HTTP_method']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}, 'delete': {'inputs': {'pipeline_id': {'type': 'string', 'required': False, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'stop': {'type': 'tosca.artifacts.File', 'file': 'stop.yml'}, 'templateFile_localConn': {'type': 'tosca.artifacts.File', 'file': 'FaaS_localConn.xml'}, 'start': {'type': 'tosca.artifacts.File', 'file': 'start.yml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}, 'delete': {'type': 'tosca.artifacts.File', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.mongodb.MongoDBDatabase': {'derived_from': 'tosca.nodes.Database', 'metadata': {'targetNamespace': 'radon.nodes.mongodb', 'abstract': 'false', 'final': 'false'}, 'properties': {'authentication_database': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'radon.nodes.mongodb.MongoDBMS', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'database_endpoint': {'occurrences': [0, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Database'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'DB_USER_AUTH_DB': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'authentication_database']}}, 'DB_USER': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'user']}}, 'DB_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}, 'DB_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'password']}}}}}}}",0
"{'radon.nodes.abstract.workload.OpenWorkload': {'derived_from': 'radon.nodes.abstract.Workload', 'metadata': {'targetNamespace': 'radon.nodes.abstract.workload', 'abstract': 'false', 'final': 'false'}, 'properties': {'interarrival_time': {'type': 'radon.datatypes.RandomVariable'}}}}",0
"{'radon.nodes.datapipeline.process.LocalAction': {'derived_from': 'radon.nodes.datapipeline.MidwayPB', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.apache.kafka.KafkaBroker': {'derived_from': 'radon.nodes.java.JavaApplication', 'metadata': {'targetNamespace': 'radon.nodes.apache.kafka', 'abstract': 'false', 'final': 'false'}, 'attributes': {'broker_urls': {'description': 'represents a list of one or more urls that corresponds to the brokers of this kafka cluster', 'type': 'list'}, 'java_home': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'java_home']}}, 'kafka_home': {'type': 'string', 'default': {'get_operation_output': ['SELF', 'Standard', 'create', 'KAFKA_HOME']}}}, 'properties': {'log_cleaner_enable': {'type': 'boolean', 'default': False}, 'zk_heap_size': {'type': 'integer', 'default': 500}, 'scala_version': {'type': 'version', 'default': 2.11, 'constraints': [{'valid_values': [2.11, 2.12]}]}, 'component_version': {'type': 'version', 'default': '0.10.2.2', 'constraints': [{'valid_values': ['0.10.2.2', '0.11.0.3']}]}, 'kf_heap_size': {'type': 'integer', 'default': 1024}}, 'capabilities': {'host': {'occurrences': [0, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.apache.kafka.KafkaTopic'], 'type': 'radon.capabilities.kafka.KafkaHosting'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'stop': {'inputs': {'JAVA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'java_home']}}, 'KAFKA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'kafka_home']}}}}, 'start': {'inputs': {'JAVA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'java_home']}}, 'KAFKA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'kafka_home']}}}}, 'create': {'inputs': {'KAFKA_VERSION': {'type': 'version', 'required': True, 'default': {'get_property': ['SELF', 'component_version']}}, 'SCALA_VERSION': {'type': 'version', 'required': True, 'default': {'get_property': ['SELF', 'scala_version']}}}}, 'configure': {'inputs': {'ZK_HEAP_SIZE': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'zk_heap_size']}}, 'JAVA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'java_home']}}, 'KAFKA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'kafka_home']}}, 'IP_ADDRESS': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'LOG_CLEANER_ENABLE': {'type': 'boolean', 'required': True, 'default': {'get_property': ['SELF', 'log_cleaner_enable']}}, 'KF_HEAP_SIZE': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'kf_heap_size']}}}}}}}}}",0
"{'radon.nodes.aws.AwsApiGateway': {'derived_from': 'radon.nodes.abstract.ApiGateway', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'attributes': {'arn': {'type': 'string'}}, 'properties': {'api_title': {'type': 'string', 'description': 'Name of the API'}, 'api_description': {'type': 'string', 'description': 'Description of the API'}, 'api_version': {'type': 'string', 'description': 'Version of the API'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.aws.AwsLambdaFunction', 'relationship': 'radon.relationships.aws.ApiGatewayTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'api_title': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'api_title']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'api_description': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'api_description']}}, 'api_version': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'api_version']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}}}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'properties': {'algorithm': {'type': 'string', 'required': False}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'client': {'description': ""the Floating (IP) client's on the public network can connect to"", 'occurrences': [0, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Public'}}}}",0
"{'radon.nodes.java.JavaApplication': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.java', 'abstract': 'false', 'final': 'false'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from', 'derived_from': 'tosca.entity.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'attributes': {'tosca_name': {'type': 'string'}, 'state': {'type': 'string', 'default': 'initial'}, 'tosca_id': {'type': 'string'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'feature': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Node'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'radon.nodes.aws.AwsPlatform': {'derived_from': 'radon.nodes.abstract.CloudPlatform', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'attributes': {'role_arn': {'description': 'AWS role arn identifier', 'type': 'string'}}, 'properties': {'name': {'type': 'string', 'default': 'AWS'}, 'region': {'type': 'string'}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.aws.AwsLambdaFunction', 'radon.nodes.aws.AwsS3Bucket', 'radon.nodes.VM.EC2', 'radon.nodes.aws.AwsApiGateway', 'radon.nodes.aws.AwsDynamoDBTable', 'radon.nodes.aws.AwsLambdaFunctionFromS3'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'implementation': {'primary': 'configure', 'dependencies': ['policy'], 'timeout': 0}}}}}, 'artifacts': {'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}, 'policy': {'type': 'tosca.artifacts.File', 'file': 'policy.json'}}}}",0
"{'radon.nodes.legacy.AwsCreateRole': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.legacy', 'abstract': 'false', 'final': 'false'}, 'attributes': {'role_arn': {'description': 'AWS role arn identifier', 'type': 'string'}}, 'properties': {'role_name': {'type': 'string'}, 'aws_region': {'type': 'string'}, 'role_description': {'type': 'string'}}, 'capabilities': {'requires_role': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.legacy.AwsLambdaFunction'], 'type': 'tosca.capabilities.Compute'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'role_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'role_name']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'aws_region']}}, 'role_description': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'role_description']}}}, 'operations': {'create': {'implementation': {'primary': 'create_role', 'dependencies': ['policy'], 'timeout': 0}}}}}, 'artifacts': {'create_role': {'type': 'radon.artifacts.Ansible', 'file': 'create_role.yml'}, 'policy': {'type': 'tosca.artifacts.File', 'file': 'policy.json'}}}}",0
"{'radon.nodes.testing.AB': {'derived_from': 'radon.nodes.testing.LoadTestAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'false', 'final': 'false'}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes.Container', 'abstract': 'false', 'final': 'false'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'storage': {'capability': 'tosca.capabilities.Storage', 'occurrences': [1, 1]}}, {'network': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.SockShop': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'radon.nodes.azure.AzureFunction': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'app_name': {'type': 'string'}, 'app_runtime': {'type': 'string', 'description': 'if empty, assumes app already existing', 'required': False, 'constraints': [{'valid_values': ['dotnet', 'node', 'java', 'python', 'powershell']}]}, 'function_name': {'type': 'string'}, 'app_os_type': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['Windows', 'Linux']}]}, 'app_storage_account': {'type': 'string', 'description': 'if empty, assumes app already existing', 'required': False}, 'timeout': {'type': 'integer', 'default': 300, 'constraints': [{'in_range': [1, 600]}]}, 'app_resource_group': {'type': 'string', 'description': 'if empty, assumes app already existing', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.azure.AzurePlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.aws.AwsLambdaFunction': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'attributes': {'role_arn': {'description': ""AWS function's role ARN"", 'type': 'string'}, 'arn': {'description': ""AWS function's Amazon Resource Name (ARN)"", 'type': 'string'}, 'region': {'type': 'string'}}, 'properties': {'handler': {'type': 'string', 'description': 'Handler for lambda function', 'default': 'index.handler'}, 'memory': {'type': 'integer', 'description': 'Function memory in MB', 'default': 128, 'constraints': [{'in_range': [128, 3008]}]}, 'memory_range': {'type': 'range', 'description': 'Range of function memory in MB to search', 'required': False, 'constraints': [{'in_range': [128, 3008]}]}, 'runtime': {'type': 'string', 'description': 'Function runtime (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)', 'default': 'nodejs', 'constraints': [{'valid_values': ['nodejs', 'nodejs4.3', 'nodejs6.10', 'nodejs8.10', 'nodejs10.x', 'java8', 'python2.7', 'python3.6', 'python3.7', 'dotnetcore1.0', 'dotnetcore2.0', 'dotnetcore2.1', 'nodejs4.3-edge', 'go1.x', 'ruby2.5']}]}, 'alias': {'type': 'string', 'description': ""Lambda function's alias"", 'required': False, 'default': 'dev'}, 'concurrency_range': {'type': 'range', 'description': 'Range of function concurrency to search', 'required': False, 'constraints': [{'in_range': [1, 'UNBOUNDED']}]}, 'statement_id': {'type': 'string', 'description': 'Lambda policy statement identifier'}, 'zip_file': {'type': 'string', 'description': 'path to a function zip file'}, 'timeout': {'type': 'integer', 'description': 'Function timeout in seconds', 'default': 300, 'constraints': [{'in_range': [1, 900]}]}, 'concurrency': {'type': 'integer', 'description': 'Function concurrency', 'required': False, 'default': 0, 'constraints': [{'in_range': [0, 'UNBOUNDED']}]}, 'env_vars': {'type': 'map', 'description': ""Function's environment variables"", 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'monitor': {'capability': 'radon.capabilities.monitoring.Monitor', 'node': 'radon.nodes.monitoring.PushGateway', 'relationship': 'radon.relationships.monitoring.AWSIsMonitoredBy', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'role_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'host', 'role_arn']}}, 'lambda_runtime': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'runtime']}}, 'function_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}, 'lambda_timeout': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'timeout']}}, 'lambda_memory': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'memory']}}, 'func_alias': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'alias']}}, 'permission_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'statement_id']}}, 'lambda_handler': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'handler']}}, 'zip_file': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'zip_file']}}, 'lambda_concurrency': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'concurrency']}}, 'env_vars': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'env_vars']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",unknown
"{'radon.nodes.nifi.Pipeline': {'derived_from': 'radon.nodes.abstract.DataPipeline', 'metadata': {'targetNamespace': 'radon.nodes.nifi', 'abstract': 'false', 'final': 'false'}, 'attributes': {'id': {'description': 'Unique ID of the pipeline', 'type': 'string'}, 'pipeline_type': {'description': 'type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc', 'type': 'string'}}, 'properties': {'template_name': {'type': 'string', 'description': 'name of the pipeline'}, 'cred_file_path': {'type': 'string', 'description': 'credential file for access and secret key'}, 'object_name': {'type': 'string', 'description': 'object name in the process group'}, 'template_file': {'type': 'string', 'description': 'XML implementation of the pipeline'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.nifi.Nifi', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'connect': {'capability': 'tosca.capabilities.Endpoint', 'node': 'radon.nodes.nifi.Pipeline', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 1]}}], 'capabilities': {'connect': {'description': 'Capability to receive data from other pipeline nodes', 'occurrences': [0, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.nifi.Pipeline'], 'type': 'tosca.capabilities.Endpoint'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'stop': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': {'primary': 'stop', 'timeout': 0}}, 'start': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': {'primary': 'start', 'timeout': 0}}, 'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'template_file']}}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'cred_file_path': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'cred_file_path']}}, 'object_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'object_name']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}, 'delete': {'inputs': {'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'stop': {'type': 'radon.artifacts.Ansible', 'file': 'stop.yml'}, 'start': {'type': 'radon.artifacts.Ansible', 'file': 'start.yml'}, 'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",unknown
"{'radon.nodes.azure.AzureResourceTriggeredFunction': {'derived_from': 'radon.nodes.azure.AzureFunction', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'capabilities': {'invocable': {'occurrences': [1, 1], 'valid_source_types': ['radon.nodes.azure.AzureResource'], 'type': 'radon.capabilities.Invocable'}}}}",0
"{'radon.nodes.datapipeline.MidwayPB': {'derived_from': 'radon.nodes.datapipeline.PipelineBlock', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline', 'abstract': 'true', 'final': 'false'}, 'requirements': [{'ConnectToPipeline': {'capability': 'radon.capabilities.datapipeline.ConnectToPipeline', 'node': 'radon.nodes.datapipeline.PipelineBlock', 'relationship': 'radon.relationships.datapipeline.ConnectNifiLocal', 'occurrences': [1, 1]}}], 'capabilities': {'ConnectToPipeline': {'occurrences': [1, 1], 'valid_source_types': ['radon.nodes.datapipeline.SourcePB', 'radon.nodes.datapipeline.MidwayPB'], 'type': 'radon.capabilities.datapipeline.ConnectToPipeline'}}}}",0
"{'radon.nodes.aws.AwsS3Bucket': {'derived_from': 'radon.nodes.abstract.ObjectStorage', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'attributes': {'bucket_name': {'type': 'string'}, 'region': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.abstract.Function', 'relationship': 'radon.relationships.aws.AwsTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.abstract.ApiGateway': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.abstract.CloudPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.abstract.Function', 'relationship': 'radon.relationships.Triggers', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'radon.nodes.azure.AzureHttpTriggeredFunction': {'derived_from': 'radon.nodes.azure.AzureFunction', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'attributes': {'url': {'type': 'string', 'default': {'get_operation_output': ['SELF', 'Standard', 'create', 'URL']}}}, 'properties': {'max_outstanding_requests': {'type': 'integer', 'default': 200}, 'max_concurrent_requests': {'type': 'integer', 'default': 100}, 'route': {'type': 'string', 'required': False}, 'auth_level': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['anonymous', 'function', 'admin']}]}, 'methods': {'type': 'list', 'required': False}, 'route_prefix': {'type': 'string', 'default': 'api'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'AUTH_LEVEL': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'auth_level']}}, 'ROUTE': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'route']}}, 'ROUTE_PREFIX': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'route_prefix']}}, 'MAX_OUTSTANDING_REQUESTS': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'max_outstanding_requests']}}, 'METHODS': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'methods']}}, 'MAX_CONCURRENT_REQUESTS': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'max_concurrent_requests']}}}}}}}",0
"{'radon.nodes.testing.QT': {'derived_from': 'radon.nodes.testing.LoadTestAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.datapipeline.process.RouteToRemote': {'derived_from': 'radon.nodes.datapipeline.MidwayPB', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.testing.CTTAgent': {'derived_from': 'radon.nodes.docker.DockerApplication', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'true', 'final': 'false'}}}",0
"{'radon.nodes.legacy.AwsS3Notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.legacy', 'abstract': 'false', 'final': 'false'}, 'properties': {'aws_region': {'type': 'string'}}, 'requirements': [{'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}, {'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'lambda_function_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}}, 'bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'bucket', 'bucket_name']}}, 'event_name': {'type': 'string', 'required': True, 'default': 'radon_on_jpg_add'}, 'suffix': {'type': 'string', 'required': True, 'default': '.jpg'}, 'region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'aws_region']}}, 'events': {'type': 'string', 'required': True, 'default': 's3:ObjectCreated:*'}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'radon.nodes.datapipeline.process.FaaSFunction': {'derived_from': 'radon.nodes.datapipeline.process.RemoteAction', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.datapipeline.destination.PublishRemote': {'derived_from': 'radon.nodes.datapipeline.destination.PublishDataEndPoint', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.destination', 'abstract': 'false', 'final': 'false'}}}",0
"{'tosca.nodes.Storage.BlockStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'metadata': {'targetNamespace': 'tosca.nodes.Storage', 'abstract': 'false', 'final': 'false'}, 'properties': {'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Abstract.Storage': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes.Abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'size': {'type': 'size', 'default': '0 MB', 'constraints': [{'greater_or_equal': '0 MB'}]}, 'name': {'type': 'string'}}}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'tosca.nodes.Container', 'abstract': 'false', 'final': 'false'}, 'capabilities': {'scalable': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Scalable'}, 'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['tosca.nodes.Container.Application'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'radon.nodes.abstract.Service': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'map', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Entry'}}, 'name': {'type': 'string', 'required': False}}, 'capabilities': {'endpoint_service': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'radon.nodes.aws.AwsDynamoDBTable': {'derived_from': 'tosca.nodes.Database', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'properties': {'hash_key_name': {'type': 'string', 'description': 'The name of the hash key', 'required': False}, 'range_key_name': {'type': 'string', 'description': 'The name of the range key', 'required': False}, 'read_capacity': {'type': 'integer', 'description': 'Read throughput capacity (units) to provision', 'required': False, 'default': 1}, 'range_key_type': {'type': 'string', 'description': 'The type of the range key {STRING, NUMBER, BINARY}', 'required': False}, 'write_capacity': {'type': 'integer', 'description': 'Write throughput capacity (units) to provision', 'required': False, 'default': 1}, 'hash_key_type': {'type': 'string', 'description': 'The type of the hash key {STRING, NUMBER, BINARY}', 'required': False}, 'table_name': {'type': 'string', 'description': 'The name of the AWS DynamoDB table'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.aws.AwsLambdaFunction', 'relationship': 'radon.relationships.aws.AwsTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'hash_key_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'hash_key_name']}}, 'read_capacity': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'read_capacity']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'write_capacity': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'write_capacity']}}, 'hash_key_type': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'hash_key_type']}}, 'table_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'table_name']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.abstract.ObjectStorage': {'derived_from': 'tosca.nodes.Storage.ObjectStorage', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'map', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Entry'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.abstract.CloudPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.abstract.Function', 'relationship': 'radon.relationships.Triggers', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'metadata': {'targetNamespace': 'tosca.nodes.Storage', 'abstract': 'false', 'final': 'false'}, 'properties': {'maxsize': {'type': 'size', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'radon.nodes.datapipeline.destination.PubGCS': {'derived_from': 'radon.nodes.datapipeline.destination.PublishRemote', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.destination', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'PubGCSPB'}}, 'properties': {'BucketName': {'type': 'string'}, 'cred_file_path': {'type': 'string'}, 'ProjectID': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'PubGCSPB.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['PubGCSPB_template'], 'timeout': 0}}, 'configure': {'inputs': {'cred_file_path': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'cred_file_path']}}, 'BucketName': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'BucketName']}}, 'ProjectID': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'ProjectID']}}, 'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'PubGCSPB_template': {'type': 'tosca.artifacts.File', 'file': 'PubGCSPB.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}}}}",0
"{'radon.nodes.azure.AzureResource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.azure.AzurePlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.azure.AzureResourceTriggeredFunction', 'relationship': 'radon.relationships.azure.AzureTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}}}}}}",0
"{'radon.nodes.mysql.MySQLDBMS': {'derived_from': 'tosca.nodes.DBMS', 'metadata': {'targetNamespace': 'radon.nodes.mysql', 'abstract': 'false', 'final': 'false'}, 'properties': {'port': {'type': 'string', 'default': 3306}, 'root_password': {'type': 'string'}, 'component_version': {'type': 'string', 'default': 5.6}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.mysql.MySQLDatabase'], 'type': 'tosca.capabilities.Compute'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'DBMS_PORT': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'port']}}, 'DBMS_ROOT_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'root_password']}}}}}}}",0
"{'radon.nodes.docker.DockerApplication': {'derived_from': 'radon.nodes.abstract.ContainerApplication', 'metadata': {'targetNamespace': 'radon.nodes.docker', 'abstract': 'false', 'final': 'false'}, 'requirements': [{'host': {'capability': 'radon.capabilities.container.DockerRuntime', 'node': 'radon.nodes.abstract.ContainerRuntime', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.java.JavaRuntime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.java', 'abstract': 'false', 'final': 'false'}, 'attributes': {'headless': {'type': 'boolean', 'default': {'get_attribute': ['SELF', 'host', 'headless']}}, 'java_home': {'type': 'string', 'default': {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_HOME']}}, 'only_jre': {'type': 'boolean', 'default': {'get_attribute': ['SELF', 'host', 'only_jre']}}, 'component_version': {'type': 'version', 'default': {'get_attribute': ['SELF', 'host', 'java_version']}}}, 'capabilities': {'host': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.container.JavaRuntime'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'JAVA_HOME': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'java_home']}}, 'JAVA_VERSION': {'type': 'version', 'required': True, 'default': {'get_attribute': ['SELF', 'component_version']}}, 'JAVA_IS_JRE': {'type': 'boolean', 'required': True, 'default': {'get_attribute': ['SELF', 'only_jre']}}, 'JAVA_IS_HEADLESS': {'type': 'boolean', 'required': True, 'default': {'get_attribute': ['SELF', 'headless']}}}}}}}",0
"{'radon.nodes.datapipeline.DestinationPB': {'derived_from': 'radon.nodes.datapipeline.PipelineBlock', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline', 'abstract': 'true', 'final': 'false'}, 'capabilities': {'ConnectToPipeline': {'occurrences': [1, 1], 'valid_source_types': ['radon.nodes.datapipeline.MidwayPB', 'radon.nodes.datapipeline.SourcePB'], 'type': 'radon.capabilities.datapipeline.ConnectToPipeline'}}}}",0
"{'radon.nodes.openfaas.OpenFaasFunction': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.openfaas', 'abstract': 'false', 'final': 'false'}, 'attributes': {'function_url': {'type': 'string'}, 'gateway_url': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'url']}}}, 'properties': {'function_language_template': {'type': 'string', 'constraints': [{'valid_values': ['csharp', 'dockerfile', 'docekrfile-armhf', 'go-armhf', 'go', 'java8', 'node-arm64', 'node-armhf', 'node', 'php7', 'python-armhf', 'python', 'python3-armhf', 'python3', 'ruby']}]}, 'function_name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.openfaas.OpenFaasPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'invocable': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.Invocable'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'GATEWAY': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'host', 'url']}}, 'FUNCTION_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'functiom_name']}}, 'FUNCTION_LANGUAGE_TEMPLATE': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_language_template']}}}}}}}",0
"{'radon.nodes.azure.AzureTimerTriggeredFunction': {'derived_from': 'radon.nodes.azure.AzureFunction', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'schedule': {'type': 'string', 'description': 'CRON expression or timespan to describe when and at which frequency the function will be triggered.'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'SCHEDULE': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'schedule']}}}}}}}",0
"{'radon.nodes.google.GoogleCloudBucketTriggeredFunction': {'derived_from': 'radon.nodes.google.GoogleCloudFunction', 'metadata': {'targetNamespace': 'radon.nodes.google', 'abstract': 'false', 'final': 'false'}, 'properties': {'trigger_bucket_name': {'type': 'string', 'description': 'Name of the GCP bucket to trigger this function'}}, 'requirements': [{'monitor': {'capability': 'radon.capabilities.monitoring.Monitor', 'node': 'radon.nodes.monitoring.PushGateway', 'relationship': 'radon.relationships.monitoring.GCPIsMonitoredBy', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'invocable': {'occurrences': [1, 1], 'valid_source_types': ['radon.nodes.google.GoogleCloudBucket'], 'type': 'radon.capabilities.Invocable'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'environment_variables': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'environment_variables']}}, 'function_memory': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_memory']}}, 'function_location': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'function_timeout': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_timeout']}}, 'function_bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_bucket_name']}}, 'project_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'project_id']}}, 'trigger_bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'trigger_bucket_name']}}, 'function_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_name']}}, 'function_runtime': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_runtime']}}, 'service_account_file': {'type': 'string', 'required': True, 'default': {'get_input': 'service_account_file'}}, 'zip_file': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'zip_file']}}, 'function_entry_point': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_entry_point']}}}, 'operations': {'create': {'description': 'The standard create operation', 'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'description': 'The standard delete operation', 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'properties': {'port': {'type': 'integer', 'description': 'the port the DBMS service will listen to for data and requests', 'required': False}, 'root_password': {'type': 'string', 'description': 'the optional root password for the DBMS service', 'required': False}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['tosca.nodes.Database'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map'}, 'ports': {'type': 'map'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.Storage.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'scalable': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Scalable'}, 'endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.OperatingSystem'}, 'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['tosca.nodes.SoftwareComponent'], 'type': 'tosca.capabilities.Compute'}, 'binding': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'radon.nodes.testing.LoadTestAgent': {'derived_from': 'radon.nodes.testing.CTTAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'true', 'final': 'false'}}}",0
"{'radon.nodes.monitoring.NodeExporter': {'derived_from': 'radon.nodes.docker.DockerApplication', 'metadata': {'targetNamespace': 'radon.nodes.monitoring.NodeExporter', 'abstract': 'false', 'final': 'false'}, 'properties': {'node_exporter_ip': {'type': 'string', 'default': {'get_attribute': ['SELF', 'dependency', 'public_ip']}}, 'consul_ip': {'type': 'string', 'default': {'get_input': 'consul_ip'}}, 'node_exporter_service_port': {'type': 'string', 'default': {'get_input': 'node_exporter_service_port'}}}, 'requirements': [{'host': {'capability': 'radon.capabilities.container.DockerRuntime', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'storage': {'capability': 'tosca.capabilities.Storage', 'occurrences': [0, 1]}}, {'network': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 1]}}, {'dependency': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.VM.EC2', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'node_exporter_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'dependency', 'public_ip']}}, 'consul_ip': {'type': 'string', 'required': True, 'default': {'get_input': 'consul_ip'}}, 'node_exporter_service_port': {'type': 'string', 'required': True, 'default': {'get_input': 'node_exporter_service_port'}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}}}}",0
"{'radon.nodes.google.GoogleCloudFunction': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.google', 'abstract': 'false', 'final': 'false'}, 'properties': {'function_memory': {'type': 'integer', 'description': 'Limit on the amount of memory the function can use.', 'default': 256, 'constraints': [{'valid_values': [128, 256, 512, 1024, 2048]}]}, 'environment_variables': {'type': 'map', 'description': ""The function's environment variables"", 'required': False, 'entry_schema': {'type': 'string'}}, 'function_timeout': {'type': 'integer', 'default': 60, 'constraints': [{'in_range': [1, 540]}]}, 'function_bucket_name': {'type': 'string', 'description': 'Name of the GCP bucket containing the zipped GCP function'}, 'function_name': {'type': 'string'}, 'function_runtime': {'type': 'string', 'constraints': [{'valid_values': ['nodejs8', 'nodejs10', 'python37', 'go111', 'nodejs6']}]}, 'zip_file': {'type': 'string', 'description': 'Path to a zip file containing the function code'}, 'function_entry_point': {'type': 'string', 'description': 'The name of the function that will be executed', 'default': 'entry_point'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.google.GoogleCloudPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'monitor': {'capability': 'radon.capabilities.monitoring.Monitor', 'node': 'radon.nodes.monitoring.PushGateway', 'relationship': 'radon.relationships.monitoring.GCPIsMonitoredBy', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'radon.nodes.VM.EC2': {'derived_from': 'tosca.nodes.Compute', 'metadata': {'targetNamespace': 'radon.nodes.VM', 'abstract': 'false', 'final': 'false'}, 'attributes': {'public_ip': {'type': 'string'}, 'id': {'type': 'string'}}, 'properties': {'image': {'type': 'string', 'default': 'ami-00890f614e48ce866'}, 'ssh_key_name': {'type': 'string'}, 'vpc_subnet_id': {'type': 'string'}, 'instance_type': {'type': 'string', 'default': 't2.micro'}, 'ssh_key_file': {'type': 'string'}, 'ssh_user': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'description': 'create', 'inputs': {'image': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'image']}}, 'ssh_key_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'ssh_key_name']}}, 'vpc_subnet_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'vpc_subnet_id']}}, 'region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'instance_type': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'instance_type']}}, 'ssh_key_file': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'ssh_key_file']}}, 'ssh_user': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'ssh_user']}}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'description': 'delete', 'inputs': {'id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.datapipeline.destination.PublishDataEndPoint': {'derived_from': 'radon.nodes.datapipeline.DestinationPB', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.destination', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.datapipeline.process.RemoteAction': {'derived_from': 'radon.nodes.datapipeline.MidwayPB', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.testing.JMeter': {'derived_from': 'radon.nodes.testing.LoadTestAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'false', 'final': 'false'}, 'properties': {'jmeter_properties': {'type': 'string', 'description': 'Location and filename of a file with JMeter properties (optional)', 'required': False}, 'worker_hostnames': {'type': 'string', 'description': 'Comma-separated list of worker hostnames', 'required': False}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'radon.nodes.google.GoogleCloudPlatform': {'derived_from': 'radon.nodes.abstract.CloudPlatform', 'metadata': {'targetNamespace': 'radon.nodes.google', 'abstract': 'false', 'final': 'false'}, 'properties': {'project_id': {'type': 'string', 'description': 'The unique project-id to be used'}, 'name': {'type': 'string', 'default': 'GCP'}, 'region': {'type': 'string', 'description': 'The region to be used for deployment'}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.google.GoogleCloudFunction', 'radon.nodes.google.GoogleCloudResource'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'description': 'The standard create operation', 'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'radon.nodes.mysql.MySQLDatabase': {'derived_from': 'tosca.nodes.Database', 'metadata': {'targetNamespace': 'radon.nodes.mysql', 'abstract': 'false', 'final': 'false'}, 'properties': {'password': {'type': 'string'}, 'user': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'radon.nodes.mysql.MySQLDBMS', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'database_endpoint': {'occurrences': [0, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Database'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'DB_USER': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'user']}}, 'DB_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}, 'DBMS_ROOT_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'root_password']}}, 'DB_PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'password']}}}}}}}",0
"{'radon.nodes.abstract.Workload': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'radon.datatypes.workload.Entries', 'required': False}, 'name': {'type': 'string', 'required': False}}, 'requirements': [{'invoker': {'capability': 'radon.capabilities.Invocable', 'relationship': 'radon.relationships.Triggers', 'occurrences': [0, 'UNBOUNDED']}}, {'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'radon.relationships.ConnectsTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'radon.nodes.abstract.WebApplication': {'derived_from': 'tosca.nodes.WebApplication', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'map', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Entry'}}, 'granularity': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['monolithic', 'coarse-grained', 'fine-grained']}]}, 'name': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'radon.nodes.abstract.WebServer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.google.GoogleCloudBucket': {'derived_from': 'radon.nodes.google.GoogleCloudResource', 'metadata': {'targetNamespace': 'radon.nodes.google', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string', 'description': 'The name of the GCP bucket', 'required': False}}, 'capabilities': {'storage_endpoint': {'occurrences': [0, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'bucket_location': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'project_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'project_id']}}, 'bucket_name': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'name']}}, 'service_account_file': {'type': 'string', 'required': True, 'default': {'get_input': 'service_account_file'}}}, 'operations': {'create': {'description': 'The standard create operation', 'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'description': 'The standard delete operation', 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.legacy.AwsLambdaFunction': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.legacy', 'abstract': 'false', 'final': 'false'}, 'attributes': {'function_arn': {'description': 'AWS function arn', 'type': 'string'}}, 'properties': {'aws_region': {'type': 'string'}, 'lambda_runtime': {'type': 'string', 'description': 'Runtime for lambda (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'}, 'function_name': {'type': 'string'}, 'lambda_timeout': {'type': 'string', 'description': 'Function timeout in seconds'}, 'lambda_memory': {'type': 'string', 'description': 'Function memory in MB'}, 'function_alias': {'type': 'string'}, 'permission_id': {'type': 'string'}, 'zip_file': {'type': 'string', 'description': 'path to a function zip file'}, 'lambda_handler': {'type': 'string', 'description': 'Handler for lambda function'}}, 'requirements': [{'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}, {'requires_role': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'capabilities': {'receives_notification': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.legacy.AwsS3Notification'], 'type': 'tosca.capabilities.Compute'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'aws_region']}}, 'lambda_runtime': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'lambda_runtime']}}, 'function_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_name']}}, 'lambda_timeout': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'lambda_timeout']}}, 'lambda_memory': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'lambda_memory']}}, 'func_alias': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_alias']}}, 'permission_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'permission_id']}}, 'zip_file': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'zip_file']}}, 'aws_role': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}}, 'lambda_handler': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'lambda_handler']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'dependencies': ['X-test-ImageRes'], 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'X-test-ImageRes': {'type': 'radon.artifacts.archive.Zip', 'file': 'X-test-ImageRes.zip'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",unknown
"{'radon.nodes.testing.DeploymentTestAgent': {'derived_from': 'radon.nodes.testing.CTTAgent', 'metadata': {'targetNamespace': 'radon.nodes.testing', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}}}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'capabilities': {'data_endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['tosca.nodes.WebApplication'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'radon.nodes.datapipeline.source.ConsumeLocal': {'derived_from': 'radon.nodes.datapipeline.source.ConsumeDataEndPoint', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.source', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'ConsumeLocal_localConn'}}, 'properties': {'directory': {'type': 'string', 'description': 'Path to the file/folder'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'ConsumeLocal_localConn.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['templateFile_localConn'], 'timeout': 0}}, 'configure': {'inputs': {'pipeline_id': {'type': 'string', 'required': False, 'default': {'get_attribute': ['SELF', 'id']}}, 'directory': {'type': 'string', 'description': 'Directory on local machine from where the data will be read.', 'required': True, 'default': {'get_property': ['SELF', 'directory']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'templateFile_LocalConn': {'type': 'tosca.artifacts.File', 'description': 'Nifi template to consume local data and send to local pipelines.', 'file': 'ConsumeLocal_localConn.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}, 'templateFile_RmtConn': {'type': 'tosca.artifacts.File', 'description': 'Nifi template to consume local data and send to remote pipelines.', 'file': 'ConsumeLocal_RmtConn.xml'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'properties': {'component_version': {'type': 'version', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.abstract.CloudPlatform': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.abstract.Function', 'radon.nodes.abstract.ObjectStorage'], 'type': 'tosca.capabilities.Container'}}}}",0
"{'example.org.tosca.nodetypes.ConsGCSBucket': {'derived_from': 'radon.nodes.datapipeline.source.ConsumeRemote', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.source', 'abstract': 'false', 'final': 'false'}, 'properties': {'bucket': {'type': 'string', 'description': 'Name of the bucket', 'required': False}, 'project_ID': {'type': 'string', 'description': 'ID of the project.'}, 'credential_JSON_file': {'type': 'string', 'description': 'Path of the credentials in the form of JSON file'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': False, 'default': 'GCSObject_consume.xml'}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'bucket': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'bucket']}}, 'project_ID': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'project_ID']}}, 'credential_JSON_file': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'credential_JSON_file']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}, 'templatefile_localConn': {'type': 'tosca.artifacts.File', 'file': 'GCSObject_consume.xml'}}}}",0
"{'radon.nodes.apache.kafka.KafkaTopic': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.apache.kafka', 'abstract': 'false', 'final': 'false'}, 'attributes': {'broker_urls': {'description': 'represents a list of one or more urls that corresponds to the brokers of the kafka cluster this topic is hosted on', 'type': 'list', 'default': {'get_attribute': ['SELF', 'host', 'broker_urls']}}}, 'properties': {'partitions': {'type': 'integer', 'required': False, 'default': 1}, 'min_insync_replicas': {'type': 'integer', 'required': False, 'default': 1, 'constraints': [{'greater_or_equal': 0}]}, 'segment_size': {'type': 'integer', 'required': False, 'default': 1000000, 'constraints': [{'greater_or_equal': 1}]}, 'replicas': {'type': 'integer', 'required': False, 'default': 1}, 'roll_time': {'type': 'integer', 'required': False, 'default': 10080, 'constraints': [{'greater_or_equal': 1}]}, 'topic_name': {'type': 'string'}, 'retention': {'type': 'integer', 'required': False, 'default': 10080}}, 'requirements': [{'host': {'capability': 'radon.capabilities.kafka.KafkaHosting', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'openwhisk_invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.apache.openwhisk.OpenWhiskFunction', 'relationship': 'radon.relationships.apache.openwhisk.OpenWhiskKafkaTriggers', 'occurrences': [0, 'UNBOUNDED']}}, {'openfaas_invoker': {'capability': 'radon.capabilities.Invocable', 'node': 'radon.nodes.openfaas.OpenFaasFunction', 'relationship': 'radon.relationships.openfaas.OpenFaasKafkaTriggers', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'kafka_topic': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.kafka.KafkaTopic'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'MIN_INSYNC_REPLICAS': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'min_insync_replicas']}}, 'RETENTION': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'retention']}}, 'REPLICAS': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'replicas']}}, 'PARTITIONS': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'partitions']}}, 'TOPIC_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'topic_name']}}, 'ROLL_TIME': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'roll_time']}}, 'SEGMENT_SIZE': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'segment_size']}}}}}}}",0
"{'radon.nodes.aws.AwsLambdaFunctionFromS3': {'derived_from': 'radon.nodes.abstract.Function', 'metadata': {'targetNamespace': 'radon.nodes.aws', 'abstract': 'false', 'final': 'false'}, 'attributes': {'role_arn': {'description': ""AWS function's role ARN"", 'type': 'string'}, 'arn': {'description': ""AWS function's Amazon Resource Name (ARN)"", 'type': 'string'}, 'region': {'type': 'string'}}, 'properties': {'handler': {'type': 'string', 'description': 'Handler for lambda function', 'default': 'index.handler'}, 's3_bucket_key': {'type': 'string', 'description': 'The S3 key aka. filename referencing the file to be deployed'}, 'memory': {'type': 'integer', 'description': 'Function memory in MB', 'default': 128}, 'memory_range': {'type': 'range', 'description': 'Range of function memory in MB to search', 'required': False}, 'alias': {'type': 'string', 'description': ""Lambda function's alias"", 'required': False, 'default': 'dev'}, 'runtime': {'type': 'string', 'description': 'Function runtime (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)', 'default': 'nodejs'}, 'concurrency_range': {'type': 'range', 'description': 'Range of function concurrency to search', 'required': False}, 'statement_id': {'type': 'string', 'description': 'Lambda policy statement identifier'}, 's3_bucket_name': {'type': 'string', 'description': 'The S3 bucket name containing the function package to be deployed'}, 'timeout': {'type': 'integer', 'description': 'Function timeout in seconds', 'default': 300}, 'concurrency': {'type': 'integer', 'description': 'Function concurrency', 'required': False, 'default': 0}, 'env_vars': {'type': 'map', 'description': ""Function's environment variables"", 'required': False, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.aws.AwsPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'monitor': {'capability': 'radon.capabilities.monitoring.Monitor', 'node': 'radon.nodes.monitoring.PushGateway', 'relationship': 'radon.relationships.monitoring.AWSIsMonitoredBy', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'s3_bucket_key': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 's3_bucket_key']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'host', 'region']}}, 'role_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'host', 'role_arn']}}, 'lambda_runtime': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'runtime']}}, 'function_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}, 'lambda_timeout': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'timeout']}}, 'lambda_memory': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'memory']}}, 'func_alias': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'alias']}}, 'permission_id': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'statement_id']}}, 'lambda_handler': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'handler']}}, 's3_bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 's3_bucket_name']}}, 'lambda_concurrency': {'type': 'integer', 'required': True, 'default': {'get_property': ['SELF', 'concurrency']}}, 'env_vars': {'type': 'string', 'required': False, 'default': {'get_property': ['SELF', 'env_vars']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",unknown
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes', 'abstract': 'false', 'final': 'false'}, 'properties': {'context_root': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'capabilities': {'app_endpoint': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'radon.nodes.abstract.Function': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'radon.datatypes.function.Entries', 'required': False}, 'name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.abstract.CloudPlatform', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'invoker': {'capability': 'radon.capabilities.Invocable', 'relationship': 'radon.relationships.Triggers', 'occurrences': [0, 'UNBOUNDED']}}, {'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'radon.relationships.ConnectsTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'invocable': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.Invocable'}}}}",0
"{'radon.nodes.legacy.AwsS3Bucket': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'targetNamespace': 'radon.nodes.legacy', 'abstract': 'false', 'final': 'false'}, 'attributes': {'bucket_name': {'type': 'string'}}, 'properties': {'aws_region': {'type': 'string', 'description': 'AWS region'}, 'bucket_name': {'type': 'string', 'description': 'The name of the bucket'}}, 'capabilities': {'bucket': {'occurrences': [1, 1], 'type': 'tosca.capabilities.Compute'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'aws_region']}}, 'bucket_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'bucket_name']}}}, 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.azure.AzurePlatform': {'derived_from': 'radon.nodes.abstract.CloudPlatform', 'metadata': {'targetNamespace': 'radon.nodes.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'password': {'type': 'string'}, 'user_name': {'type': 'string'}, 'region': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.azure.AzureFunction', 'radon.nodes.azure.AzureResource'], 'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'PASSWORD': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'password']}}, 'USER_NAME': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'user_name']}}}}}}}",0
"{'radon.nodes.monitoring.PushGateway': {'derived_from': 'radon.nodes.docker.DockerApplication', 'metadata': {'targetNamespace': 'radon.nodes.monitoring', 'abstract': 'false', 'final': 'false'}, 'attributes': {'pushgateway_ip': {'type': 'string', 'default': {'get_attribute': ['SELF', 'dependency', 'public_ip']}}}, 'properties': {'user_email': {'type': 'string'}, 'pushgateway_service_port': {'type': 'string'}, 'grafana_api_ip': {'type': 'string'}, 'consul_ip': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'radon.capabilities.container.DockerRuntime', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'storage': {'capability': 'tosca.capabilities.Storage', 'occurrences': [0, 1]}}, {'network': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 1]}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'radon.nodes.VM.EC2', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'capabilities': {'monitor': {'occurrences': [0, 'UNBOUNDED'], 'type': 'radon.capabilities.monitoring.Monitor'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'create', 'timeout': 0}}, 'configure': {'inputs': {'user_email': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'user_email']}}, 'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'dependency', 'public_ip']}}, 'pushgateway_service_port': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'pushgateway_service_port']}}, 'consul_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'consul_ip']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}, 'delete': {'inputs': {'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'dependency', 'public_ip']}}, 'consul_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'consul_ip']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'configure': {'type': 'radon.artifacts.Ansible', 'file': 'configure.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.abstract.ContainerApplication': {'derived_from': 'tosca.nodes.Container.Application', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'entries': {'type': 'map', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Entry'}}, 'granularity': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['coarse-grained', 'fine-grained']}]}, 'name': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'radon.nodes.abstract.ContainerRuntime', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'storage': {'capability': 'tosca.capabilities.Storage', 'occurrences': [0, 1]}}, {'network': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 1]}}]}}",0
"{'radon.nodes.abstract.workload.ClosedWorkload': {'derived_from': 'radon.nodes.abstract.Workload', 'metadata': {'targetNamespace': 'radon.nodes.abstract.workload', 'abstract': 'false', 'final': 'false'}, 'properties': {'think_time': {'type': 'radon.datatypes.RandomVariable'}, 'population': {'type': 'integer', 'default': 1, 'constraints': [{'greater_or_equal': 1}]}}}}",0
"{'radon.nodes.abstract.DataPipeline': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'radon.nodes.abstract.WebServer': {'derived_from': 'tosca.nodes.WebServer', 'metadata': {'targetNamespace': 'radon.nodes.abstract', 'abstract': 'false', 'final': 'false'}, 'properties': {'name': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'valid_source_types': ['radon.nodes.abstract.WebApplication'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'radon.nodes.datapipeline.source.ConsumeDataEndPoint': {'derived_from': 'radon.nodes.datapipeline.SourcePB', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.source', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'metadata': {'targetNamespace': 'radon.nodes.VM', 'abstract': 'false', 'final': 'false'}, 'attributes': {'public_address': {'description': 'OpenStack public IP address of the VM', 'type': 'string'}, 'id': {'description': 'OpenStack id of the VM', 'type': 'string'}}, 'properties': {'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'ssh_username': {'type': 'string', 'description': 'ssh username of the base image'}, 'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'flavor': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'flavor']}}, 'key_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'key_name']}}, 'image': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'image']}}, 'ssh_username': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'ssh_username']}}, 'vm_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'name']}}, 'network': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'network']}}}, 'implementation': {'primary': 'create', 'timeout': 0}}, 'delete': {'inputs': {'id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': {'primary': 'delete', 'timeout': 0}}}}}, 'artifacts': {'create': {'type': 'radon.artifacts.Ansible', 'file': 'create.yml'}, 'delete': {'type': 'radon.artifacts.Ansible', 'file': 'delete.yml'}}}}",0
"{'radon.nodes.datapipeline.process.AWSLambda': {'derived_from': 'radon.nodes.datapipeline.process.FaaSFunction', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.process', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'AWSlambda_localConn'}}, 'properties': {'cred_file_path': {'type': 'string', 'description': 'credential file for access and secret key', 'required': False}, 'function_name': {'type': 'string', 'description': 'name of the lambda function'}, 'region': {'type': 'string', 'description': 'Region of the function', 'default': 'EU (Frankfurt)'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'AWSlambda_localConn.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['templateFile_localConn'], 'timeout': 0}}, 'configure': {'inputs': {'cred_file_path': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'cred_file_path']}}, 'function_name': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'function_name']}}, 'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'region']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'templateFile_localConn': {'type': 'tosca.artifacts.File', 'file': 'AWSlambda_localConn.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}}}}",0
"{'tosca.nodes.Abstract.Compute': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'tosca.nodes.Abstract', 'abstract': 'false', 'final': 'false'}, 'capabilities': {'host': {'occurrences': [1, 'UNBOUNDED'], 'type': 'tosca.capabilities.Compute'}}}}",0
"{'radon.nodes.datapipeline.source.ConsS3Bucket': {'derived_from': 'radon.nodes.datapipeline.source.ConsumeRemote', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.source', 'abstract': 'false', 'final': 'false'}, 'attributes': {'template_name': {'type': 'string', 'default': 'S3Bucket_SRC_PG_LocalConn'}}, 'properties': {'BucketName': {'type': 'string'}, 'cred_file_path': {'type': 'string'}, 'Region': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'template_name']}}, 'template_file': {'type': 'string', 'required': True, 'default': 'S3Bucket_SRC_PG_LocalConn.xml'}}, 'implementation': {'primary': 'create', 'dependencies': ['templateFile_localConn'], 'timeout': 0}}, 'configure': {'inputs': {'cred_file_path': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'cred_file_path']}}, 'BucketName': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'BucketName']}}, 'pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SELF', 'id']}}, 'Region': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'Region']}}}, 'implementation': {'primary': 'configure', 'timeout': 0}}}}}, 'artifacts': {'templateFile_localConn': {'type': 'tosca.artifacts.File', 'description': 'This Nifi template file is only for the local connection.', 'file': 'S3Bucket_SRC_PG_LocalConn.xml'}, 'create': {'type': 'tosca.artifacts.File', 'file': 'create.yml'}, 'configure': {'type': 'tosca.artifacts.File', 'file': 'configure.yml'}, 'templateFile_RmtConn': {'type': 'tosca.artifacts.File', 'description': 'This nifi template file is for remote connect.', 'file': 'S3Bucket_SRC_PG_RmtConn.xml'}}}}",0
"{'radon.nodes.datapipeline.source.ConsumeRemote': {'derived_from': 'radon.nodes.datapipeline.source.ConsumeDataEndPoint', 'metadata': {'targetNamespace': 'radon.nodes.datapipeline.source', 'abstract': 'false', 'final': 'false'}}}",0
"{'Orchestrator': {'derived_from': 'tosca:Compute', 'artifacts': {'image': {'type': 'QCOW', 'artifact_version': '2', 'repository': 'centos', 'file': 'CentOS-8-GenericCloud-8.2.2004-20200611.2.x86_64.qcow2', 'properties': {'os': 'CentOS', 'version': '7.0'}}}}}",0
"{'tosca.nodes.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.1'}, 'description': 'The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the node instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.2'}, 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) ""server"".', 'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'public_address': {'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'networks': {'description': 'The list of logical networks assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'description': 'The list of logical ports assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.3'}, 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'description': ""The optional software component's version."", 'type': 'version', 'required': False}, 'admin_credential': {'description': 'The optional credential that can be used to authenticate to the software component.', 'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.4'}, 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.5'}, 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'description': ""The web application's context root which designates the application's URL path within the web server it is hosted on."", 'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.6'}, 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'description': 'The optional root password for the DBMS server.', 'type': 'string', 'required': False}, 'port': {'description': ""The DBMS server's port."", 'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.7'}, 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical database Name.', 'type': 'string'}, 'port': {'description': 'The port the database service will use to listen for incoming data and requests.', 'type': 'integer', 'required': False}, 'user': {'description': 'The special user account used for database administration.', 'type': 'string', 'required': False}, 'password': {'description': ""The password associated with the user account provided in the 'user' property."", 'type': 'string', 'required': False}}, 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.ObjectStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.8'}, 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical name of the object store (or container).', 'type': 'string'}, 'size': {'description': 'The requested initial storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.9'}, 'description': '', 'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'description': 'The requested storage size (default unit is MB).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'type': 'string', 'required': False}, 'snapshot_id': {'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.10'}, 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.11'}, 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.', 'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.Network'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.9.12'}, 'description': ""The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application's traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application)."", 'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'description': 'No description in spec.', 'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'description': ""The Floating (IP) client's on the public network can connect to."", 'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.network.Network': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.1'}, 'description': 'The TOSCA Network node represents a simple, logical network service.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'description': 'The IP version of the requested network.', 'type': 'integer', 'constraints': [{'valid_values': [4, 6]}], 'default': 4, 'required': False}, 'cidr': {'description': 'The cidr block of the requested network.', 'type': 'string', 'required': False}, 'start_ip': {'description': 'The IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'end_ip': {'description': 'The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'gateway_ip': {'description': 'The gateway IP address.', 'type': 'string', 'required': False}, 'network_name': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure - OR - be used as the name of the new created network.', 'type': 'string', 'required': False}, 'network_id': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name.', 'type': 'string', 'required': False}, 'segmentation_id': {'description': 'A segmentation identifier in the underlying cloud infrastructure (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified, the network_type or physical_network properties should be provided as well.', 'type': 'string', 'required': False}, 'network_type': {'description': 'Optionally, specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.', 'type': 'string', 'required': False}, 'physical_network': {'description': 'Optionally, identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.', 'type': 'string', 'required': False}, 'dhcp_enabled': {'description': 'Indicates the TOSCA container to create a virtual network instance with or without a DHCP service.', 'type': 'boolean', 'default': True, 'required': False}}, 'attributes': {'segmentation_id': {'description': 'The actual segmentation_id that is been assigned to the network by the underlying cloud infrastructure. ', 'type': 'string'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.2'}, 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types.\nThe Port node type effectively represents a single virtual NIC on the Compute node instance.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'description': 'Allow the user to set a fixed IP address. Note that this address is a request to the provider which they will attempt to fulfill but may not be able to dependent on the network the port is associated with.', 'type': 'string', 'required': False}, 'order': {'description': 'The order of the NIC on the compute instance (e.g. eth2). Note: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired, it is *mandatory* that all ports will be set with an order value and. The order values must represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, ..., n).', 'type': 'integer', 'constraints': [{'greater_or_equal': 0}], 'default': 0, 'required': False}, 'is_default': {'description': 'Set is_default=true to apply a default gateway route on the running compute instance to the associated network gateway. Only one port that is associated to single compute node can set as default=true.', 'type': 'boolean', 'default': False, 'required': False}, 'ip_range_start': {'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}, 'ip_range_end': {'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'description': 'The IP address would be assigned to the associated compute instance.', 'type': 'string'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'tosca.nodes.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.1'}, 'description': 'The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the node instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.2'}, 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) ""server"".', 'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'public_address': {'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'networks': {'description': 'The list of logical networks assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'description': 'The list of logical ports assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.3'}, 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'description': ""The optional software component's version."", 'type': 'version', 'required': False}, 'admin_credential': {'description': 'The optional credential that can be used to authenticate to the software component.', 'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.4'}, 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.5'}, 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'description': ""The web application's context root which designates the application's URL path within the web server it is hosted on."", 'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.6'}, 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'description': 'The optional root password for the DBMS server.', 'type': 'string', 'required': False}, 'port': {'description': ""The DBMS server's port."", 'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.7'}, 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical database Name.', 'type': 'string'}, 'port': {'description': 'The port the database service will use to listen for incoming data and requests.', 'type': 'integer', 'required': False}, 'user': {'description': 'The special user account used for database administration.', 'type': 'string', 'required': False}, 'password': {'description': ""The password associated with the user account provided in the 'user' property."", 'type': 'string', 'required': False}}, 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.ObjectStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.8'}, 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical name of the object store (or container).', 'type': 'string'}, 'size': {'description': 'The requested initial storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.9'}, 'description': '', 'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'description': 'The requested storage size (default unit is MB).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'type': 'string', 'required': False}, 'snapshot_id': {'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.10'}, 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.11'}, 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.', 'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.8.12'}, 'description': ""The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application's traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application)."", 'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'description': 'No description in spec.', 'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'description': ""The Floating (IP) client's on the public network can connect to."", 'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.network.Network': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.1'}, 'description': 'The TOSCA Network node represents a simple, logical network service.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'description': 'The IP version of the requested network.', 'type': 'integer', 'constraints': [{'valid_values': [4, 6]}], 'default': 4, 'required': False}, 'cidr': {'description': 'The cidr block of the requested network.', 'type': 'string', 'required': False}, 'start_ip': {'description': 'The IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'end_ip': {'description': 'The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'gateway_ip': {'description': 'The gateway IP address.', 'type': 'string', 'required': False}, 'network_name': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure - OR - be used as the name of the new created network.', 'type': 'string', 'required': False}, 'network_id': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name.', 'type': 'string', 'required': False}, 'segmentation_id': {'description': 'A segmentation identifier in the underlying cloud infrastructure (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified, the network_type or physical_network properties should be provided as well.', 'type': 'string', 'required': False}, 'network_type': {'description': 'Optionally, specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.', 'type': 'string', 'required': False}, 'physical_network': {'description': 'Optionally, identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.', 'type': 'string', 'required': False}, 'dhcp_enabled': {'description': 'Indicates the TOSCA container to create a virtual network instance with or without a DHCP service.', 'type': 'boolean', 'default': True, 'required': False}}, 'attributes': {'segmentation_id': {'description': 'The actual segmentation_id that is been assigned to the network by the underlying cloud infrastructure. ', 'type': 'string'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.2'}, 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types.\nThe Port node type effectively represents a single virtual NIC on the Compute node instance.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'description': 'Allow the user to set a fixed IP address. Note that this address is a request to the provider which they will attempt to fulfill but may not be able to dependent on the network the port is associated with.', 'type': 'string', 'required': False}, 'order': {'description': 'The order of the NIC on the compute instance (e.g. eth2). Note: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired, it is *mandatory* that all ports will be set with an order value and. The order values must represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, ..., n).', 'type': 'integer', 'constraints': [{'greater_or_equal': 0}], 'default': 0, 'required': False}, 'is_default': {'description': 'Set is_default=true to apply a default gateway route on the running compute instance to the associated network gateway. Only one port that is associated to single compute node can set as default=true.', 'type': 'boolean', 'default': False, 'required': False}, 'ip_range_start': {'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}, 'ip_range_end': {'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'description': 'The IP address would be assigned to the associated compute instance.', 'type': 'string'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'Rack': {'properties': {'status': {'type': 'string'}, 'slots': {'type': 'integer'}}}}",0
"{'cloudify.nodes.Root': {'interfaces': {'cloudify.interfaces.lifecycle': {'precreate': {}, 'create': {}, 'configure': {}, 'start': {}, 'poststart': {}, 'prestop': {}, 'stop': {}, 'delete': {}, 'postdelete': {}}, 'cloudify.interfaces.validation': {'create': {}, 'delete': {}, 'creation': {}, 'deletion': {}}, 'cloudify.interfaces.monitoring': {'start': {}, 'stop': {}}}}}",0
"{'cloudify.nodes.Compute': {'derived_from': 'cloudify.nodes.Root', 'properties': {'ip': {'default': ''}, 'os_family': {'description': 'Property specifying what type of operating system family\nthis compute node will run.\n', 'default': 'linux'}, 'agent_config': {'type': 'cloudify.datatypes.AgentConfig', 'default': {'install_method': 'remote', 'port': 22, 'network': 'default'}}, 'install_agent': {'default': ''}, 'cloudify_agent': {'default': {}}}, 'interfaces': {'cloudify.interfaces.cloudify_agent': {'create': {'implementation': 'agent.cloudify_agent.installer.operations.create', 'executor': 'central_deployment_agent'}, 'configure': {'implementation': 'agent.cloudify_agent.installer.operations.configure', 'executor': 'central_deployment_agent'}, 'start': {'implementation': 'agent.cloudify_agent.installer.operations.start', 'executor': 'central_deployment_agent'}, 'stop': {'implementation': 'agent.cloudify_agent.installer.operations.stop', 'executor': 'central_deployment_agent'}, 'stop_amqp': {'implementation': 'agent.cloudify_agent.operations.stop', 'executor': 'host_agent'}, 'delete': {'implementation': 'agent.cloudify_agent.installer.operations.delete', 'executor': 'central_deployment_agent'}, 'restart': {'implementation': 'agent.cloudify_agent.installer.operations.restart', 'executor': 'central_deployment_agent'}, 'restart_amqp': {'implementation': 'agent.cloudify_agent.operations.restart', 'executor': 'host_agent'}, 'install_plugins': {'implementation': 'agent.cloudify_agent.operations.install_plugins', 'executor': 'host_agent'}, 'uninstall_plugins': {'implementation': 'agent.cloudify_agent.operations.uninstall_plugins', 'executor': 'host_agent'}, 'create_amqp': {'implementation': 'agent.cloudify_agent.operations.create_agent_amqp', 'executor': 'central_deployment_agent', 'inputs': {'install_agent_timeout': {'default': 300}, 'manager_ip': {'description': 'The private ip of the new manager', 'default': ''}, 'manager_certificate': {'description': 'The cloudify_internal_ca_cert.pem of the new manager', 'default': ''}, 'stop_old_agent': {'description': 'Stop the old agent after installing the new one', 'default': False}}}, 'validate_amqp': {'implementation': 'agent.cloudify_agent.operations.validate_agent_amqp', 'executor': 'central_deployment_agent', 'inputs': {'validate_agent_timeout': {'default': 20}}}}, 'cloudify.interfaces.host': {'get_state': {}}, 'cloudify.interfaces.monitoring_agent': {'install': {}, 'start': {}, 'stop': {}, 'uninstall': {}}}}}",0
{'cloudify.nodes.Container': {'derived_from': 'cloudify.nodes.Compute'}},0
{'cloudify.nodes.Tier': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.Volume': {'derived_from': 'cloudify.nodes.Root'}},0
"{'cloudify.nodes.FileSystem': {'derived_from': 'cloudify.nodes.Root', 'properties': {'use_external_resource': {'description': 'Enables the use of already formatted volumes.\n', 'type': 'boolean', 'default': False}, 'partition_type': {'description': 'The partition type. 83 is a Linux Native Partition.\n', 'type': 'integer', 'default': 83}, 'fs_type': {'description': 'The type of the File System. Supported types are [ext2, ext3, ext4, fat, ntfs, swap]\n', 'type': 'string'}, 'fs_mount_path': {'description': 'The path of the mount point.\n', 'type': 'string'}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': {'implementation': 'script.script_runner.tasks.run', 'inputs': {'script_path': {'default': 'file:///opt/manager/resources/cloudify/fs/mkfs.sh'}}}}}}}",0
{'cloudify.nodes.ObjectStorage': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.Network': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.Subnet': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.Port': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.Router': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.LoadBalancer': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.VirtualIP': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.SecurityGroup': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.SoftwareComponent': {'derived_from': 'cloudify.nodes.Root'}},0
{'cloudify.nodes.DBMS': {'derived_from': 'cloudify.nodes.SoftwareComponent'}},0
{'cloudify.nodes.Database': {'derived_from': 'cloudify.nodes.Root'}},0
"{'cloudify.nodes.WebServer': {'derived_from': 'cloudify.nodes.SoftwareComponent', 'properties': {'port': {'default': 80}}}}",0
{'cloudify.nodes.ApplicationServer': {'derived_from': 'cloudify.nodes.SoftwareComponent'}},0
{'cloudify.nodes.MessageBusServer': {'derived_from': 'cloudify.nodes.SoftwareComponent'}},0
{'cloudify.nodes.ApplicationModule': {'derived_from': 'cloudify.nodes.Root'}},0
"{'cloudify.nodes.CloudifyManager': {'derived_from': 'cloudify.nodes.SoftwareComponent', 'properties': {'cloudify': {'description': 'Configuration for Cloudify Manager\n', 'default': {'resources_prefix': '', 'cloudify_agent': {'min_workers': 2, 'max_workers': 5, 'remote_execution_port': 22, 'user': 'ubuntu'}, 'workflows': {'task_retries': -1, 'task_retry_interval': 30}, 'policy_engine': {'start_timeout': 30}}}, 'cloudify_packages': {'description': 'Links to Cloudify packages to be installed on the manager\n'}}}}",0
"{'cloudify.nodes.Component': {'derived_from': 'cloudify.nodes.Root', 'properties': {'resource_config': {'type': 'cloudify.datatypes.Component', 'default': {}}, 'client': {'description': 'Cloudify HTTP client configuration, if empty the current Cloudify manager client will be used.\n', 'type': 'cloudify.datatypes.RemoteCloudifyManagerClient', 'default': {}}, 'plugins': {'description': 'Dictionary of plugins to upload, which each plugin is in format of:\n  plugin-name:\n    wagon_path: Url for plugin wagon file,\n    plugin_yaml_path: Url for plugin yaml file\n', 'type': 'dict', 'default': {}}, 'secrets': {'description': 'Dictionary of secrets to set before deploying Components, which each secret is in format of:\n  secret-name: value\n', 'type': 'dict', 'default': {}}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'cfy_extensions.cloudify_types.component.upload_blueprint'}, 'configure': {'implementation': 'cfy_extensions.cloudify_types.component.create'}, 'start': {'implementation': 'cfy_extensions.cloudify_types.component.execute_start', 'inputs': {'workflow_id': {'type': 'string', 'default': 'install'}, 'timeout': {'description': 'How long (in seconds) to wait for execution to finish before timing out.', 'type': 'integer', 'default': 1800}, 'interval': {'description': 'Polling interval (seconds).', 'type': 'integer', 'default': 10}}}, 'stop': {'implementation': 'cfy_extensions.cloudify_types.component.execute_start', 'inputs': {'workflow_id': {'default': 'uninstall'}, 'resource_config': {'default': {'blueprint': {'get_property': ['SELF', 'resource_config', 'blueprint']}, 'deployment': {'get_property': ['SELF', 'resource_config', 'deployment']}, 'executions_start_args': {'allow_custom_parameters': True}}}}}, 'delete': {'implementation': 'cfy_extensions.cloudify_types.component.delete'}}}}}",0
{'cloudify.nodes.ServiceComponent': {'derived_from': 'cloudify.nodes.Component'}},0
"{'cloudify.nodes.SharedResource': {'derived_from': 'cloudify.nodes.Root', 'properties': {'resource_config': {'type': 'cloudify.datatypes.SharedResource', 'default': {}}, 'client': {'description': 'Client configuration, if empty Cloudify manager client will be used.\n', 'type': 'cloudify.datatypes.RemoteCloudifyManagerClient', 'default': {}}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'cfy_extensions.cloudify_types.shared_resource.connect_deployment'}}}}}",0
"{'tosca.nodes.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.1'}, 'description': 'The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the node instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Abstract.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.2'}, 'description': 'The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}}}}",0
"{'tosca.nodes.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.3'}, 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) ""server"".', 'derived_from': 'tosca.nodes.Abstract.Compute', 'attributes': {'private_address': {'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'public_address': {'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'networks': {'description': 'The list of logical networks assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'description': 'The list of logical ports assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.4'}, 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'description': ""The optional software component's version."", 'type': 'version', 'required': False}, 'admin_credential': {'description': 'The optional credential that can be used to authenticate to the software component.', 'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.5'}, 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.6'}, 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'description': ""The web application's context root which designates the application's URL path within the web server it is hosted on."", 'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.7'}, 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'description': 'The optional root password for the DBMS server.', 'type': 'string', 'required': False}, 'port': {'description': ""The DBMS server's port."", 'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.8'}, 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical database Name.', 'type': 'string'}, 'port': {'description': 'The port the database service will use to listen for incoming data and requests.', 'type': 'integer', 'required': False}, 'user': {'description': 'The special user account used for database administration.', 'type': 'string', 'required': False}, 'password': {'description': ""The password associated with the user account provided in the 'user' property."", 'type': 'string', 'required': False}}, 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.Abstract.Storage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.9'}, 'description': 'The TOSCA Abstract.Storage node represents an abstract storage resource without any requirements on compute or network resources.', 'properties': {'name': {'description': 'The logical name of the object store (or container).', 'type': 'string'}, 'size': {'description': 'The requested initial storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}}}",0
"{'tosca.nodes.ObjectStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.10'}, 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'maxsize': {'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.11'}, 'description': '', 'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'volume_id': {'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'type': 'string', 'required': False}, 'snapshot_id': {'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.12'}, 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Container.Application']}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.13'}, 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.', 'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.Network'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.9.14'}, 'description': ""The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application's traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application)."", 'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'description': 'No description in spec.', 'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'description': ""The Floating (IP) client's on the public network can connect to."", 'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.network.Network': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.1'}, 'description': 'The TOSCA Network node represents a simple, logical network service.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'description': 'The IP version of the requested network.', 'type': 'integer', 'constraints': [{'valid_values': [4, 6]}], 'default': 4, 'required': False}, 'cidr': {'description': 'The cidr block of the requested network.', 'type': 'string', 'required': False}, 'start_ip': {'description': 'The IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'end_ip': {'description': 'The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'gateway_ip': {'description': 'The gateway IP address.', 'type': 'string', 'required': False}, 'network_name': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure - OR - be used as the name of the new created network.', 'type': 'string', 'required': False}, 'network_id': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name.', 'type': 'string', 'required': False}, 'segmentation_id': {'description': 'A segmentation identifier in the underlying cloud infrastructure (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified, the network_type or physical_network properties should be provided as well.', 'type': 'string', 'required': False}, 'network_type': {'description': 'Optionally, specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.', 'type': 'string', 'required': False}, 'physical_network': {'description': 'Optionally, identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.', 'type': 'string', 'required': False}, 'dhcp_enabled': {'description': 'Indicates the TOSCA container to create a virtual network instance with or without a DHCP service.', 'type': 'boolean', 'default': True, 'required': False}}, 'attributes': {'segmentation_id': {'description': 'The actual segmentation_id that is been assigned to the network by the underlying cloud infrastructure. ', 'type': 'string'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.2'}, 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types.\nThe Port node type effectively represents a single virtual NIC on the Compute node instance.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'description': 'Allow the user to set a fixed IP address. Note that this address is a request to the provider which they will attempt to fulfill but may not be able to dependent on the network the port is associated with.', 'type': 'string', 'required': False}, 'order': {'description': 'The order of the NIC on the compute instance (e.g. eth2). Note: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired, it is *mandatory* that all ports will be set with an order value and. The order values must represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, ..., n).', 'type': 'integer', 'constraints': [{'greater_or_equal': 0}], 'default': 0, 'required': False}, 'is_default': {'description': 'Set is_default=true to apply a default gateway route on the running compute instance to the associated network gateway. Only one port that is associated to single compute node can set as default=true.', 'type': 'boolean', 'default': False, 'required': False}, 'ip_range_start': {'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}, 'ip_range_end': {'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'description': 'The IP address would be assigned to the associated compute instance.', 'type': 'string'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'nodecellar.nodes.MongoDatabase': {'derived_from': 'cloudify.nodes.DBMS', 'properties': {'port': {'description': 'MongoDB port', 'type': 'integer'}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': 'scripts/mongo/install-mongo.sh', 'start': 'scripts/mongo/start-mongo.sh', 'stop': 'scripts/mongo/stop-mongo.sh'}}}}",0
"{'nodecellar.nodes.NodeJSServer': {'derived_from': 'cloudify.nodes.ApplicationServer', 'interfaces': {'cloudify.interfaces.lifecycle': {'create': 'scripts/nodejs/install-nodejs.sh'}}}}",0
"{'nodecellar.nodes.NodecellarApplicationModule': {'derived_from': 'cloudify.nodes.ApplicationModule', 'properties': {'port': {'description': 'Web application port', 'type': 'integer'}, 'application_url': {'description': 'URL to an archive containing the application source. The archive must contain one top level directory.\n', 'default': 'https://github.com/cloudify-cosmo/nodecellar/archive/master.tar.gz'}, 'startup_script': {'description': 'This script will be used to start the nodejs application. The path is relative to the top level single directory inside the archive\n', 'type': 'string', 'default': 'server.js'}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': 'scripts/nodecellar/install-nodecellar-app.sh', 'start': 'scripts/nodecellar/start-nodecellar-app.sh', 'stop': 'scripts/nodecellar/stop-nodecellar-app.sh'}}}}",0
"{'Service': {'description': 'Represents a collection of workloads (pods and controllers) and resources that all use the same selector.', 'interfaces': {'lifecycle': {'type': 'Lifecycle'}}, 'capabilities': {'metadata': 'Metadata', 'service': 'Service', 'deployment': 'Deployment'}, 'requirements': [{'route': {'capability': 'Service', 'relationship': 'Route', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
{'Switch': {'properties': {'port': {'type': 'integer'}}}},0
"{'Server': {'derived_from': 'tosca:Compute', 'interfaces': {'Maintenance': {'type': 'Maintenance'}, 'Standard': {'operations': {'create': {'inputs': {'retries': {'type': 'integer'}}}}}}, 'attributes': {'progress': {'type': 'string'}, 'last_turned_off': {'type': 'timestamp'}}}}",0
"{'Rack': {'properties': {'slots': {'type': 'integer', 'constraints': [{'multiple_of': 4}]}}}}",0
"{'tosca.nodes.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.1'}, 'description': 'The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the node instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Abstract.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.2'}, 'description': 'The TOSCA Abstract.Compute node represents an abstract compute resource without any requirements on storage or network resources.', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}}}}",0
"{'tosca.nodes.Compute': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.3'}, 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) ""server"".', 'derived_from': 'tosca.nodes.Abstract.Compute', 'attributes': {'private_address': {'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'public_address': {'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.', 'type': 'string'}, 'networks': {'description': 'The list of logical networks assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'description': 'The list of logical ports assigned to the compute host instance and information about them.', 'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.4'}, 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'description': ""The optional software component's version."", 'type': 'version', 'required': False}, 'admin_credential': {'description': 'The optional credential that can be used to authenticate to the software component.', 'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.5'}, 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.6'}, 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.', 'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'description': ""The web application's context root which designates the application's URL path within the web server it is hosted on."", 'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.7'}, 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'description': 'The optional root password for the DBMS server.', 'type': 'string', 'required': False}, 'port': {'description': ""The DBMS server's port."", 'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.8'}, 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'The logical database Name.', 'type': 'string'}, 'port': {'description': 'The port the database service will use to listen for incoming data and requests.', 'type': 'integer', 'required': False}, 'user': {'description': 'The special user account used for database administration.', 'type': 'string', 'required': False}, 'password': {'description': ""The password associated with the user account provided in the 'user' property."", 'type': 'string', 'required': False}}, 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.Abstract.Storage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.9'}, 'description': 'The TOSCA Abstract.Storage node represents an abstract storage resource without any requirements on compute or network resources.', 'properties': {'name': {'description': 'The logical name of the object store (or container).', 'type': 'string'}, 'size': {'description': 'The requested initial storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}}}",0
"{'tosca.nodes.ObjectStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.10'}, 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.', 'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'maxsize': {'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.11'}, 'description': '', 'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'volume_id': {'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'type': 'string', 'required': False}, 'snapshot_id': {'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.12'}, 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Container.Application']}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.13'}, 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.', 'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.Network'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.9.14'}, 'description': ""The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application's traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application)."", 'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'description': 'No description in spec.', 'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'description': ""The Floating (IP) client's on the public network can connect to."", 'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.network.Network': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.1'}, 'description': 'The TOSCA Network node represents a simple, logical network service.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'description': 'The IP version of the requested network.', 'type': 'integer', 'constraints': [{'valid_values': [4, 6]}], 'default': 4, 'required': False}, 'cidr': {'description': 'The cidr block of the requested network.', 'type': 'string', 'required': False}, 'start_ip': {'description': 'The IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'end_ip': {'description': 'The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range.', 'type': 'string', 'required': False}, 'gateway_ip': {'description': 'The gateway IP address.', 'type': 'string', 'required': False}, 'network_name': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure - OR - be used as the name of the new created network.', 'type': 'string', 'required': False}, 'network_id': {'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name.', 'type': 'string', 'required': False}, 'segmentation_id': {'description': 'A segmentation identifier in the underlying cloud infrastructure (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified, the network_type or physical_network properties should be provided as well.', 'type': 'string', 'required': False}, 'network_type': {'description': 'Optionally, specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.', 'type': 'string', 'required': False}, 'physical_network': {'description': 'Optionally, identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.', 'type': 'string', 'required': False}, 'dhcp_enabled': {'description': 'Indicates the TOSCA container to create a virtual network instance with or without a DHCP service.', 'type': 'boolean', 'default': True, 'required': False}}, 'attributes': {'segmentation_id': {'description': 'The actual segmentation_id that is been assigned to the network by the underlying cloud infrastructure. ', 'type': 'string'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.2'}, 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types.\nThe Port node type effectively represents a single virtual NIC on the Compute node instance.', 'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'description': 'Allow the user to set a fixed IP address. Note that this address is a request to the provider which they will attempt to fulfill but may not be able to dependent on the network the port is associated with.', 'type': 'string', 'required': False}, 'order': {'description': 'The order of the NIC on the compute instance (e.g. eth2). Note: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired, it is *mandatory* that all ports will be set with an order value and. The order values must represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, ..., n).', 'type': 'integer', 'constraints': [{'greater_or_equal': 0}], 'default': 0, 'required': False}, 'is_default': {'description': 'Set is_default=true to apply a default gateway route on the running compute instance to the associated network gateway. Only one port that is associated to single compute node can set as default=true.', 'type': 'boolean', 'default': False, 'required': False}, 'ip_range_start': {'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}, 'ip_range_end': {'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.', 'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'description': 'The IP address would be assigned to the associated compute instance.', 'type': 'string'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'MyVNF': {'derived_from': 'tosca:WebApplication', 'interfaces': {'Backup': {'type': 'Backup'}}}}",0
"{'Bookinfo': {'derived_from': 'k8s:Service', 'properties': {'name': {'type': 'string'}, 'version': {'type': 'string', 'default': 'v1'}}, 'capabilities': {'metadata': {'properties': {'name': {'default': {'get_property': ['SELF', 'name']}}}}, 'service': {'type': 'k8s:ClusterIP', 'properties': {'ports': {'default': [{'port': 9080}]}}}, 'deployment': {'properties': {'template': {'default': {'containers': [{'name': {'get_property': ['SELF', 'name']}, 'image': {'concat': ['istio/examples-bookinfo-', {'get_property': ['SELF', 'name']}, '-', {'get_property': ['SELF', 'version']}, ':1.5.0']}, 'imagePullPolicy': 'IfNotPresent', 'ports': [{'containerPort': 9080}]}]}}}}}}}",0
"{'Productpage': {'derived_from': 'Bookinfo', 'properties': {'name': {'default': 'productpage'}}, 'requirements': [{'reviews': {'capability': 'k8s:Service', 'node': 'Reviews', 'relationship': 'k8s:Route'}}, {'details': {'capability': 'k8s:Service', 'node': 'Details', 'relationship': 'k8s:Route'}}]}}",0
"{'Reviews': {'derived_from': 'Bookinfo', 'properties': {'name': {'default': 'reviews'}}, 'requirements': [{'ratings': {'capability': 'k8s:Service', 'node': 'Ratings', 'relationship': 'k8s:Route', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'Details': {'derived_from': 'Bookinfo', 'properties': {'name': {'default': 'details'}}}}",0
"{'Ratings': {'derived_from': 'Bookinfo', 'properties': {'name': {'default': 'ratings'}}}}",0
{'DataNode': {'properties': {'bytes': {'type': 'bytes'}}}},0
"{'DockerEngine': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'DockerHost'}}, 'requirements': [{'os': None, 'type': 'linux', 'distribution': 'ubuntu', 'architecture': 'x86_64'}], 'interfaces': {'Standard': {'create': {'implementation': 'dockerengine_create.sh'}, 'start': {'implementation': 'dockerengine_start.sh'}, 'stop': {'implementation': 'dockerengine_stop.sh'}}}}}",0
"{'DockerApp': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': None, 'capability': 'DockerHost', 'node': 'DockerEngine', 'relationship': 'tosca.relationships.HostedOn'}, {'network': None, 'capability': 'SimplePublicWebEndpoint'}], 'attributes': {'tag': {'type': 'string', 'description': 'the tag for the docker image'}, 'identifier': {'type': 'string', 'description': 'the identifier (name) for the docker container'}, 'endpoint': {'get_operation_output': ['SELF', 'Standard', 'create', 'endpoint']}}, 'interfaces': {'Standard': {'inputs': {'tag': {'get_attribute': ['SELF', 'tag']}, 'identifier': {'get_attribute': ['SELF', 'identifier']}}, 'create': {'implementation': 'dockerapp_create.sh'}, 'start': {'implementation': 'dockerapp_create.sh'}, 'stop': {'implementation': 'dockerapp_stop.sh'}, 'delete': {'implementation': 'dockerapp_delete.sh'}}}}}",0
"{'DockerEngine': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'DockerHost'}}, 'requirements': [{'os': None, 'type': 'linux', 'distribution': 'ubuntu', 'architecture': 'x86_64'}], 'interfaces': {'Standard': {'create': {'implementation': 'docker/dockerengine_create.sh'}, 'start': {'implementation': 'docker/dockerengine_start.sh'}, 'stop': {'implementation': 'docker/dockerengine_stop.sh'}}}}}",0
"{'DockerApp': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': None, 'capability': 'DockerHost', 'node': 'DockerEngine', 'relationship': 'tosca.relationships.HostedOn'}, {'network': None, 'capability': 'SimplePublicWebEndpoint'}], 'attributes': {'tag': {'type': 'string', 'description': 'the tag for the docker image'}, 'identifier': {'type': 'string', 'description': 'the identifier (name) for the docker container'}}, 'interfaces': {'Standard': {'create': {'implementation': 'docker/dockerapp_create.sh'}, 'start': {'implementation': 'docker/dockerapp_create.sh'}, 'stop': {'implementation': 'docker/dockerapp_stop.sh'}, 'delete': {'implementation': 'docker/dockerapp_delete.sh'}}}}}",0
{'ystia.yorc.tests.nodes.WFCompute': {'derived_from': 'tosca.nodes.Compute'}},0
"{'ystia.yorc.tests.nodes.WFNode': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'create': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'whatever'}}}, 'custom': {'operation1': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'whatever'}}, 'operation2': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'whatever'}}}}}}",0
"{'yorc.nodes.openstack.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'image': {'type': 'string', 'description': ""Openstack VM Image ID, this property is required when 'imageName' is not set and not booting from a volume\n"", 'required': False}, 'imageName': {'type': 'string', 'description': ""Openstack VM Image Name, this property is required when 'image' is not set and not booting from a volume\n"", 'required': False}, 'boot_volume': {'type': 'yorc.datatypes.openstack.BootVolume', 'description': 'Boot Volume to create\n', 'required': False}, 'flavor': {'type': 'string', 'description': ""Openstack VM Flavor ID, either this property or the 'flavorName' property is required"", 'required': False}, 'flavorName': {'type': 'string', 'description': ""Openstack VM Flavor Name, either this property or the 'flavor' ID property is required.\n"", 'required': False}, 'availability_zone': {'type': 'string', 'description': 'Openstack Availability Zone on which the Compute should be hosted.\n', 'required': False}, 'region': {'type': 'string', 'description': ""Openstack Region. Defaults to 'RegionOne'\n"", 'required': False}, 'key_pair': {'type': 'string', 'description': 'Openstack Key Pair name to use when creating this Compute\n', 'required': False}, 'security_groups': {'type': 'string', 'description': 'Comma-separated list of security groups to add to the Compute\n', 'required': False}, 'metadata': {'type': 'map', 'description': 'Metadata key/value pairs to make available from within the instance', 'entry_schema': {'type': 'string'}, 'required': False}}, 'requirements': [{'group': {'capability': 'yorc.capabilities.Group', 'node': 'yorc.nodes.openstack.ServerGroup', 'relationship': 'yorc.relationships.MemberOf', 'occurrences': [0, 1]}}]}}",0
"{'yorc.nodes.openstack.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'availability_zone': {'type': 'string', 'description': 'Openstack Availability Zone on which the BlockStorage should be hosted.\n', 'required': False}, 'region': {'type': 'string', 'description': ""Openstack Region. Defaults to 'RegionOne'\n"", 'required': False}, 'deletable': {'type': 'boolean', 'description': 'should this volume be deleted at undeployment', 'required': False, 'default': False}}}}",0
"{'yorc.nodes.openstack.FloatingIP': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip': {'type': 'string', 'description': ""Floating IP address to use. Note that either this property or the 'floating_network_name' property should be specified and 'ip' takes precedence."", 'required': False}, 'floating_network_name': {'type': 'string', 'description': ""Floating Network name, name of the Pool of Floating IPs to use. Note that either this property or the 'ip' address property should be specified and 'ip' takes precedence."", 'required': False}}, 'capabilities': {'connection': {'type': 'yorc.capabilities.openstack.FIPConnectivity'}}}}",0
"{'yorc.nodes.openstack.Network': {'derived_from': 'tosca.nodes.Network', 'properties': {'start_ip': {'type': 'string', 'description': 'IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range', 'required': False}, 'end_ip': {'type': 'string', 'description': 'IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range', 'required': False}, 'dhcp_enabled': {'type': 'boolean', 'description': 'Has the TOSCA container used to create a virtual network instance a DHCP service.', 'required': False, 'default': True}}}}",0
"{'yorc.nodes.openstack.ServerGroup': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'The name of the server group.', 'required': True}, 'policy': {'type': 'string', 'description': 'The policy applied to the server group.', 'required': True}}, 'attributes': {'id': {'type': 'string', 'description': 'The unique id of the server group.'}}, 'capabilities': {'group': {'type': 'yorc.capabilities.Group', 'valid_source_types': ['yorc.nodes.openstack.Compute']}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.openstack.Deployment'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.openstack.Deployment'}}}}}}",0
"{'yorc.types.A': {'derived_from': 'yorc.types.ParentA', 'artifacts': {'art1': {'file': 'TypeA'}, 'art2': {'file': 'TypeA'}, 'art6': {'file': 'TypeA'}}}}",0
"{'yorc.types.ParentA': {'derived_from': 'root', 'artifacts': {'art1': {'file': 'ParentA'}, 'art3': {'file': 'ParentA'}, 'art5': {'file': 'ParentA'}}}}",0
{'root': None},0
"{'yorc.tests.nodes.OpImplementationArtifact': {'derived_from': 'tosca.nodes.Root', 'properties': {'p1': {'type': 'string', 'default': 'Val1'}}, 'interfaces': {'Standard': {'create': {'inputs': {'L1': 1, 'L2': {'get_property': ['SELF', 'p1']}}, 'implementation': {'file': 'scripts/create.sh', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
{'ystia.yorc.tests.nodes.WFCompute': {'derived_from': 'yorc.nodes.Compute'}},0
"{'yorc.test.nodes.TestModule': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Test Module', 'metadata': {'icon': '/images/testModule.png'}, 'properties': {'component_version': {'type': 'version', 'default': 1.0, 'constraints': [{'equal': 1.0}]}}, 'capabilities': {'attachWebsite': {'type': 'yorc.test.capabilities.TestModuleCapability'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_testmodule.sh'}}}}",0
"{'yorc.test.nodes.TestContainer': {'derived_from': 'tosca.nodes.WebServer', 'description': 'Test Container definition\n', 'capabilities': {'host': 'yorc.test.capabilities.TestContainerCapability'}, 'attributes': {'my_attribute': {'type': 'string', 'description': 'My attribute'}, 'apache_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}, '/']}}, 'metadata': {'icon': '/images/testContainer.png'}, 'properties': {'component_version': {'type': 'version', 'default': 1.0, 'constraints': [{'equal': 1.0}]}, 'port': {'type': 'integer', 'description': 'Port for the Test Container', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_testcontainer.sh'}, 'start': 'scripts/start_testcontainer.sh'}}}}",0
"{'yorc.tests.nodes.ValueAssignmentNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'empty': {'type': 'string', 'required': False}, 'port': {'type': 'string', 'required': True}, 'literal': {'type': 'integer'}, 'list': {'type': 'list'}, 'map': {'type': 'map', 'entry_schema': {'type': 'string'}}, 'mapdef': {'type': 'map', 'entry_schema': {'type': 'string'}, 'default': {'def1': '1', 'def2': '2'}}, 'listdef': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['l1', 'l2']}, 'complex': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDef': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplex': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDef': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['typeDefL1', 'typeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'nested': 1}}, {'literal': 43, 'mymap': {'nested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'nested': 3}}}}}}}, 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Standard', 'configure', 'PARTITION_NAME']}, 'concat_attr': {'concat': [{'get_property': ['SELF', 'port']}, {'concat': ['something', {'concat': [{'concat': ['hello', {'get_operation_output': ['SELF', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '!']}]}]}, 'listDef': {'type': 'list', 'entry_schema': {'type': 'integer'}, 'default': [1, 2, 3]}, 'mapDef': {'type': 'map', 'entry_schema': {'type': 'scalar-unit.size'}, 'default': {'T1': '4 GiB', 'T2': '1 TiB', 'T3': '3 GB'}}, 'lit': {'type': 'string'}, 'listAttr': {'type': 'list', 'entry_schema': {'type': 'integer'}}, 'mapAttr': {'type': 'map', 'entry_schema': {'type': 'string'}}, 'complexAttr': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDefAttr': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplexAttr': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDefAttr': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['typeDefL1', 'typeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'nested': 1}}, {'literal': 43, 'mymap': {'nested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'nested': 3}}}}}}}, 'capabilities': {'host': {'type': 'yorc.tests.capabilities.ValueAssignmentContainer'}}, 'requirements': [{'host': {'capability': 'yorc.tests.capabilities.ValueAssignmentContainer', 'relationship': 'yorc.tests.relationships.ValueAssignmentHostedOn'}}], 'interfaces': {'custom': {'publish': {'inputs': {'HOST_PATH': {'get_attribute': ['SELF', 'concat_attr']}, 'nb_replicas': {'type': 'integer', 'description': 'Number of replicas for indexes', 'required': True}}, 'implementation': 'scripts/publisher_publish.sh'}}, 'Standard': {'create': {'inputs': {'litteral': 'testLiteral', 'list': ['l1', 'l2'], 'list_ex': ['le1', 'le2'], 'map': {'key1': 'value1', 'key2': 'value2'}, 'map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'empty': {'get_property': ['SELF', 'empty']}}, 'implementation': 'scripts/create.sh'}, 'configure': 'scripts/conf.sh'}}}}",unknown
"{'yorc.nodes.kubernetes.api.types.DeploymentResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.DeploymentResource', 'attributes': {'replicas': {'type': 'integer', 'description': 'Current number of replicas for this deployment\n'}}, 'interfaces': {'org.alien4cloud.management.ClusterControl': {'scale': {'inputs': {'EXPECTED_INSTANCES': {'type': 'integer'}, 'INSTANCES_DELTA': {'type': 'integer'}}, 'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}, 'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}}}}",0
"{'yorc.nodes.kubernetes.api.types.StatefulSetResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.StatefulSetResource', 'attributes': {'replicas': {'type': 'integer', 'description': 'Current number of replicas for this deployment\n'}}, 'interfaces': {'org.alien4cloud.management.ClusterControl': {'scale': {'inputs': {'EXPECTED_INSTANCES': {'type': 'integer'}, 'INSTANCES_DELTA': {'type': 'integer'}}, 'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}, 'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}}}}",0
"{'yorc.nodes.kubernetes.api.types.JobResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.JobResource', 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'run': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'cancel': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}}}}",0
"{'yorc.nodes.kubernetes.api.types.ServiceResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.ServiceResource', 'interfaces': {'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}}}}",0
"{'yorc.nodes.kubernetes.api.types.SimpleResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.SimpleResource', 'interfaces': {'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.Kubernetes'}}}}}}",0
"{'org.ystia.yorc.test.implem.AppAType': {'derived_from': 'org.ystia.yorc.test.pub.AppAType', 'description': 'Test Application A', 'properties': {'appA_propDInt': {'type': 'integer', 'description': 'Integer property', 'required': True, 'default': 2}}, 'attributes': {'web_ui_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_address']}, ':', {'get_property': ['SELF', 'consul_agent', 'api_port']}]}, 'join_address': {'get_attribute': ['HOST', 'private_address']}}, 'requirements': [{'appA_capB': {'capability': 'org.ystia.yorc.test.pub.AppACapBType', 'relationship': 'org.ystia.yorc.test.implem.AppAJoinAppARelType', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'inputs': {'INSTALL_DIR': '/install'}, 'create': {'description': 'App A installation step', 'inputs': {'PROPA': {'get_property': ['SELF', 'appA_propABool']}}, 'implementation': 'test_playbook.yml'}, 'configure': {'inputs': {'PROPB': {'get_property': ['SELF', 'appA_propBString']}}, 'implementation': 'test_playbook.yml'}, 'start': {'implementation': 'test_playbook.yml'}, 'stop': {'implementation': 'test_playbook.yml'}, 'maintenance_on': {'inputs': {'MAINT_MODE': 'on'}, 'implementation': 'test_playbook.yml'}, 'maintenance_off': {'inputs': {'MAINT_MODE': 'off'}, 'implementation': 'test_playbook.yml'}}}}}",0
"{'yorc.nodes.Compute': {'derived_from': 'tosca.nodes.Compute', 'capabilities': {'endpoint': {'type': 'yorc.capabilities.Endpoint.ProvisioningAdmin'}}}}",0
"{'org.alien4cloud.nodes.Job': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'A job is a component that has a run operation.\n', 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'description': 'Submit a job to an engine.'}, 'run': {'description': 'Monitor a submitted job for completion.'}, 'cancel': {'description': 'Cancel a submitted job.'}}}}}",0
"{'yorc.tests.nodes.GetOPOutputs': {'derived_from': 'tosca.nodes.Root', 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}, 'my_output': {'type': 'string'}}, 'requirements': [{'partition': {'capability': 'tosca.capabilities.Node', 'relationship': 'yorc.tests.relationships.GetOPOutputsRel', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'configure': 'scripts/config.sh', 'start': {'inputs': {'FROM_OUTPUT': {'get_operation_output': ['SELF', 'Standard', 'configure', 'MY_OUTPUT']}}, 'implementation': 'scripts/start.sh', 'outputs': {'ANOTHER_OUTPUT': ['SELF', 'my_output']}}}}}}",0
"{'yorc.tests.OperationHosts.nodes.OHNode': {'interfaces': {'Standard': {'create': {'implementation': {'primary': 'myscript.sh', 'operation_host': 'ORCHESTRATOR'}}, 'configure': {'implementation': {'primary': 'myscript.sh'}}, 'start': {'implementation': 'myscript.sh'}, 'stop': 'myscript.sh'}}}}",0
"{'yorc.test.nodes.SSHBastionHost': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'bastion': {'type': 'yorc.capabilities.SSHBastionHost', 'properties': {'port': {'get_property': ['HOST', 'endpoint', 'port']}, 'network_name': {'get_property': ['HOST', 'endpoint', 'network_name']}, 'port_name': {'get_property': ['HOST', 'endpoint', 'port_name']}}}}, 'interfaces': {'Standard': {'configure': {'implementation': {'file': 'ansible/bastion.yml', 'type': 'tosca.artifacts.Implementation.Ansible'}}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.ConfigMapFactory': {'description': 'Component in charge of creating a configMap using a container (of type ConfigurableDockerContainer) inputs.', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'name': {'type': 'string', 'description': 'The name of the configMap'}, 'service_dependency_lookups': {'type': 'string', 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n', 'required': False}, 'input_variables': {'type': 'map', 'description': 'The variables names and values that should be replaced in the files', 'entry_schema': {'type': 'string'}}}, 'interfaces': {'Standard': {'create': {'inputs': {'CONFIGMAP_NAME': {'get_property': ['SELF', 'name']}, 'INPUT_VARIABLES': {'get_property': ['SELF', 'input_variables']}, 'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_configmap_create.sh'}, 'delete': {'inputs': {'CONFIGMAP_NAME': {'get_attribute': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_configmap_delete.sh'}}}, 'artifacts': {'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Base': {'description': 'c.f. https://kubernetes.io/docs/api-reference/v1.6/#deployment-v1beta1-apps', 'derived_from': 'tosca.nodes.Root', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources'}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds'}, 'metadata': {'type': 'map', 'description': ""Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata"", 'required': False, 'entry_schema': {'type': 'string'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase': {'description': 'https://v1-6.docs.kubernetes.io/docs/api-reference/v1.6/#volume-v1-core', 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB).'}}, 'requirements': [{'attachment': {'capability': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'relationship': 'org.alien4cloud.relationships.MountDockerVolume', 'occurrences': [1, 'UNBOUNDED']}}, {'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.VolumeBase': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase', 'properties': {'volume_type': {'type': 'string'}, 'spec': {'type': 'tosca.datatypes.Root', 'description': 'may be overriden by concrete implementations', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AbstractArtifactVolumeBase': {'description': 'A volume linked to an artifact', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase', 'artifacts': {'resources': {'file': 'README.md', 'type': 'tosca.artifacts.File'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.ArtifactVolumeBase': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractArtifactVolumeBase', 'properties': {'volume_type': {'type': 'string'}, 'spec': {'type': 'tosca.datatypes.Root', 'description': 'may be overriden by concrete implementations', 'required': False}}, 'artifacts': {'resources': {'file': 'README.md', 'type': 'tosca.artifacts.File'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.EmptyDirVolumeSource': {'description': 'An emptyDir volume is first created when a Pod is assigned to a Node, and exists as long as that Pod is running on that node.\nAs the name says, it is initially empty.\nContainers in the pod can all read and write the same files in the emptyDir volume, though that volume can be mounted at the same or different paths in each container.\nWhen a Pod is removed from a node for any reason, the data in the emptyDir is deleted forever.\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'emptyDir'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.EmptyDirVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.HostPathVolumeSource': {'description': 'HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.\nThis is generally used for system agents or other privileged things that are allowed to see the host machine.\nMost containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'hostPath'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.HostPathVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AWSElasticBlockStoreVolumeSource': {'description': ""AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"", 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'awsElasticBlockStore'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.AWSElasticBlockStoreVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimSource': {'description': 'PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'persistentVolumeClaim'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.PersistentVolumeClaimSpec', 'required': False}, 'accessModes': {'type': 'string', 'description': 'AccessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n', 'default': 'ReadWriteOnce'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimStorageClassSource': {'description': 'An extension of PersistentVolumeClaimSource that allows to specify a storageClass.\nIf no volume that match this claim is found in the PersistentVolume pool, a volume will be allocated in the IAAS.\nWhen using this kind of volume, your Kube admin should ensure to have a storageClass defined in the cluster.\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimSource', 'properties': {'storageClassName': {'type': 'string', 'default': 'default'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.ConfigMapSource': {'description': 'The configMap resource provides a way to inject configuration data into Pods.\nMore info: https://kubernetes.io/docs/concepts/storage/#configmap\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'configMap'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.ConfigMapVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.SecretSource': {'description': ""Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret/\n"", 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.ArtifactVolumeBase', 'properties': {'volume_type': {'type': 'string', 'default': 'secret'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.SecretVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.SecretFactory': {'description': 'Component in charge of creating a secret using one or more files (from an artifact).', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'name': {'type': 'string', 'description': 'The name of the secret'}}, 'interfaces': {'Standard': {'create': {'inputs': {'SECRET_NAME': {'get_property': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_secret_create.sh'}, 'delete': {'inputs': {'SECRET_NAME': {'get_property': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_secret_delete.sh'}}}, 'artifacts': {'resources': {'file': 'README.md', 'type': 'tosca.artifacts.File'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Service': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractService'}}",0
"{'org.alien4cloud.kubernetes.api.types.IngressService': {'description': 'This kind of service can be used of you want to expose your service using the Ingress controler.\nIf tls_crt AND tls_key are set, the Ingress will be secured using a secret.\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.Service', 'properties': {'host': {'type': 'string', 'description': 'The dns name for the ingress.'}, 'tls_crt': {'type': 'string', 'description': 'Optionnal base64 encoded certificate (if TLS need to be set for the ingress)', 'required': False}, 'tls_key': {'type': 'string', 'description': 'Optionnal base64 encoded key (if TLS need to be set for the ingress)', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractService': {'description': 'Represent a kubernetes Service', 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'properties': {'service_name': {'type': 'string', 'description': 'Usually, the service name is generated by the plugin. If you need to define a static service name, you can define it using this property.\n253 characters and consist of lower case alphanumeric characters, -, and .\n', 'required': False}, 'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources', 'default': 'v1'}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds', 'default': 'Service'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ServiceSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Deployment': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractDeployment'}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractDeployment': {'description': 'Represent a kubernetes Deployment', 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources', 'default': 'apps/v1'}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds', 'default': 'Deployment'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.DeploymentSpec'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Job': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractJob'}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractJob': {'description': 'Represent a kubernetes Job', 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources', 'default': 'batch/v1'}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds', 'default': 'Job'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.JobSpec'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container.Docker'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.HorizontalPodAutoscaler': {'description': 'A kubernetes HorizontalPodAutoscaler object\nsee https://v1-7.docs.kubernetes.io/docs/api-reference/v1.7/#horizontalpodautoscaler-v2alpha1-autoscaling\n', 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'properties': {'apiVersion': {'type': 'string', 'default': 'autoscaling/v2alpha1'}, 'kind': {'type': 'string', 'default': 'HorizontalPodAutoscaler'}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.autoscaler.HorizontalPodAutoscalerSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Container': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractContainer'}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractContainer': {'description': 'Represent a kubernetes ContainerSpec.', 'derived_from': 'org.alien4cloud.extended.container.types.ContainerRuntime', 'properties': {'container': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ContainerSpec'}, 'repository': {'type': 'string', 'description': 'This property can be specified to select from which repository the image will be pulled. The kubernetes image will be the concatenation of this property to the image property: {repository}/{image} Note that you may want to define imagePullSecrets references so kubernetes uses the right repository credentials. This property must be configured on the Deployment object.'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.BaseResource': {'description': 'Represent a kubernetes final resource after node matching (Pod, ReplicaSet or Deployment)', 'derived_from': 'tosca.nodes.Root', 'properties': {'namespace': {'type': 'string', 'description': 'The namespace where the resource is deployed.', 'required': False}, 'resource_spec': {'type': 'string', 'description': 'The the JSON serialization (and eventually transformation) of initial node properties.\nThis JSON can be used to instanciate the resource on the K8S cluster.\n'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.DeploymentResource': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'resource_id': {'type': 'string', 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'""}, 'service_dependency_lookups': {'type': 'string', 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n', 'required': False}}, 'attributes': {'deployment_id': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBE_DEPLOYMENT_ID']}}, 'interfaces': {'org.alien4cloud.management.ClusterControl': {'scale': {'inputs': {'KUBE_DEPLOYMENT_ID': {'get_attribute': ['SELF', 'deployment_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'EXPECTED_INSTANCES': {'type': 'integer'}, 'INSTANCES_DELTA': {'type': 'integer'}}, 'implementation': 'scripts/kubectl_deployment_scale.sh'}}, 'Standard': {'create': {'inputs': {'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'KUBE_RESOURCE_DEPLOYMENT_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_deployment_create.sh'}, 'delete': {'inputs': {'KUBE_DEPLOYMENT_ID': {'get_property': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_deployment_delete.sh'}}}, 'capabilities': {'scalable': {'type': 'org.alien4cloud.capabilities.ClusterController'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.BaseJobResource': {'description': 'Represent a Job kubernetes final resource after node matching', 'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'namespace': {'type': 'string', 'description': 'The namespace where the resource is deployed.', 'required': False}, 'resource_spec': {'type': 'string', 'description': 'The the JSON serialization (and eventually transformation) of initial node properties.\nThis JSON can be used to instanciate the resource on the K8S cluster.\n'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.JobResource': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseJobResource', 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'cancel': 'scripts/kubectl_job_cancel.sh', 'submit': {'inputs': {'KUBE_RESOURCE_JOB_CONFIG': {'get_property': ['SELF', 'resource_spec']}}, 'implementation': 'scripts/kubectl_job_submit.sh'}, 'run': 'scripts/kubectl_job_run.sh'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.EndpointResource': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'resource_id': {'type': 'string', 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'""}, 'subsets': {'type': 'list', 'entry_schema': {'type': 'org.alien4cloud.kubernetes.api.datatypes.EndpointSubsets'}}}, 'attributes': {'spec_path': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBE_SPEC_PATH']}}, 'interfaces': {'Standard': {'start': {'inputs': {'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'KUBE_SPEC_PATH': {'get_attribute': ['SELF', 'spec_path']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_endpoint_start.sh'}, 'create': {'inputs': {'KUBE_RESOURCE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_endpoint_create.sh'}, 'delete': {'inputs': {'KUBE_RESOURCE_TYPE': 'endpoints', 'KUBE_RESOURCE_ID': {'get_attribute': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_resource_wrapper_uninstall.sh'}}}, 'requirements': [{'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.ServiceResource': {'description': 'null', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'service_name': {'type': 'string'}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'create', 'IP_ADDRESS']}, 'port': {'get_operation_output': ['SELF', 'Standard', 'create', 'PORT']}, 'node_port': {'get_operation_output': ['SELF', 'Standard', 'create', 'NODE_PORT']}}, 'interfaces': {'Standard': {'create': {'inputs': {'KUBE_SERVICE_NAME': {'get_property': ['SELF', 'service_name']}, 'KUBE_SERVICE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_service_wrapper.sh'}, 'delete': {'inputs': {'KUBE_SERVICE_NAME': {'get_property': ['SELF', 'service_name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_service_wrapper_uninstall.sh'}}}, 'capabilities': {'cluster_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.SimpleResource': {'description': 'A generic resource used to deploy any kind of resource on the kube cluster.', 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'resource_type': {'type': 'string', 'description': 'The resource type known by K8S examples: pod,service,pv,pvc'}, 'resource_id': {'type': 'string', 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'""}, 'json_path_expr': {'type': 'string', 'description': 'the JSON path expression that will get the expected output to check resource avalaibility', 'required': False}, 'json_path_value': {'type': 'string', 'description': 'the value excpected to obtain using the JSON path expression to check resource avalaibility', 'required': False}}, 'interfaces': {'Standard': {'create': {'inputs': {'KUBE_RESOURCE_TYPE': {'get_property': ['SELF', 'resource_type']}, 'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'KUBE_RESOURCE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'KUBE_JSON_PATH_EXPR': {'get_property': ['SELF', 'json_path_expr']}, 'KUBE_JSON_PATH_VALUE': {'get_property': ['SELF', 'json_path_value']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_resource_wrapper.sh'}, 'delete': {'inputs': {'KUBE_RESOURCE_TYPE': {'get_property': ['SELF', 'resource_type']}, 'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_resource_wrapper_uninstall.sh'}}}}}",0
"{'yorc.nodes.slurm.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'gres': {'type': 'string', 'required': False}, 'constraint': {'type': 'string', 'required': False}, 'partition': {'type': 'string', 'required': False, 'description': 'Slurm partition where the nodes will be deployed'}, 'job_name': {'type': 'string', 'required': False, 'description': 'Specify a name for the job allocation. The specified name will appear along with the job id.'}, 'account': {'type': 'string', 'description': 'Charge resources used by this allocation to specified account. May be mandatory according to configuration.\n'}, 'reservation': {'type': 'string', 'description': 'Allocate resources from the named reservation.\n'}}, 'attributes': {'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.'}, 'job_id': {'type': 'string', 'description': 'The ID of the job allocation.'}, 'partition': {'type': 'string', 'description': 'Slurm partition where the nodes are deployed.'}}}}",0
"{'yorc.nodes.slurm.Job': {'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'slurm_options': {'type': 'yorc.datatypes.slurm.JobOptions', 'description': 'Job properties used for Slurm sbatch execution. See Slurm documentation (https://slurm.schedmd.com/sbatch.html) for more details.\n', 'required': False}, 'working_directory': {'type': 'string', 'description': ""Directory where the batch script or command will be executed. Default is home's related user."", 'required': False}, 'execution_options': {'type': 'yorc.datatypes.slurm.ExecutionOptions', 'description': 'Properties used for the execution itself.\n'}, 'monitoring_time_interval': {'type': 'string', 'description': 'Time interval duration used for job monitoring as ""5s"" or ""300ms"" Valid time units are ""ns"", ""us"" (or ""µs""), ""ms"", ""s"", ""m"", ""h"".\n', 'required': False}, 'environment_file': {'type': 'string', 'required': False, 'description': 'If specified and present on the client node the given file will be sourced before submitting the job. This is useful when user-specific variables are required.\n'}, 'credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Provide user credentials for connection to slurm client node\n', 'required': False}}, 'attributes': {'job_id': {'type': 'string', 'description': 'The ID of the job.'}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}, 'run': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}, 'cancel': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}}}}}",0
"{'yorc.nodes.slurm.SingularityJob': {'derived_from': 'yorc.nodes.slurm.Job', 'properties': {'singularity_command_options': {'type': 'list', 'description': 'Options passed to the ""singularity run"" or ""singularity exec"" command.', 'required': False, 'entry_schema': {'type': 'string'}}, 'singularity_debug': {'type': 'boolean', 'description': 'Print all debug and verbose information during singularity execution', 'required': False, 'default': False}}}}",0
"{'yorc.type.1': {'derived_from': 'yorc.type.2', 'capabilities': {'endpoint': {'type': 'yorc.test.capabilities.Endpoint', 'properties': {'credentials': {'token': ''}}}}}}",0
"{'yorc.type.2': {'derived_from': 'yorc.type.3', 'capabilities': {'scalable': 'yorc.test.capabilities.Scalable'}}}",0
{'yorc.type.3': {'capabilities': {'binding': 'yorc.test.capabilities.network.Bindable'}}},0
{'yorc.type.WithUndefCap': {'capabilities': {'udef': 'yorc.test.capabilities.Endpoint'}}},0
{'yorc.type.SuperScalable': {'capabilities': {'sups': 'yorc.capabilities.SuperScalable'}}},0
"{'yorc.type.TypeWithEndpointCap': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'myepip': {'get_attribute': ['SELF', 'myep', 'ip_address']}, 'myepattr': {'get_attribute': ['SELF', 'myep', 'attr2']}}, 'capabilities': {'myep': 'yorc.test.capabilities.MyEndpoint'}}}",0
"{'yorc.tests.nodes.MyService': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'properties': {'prop1': {'type': 'string', 'default': 'vp1'}}, 'attributes': {'attr1': {'type': 'string', 'default': 'va1'}}, 'capabilities': {'cap1': 'yorc.tests.capabilities.Cap1', 'cap2': 'tosca.capabilities.Endpoint', 'cap3': 'yorc.tests.capabilities.Cap1'}}}",0
"{'yorc.tests.nodes.SrvImpl1': {'derived_from': 'yorc.tests.nodes.MyService', 'capabilities': {'host': 'tosca.capabilities.Container'}, 'attributes': {'a1': {'get_attribute': ['SELF', 'attr1']}, 'a2': {'get_attribute': ['SELF', 'cap1', 'cap1_attr1']}, 'a3': {'get_attribute': ['SELF', 'cap2', 'ip_address']}}}}",0
"{'yorc.tests.nodes.SrvImpl2': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'cap1': 'yorc.tests.capabilities.Cap1'}}}",0
"{'org.alien4cloud.lang.java.jdk.linux.nodes.OracleJDK': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of Oracle Java Development Kit', 'metadata': {'icon': 'images/jdk.png'}, 'properties': {'java_url': {'type': 'string', 'required': True, 'default': 'https://edelivery.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz'}, 'java_home': {'type': 'string', 'required': True, 'default': '/opt/java'}, 'component_version': {'type': 'version', 'default': '1.8.0-131-b11'}}, 'attributes': {'java_version': {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_VERSION']}, 'java_message': {'concat': ['Java help: ', {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_HELP']}]}, 'java_secret': {'get_secret': ['/secrets/app/javatype']}}, 'capabilities': {'jdk': {'type': 'org.alien4cloud.lang.java.pub.capabilities.JDK', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'JAVA_URL': {'get_property': ['SELF', 'java_url']}, 'JAVA_HOME': {'get_property': ['SELF', 'java_home']}, 'JAVA_INPUT_SEC': {'get_secret': ['/secrets/app/javatype', 'ji_o']}}, 'implementation': 'scripts/install_jdk.sh'}}}}}",0
"{'org.alien4cloud.java.jdk.linux.nodes.OracleJDK': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of Oracle Java Development Kit', 'metadata': {'icon': 'images/jdk.png'}, 'properties': {'java_url': {'type': 'string', 'required': True, 'default': 'https://edelivery.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.tar.gz'}, 'java_home': {'type': 'string', 'required': True, 'default': '/opt/java'}, 'component_version': {'type': 'version', 'default': '1.8.0-131-b11'}}, 'attributes': {'java_version': {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_VERSION']}, 'java_message': {'concat': ['Java help: ', {'get_operation_output': ['SELF', 'Standard', 'create', 'JAVA_HELP']}]}}, 'capabilities': {'jdk': {'type': 'org.alien4cloud.java.pub.capabilities.JDK', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'JAVA_URL': {'get_property': ['SELF', 'java_url']}, 'JAVA_HOME': {'get_property': ['SELF', 'java_home']}}, 'implementation': 'scripts/install_jdk.sh'}}}}}",0
"{'org.alien4cloud.nodes.Tomcat': {'derived_from': 'tosca.nodes.WebServer', 'description': 'TOSCA node to install and run Apache Tomcat java web server. The Apache Tomcat® software is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.\n', 'metadata': {'icon': '/images/tomcat.png'}, 'properties': {'tomcat_home': {'type': 'string', 'required': True, 'description': 'Directory in which to install tomcat on the host.', 'default': '/opt/tomcat'}, 'download_url': {'type': 'string', 'required': True, 'description': 'Url from which to download the tomcat tar.gz package', 'default': 'https://archive.apache.org/dist/tomcat/tomcat-8/v8.0.39/bin/apache-tomcat-8.0.39.tar.gz'}, 'component_version': {'type': 'version', 'description': 'Version of tomcat to install (this should match the provided download url).', 'default': '8.0.39'}}, 'attributes': {'server_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}]}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.lang.java.pub.capabilities.JDK', 'relationship': 'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK', 'occurrences': [1, 1]}}], 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint', 'occurrences': [0, 0], 'properties': {'protocol': 'http', 'port': 8080}}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin', 'occurrences': [0, 0]}, 'host': {'type': 'org.alien4cloud.capabilities.WarContainer', 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'create': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'TOMCAT_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/tomcat_install.sh'}, 'start': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}}, 'implementation': 'scripts/tomcat_start.sh'}, 'stop': {'inputs': {'TOMCAT_HOME': {'get_property': ['SELF', 'tomcat_home']}}, 'implementation': 'scripts/tomcat_stop.sh'}}}}}",0
"{'yorc.tests.nodes.GlobalInputs': {'derived_from': 'tosca.nodes.Root', 'properties': {'p1': {'type': 'string', 'default': 'Val1'}}, 'interfaces': {'Standard': {'inputs': {'G1': 'myLitteral', 'G2': {'get_property': ['SELF', 'p1']}, 'G3': {'type': 'string', 'required': False, 'default': 'Global3Default'}, 'L1': 42}, 'create': {'inputs': {'L1': 1, 'L2': {'get_property': ['SELF', 'p1']}}, 'implementation': 'scripts/create.sh'}}}}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA Root Node Type is the default type that all other TOSCA base Node Types derive from. This allows for all TOSCA nodes to have a consistent set of features for modeling and management (e.g., consistent definitions for requirements, capabilities and lifecycle interfaces).\n', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance.  See section “Node States” for allowed values.'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'create': {'description': 'Standard lifecycle create operation.'}, 'configure': {'description': 'Standard lifecycle configure operation.'}, 'start': {'description': 'Standard lifecycle start operation.'}, 'stop': {'description': 'Standard lifecycle stop operation.'}, 'delete': {'description': 'Standard lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources.  Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'networks': {'type': 'map', 'description': 'The list of logical networks assigned to the compute host instance and information about them.', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'description': 'The list of logical ports assigned to the compute host instance and information about them.', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}, {'network': {'type': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.\n', 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'description': 'The optional credential that can be used to authenticate to the software component.', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This TOSA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.\n', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'properties': {'context_root': {'type': 'string', 'description': 'The web application’s context root which designates the application’s URL path within the web server it is hosted on.'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'description': 'he TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.\n', 'properties': {'name': {'type': 'string', 'description': 'The logical name of the object store (or container).'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested initial storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}]}, 'maxsize': {'type': 'scalar-unit.size', 'description': 'The requested maximum storage size (default unit is in Gigabytes).', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB).\n* Note:\n         Required when an existing volume (i.e., volume_id) is not available.\n         If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.network.Network': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.', 'properties': {'ip_version': {'type': 'integer', 'description': 'The IP version of the requested network', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'description': 'The cidr block of the requested network', 'required': False}, 'start_ip': {'type': 'string', 'description': 'The IP address to be used as the 1st one in a pool of addresses derived from the cidr block full IP range', 'required': False}, 'end_ip': {'type': 'string', 'description': 'The IP address to be used as the last one in a pool of addresses derived from the cidr block full IP range', 'required': False}, 'gateway_ip': {'type': 'string', 'description': 'The gateway IP address.', 'required': False}, 'network_name': {'type': 'string', 'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure – OR – be used as the name of the new created network. *   If network_name is provided along with network_id they will be used to uniquely identify an existing network and not\n    creating a new one, means all other possible properties are not allowed.\n*   network_name should be more convenient for using. But in case that network name uniqueness is not guaranteed then\n    one should provide a network_id as well.\n', 'required': False}, 'network_id': {'type': 'string', 'description': 'An Identifier that represents an existing Network instance in the underlying cloud infrastructure.\n This property is mutually exclusive with all other properties except network_name.\n *   Appearance of network_id in network template instructs the Tosca container to use an existing network instead of creating a new one.\n *   network_name should be more convenient for using. But in case that network name uniqueness is not guaranteed then one should add a network_id as well.\n *   network_name and network_id can be still used together to achieve both uniqueness and convenient.\n', 'required': False}, 'segmentation_id': {'type': 'string', 'description': 'A segmentation identifier in the underlying cloud infrastructure (e.g., VLAN id, GRE tunnel id). If the segmentation_id is specified, the network_type or physical_network properties should be provided as well.\n', 'required': False}, 'network_type': {'type': 'string', 'description': 'Optionally, specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.\n', 'required': False}, 'physical_network': {'type': 'string', 'description': 'Optionally, identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vla\n', 'required': False}, 'dhcp_enabled': {'type': 'boolean', 'description': 'Indicates the TOSCA container to create a virtual network instance with or without a DHCP service.', 'required': False, 'default': True}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types. The Port node type effectively represents a single virtual NIC on the Compute node instance.\n', 'properties': {'ip_address': {'type': 'string', 'description': 'Allow the user to set a fixed IP address.\nNote that this address is a request to the provider which they will attempt to fulfill but may not be able to dependent on the network the port is associated with.\n', 'required': False}, 'order': {'type': 'integer', 'description': 'The order of the NIC on the compute instance (e.g. eth2).\nNote: when binding more than one port to a single compute (aka multi vNICs) and ordering is desired, it is *mandatory* that all ports will be set with an order value and. The order values must represent a positive, arithmetic progression that starts with 0 (e.g. 0, 1, 2, …, n).\n', 'required': True, 'default': 0, 'constraints': [{'greater_or_equal': 0}]}, 'is_default': {'type': 'boolean', 'description': 'Set is_default=true to apply a default gateway route on the running compute instance to the associated network gateway.\nOnly one port that is associated to single compute node can set as default=true.\n', 'required': False, 'default': False}, 'ip_range_start': {'type': 'string', 'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.\n', 'required': False}, 'ip_range_end': {'type': 'string', 'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated by this Port. Without setting this property the IP allocation is done from the entire CIDR block of the network.\n', 'required': False}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The IP address would be assigned to the associated compute instance.'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'tosca.nodes.Network': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}}, 'capabilities': {'connection': {'type': 'tosca.capabilities.Connectivity'}}}}",0
"{'org.ystia.yorc.samples.GreetingsComponentType': {'description': 'Sample component having an operation needing an input', 'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'custom': {'inputs': {'greetings_user': {'type': 'string'}}, 'say_goodbye': {'inputs': {'goodbye_msg': {'type': 'string', 'required': True}}, 'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'say_goodbye'}}, 'say_hello': {'inputs': {'hello_msg': {'type': 'string'}}, 'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'say_hello'}}}, 'Standard': {'start': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'start'}}, 'create': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'create'}}}}}}",0
"{'org.alien4cloud.extended.container.types.ContainerRuntime': {'description': 'Can host containerized applications. A ContainerRuntime represents the container itself, while DockerContainer is the contanerized application.', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'org.alien4cloud.extended.container.capabilities.ApplicationHost'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container.Docker', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.extended.container.types.ContainerDeploymentUnit': {'description': 'Can host containers and be deployed as a unit. Think about Pods in K8S.', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'org.alien4cloud.extended.container.types.ContainerJobUnit': {'description': 'Can host containers to be run as Jobs.', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Container.Docker'}}}}",0
"{'tosca.nodes.Container.Application.DockerContainer': {'metadata': {'icon': '/images/docker.png'}, 'description': ""The TOSCA Container Application Docker node represents an application running in a Docker container. Properties defined in the node will be interpreted as the entrypoint's arguments."", 'derived_from': 'tosca.nodes.Container.Application', 'properties': {'cpu_share': {'type': 'float', 'default': 1.0}, 'cpu_share_limit': {'type': 'float', 'required': False}, 'mem_share': {'type': 'scalar-unit.size', 'default': '128 MB'}, 'mem_share_limit': {'type': 'scalar-unit.size', 'required': False}, 'disk_share': {'type': 'integer', 'required': False}, 'docker_options': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string', 'description': 'Arbitrary command-line options for the docker run command.'}}, 'docker_run_args': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string', 'description': 'Docker run arguments. Allows safe usage of Docker ENTRYPOINT statement in the Dockerfile.'}}, 'docker_bash_cmd': {'type': 'list', 'description': 'Docker run command. Will override the Dockerfile CMD statement.', 'required': False, 'default': ['/bin/bash', '-c'], 'entry_schema': {'type': 'string'}}, 'docker_run_cmd': {'type': 'string', 'description': 'Docker run command. Will override the Dockerfile CMD statement.', 'required': False}, 'docker_env_vars': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string', 'description': 'Environment variables for the Docker container.'}}}, 'attributes': {'endpoint': {'type': 'string', 'description': 'Reflects the external endpoint assigned to this container.'}}, 'capabilities': {'attach': {'type': 'org.alien4cloud.capabilities.DockerVolumeAttachment'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.extended.container.capabilities.ApplicationHost', 'relationship': 'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime'}}]}}",0
"{'tosca.nodes.Container.Application.ConfigurableDockerContainer': {'description': ""A specification of a DockerContainer that is configurable. In K8S, we'll use configMaps."", 'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'config_settings': {'type': 'list', 'required': False, 'entry_schema': {'type': 'org.alien4cloud.extended.container.datatypes.ConfigSetting'}}}}}",0
"{'org.alien4cloud.nodes.DockerExtVolume': {'metadata': {'icon': '/images/volume.png'}, 'description': 'null', 'derived_from': 'tosca.nodes.BlockStorage', 'requirements': [{'attachment': {'capability': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'relationship': 'org.alien4cloud.relationships.MountDockerVolume', 'occurrences': [1, 'UNBOUNDED']}}, {'host': {'capability': 'tosca.capabilities.Container.Docker', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.nodes.DockerArtifactVolume': {'metadata': {'icon': '/images/volume.png'}, 'description': 'This volume has an artifact, can be used to create a K8S secret from a file or files in a directory for example.', 'derived_from': 'org.alien4cloud.nodes.DockerExtVolume', 'artifacts': {'resources': {'file': 'README.md', 'type': 'tosca.artifacts.File'}}}}",0
"{'yorc.types.A': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'document_root': {'type': 'string'}, 'empty': {'type': 'string'}, 'optionalEmpty': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'inputs': {'G1': 'G1', 'G2': {'get_property': ['SELF', 'document_root']}, 'G3': {'get_property': ['SELF', 'empty']}, 'G4': {'get_property': ['SELF', 'optionalEmpty']}}, 'create': {'inputs': {'A1': {'get_property': ['SELF', 'document_root']}, 'A2': {'get_attribute': ['HOST', 'ip_address']}, 'A3': {'get_property': ['SELF', 'empty']}, 'A4': {'get_property': ['SELF', 'optionalEmpty']}}, 'implementation': '/tmp/create.sh', 'outputs': {'OUTPUT1': ['SELF', 'my_attribute1']}}}}}}",0
"{'yorc.types.B': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'cap': 'yorc.types.Cap'}}}",0
"{'yorc.test.nodes.TestComponent': {'description': 'Test component\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'host': {'get_attribute': ['HOST', 'ip_address']}, 'port': {'get_property': ['HOST', 'port']}, 'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['HOST', 'port']}]}, 'url_from_cap': {'concat': ['http://', {'get_attribute': ['HOST', 'endpoint', 'ip_address']}, ':', {'get_property': ['SELF', 'endpoint', 'port']}]}, 'url_from_my_attribute': {'concat': ['http://', {'get_attribute': ['HOST', 'my_attribute']}, ':', {'get_property': ['SELF', 'endpoint', 'port']}]}, 'url_from_output': {'get_operation_output': ['SELF', 'standard', 'create', 'URL']}}, 'requirements': [{'host': {'capability': 'yorc.test.capabilities.TestContainerCapability', 'relationship': 'yorc.test.relationships.TestComponentOnContainer'}}, {'php': {'capability': 'yorc.test.capabilities.TestModuleCapability', 'relationship': 'yorc.test.relationships.TestComponentConnectsToModule'}}], 'interfaces': {'Standard': {'create': 'scripts/create.sh', 'start': 'scripts/start.sh'}}, 'artifacts': [{'utils_scripts': {'file': 'test', 'type': 'tosca.artifacts.File'}}], 'capabilities': {'endpoint': 'yorc.test.capabilities.Endpoint'}}}",0
"{'org.ystia.yorc.samples.ComputePIComponentType': {'description': 'Sample component to compute PI', 'tags': {'icon': '/images/python.png'}, 'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'result': {'type': 'float', 'description': 'The result of PI calculation'}}, 'interfaces': {'custom': {'inputs': {'decimal': {'get_input': 'pi_decimal'}}, 'compute_pi': {'outputs': {'result': ['SELF', 'result']}, 'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'compute_pi'}}}, 'Standard': {'start': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'start'}}, 'create': {'implementation': {'type': 'ystia.yorc.tests.artifacts.Implementation.Custom', 'file': 'create'}}}}}}",0
"{'yorc.tests.nodes.imports.OpImplementationArtifact': {'derived_from': 'tosca.nodes.Root', 'properties': {'p1': {'type': 'string', 'default': 'Val1'}}, 'interfaces': {'Standard': {'create': {'inputs': {'L1': 1, 'L2': {'get_property': ['SELF', 'p1']}}, 'implementation': {'file': 'scripts/create.sh', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
"{'org.ystia.yorc.test.implem.AppBType': {'derived_from': 'org.ystia.yorc.test.pub.AppBType', 'description': 'Test Application B', 'requirements': [{'appB_capA': {'capability': 'org.ystia.yorc.test.pub.AppBCapAType', 'relationship': 'org.ystia.yorc.test.implem.JoinAppARelType', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'description': 'App B installation step', 'implementation': 'test_playbook.yml'}, 'configure': {'implementation': 'test_playbook.yml'}, 'start': {'implementation': 'test_playbook.yml'}, 'stop': {'implementation': 'test_playbook.yml'}}, 'custom': {'inputs': {'INSTALL_DIR': '/install'}, 'maintenance_on': {'inputs': {'MAINT_MODE': 'on'}, 'implementation': 'test_playbook.yml'}, 'maintenance_off': {'inputs': {'MAINT_MODE': 'off'}, 'implementation': 'test_playbook.yml'}}}}}",0
"{'org.alien4cloud.nodes.Job': {'description': 'A job is a component that has a run operation.', 'derived_from': 'tosca.nodes.Root'}}",0
"{'yorc.nodes.google.Compute': {'derived_from': 'yorc.nodes.Compute', 'description': 'Google Compute Engine Virtual Machine (Compute Instance)\n', 'properties': {'image_project': {'type': 'string', 'description': 'Project against which all image and image family references will be resolved. If not specified, and either image or image_family is provided, the current default project is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'image_family': {'type': 'string', 'description': 'Family of the image from which to initialize the boot disk. When a family is specified instead of an image, the latest non-deprecated  image associated with that family is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'image': {'type': 'string', 'description': 'Image from which to initialize the boot disk. If not specified, and an image family is specified, the latest  non-deprecated image associated with that family is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'machine_type': {'type': 'string', 'description': 'Machine type used for the Compute Node, defining the Compute Node CPU and Memory resources.\n', 'default': 'n1-standard-1'}, 'zone': {'type': 'string', 'description': 'Zone on which the Compute Node should be hosted\n'}, 'description': {'type': 'string', 'description': 'Textual description of this Compute Node\n', 'required': False}, 'labels': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs to assign to the Compute Node\n', 'required': False}, 'metadata': {'type': 'string', 'description': 'Comma-separated list of metadata KEY=VALUE pairs made available to the Compute Node Operating System. On Google official images, the metadata keys startup-script or startup-script-url can be used to specify a script that will be executed by the Compute Node once it starts running.\n', 'required': False}, 'no_address': {'type': 'boolean', 'description': ""Don't assign an external IP address to the instance\n"", 'required': False}, 'preemptible': {'type': 'boolean', 'description': 'Is the Compute Node preemptible and time-limited\n', 'required': False}, 'scopes': {'type': 'string', 'description': 'Comma-separated list of service scopes defining access to Google Cloud APIs. A scope can be either the full URI of the scope or an alias, like cloud-platform.\n', 'required': False}, 'service_account': {'type': 'string', 'description': 'Service Account (e-mail or alias) to attach to the Compute Node. If not provided, the Compute Node will get the project default service account. \n', 'required': False}, 'tags': {'type': 'string', 'description': 'Comma-separated list of tags to apply to the instances for identifying the instances to which network firewall rules will apply.\n', 'required': False}, 'scratch_disks': {'type': 'list', 'description': 'Additional scratch disks to attach to the instance. Maximum allowed is 8.', 'required': False, 'entry_schema': {'type': 'yorc.datatypes.google.ScratchDisk', 'constraints': [{'greater_or_equal': 0}, {'max_length': 8}]}}}, 'requirements': [{'assignment': {'capability': 'yorc.capabilities.Assignable', 'node': 'yorc.nodes.google.Address', 'relationship': 'yorc.relationships.AssignsTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'yorc.nodes.google.Subnetwork': {'derived_from': 'tosca.nodes.Network', 'properties': {'name': {'type': 'string', 'required': True, 'description': 'The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\n'}, 'network': {'type': 'string', 'required': True, 'description': 'The network this subnet belongs to.\n'}, 'ip_cidr_range': {'type': 'string', 'required': True, 'description': 'The range of internal addresses that are owned by this sub-network. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported.\n'}, 'project': {'type': 'string', 'description': 'The ID of the project in which the resource belongs. If it is not provided, the infrastructure location project is used.\n', 'required': False}, 'region': {'type': 'string', 'description': 'The Region in which this subnet should reside.\n', 'required': True}, 'enable_flow_logs': {'type': 'boolean', 'description': 'Whether to enable flow logging for this subnetwork.', 'required': False}, 'private_ip_google_access': {'type': 'boolean', 'description': 'Whether the VMs in this subnet can access Google services without assigned external IP addresses.', 'required': False}, 'secondary_ip_ranges': {'type': 'list', 'description': 'A list of configurations for secondary IP ranges for VM instances contained in this sub-network. The primary IP of such VM must belong to the primary ip_cidr_range of the sub-network. The alias IPs may belong to either primary or secondary ranges.\n', 'entry_schema': {'type': 'yorc.datatypes.google.IPRange'}, 'required': False}}, 'attributes': {'gateway_ip': {'type': 'string', 'description': 'The IPv4 address of the gateway.'}, 'network_name': {'type': 'string', 'description': 'The related name of the network of this subnet.'}, 'subnetwork_name': {'type': 'string', 'description': 'The related name of this subnet.'}}}}",0
"{'yorc.nodes.google.PrivateNetwork': {'derived_from': 'tosca.nodes.Network', 'properties': {'auto_create_subnetworks': {'type': 'boolean', 'description': 'If set to true, this network will be created in auto subnet mode, and Google will create a subnet for each region automatically. If set to false, a custom subnetted network must be created. Defaults to true.\n', 'required': False, 'default': False}, 'routing_mode': {'type': 'string', 'description': 'Sets the network-wide routing mode for Cloud Routers to use. Accepted values are ""GLOBAL"" or ""REGIONAL"". Defaults to ""REGIONAL"". Refer to the Cloud Router (https://cloud.google.com/router/docs/concepts/overview#dynamic-routing-mode) documentation for more details.\n', 'required': False}, 'description': {'type': 'string', 'description': 'An optional description of this resource.\n', 'required': False}, 'network_name': {'type': 'string', 'description': 'The existing network to use. You can create default or custom subnets with existing network.\n', 'required': False}, 'cidr': {'type': 'string', 'description': 'CIDR range for default subnet creation. If this field is specified, you must fill the cidr_region too.\n', 'required': False}, 'cidr_region': {'type': 'string', 'description': 'The Google region to used with specified cidr for default subnet creation. This field is mandatory is cidr is set.\n', 'required': False}, 'project': {'type': 'string', 'description': 'The ID of the project in which the resource belongs. If it is not provided, the infrastructure location project is used.\n', 'required': False}, 'custom_subnetworks': {'type': 'list', 'description': 'if auto_create_subnetworks is set to false, you must create at least one custom sub-network for this network. Each VPC network is subdivided into subnets, and each subnet is contained within a single region. You can have more than one subnet in a region for a given VPC network. Each subnet has a contiguous private RFC1918 IP space. When you create an instance in a subnet, the instance draws its internal IP address from that subnet.\n', 'entry_schema': {'type': 'yorc.datatypes.google.Subnetwork'}, 'required': False}}, 'attributes': {'network_name': {'type': 'string', 'description': 'The unique name of the network.'}}}}",0
"{'yorc.nodes.google.Address': {'derived_from': 'tosca.nodes.Root', 'properties': {'addresses': {'type': 'string', 'description': 'Comma-separated list of external addresses. Only IPv4 is supported. The IP address must be inside the specified subnetwork, if any.\n', 'required': False}, 'address_type': {'type': 'string', 'description': 'Type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.\n', 'required': False}, 'description': {'type': 'string', 'description': 'Optional description of this resource\n', 'required': False}, 'network_tier': {'type': 'string', 'description': 'Networking tier used for configuring this address. This field can take the following values: PREMIUM or STANDARD. If this field is not specified, it is assumed to be PREMIUM.\n', 'required': False}, 'subnetwork': {'type': 'string', 'description': ""URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.\n"", 'required': False}, 'labels': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs to assign to the Compute Address\n', 'required': False}, 'region': {'type': 'string', 'description': 'Region in which the created address should reside. If it is not provided, the infrastructure location region is used.\n', 'required': False}, 'project': {'type': 'string', 'description': 'ID of the project in which the resource belongs. If it is not provided, the infrastructure location project is used.\n', 'required': False}}, 'capabilities': {'assignment': {'type': 'yorc.capabilities.Assignable'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.google.Deployment'}}, 'delete': {'implementation': {'file': 'embedded', 'type': 'yorc.artifacts.google.Deployment'}}}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The compute IP address.'}}}}",0
"{'yorc.nodes.google.PersistentDisk': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'description': {'type': 'string', 'description': 'An optional description of this resource.\n', 'required': False}, 'type': {'type': 'string', 'description': 'URL of the disk type resource describing which disk type to use to create the disk. If this field is not specified, it is assumed to be pd-standard for Standard Persistent Disk HDD. pd-ssd is for solid-state drives (SSD).\n', 'required': False}, 'labels': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs to assign to the Compute Disk.\n', 'required': False}, 'zone': {'type': 'string', 'description': 'A reference to the zone where the disk resides. In any case the disk must be on the same zone as the associated Compute instances.\n', 'required': True}, 'deletable': {'type': 'boolean', 'description': 'should this volume be deleted at undeployment', 'required': False, 'default': False}, 'disk_encryption_key': {'type': 'yorc.datatypes.google.EncryptionKey', 'description': 'Encrypts the disk using a customer-supplied encryption key. After you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later (e.g. to create a disk snapshot or an image, or to attach the disk to a virtual machine). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the disk, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later.\n', 'required': False}, 'image_id': {'type': 'string', 'description': ""The image from which to initialize this disk. This can be one of: the image's self_link, projects/{project}/global/images/{image}, projects/{project}/global/images/family/{family}, global/images/{image}, global/images/family/{family}, family/{family}, {project}/{family}, {project}/{image}, {family}, or {image}. If referred by family, the images names must include the family name. If they don't, use the google_compute_image data source. For instance, the image centos-6-v20180104 includes its family name centos-6. These images can be referred by family name here.\n"", 'required': False}, 'image_encryption_key': {'type': 'yorc.datatypes.google.EncryptionKey', 'description': 'The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.\n', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, https://www.googleapis.com/compute/v1/projects/project/global/snapshots/snapshot, projects/project/global/snapshots/snapshot, global/snapshots/snapshot, snapshot are valid values\n', 'required': False}, 'snapshot_encryption_key': {'type': 'yorc.datatypes.google.EncryptionKey', 'description': 'The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.\n', 'required': False}}}}",0
"{'yorc.tests.nodes.AbstractValueAssignmentNode': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'empty': {'type': 'string', 'required': False}, 'list': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'map': {'type': 'map', 'entry_schema': {'type': 'string'}}, 'mapdef': {'type': 'map', 'entry_schema': {'type': 'string'}, 'default': {'def1': 'map 1 default value', 'def2': 'map 1 default value'}}, 'baseComplex': {'type': 'yorc.tests.datatypes.BaseType'}}, 'attributes': {'concat_attr': {'concat': [{'get_property': ['SELF', 'port']}, {'concat': ['something', {'concat': [{'concat': ['hello', {'get_operation_output': ['SELF', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '!']}]}]}}, 'capabilities': {'endpoint': {'type': 'yorc.tests.capabilities.ValueAssignmentEndpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}}, {'server': {'capability': 'yorc.tests.capabilities.ValueAssignmentEndpoint', 'occurrences': [0, 1]}}]}}",0
"{'yorc.tests.nodes.ValueAssignmentNode': {'derived_from': 'yorc.tests.nodes.AbstractValueAssignmentNode', 'requirements': [{'server': {'capability': 'yorc.tests.capabilities.ValueAssignmentEndpoint', 'relationship': 'yorc.tests.relationships.ValueAssignmentConnectsTo', 'occurrences': [0, 1]}}], 'interfaces': {'custom': {'publish': {'inputs': {'input_concat': {'get_attribute': ['SELF', 'concat_attr']}, 'input_complex': {'type': 'yorc.tests.datatypes.BaseType', 'required': True, 'default': {'nestedType': {'listofstring': ['typeDefL1', 'typeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'nested': 1}}, {'literal': 43, 'mymap': {'nested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'nested': 3}}}}}}}, 'implementation': 'scripts/show_inputs.sh'}}, 'Standard': {'create': 'scripts/create.sh', 'configure': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SELF', 'empty']}, 'input_propMapdef_all': {'get_property': ['SELF', 'map']}, 'input_propMapdef_def1': {'get_property': ['SELF', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SELF', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SELF', 'list']}, 'input_propList_0_alien': {'get_property': ['SELF', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SELF', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'start': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SELF', 'empty']}, 'input_propMapdef_all': {'get_property': ['SELF', 'map']}, 'input_propMapdef_def1': {'get_property': ['SELF', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SELF', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SELF', 'list']}, 'input_propList_0_alien': {'get_property': ['SELF', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SELF', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}}}}}",0
"{'starlings.nodes.PublisherFromDockerVolume': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This TOSCA component allows to publish (copy) a file to a given directory from a host mount point of a Docker volume\n', 'properties': {'target_directory': {'type': 'string', 'required': True, 'description': 'The OS path where files will be copied\n'}, 'web_dir_matching': {'type': 'string', 'required': True, 'description': ""The Web directory that corresponds to the folder given in 'target_directory' property\n""}}, 'attributes': {'host_path': {'get_operation_output': ['SELF', 'Configure', 'post_configure_target', 'HOST_PATH']}, 'container_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'CONTAINER_ID']}, 'published_url': {'concat': [{'get_property': ['SELF', 'web_dir_matching']}, '/', {'get_attribute': ['SELF', 'container_id']}]}}, 'requirements': [{'host': {'capability': 'starlings.capabilities.Container.Docker', 'relationship': 'starlings.relationships.HostedOnDockerContainer', 'occurrences': [1, 1]}}, {'volume_to_get_file': {'capability': 'starlings.capabilities.DockerVolume', 'relationship': 'starlings.relationships.DependsOnDockerVolume', 'occurrences': [1, 1]}}], 'interfaces': {'custom': {'publish': {'inputs': {'TARGET_DIRECTORY': {'get_property': ['SELF', 'target_directory']}, 'HOST_PATH': {'get_attribute': ['SELF', 'host_path']}, 'CONTAINER_ID': {'get_attribute': ['SELF', 'container_id']}, 'WEB_DIR_MATCHING': {'get_property': ['SELF', 'web_dir_matching']}}, 'implementation': 'scripts/publisher_publish.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'starlings.nodes.DockerContainer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': ""The TOSCA Container Application Docker node represents an application running in a Docker container. Properties defined in the node will be interpreted as the entrypoint's arguments.\n"", 'tags': {'icon': 'images/docker.png'}, 'properties': {'image': {'type': 'string', 'required': True, 'description': ""The Docker image used to launch the container. The format should be REPOSITORY:TAG as it's describe in Docker documentation. Example: my_local_repository:5000/my_image:latest\n""}, 'cpu_share': {'type': 'integer', 'required': False, 'description': 'Container CPU shares (relative weight). Example: ""512""\n'}, 'mem_share': {'type': 'string', 'required': False, 'description': 'Shared memory with the Docker container. Example: ""512M""\n'}, 'docker_options': {'type': 'string', 'required': False, 'description': 'Arbitrary command-line options for the docker run command.\n'}, 'docker_run_cmd': {'type': 'string', 'required': False, 'description': 'Docker run command. Will override the Dockerfile CMD statement.\n'}, 'use_gpu': {'type': 'boolean', 'required': True, 'default': False, 'description': 'If checked, will use nvidia-docker command instead of docker command.\n'}}, 'attributes': {'container_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'CONTAINER_ID']}}, 'capabilities': {'attach': 'starlings.capabilities.DockerVolumeAttachment', 'host': 'starlings.capabilities.Container.Docker'}, 'interfaces': {'Standard': {'configure': {'implementation': 'scripts/docker_configure.sh'}, 'start': {'inputs': {'IMAGE': {'get_property': ['SELF', 'image']}, 'CPU_SHARE': {'get_property': ['SELF', 'cpu_share']}, 'MEM_SHARE': {'get_property': ['SELF', 'mem_share']}, 'DOCKER_OPTIONS': {'get_property': ['SELF', 'docker_options']}, 'DOCKER_RUN_CMD': {'get_property': ['SELF', 'docker_run_cmd']}, 'USE_GPU': {'get_property': ['SELF', 'use_gpu']}}, 'implementation': 'scripts/docker_start.sh'}, 'stop': {'inputs': {'CONTAINER_ID': {'get_attribute': ['SELF', 'container_id']}, 'USE_GPU': {'get_property': ['SELF', 'use_gpu']}}, 'implementation': 'scripts/docker_stop.sh'}, 'delete': {'inputs': {'CONTAINER_ID': {'get_attribute': ['SELF', 'container_id']}}, 'implementation': 'scripts/docker_delete.sh'}}, 'custom': {'run': {'inputs': {'CONTAINER_ID': {'get_attribute': ['SELF', 'container_id']}, 'USE_GPU': {'get_property': ['SELF', 'use_gpu']}}, 'implementation': 'scripts/docker_run.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'starlings.nodes.DockerVolume': {'derived_from': 'tosca.nodes.Root', 'tags': {'icon': 'images/docker_volume.png'}, 'properties': {'host_path': {'type': 'string', 'required': True, 'description': 'Specifies where from the volume is mounted inside the host.'}, 'container_path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the container.'}}, 'capabilities': {'depends': {'type': 'starlings.capabilities.DockerVolume'}}, 'requirements': [{'hosted_on': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'filesystem_endpoint': {'capability': 'starlings.capabilities.DockerVolumeAttachment', 'relationship': 'starlings.relationships.MountDockerVolume', 'occurrences': [1, 1]}}]}}",0
"{'yorc.nodes.aws.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'image_id': {'type': 'string', 'description': 'AMI (Amazon Machine Image) ID', 'required': True}, 'instance_type': {'type': 'string', 'description': 'AWS type representing Amazon flavor (combination of CPU, memory, storage, and networking capacity, for example t2.micro)', 'required': True}, 'key_name': {'type': 'string', 'description': 'AWS Key Pair name to use when creating this Compute\n', 'required': True}, 'security_groups': {'type': 'string', 'description': 'Comma-separated list of security groups to add to the Compute\n', 'required': True}, 'availability_zone': {'type': 'string', 'required': False, 'description': 'AWS Availability zone on which to create the instance'}, 'placement_group': {'type': 'string', 'required': False, 'description': 'AWS Placement Group on which to add the instance'}, 'elastic_ips': {'type': 'string', 'description': 'Comma-separated list of Elastic IPs to use', 'required': False}, 'delete_volume_on_termination': {'type': 'boolean', 'description': 'Destroy the root device volume on instance termination\n', 'required': False, 'default': True}}, 'attributes': {'public_dns': {'type': 'string', 'description': 'Public DNS name assigned to the instance'}}}}",0
{'yorc.nodes.aws.PublicNetwork': {'derived_from': 'tosca.nodes.Network'}},0
"{'yorc.nodes.aws.EBSVolume': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'device': {'type': 'string', 'description': 'The device name to expose to the instance (for example, /dev/sdh or xvdh). See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html#available-ec2-device-names for more information.\n', 'required': True}, 'availability_zone': {'type': 'string', 'description': 'The AZ where the EBS volume will exist.', 'required': True}, 'encrypted': {'type': 'boolean', 'description': 'If true, the disk will be encrypted. If no km_key_id is provied, one will be generated.', 'required': False}, 'kms_key_id': {'type': 'string', 'description': 'The ARN for the KMS encryption key. When specifying kms_key_id, encrypted will be always considered to be true.', 'required': False}, 'volume_type': {'type': 'string', 'description': 'The type of EBS volume. Can be ""standard"", ""gp2"", ""io1"", ""sc1"" or ""st1"" (Default: ""standard"").\n', 'required': False}, 'iops': {'type': 'string', 'description': 'IOPS (input/output operations per second) is a popular performance metric used to distinguish one storage type from another. Similar to device makers, AWS associates IOPS values to the volume component backing the storage option. As IOPS values increase, performance needs and costs rise.\n', 'required': False}, 'tags': {'type': 'map', 'description': 'A mapping of tags to assign to the resource.', 'required': False, 'entry_schema': {'type': 'string'}}, 'deletable': {'type': 'boolean', 'description': 'should this volume be deleted at undeployment', 'required': False, 'default': False}}}}",0
"{'yorc.test.NodeA': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connection': {'capability': 'tosca.capabilities.Feature', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}]}}",0
"{'yorc.nodes.hostspool.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'shareable': {'type': 'boolean', 'description': 'Can the compute node be shared', 'required': False, 'default': False}, 'filters': {'type': 'list', 'description': 'Filters to select hosts from their labels', 'entry_schema': {'type': 'string'}, 'required': False}}, 'attributes': {'hostname': {'type': 'string', 'description': 'Hostname as known in the hosts pool'}}, 'capabilities': {'endpoint': {'type': 'yorc.capabilities.Endpoint.ProvisioningAdmin', 'properties': {'credentials': {'user': 'not significant, will be set by yorc itself'}}}, 'host': {'type': 'yorc.capabilities.hostspool.Container'}}}}",0
"{'AppSoftware': {'derived_from': 'tosker.nodes.Software', 'requirements': [{'db_connection': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'my_interface': {'type': 'app_interface'}}}}",0
"{'NodeSoftware': {'derived_from': 'tosker.nodes.Software', 'interfaces': {'my_interface': {'type': 'language_interface'}}}}",0
{'tosker.nodes.Root': {'derived_from': 'tosca.nodes.Root'}},0
"{'tosker.nodes.Container': {'derived_from': 'tosca.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'ports': {'type': 'map'}, 'env_variable': {'type': 'map'}, 'command': {'type': 'string'}, 'share_data': {'type': 'map'}, 'supported_sw': {'type': 'map'}, 'os_distribution': {'type': 'string'}}, 'properties': {'ports': {'type': 'map', 'required': False}, 'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}, 'share_data': {'type': 'map', 'required': False}, 'supported_sw': {'type': 'map', 'required': False}, 'os_distribution': {'type': 'string', 'required': False}}, 'requirements': [{'storage': {'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}, {'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Volume': {'derived_from': 'tosker.nodes.Root', 'attributes': {'id': {'type': 'string'}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Software': {'derived_from': 'tosker.nodes.Root', 'requirements': [{'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}, {'host': {'capability': 'tosca.capabilities.Container', 'occurrences': 1, 'node': 'tosker.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'APISoftware': {'derived_from': 'tosker.nodes.Software', 'interfaces': {'api_interface': {'type': 'api_interface'}}}}",0
"{'openstack.VM': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'security_groups': {'type': 'string', 'description': 'OpenStack names of the security groups to which the instance should be added. Comma separated string.\n'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}, 'type': 'string'}, 'image': {'default': {'get_property': ['SELF', 'image']}, 'type': 'string'}, 'flavor': {'default': {'get_property': ['SELF', 'flavor']}, 'type': 'string'}, 'network': {'default': {'get_property': ['SELF', 'network']}, 'type': 'string'}, 'key_name': {'default': {'get_property': ['SELF', 'key_name']}, 'type': 'string'}, 'security_groups': {'default': {'get_property': ['SELF', 'security_groups']}, 'type': 'string'}}, 'implementation': 'playbooks/create.yaml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}, 'type': 'string'}}, 'implementation': 'playbooks/delete.yaml'}}}}}}",0
"{'cli_commands_test.nodes.hello': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'attribute': {'type': 'integer', 'default': 42}}, 'properties': {'property': {'type': 'boolean', 'default': False}}, 'interfaces': {'Standard': {'inputs': {'my_attribute_input': {'default': {'get_attribute': ['SELF', 'attribute']}, 'type': 'string'}, 'my_property_input': {'default': {'get_property': ['SELF', 'property']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yaml', 'delete': 'playbooks/delete.yaml'}}}}}",0
"{'cli_commands_test.nodes.bye': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'operations': {'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml'}}}}}",0
{'cli_commands_test.nodes.node1': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
{'cli_commands_test.nodes.node2': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
{'cli_commands_test.nodes.node3': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'daily_test.nodes.hello': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'slovenian_greeting': {'type': 'string', 'description': 'Slovenian Greeting', 'default': 'Zdravo!'}, 'croatian_greeting': {'type': 'string', 'description': 'Croatian Greeting', 'default': 'Cao đaci!'}}, 'attributes': {'something_to_pass_on': {'type': 'string', 'description': 'Test for passing data between nodes', 'default': 'tralala'}}, 'interfaces': {'Standard': {'inputs': {'slovenian_greeting': {'default': {'get_property': ['SELF', 'slovenian_greeting']}, 'type': 'string'}, 'croatian_greeting': {'default': {'get_property': ['SELF', 'croatian_greeting']}, 'type': 'string'}, 'something_to_pass_on': {'default': {'get_attribute': ['SELF', 'something_to_pass_on']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yaml', 'dependencies': ['playbooks/files/test.txt']}}}}}}}",0
"{'daily_test.nodes.noimpl': {'derived_from': 'tosca.nodes.Root', 'properties': {'test_integer': {'type': 'integer', 'required': True}, 'test_string': {'type': 'string', 'required': False}}}}",0
"{'daily_test.nodes.interfaces': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'operations': {'create': '/modules/node_types/interfaces/playbooks/create.yaml', 'configure': '/modules/node_types/interfaces/playbooks/create.yaml', 'start': '/modules/node_types/interfaces/playbooks/start.yaml', 'stop': '/modules/node_types/interfaces/playbooks/stop.yaml', 'delete': '/modules/node_types/interfaces/playbooks/stop.yaml'}}}}}",0
"{'opera.nodes.file': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'my_text_file_attribute': {'description': 'Text file contents', 'type': 'string'}, 'my_json_file_attribute': {'description': 'JSON file contents', 'type': 'string'}}, 'properties': {'json_file': {'description': 'JSON file path', 'type': 'string'}}, 'interfaces': {'Standard': {'operations': {'create': {'implementation': 'playbooks/create.yaml', 'inputs': {'text_file_artifact': {'description': 'Text file artifact input', 'type': 'string', 'default': {'get_artifact': ['SELF', 'text_file']}}, 'json_file_artifact': {'description': 'JSON file artifact input', 'type': 'string', 'default': {'get_property': ['SELF', 'json_file']}}}}}}}, 'artifacts': {'text_file': {'type': 'tosca.artifacts.File', 'file': 'files/file.txt'}}}}",0
"{'nginx.Site': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'my.relationships.NginxSiteHosting'}}], 'interfaces': {'Standard': {'inputs': {'site_config_dir': {'default': {'get_attribute': ['SELF', 'host', 'site_config_dir']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yaml', 'delete': 'playbooks/delete.yaml'}}}}}",0
"{'radon.nodes.OpenStack.VM': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'available_instances': {'type': 'integer', 'default': 42}, 'available_space': {'type': 'integer', 'default': 1000}}, 'properties': {'name': {'type': 'string'}, 'image': {'type': 'string'}, 'flavor': {'type': 'string'}, 'network': {'type': 'string'}, 'key_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': 'playbooks/create.yaml'}}}}}}",0
"{'nginx.Server': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'site_config_dir': {'type': 'string', 'description': 'Location of nginx site configs'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['nginx.Site']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/install.yaml'}}, 'delete': {'implementation': {'primary': 'playbooks/uninstall.yaml'}}}}}}}",0
"{'daily_test.nodes.test': {'derived_from': 'tosca.nodes.Root', 'metadata': {'targetNamespace': 'daily_test.nodes.test', 'abstract': 'false', 'final': 'false'}, 'properties': {'test': {'type': 'daily_test.datatypes.test', 'required': False}}, 'interfaces': {'Standard': {'operations': {'create': {'inputs': {'capability_attribute_input': {'default': {'get_attribute': ['SELF', 'test_capability', 'capability_attribute']}, 'type': 'string'}, 'capability_property_input': {'default': {'get_property': ['SELF', 'test_capability', 'capability_property']}, 'type': 'string'}}, 'implementation': {'primary': 'playbooks/create.yaml'}}}}, 'test': {'type': 'daily_test.interfaces.test'}}, 'artifacts': {'test': {'type': 'daily_test.artifacts.test', 'file': 'file.test'}}, 'capabilities': {'test_capability': {'type': 'daily_test.capabilities.test'}}, 'requirements': [{'host1': {'capability': 'tosca.capabilities.Compute', 'relationship': 'daily_test.relationships.test'}}, {'host2': {'capability': 'tosca.capabilities.Compute', 'relationship': 'daily_test.relationships.interfaces'}}]}}",0
"{'my_node_type': {'derived_from': 'tosca.nodes.Root', 'attributes': {'my_attribute': {'type': 'string', 'default': 'my_default_attribute_default'}}, 'properties': {'my_property': {'type': 'integer'}}, 'interfaces': {'Standard': {'operations': {'create': 'playbooks/create.yaml'}}}}}",0
"{'daily_test.nodes.file': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'inputs': {'file_content': {'default': {'get_input': 'file_content'}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yaml', 'delete': 'playbooks/delete.yaml'}}}}}",0
"{'my_first_node_type': {'derived_from': 'tosca.nodes.Root', 'attributes': {'my_attribute': {'type': 'string'}}, 'properties': {'my_property': {'type': 'string'}}}}",0
"{'my_second_node_type': {'derived_from': 'tosca.nodes.Root', 'attributes': {'cap_attribute': {'type': 'string', 'description': 'Capability attribute'}, 'cap_property': {'type': 'string', 'description': 'Capability property'}, 'req_attribute': {'type': 'string', 'description': 'Requirement attribute'}, 'req_property': {'type': 'string', 'description': 'Requirement property'}}, 'capabilities': {'my_capability': {'type': 'tosca.capabilities.Root', 'attributes': {'capability_attribute': {'type': 'string'}}, 'properties': {'capability_property': {'type': 'string'}}}}, 'interfaces': {'Standard': {'operations': {'create': {'implementation': 'playbooks/create.yaml', 'inputs': {'cap_attr_input': {'default': {'get_attribute': ['SELF', 'my_capability', 'capability_attribute']}, 'type': 'string'}, 'cap_prop_input': {'default': {'get_property': ['SELF', 'my_capability', 'capability_property']}, 'type': 'string'}, 'req_attr_input': {'default': {'get_attribute': ['SELF', 'my_target', 'my_attribute']}, 'type': 'string'}, 'req_prop_input': {'default': {'get_property': ['SELF', 'my_target', 'my_property']}, 'type': 'string'}}}}}}, 'requirements': [{'my_target': {'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'steampunk.test.Student': {'derived_from': 'tosca.nodes.Root', 'properties': {'student_name': {'type': 'string', 'description': 'The name of the student'}, 'enrolment_number': {'type': 'integer', 'description': 'The number in the class register assigned to the student'}}, 'attributes': {'student_id': {'type': 'string', 'description': 'Unique ID of the student.'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'id': {'default': {'get_property': ['SELF', 'enrolment_number']}, 'type': 'integer'}}, 'outputs': {'student_id': ['SELF', 'student_id']}, 'implementation': 'playbooks/create-student.yaml'}}}}}}",0
"{'steampunk.test.Teacher': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'student': {'capability': 'tosca.capabilities.Root', 'relationship': 'steampunk.test.relationships.TeacherTeachesStudent', 'occurrences': [0, 'UNBOUNDED']}}], 'attributes': {'student_ids': {'type': 'list', 'description': 'The list of IDs of the students that the teacher teaches\n', 'default': []}}}}",0
"{'hello_type': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'inputs': {'marker': {'default': {'get_input': 'marker'}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yaml', 'delete': 'playbooks/delete.yaml'}}}}}",0
"{'tosca.nodes.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from.\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Abstract.Compute': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': []}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Abstract.Compute', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.Storage.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'type': 'version', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'The port the DBMS service will listen to for data and requests.\n'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'The port the underlying database service will listen to for data.\n'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.Abstract.Storage': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'default': '0 MB', 'constraints': [{'greater_or_equal': '0 MB'}]}}}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Storage.BlockStorage': {'derived_from': 'tosca.nodes.Abstract.Storage', 'properties': {'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Container.Application']}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.Endpoint'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'The Floating (IP) clients on the public network can connect to.\n'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'daily_test.nodes.setter': {'derived_from': 'tosca.nodes.Root', 'attributes': {'my_attribute': {'type': 'string', 'default': 'my_default_attribute_default'}}, 'properties': {'my_property': {'type': 'integer'}}, 'interfaces': {'Standard': {'inputs': {'receive_something': {'default': {'get_attribute': ['SELF', 'receives_notification', 'something_to_pass_on']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yaml'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'hello_type': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'time': {'default': '1', 'type': 'string'}}, 'interfaces': {'Standard': {'inputs': {'time': {'default': {'get_property': ['SELF', 'time']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/sleep.yaml', 'start': 'playbooks/sleep.yaml', 'delete': 'playbooks/sleep.yaml'}}}}}",0
"{'radon.nodes.test': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'node_attribute': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': 'playbooks/create.yaml'}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'radon.relationships.test'}}]}}",0
"{'hello_type_1': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'attribute1': {'type': 'string'}}, 'properties': {'property1': {'type': 'string'}}}}",0
"{'hello_type_2': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'attribute2': {'type': 'string'}}, 'properties': {'property2': {'type': 'string'}}}}",0
"{'hello_type_3': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'attribute3_1': {'type': 'string'}, 'attribute3_2': {'type': 'string', 'default': {'join': [['a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e']]}}}, 'properties': {'property3_1': {'type': 'string'}, 'property3_2': {'type': 'string', 'default': {'concat': ['Property: ', {'get_attribute': ['SELF', 'attribute3_2']}]}}, 'property3_3': {'type': 'string', 'required': False}}}}",0
"{'tosca.nodes.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}], 'capabilities': [{'search_api': 'tosca.capabilities.ElasticsearchEndpoint'}], 'properties': {'search_api_port': {'type': 'integer', 'description': 'reflect the default elasticsearch http client port.', 'default': 9200, 'constraints': [{'in_range': [9200, 9300]}]}}}}",0
"{'tosca.nodes.Nginx': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}, {'upstream': 'tosca.nodes.WebApp', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}, 'port': {'get_attribute': ['TARGET', 'port']}, 'url_path': {'get_attribute': ['TARGET', 'url_path']}}, 'tosca.interfaces.relationship.Configure': {'add_target': '#!/usr/bin/python\nimport os, subprocess\n# List of opaque identifiers for current set of targets\n# On add this includes the currently being acted upon target\n# On remove it does not include the execution change target.\ntargets = os.environ[\'TARGETS\'].split()\nurls = []\nfor t in targets:\n    urls.append(""http://%s:%s/%s "" % (\n        os.environ.get(""%s_host"" % t),\n        os.environ.get(""%s_port"" % t),\n        os.environ.get(""%s_url_path"" % t)))\ntemplate = """"""\\\n  upstream backend {\n        %s\n  }\n  server {\n    location / {\n       proxy_pass http://backend;\n    }\n  }\n  """""" % ("";\\n"".join(urls))\nopen(""/etc/nginx/sites-available/upstream.conf"", ""w"") as fh:\n    fh.write(template)\nsubprocess.check_call([\'service\', \'nginx\', \'reload\'])\n', 'remove_target': '#!/usr/bin/python\nimport os, subprocess\n# List of opaque identifiers for current set of targets\n# On add this includes the currently being acted upon target\n# On remove it does not include the execution change target.\ntargets = os.environ[\'TARGETS\'].split()\nurls = []\nfor t in targets:\n    urls.append(""http://%s:%s/%s "" % (\n        os.environ.get(""%s_host"" % t),\n        os.environ.get(""%s_port"" % t),\n        os.environ.get(""%s_url_path"" % t)))\ntemplate = """"""\\\n  upstream backend {\n        %s\n  }\n  server {\n    location / {\n       proxy_pass http://backend;\n    }\n  }\n  """""" % ("";\\n"".join(urls))\nopen(""/etc/nginx/sites-available/upstream.conf"", ""w"") as fh:\n    fh.write(template)\nsubprocess.check_call([\'service\', \'nginx\', \'reload\'])\n'}}}, {'downstream': 'tosca.nodes.WebApp'}], 'interfaces': {'Standard': {'create': '#!/bin/bash\napt-get install -y nginx\n', 'start': '#!/bin/bash\nstart nginx\n', 'stop': '#!/bin/bash\nstop nginx\n', 'delete': '#!/bin/bash\napt-get purge -y nginx\n'}}}}",0
"{'tosca.nodes.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}, {'search_index': 'tosca.capabilities.ElasticsearchEndpoint', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}, 'port': {'get_attribute': ['TARGET', 'port']}, 'url_path': {'get_attribute': ['TARGET', 'url_path']}}, 'tosca.interfaces.relationship.Configure': {'pre_configure_source': '#!/usr/bin/python\nimport os\nwith open(""/etc/logstash/storage.conf"", \'w\') as fh:\n    fh.write(""""""\n      output {\n        elasticsearch {\n          action => index \n          bind_host => %s \n          bind_port => %s \n        }\n      }"""""" % (os.environ[\'host\'], os.environ[\'port\']))\n    \n'}}}], 'capabilities': [{'collectd_collector': 'tosca.capabilities.CollectdEndpoint', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}, 'port': {'get_attribute': ['TARGET', 'port']}, 'url_path': {'get_attribute': ['TARGET', 'url_path']}}, 'tosca.interfaces.relationship.Configure': {'pre_configure_target': '#!/usr/bin/python\nwith open(""/etc/logstash/collectd.conf"", ""w"") as fh:\n   fh.write(""""""\n   input {\n     udp {\n     port => 25826         # 25826 is the default for collectd\n     buffer_size => 1452   # 1452 is the default for collectd\n     codec => collectd { }\n     tags => [""metrics""]\n     type => ""collectd""\n     }\n   }"""""")\n'}}}, {'syslog_collector': 'tosca.capabilities.RSyslogEndpoint', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}, 'port': {'get_attribute': ['TARGET', 'port']}, 'url_path': {'get_attribute': ['TARGET', 'url_path']}}, 'tosca.interfaces.relationship.Configure': {'pre_configure_target': '#!/usr/bin/python\nwith open(""/etc/logstash/rsyslog.conf"", ""w"") as fh:\n   fh.write(""""""\n   input {\n     relp {\n       port => 2154\n       tags => [""logs""]\n     }\n    }"""""")\n'}}}], 'interfaces': {'Standard': {'create': '#!/bin/bash\nwget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz\necho ""6e6be734392e8c7d6d55e23d0bd8d2b3 logstash-1.4.2.tar.gz"" > checksum\ntar xzvf logstash-1.4.2.tar.gz\napt-get install -y openjdk-7-jre-headless\n# instlal upstart job\n', 'start': '#!/bin/bash\nstart logstash\n', 'stop': '#!/bin/bash\nstop logstash\n', 'delete': '#!/bin/bash\nrm -Rf logstash*      \n'}}}}",0
"{'tosca.nodes.Collectd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}, {'collector': 'tosca.capabilities.CollectdEndpoint', 'interfaces': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}}, 'tosca.interfaces.relation.Configure': {'pre_configure_source': '# point collectd to logstash host (udp collectd)\n# write it out to /etc/collectd *?*\n<Plugin ""network"">\n# Export to an internal server\n# (demonstrates usage without additional options)\n Server ""$host""\n</Plugin>\n'}}}], 'interfaces': {'Standard': {'create': '#!/bin/bash\napt-get install -y collectd\n'}}}}",0
"{'tosca.nodes.Kibana': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}, {'search_index': 'tosca.capabilities.ElasticsearchEndpoint'}], 'capabilities': [{'dashboard_ui': 'tosca.capaibilities.WebApp'}]}}",0
"{'tosca.nodes.Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}, {'collector': 'tosca.capabilities.RsyslogEndpoint'}]}}",0
"{'tosca.nodes.Database.MongoDB': {'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': 'tosca.nodes.DBMS.MongoDB'}], 'capabilities': [{'database_endpoint': 'tosca.capabilities.MongoEndpoint'}]}}",0
"{'tosca.nodes.DBMS.MongoDB': {'derived_from': 'tosca.nodes.DBMS', 'properties': {'dbms_port': {'description': 'reflect the default MongoDB server port (verify default value)', 'default': 27017}}, 'requirements': None, 'capabilities': [{'host': None, 'type': 'Container', 'properties': {'valid_node_types': ['tosca.nodes.Database.MongoDB']}}], 'interfaces': {'Standard': {'create': '#!/bin/bash\napt-get install -y mongodb\n', 'configure': {'description': 'configure is automatic for mongodb. No post config is needed.'}, 'start': '#!/bin/bash\nstart mongodb \n', 'stop': '#!/bin/bash\nstop mongodb\n', 'delete': '#!/bin/bash\napt-get purge -y mongodb\n'}}}}",0
"{'tosca.nodes.Nodejs': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'github_url': {'description': 'location of the application on the github.', 'default': 'https://github.com/mmm/testnode.git'}}, 'requirements': [{'mongodb': 'tosca.capabilities.MongoEndpoint', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'tosca.interfaces.relationship.Configure': {'pre_configure_source': {'inputs': {'host': {'get_attribute': ['TARGET', 'ip_address']}, 'port': {'get_attribute': ['TARGET', 'port']}}, 'implementation': '#!/bin/bash\ncat > /opt/node/config.js<<EOF\n{\n""host"": ""${host}""\n, ""port"": ${port}\n}\nEOF\n'}}}}, {'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}], 'interfaces': {'Standard': {'create': '#!/bin/bash\nadd-apt-repository ppa: chris-lea/node.js\napt-get update\napt-get install -y nodejs build-essential curl git npm\n', 'configure': '#!/bin/bash\nexport app_dir=/opt/app\ngit clone $github_url /opt/app\nif [ -f /opt/app/package.json ] \n   cd  /opt/app/ && npm install\nfi\n\ncat > /etc/init/nodeapp.conf <<EOS\ndescription ""node.js app""\n \nstart on (net-device-up\n          and local-filesystems\n          and runlevel [2345])\nstop on runlevel [!2345]\n \nexpect fork\nrespawn\n \nscript\n  export HOME=/\n  export NODE_PATH=/usr/lib/node\n  exec /usr/bin/node ${app_dir}/server.js >> /var/log/nodeapp.log 2>&1 &\nend script\nEOS\n', 'start': '#!/bin/bash\nstart nodeapp\n', 'stop': '#!/bin/bash\nstop nodeapp\n', 'delete': '#!/bin/bash\nrm -Rf /opt/nodeapp\napt-get remove -y nodejs npm build-essential git curl\n'}}}}",0
"{'org.alien4cloud.test.parsing.InterfaceInputsTestNode': {'derived_from': 'tosca.nodes.Root', 'properties': {'simple_prop': {'type': 'string'}}, 'interfaces': {'standard': {'description': 'standard interface from TOSCA.', 'inputs': {'prop_definition': {'type': 'string'}, 'prop_assignment': {'get_property': ['SELF', 'simple_prop']}}, 'create': 'test.sh', 'start': {'implementation': 'test.sh', 'inputs': {'new_input': 'pok', 'prop_assignment': 'ahah'}}}}}}",0
"{'alien.test.nodes.TestComponentSourceAncestor': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'my_property': {'type': 'string', 'required': True, 'default': 'some default value'}, 'my_other_property': {'type': 'string', 'required': True, 'default': 'some new value'}}}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'requirements': [{'host': 'tosca.nodes.Compute', 'relationship_type': 'tosca.relationships.HostedOn', 'capability': 'host', 'occurrences': [1, 2, 3]}, {'other': 'tosca.capabilities.Endpoint', 'occurrences': [0]}]}}",0
"{'alien4cloud.nodes.TestDataType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'simple_complex': {'type': 'alien.data.Simple'}, 'complex': {'type': 'alien.data.Complex'}, 'map': {'type': 'map', 'entry_schema': {'type': 'string', 'constraints': [{'min_length': 8}, {'max_length': 12}]}}, 'list': {'type': 'list', 'entry_schema': {'type': 'alien.data.Simple'}}}}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'properties': {'my_app_password': {'type': 'string', 'default': 'default', 'description': 'application password', 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'my_app_duration': {'type': 'scalar-unit.time', 'default': '1 d', 'constraints': [{'greater_than': '1 h'}]}, 'my_app_size': {'type': 'scalar-unit.size', 'default': '1 GB', 'constraints': [{'less_than': '1 TB'}]}, 'my_app_port': {'type': 'integer', 'description': 'application port number'}}, 'requirements': [{'host': {'capability': 'mytypes.mycapabilities.MyCapabilityTypeName', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'capability_name': 'host', 'occurrences': [1, 1]}}, {'other': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'unbounded']}}], 'interfaces': ['Standard']}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'relationship': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}, {'req_to_be_deleted': {'capability': 'alien.test.capabilities.ReqToBeDeleted', 'relationship': 'alien.test.relationships.ReqToBeDeleted'}}]}}",0
{'org.alien4cloud.nodes.test.WebApplication': {'derived_from': 'tosca.nodes.WebApplication'}},0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'alien.test.nodes.TestComponentSourceAncestor', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}]}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'connectivity': {'type': 'alien.test.capabilities.TestComponentConnects'}}}}",0
"{'alien4cloud.tests.nodes.CustomInterface': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Mock node that has custom interfaces.', 'interfaces': {'Standard': {'create': 'scripts/create.sh', 'configure': 'scripts/configure.sh', 'start': 'scripts/start.sh', 'stop': 'scripts/stop.sh', 'delete': 'scripts/delete.sh'}, 'lifecycle': {'create': 'scripts/create.sh', 'start': 'scripts/start.sh'}, 'mock': {'success': {'implementation': 'scripts/success.sh'}, 'success_param': {'inputs': {'param': {'type': 'string', 'required': True}, 'param_2': {'type': 'string', 'required': True}}, 'implementation': 'scripts/success.sh'}, 'fail': 'scripts/fail.sh'}}}}",0
{'alien.nodes.InputArtifactDemo': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'fastconnect.nodes.War': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A web application which is packaged as a war.\n', 'properties': {'version': {'type': 'version'}}, 'artifacts': [{'war': {'type': 'tosca.artifacts.File'}}]}}",0
"{'fastconnect.nodes.Java': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Java Virtual Machine Software Component.\n', 'tags': {'icon': '/images/java.png', 'marurity': 'very bad'}, 'properties': {'version': {'type': 'version', 'default': '1.6', 'constraints': [{'greater_or_equal': '1.5'}]}, 'vendor': {'type': 'string'}, 'os_name': {'type': 'string'}, 'os_arch': {'type': 'string'}}, 'capabilities': {'java': {'type': 'tosca.capabilities.Java', 'occurrences': [0, 'unbounded']}}}}",0
"{'fastconnect.nodes.JavaRPM': {'derived_from': 'fastconnect.nodes.Java', 'description': 'Installation of Oracle JVM thanks to a RPM command.\n', 'interfaces': {'lifecycle': {'create': '/scripts/install.sh', 'delete': '/scripts/uninstall.sh'}}}}",0
"{'fastconnect.nodes.JavaChef': {'derived_from': 'fastconnect.nodes.Java', 'description': 'Installation of Oracle JVM thanks to a Chef recipe. A Chef server is required.\n', 'interfaces': {'lifecycle': {'create': '/scripts/install.sh', 'delete': '/scripts/uninstall.sh'}}}}",0
"{'fastconnect.nodes.JavaPuppet': {'derived_from': 'fastconnect.nodes.Java', 'description': 'Installation of Oracle JVM thanks to a Puppet recipe. A Puppet server is required.\n', 'interfaces': {'lifecycle': {'create': '/scripts/install.sh', 'delete': '/scripts/uninstall.sh'}}}}",0
{'tosca.nodes.Root': {'description': 'root type'}},0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'url': {'type': 'url'}, 'ipv6_addresses': {'type': 'list', 'entry_schema': {'type': 'ipv6_address'}}, 'passwords': {'type': 'map', 'entry_schema': {'type': 'password'}}}}}",0
"{'alien.types.test.error.MyType': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'unknown': 'tosca.capabilities.Unknown'}, {'other': {'capability': 'tosca.capabilities.Unknown', 'occurrences': [0, 'unbounded']}}]}}",0
"{'alien.tests.dependencies.nodes.B': {'derived_from': 'alien.tests.dependencies.nodes.D', 'properties': {'b_property': {'type': 'string', 'description': 'A dummy property for b node.', 'required': False}}}}",0
"{'org.alien4cloud.tests.nodes.RangeProperty': {'derived_from': 'tosca.nodes.Root', 'properties': {'range_property': {'type': 'range', 'default': [1, 25], 'required': False, 'constraints': [{'in_range': [1, 23]}]}}}}",0
"{'alien.test.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'alien.test.SoftwareHostedOnCompute', 'occurrences': [1, 1]}}]}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'properties': {'my_app_port': {'type': 'integer', 'description': 'application port number'}}, 'attributes': {'url': {'get_operation_output': ['SELF', 'custom', 'do_something', 'generated_url']}}, 'capabilities': {'some_capability': 'mytypes.mycapabilities.MyCapabilityTypeName', 'some_other_capability': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability', 'properties': {'port': 8080, 'range_sample': [8080, 9000]}}}, 'requirements': [{'host': {'capability': 'mytypes.mycapabilities.MyCapabilityTypeName', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'capability_name': 'host', 'occurrences': [1, 1]}}, {'other': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'standard': {'description': 'standard interface from TOSCA.', 'create': {'inputs': {'port': {'get_property': ['SELF', 'port']}}}}, 'custom': {'description': 'this is a sample interface used to execute custom operations.', 'do_something': {'inputs': {'operationOutput_input': {'get_operation_output': ['SELF', 'standard', 'create', 'output_variable']}}}}}}}",0
{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'properties': {'my_app_password': {'type': 'string', 'default': 'default', 'description': 'application password', 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'my_app_duration': {'type': 'scalar-unit.time', 'default': '1 d', 'constraints': [{'greater_than': '1 h'}]}, 'my_app_size': {'type': 'scalar-unit.size', 'default': '1 GB', 'constraints': [{'less_than': '1 TB'}]}, 'my_app_port': {'type': 'integer', 'description': 'application port number'}}, 'requirements': [{'host': 'tosca.nodes.Compute', 'relationship_type': 'tosca.relationships.HostedOn', 'capability': 'host', 'occurrences': [1, 1]}, {'other': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'unbounded']}], 'interfaces': ['Standard']}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'tags': {'icon': '/images/root.png'}, 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}, 'interfaces': {'lifecycle': {'description': 'Default lifecycle for nodes in TOSCA.', 'create': {'description': 'Basic lifecycle create operation.'}, 'configure': {'description': 'Basic lifecycle configure operation.'}, 'start': {'description': 'Basic lifecycle start operation.'}, 'stop': {'description': 'Basic lifecycle stop operation.'}, 'delete': {'description': 'Basic lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Tier': {'derived_from': 'tosca.nodes.Root', 'description': 'A logical node that allows to group several nodes together.\n', 'properties': {'name': {'type': 'string'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'scalar-unit.size', 'constraints': [{'greater_than': '0 B'}]}, 'num_cpus': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'scalar-unit.size', 'constraints': [{'greater_than': '0 B'}]}, 'os_arch': {'type': 'string', 'required': False}, 'os_type': {'type': 'string', 'required': False}, 'os_distribution': {'type': 'string', 'required': False}, 'os_version': {'type': 'string', 'required': False}, 'ip_address': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The primary IP address assigned by the cloud provider that applications may use to access the Compute node. Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.\n'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'compute': {'type': 'tosca.capabilities.Container', 'occurrences': [0, 'unbounded']}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'tags': {'icon': '/images/volume.png'}, 'requirements': [{'attach': {'capability': 'tosca.capabilities.Container'}}]}}",0
"{'tosca.nodes.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA ObjectStorage node represents storage that provides the ability to store data as objects (or BLOBs of data) without consideration for the underlying filesystem or devices.\n', 'tags': {'icon': '/images/objectstore.png'}}}",0
"{'tosca.nodes.Network': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}}, 'capabilities': {'connection': {'type': 'tosca.capabilities.Connectivity'}}, 'tags': {'icon': '/images/network.png'}}}",0
"{'tosca.nodes.Router': {'derived_from': 'tosca.nodes.Network', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'tags': {'icon': '/images/router.png'}}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Network', 'tags': {'icon': '/images/loadbalancer.png'}}}",0
"{'tosca.nodes.VirtualIp': {'derived_from': 'tosca.nodes.Network', 'requirements': [{'attach': {'capability': 'tosca.capabilities.Container'}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent Node Type represents a generic software component that can be managed and run by a TOSCA Compute Node Type.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container'}}], 'tags': {'icon': '/images/software.png'}}}",0
"{'tosca.nodes.RDBMS': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA RDBMS Node Type represents a generic relational database. It should be inherited to define an actual Database (Such as MySQL) and lifecycle implementation.\n', 'tags': {'icon': '/images/relational_db.png'}}}",0
"{'tosca.nodes.WebServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA WebServer Node Type represents a generic web server. It should be inherited to define an actual web server (Such as Apache) and lifecycle implementation.\n'}}",0
"{'tosca.nodes.ApplicationServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA ApplicationServer Node Type represents a generic application server. It should be inherited to define an actual application server (Such as Tomcat) and lifecycle implementation.\n', 'capabilities': {'feature': {'type': 'tosca.capabilities.Container', 'occurrences': [0, 'unbounded']}}}}",0
"{'tosca.nodes.MessageBus': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA MessageBus Node Type represents a generic message bus. It should be inherited to define an actual message bus (Such as RabbitMQ) and lifecycle implementation.\n'}}",0
"{'tosca.nodes.EnterpriseServiceBus': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA EnterpriseServiceBus Node Type represents a generic enterprise service bus. It should be inherited to define an actual message bus (Such as Mule ESB) and lifecycle implementation.\n'}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'tags': {'icon': '/images/root.png'}, 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'description': 'Default lifecycle for nodes in TOSCA.', 'create': {'description': 'Basic lifecycle create operation.'}, 'configure': {'description': 'Basic lifecycle configure operation.'}, 'start': {'description': 'Basic lifecycle start operation.'}, 'stop': {'description': 'Basic lifecycle stop operation.'}, 'delete': {'description': 'Basic lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_than': '0 B'}]}, 'num_cpus': {'type': 'integer', 'required': False, 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'scalar-unit.size', 'required': False, 'default': '2048 MB', 'constraints': [{'greater_than': '0 B'}]}, 'os_arch': {'default': 'x86_64', 'type': 'string'}, 'os_type': {'type': 'string'}, 'os_distribution': {'type': 'string', 'required': False}, 'os_version': {'type': 'string', 'required': False}, 'ip_address': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The primary IP address assigned by the cloud provider that applications may use to access the Compute node. Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.\n'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'compute': {'type': 'tosca.capabilities.Container', 'occurrences': [0, 'unbounded']}, 'scalable': 'tosca.capabilities.Scalable'}}}",0
"{'fastconnect.nodes.apacheLB': {'abstract': True, 'derived_from': 'tosca.nodes.WebServer', 'description': 'This is the definition of the Apache LB Recipe. This is based on Cloudify Apache LB groovy recipe.\n', 'tags': {'calm_icon': '/images/apache.png'}, 'properties': {'version': {'type': 'version', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container'}}]}}",0
"{'fastconnect.nodes.apacheLBGroovy': {'derived_from': 'fastconnect.nodes.apacheLB', 'description': 'Installation of apacheLB using Cloudify scripts\n', 'properties': {'version': {'type': 'version', 'default': 2, 'constraints': [{'equal': 2}]}}, 'interfaces': {'lifecycle': {'create': 'scripts/apacheLB_installCalm.groovy', 'start': 'scripts/apacheLB_start.groovy', 'stop': 'scripts/apacheLB_stop.groovy', 'delete': 'scripts/apacheLB_uninstall.groovy'}, 'monitor': {'locator': 'scripts/monitor/locator.groovy', 'startDetection': 'scripts/monitor/startDetection.groovy'}, 'custom': {'addNode': 'scripts/apacheLB_addNode.groovy', 'removeNode': 'scripts/apacheLB_removeNode.groovy', 'deployPublic': {'inputs': {'publicUrl': {'type': 'string', 'required': True}}}, 'updateWar': {'inputs': {'warUrl': {'type': 'string', 'required': True}, 'countSlave': {'type': 'integer', 'required': False}, 'tresholdRate': {'type': 'float', 'required': True}}, 'implementation': 'scripts/updateWarUrl.groovy'}, 'updateWarFile': 'scripts/updateWarFile.groovy'}}, 'requirements': [{'httpEndpoint': {'capability': 'calm.capabilities.HttpEndpoint', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}}]}}",0
"{'fastconnect.nodes.apacheLBGroovy': {'derived_from': 'fastconnect.nodes.apacheLB', 'description': 'Installation of apacheLB using Cloudify scripts\n', 'properties': {'version': {'type': 'version', 'default': 2, 'constraints': [{'equal': 2}]}}, 'interfaces': {'lifecycle': {'create': 'scripts/apacheLB_installCalm.groovy', 'start': 'scripts/apacheLB_start.groovy', 'stop': 'scripts/apacheLB_stop.groovy', 'delete': 'scripts/apacheLB_uninstall.groovy'}, 'monitor': {'locator': 'scripts/monitor/locator.groovy', 'startDetection': 'scripts/monitor/startDetection.groovy'}, 'custom': {'addNode': {'inputs': {'instanceId': {'type': 'string', 'required': True}, 'node': {'type': 'string', 'required': True}}, 'implementation': 'scripts/apacheLB_addNode.groovy'}, 'removeNode': 'scripts/apacheLB_removeNode.groovy', 'deployPublic': {'inputs': {'publicUrl': {'type': 'string', 'required': True}}}, 'updateWar': {'inputs': {'warUrl': {'type': 'string', 'required': True}, 'countSlave': {'type': 'integer', 'required': False}, 'tresholdRate': {'type': 'float', 'required': True}}, 'implementation': 'scripts/updateWarUrl.groovy'}, 'updateWarFile': 'scripts/updateWarFile.groovy'}}, 'requirements': [{'httpEndpoint': {'capability': 'calm.capabilities.HttpEndpoint', 'occurrences': [0, 'unbounded']}}], 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}}]}}",0
{'org.alien4cloud.test.duplicate.SimpleType': {'derived_from': 'tosca.nodes.Root'}},0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'client': {'type': 'alien.test.Client'}, 'client_family': {'type': 'list', 'entry_schema': {'type': 'alien.test.Client'}}, 'tags': {'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'scalar-unit.size', 'required': False, 'default': '20 B', 'constraints': [{'greater_than': '0 B'}]}, 'num_cpus': {'type': 'integer', 'required': False, 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_than': '0 B'}]}, 'os_arch': {'type': 'string'}, 'os_type': {'type': 'string'}, 'os_distribution': {'type': 'string', 'required': False}, 'os_version': {'type': 'string', 'required': False}, 'ip_address': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The primary IP address assigned by the cloud provider that applications may use to access the Compute node. Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.\n'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'compute': {'type': 'tosca.capabilities.Container', 'occurrences': [0, 'unbounded']}, 'scalable': 'tosca.capabilities.Scalable', 'host': 'tosca.capabilities.Container'}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'fake_password': {'type': 'string', 'description': 'user_pass', 'required': False}}, 'tags': {'icon': '/images/volume.png'}, 'requirements': [{'attach': {'capability': 'tosca.capabilities.Container'}}]}}",0
{'tosca.nodes.Root': {'description': 'The root type'}},0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'last_name': 'Bar', 'address': {'zipcode': 92130, 'city_name': 'ISSY LES MOULES'}, 'emails': ['contact@fastconnect.fr', 'info@fastconnect.fr'], 'accounts': {'main': 'root', 'secondary': 'user'}}}}}}",0
{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'alien.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': {'type': 'alien.capabilities.ApacheContainer', 'properties': {'valid_node_types': 'tosca.nodes.WebApplication'}}}, 'tags': {'icon': '/images/apache.png'}, 'properties': {'version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'required': True, 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}, 'fastconnect.cloudify.extensions': {'start_detection': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/apache_start_detection.groovy'}}}}}",0
"{'my.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True}}",0
"{'alien.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': {'type': 'alien.capabilities.ApacheContainer', 'properties': {'valid_node_types': 'tosca.nodes.WebApplication'}}}, 'properties': {'version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'required': True, 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}, 'fastconnect.cloudify.extensions': {'start_detection': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/apache_start_detection.groovy'}}}}}",0
"{'alien.test.nodes.NodeWithComplexProp': {'derived_from': 'tosca.nodes.Root', 'properties': {'testComplexProp': {'type': 'alien.test.datatypes.CustomMergeable'}, 'testStringProp': {'type': 'string'}, 'testIntegerProp': {'type': 'integer'}, 'testMapProp': {'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'toBeDeleted': {'type': 'string', 'default': 'deleteMe'}}}}",0
"{'custom.nodes.MyCompute': {'derived_from': 'tosca.nodes.Root', 'description': 'a custom compute.', 'capabilities': {'host': {'type': 'custom.capabilities.MyCapability'}}}}",0
"{'custom.nodes.MySoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'description': 'Just a stuff that can be associated with a MyCompute.', 'requirements': [{'host': {'capability': 'custom.capabilities.MyCapability', 'relationship': 'custom.relationships.MyRelationType'}}]}}",0
"{'tosca.nodes.Compute': {'properties': {'os_type': {'type': 'string', 'constraints': [{'valid_values': ['linux', 'aix', 'mac os', 'windows']}], 'description': 'The host Operating System (OS) type.'}, 'os_distribution': {'type': 'string', 'required': False, 'description': 'The host Operating System (OS) distribution.'}, 'os_version': {'type': 'string', 'required': False, 'description': 'The host Operating System version.'}, 'size': {'type': 'scalar-unit.size'}, 'size_good': {'type': 'scalar-unit.size'}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'relationship': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}, {'req_to_be_deleted': {'capability': 'alien.test.capabilities.ReqToBeDeleted', 'relationship': 'alien.test.relationships.ReqToBeDeleted'}}, {'req_to_be_changed': {'capability': 'alien.test.capabilities.ReqToBeChanged', 'relationship': 'alien.test.relationships.ReqToBeChanged'}}]}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'connectivity': {'type': 'alien.test.capabilities.TestComponentConnects'}, 'capa_upperbound_test': {'type': 'alien.test.capabilities.CapaUpperBoundTest', 'occurrences': [1, 2]}, 'req_upperbound_test': {'type': 'alien.test.capabilities.ReqUpperBoundTest', 'occurrences': [1, 2]}, 'capa_to_be_deleted': {'type': 'alien.test.capabilities.CapaToBeDeleted'}, 'req_to_be_deleted': {'type': 'alien.test.capabilities.ReqToBeDeleted'}, 'req_to_be_changed': {'type': 'alien.test.capabilities.ReqToBeChanged'}}}}",0
"{'alien.test.nodes.CapaComplexProp': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'testCapa': {'type': 'alien.test.capabilities.CapaComplexProp'}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}]}}",0
"{'fastconnect.nodes.War': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A war element\n', 'requirements': {'host': {'type': 'alien4cloud.capabilities.WarHosting', 'lower_bound': 1, 'upper_bound': 1}}, 'artifacts': [{'war_file': 'content/webarchive.war', 'type': 'fastconnect.artifacts.WarFile'}]}}",0
"{'fastconnect.nodes.Tomcat': {'derived_from': 'tosca.nodes.ApplicationServer', 'description': 'Installation of Tomcat using Cloudify scripts\n', 'tags': {'icon': '/images/tomcat.gif'}, 'properties': {'version': {'type': 'version', 'default': '7.0.23', 'constraints': [{'equal': '7.0.23'}]}}, 'capabilities': {'httpEndpoint': {'type': 'alien4cloud.capabilities.HttpEndpoint', 'lower_bound': 0, 'upper_bound': 'unbounded'}, 'war_host': {'type': 'alien4cloud.capabilities.WarHosting', 'lower_bound': 0, 'upper_bound': 1}}, 'requirements': {'httpEndpoint': {'type': 'alien4cloud.capabilities.HttpEndpoint', 'lower_bound': 0, 'upper_bound': 'unbounded'}, 'jdbc_resource': {'type': 'alien4cloud.capabilities.JdbcEndpoint', 'lower_bound': 0, 'upper_bound': 1}}, 'interfaces': {'Standard': {'operations': {'create': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/tomcat_installAlien.groovy'}}, 'start': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/tomcat_start.groovy'}}, 'stop': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/tomcat_stop.groovy'}}}}, 'fastconnect.cloudify.extensions': {'operations': {'start_detection': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/tomcat_startDetection.groovy'}}}}, 'custom': {'operations': {'updateWar': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/updateWarUrl.groovy'}}, 'updateWarFile': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/updateWarFile.groovy'}}}}}, 'artifacts': [{'scripts': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
"{'fastconnect.nodes.Postgresql': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of PostgreSQL using Cloudify scripts\n', 'tags': {'icon': '/images/postgres.gif'}, 'capabilities': {'jdbc': {'type': 'alien4cloud.capabilities.JdbcEndpoint', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'interfaces': {'Standard': {'operations': {'create': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/postgresql_stop.groovy'}}, 'start': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/postgresql_start.groovy'}}, 'stop': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/postgresql_stop.groovy'}}}}, 'fastconnect.cloudify.extensions': {'operations': {'start_detection': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/postgresql_startDetection.groovy'}}}}, 'custom': {'operations': {'addUser': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/postgresql_addUser.groovy'}}}}}, 'artifacts': [{'scripts': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
"{'alien.tests.dependencies.nodes.D': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'requires_c': {'capability': 'alien.tests.dependencies.capabilities.CCapability', 'relationship': 'alien.tests.dependencies.relationships.DDependsOnC', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'alien.nodes.test.PropertyConstraint': {'description': 'Simple node that defines properties using various property constraints.', 'properties': {'greater_than_prop': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'greater_or_equal_prop': {'type': 'integer', 'constraints': [{'greater_or_equal': 3}]}, 'less_than_prop': {'type': 'integer', 'constraints': [{'less_than': 1}]}, 'multiple_version_prop': {'type': 'version', 'constraints': [{'in_range': ['1.5', '1.7']}, {'greater_than': '1.6'}, {'valid_values': ['1.5', '1.6', '1.7']}]}, 'valid_values_version_prop': {'type': 'version', 'constraints': [{'valid_values': ['1.5', '1.6', '1.7']}]}, 'equal_prop': {'type': 'integer', 'constraints': [{'equal': 2}]}}}}",0
"{'alien.test.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'distribution': {'equal': 'ubuntu'}}, {'version': {'valid_values': [14.04, 14.042]}}]}}]}}}]}}",0
"{'org.alien4cloud.nodes.mock.Compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'imageId': {'type': 'string', 'required': True}, 'flavorId': {'type': 'string', 'required': True}}}}",0
{'org.alien4cloud.nodes.mock.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage'}},0
"{'org.alien4cloud.nodes.mock.Network': {'derived_from': 'tosca.nodes.Network', 'properties': {'subnet': {'required': False, 'type': 'org.alien4cloud.data.mock.SubnetConfig'}}}}",0
"{'custom.nodes.MyCompute': {'derived_from': 'tosca.nodes.Root', 'description': 'a custom compute.', 'capabilities': {'_host': {'type': 'custom.capabilities.MyCapability'}}}}",0
"{'test.nodes.Root': {'abstract': False, 'requirements': {'dependency': {'type': 'test.requirements.Feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'capabilities': {'feature': {'type': 'test.capabilities.Feature', 'upper_bound': 'unbounded'}}}}",0
"{'test.nodes.Java': {'derived_from': 'test.nodes.Root', 'abstract': False, 'requirements': {'hosted': {'type': 'test.requirements.hosting', 'lower_bound': 0, 'upper_bound': 'unbounded'}}}}",0
"{'test.nodes.Compute': {'derived_from': 'test.nodes.Root', 'capabilities': {'hosting': {'type': 'test.capabilities.Container'}}}}",0
"{'alien.tests.dependencies.nodes.D': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'requires_c': {'capability': 'alien.tests.dependencies.capabilities.C', 'relationship': 'alien.tests.dependencies.relationships.DDependsOnC', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'alien.tests.dependencies.nodes.A': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'c_capability': {'type': 'alien.tests.dependencies.capabilities.C'}, 'c_other_capability': {'type': 'alien.tests.dependencies.capabilities.COther'}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}, {'capa_upperbound_test': 'alien.test.capabilities.CapaUpperBoundTest', 'type': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}, {'req_upperbound_test': 'alien.test.capabilities.ReqUpperBoundTest', 'type': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 1]}, {'capa_to_be_deleted': 'alien.test.capabilities.CapaToBeDeleted', 'type': 'alien.test.relationships.CapaToBeDeleted'}, {'req_to_be_deleted': 'alien.test.capabilities.ReqToBeDeleted', 'type': 'alien.test.relationships.ReqToBeDeleted'}]}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'connectivity': {'type': 'alien.test.capabilities.TestComponentConnects'}, 'capa_upperbound_test': {'type': 'alien.test.capabilities.CapaUpperBoundTest', 'occurrences': [1, 1]}, 'req_upperbound_test': {'type': 'alien.test.capabilities.ReqUpperBoundTest', 'occurrences': [1, 2]}, 'capa_to_be_deleted': {'type': 'alien.test.capabilities.CapaToBeDeleted'}, 'req_to_be_deleted': {'type': 'alien.test.capabilities.ReqToBeDeleted'}}}}",0
"{'my.maven.component': {'derived_from': 'tosca.nodes.Root', 'artifacts': [{'simple_war': 'binary/myWar.war'}, {'remote_war': {'file': 'alien4cloud:alien4cloud-ui:1.3.0-SM3', 'type': 'tosca.artifacts.Deployment.War', 'repository': 'maven_repo'}}]}}",0
{'my.maven.component.extended': {'derived_from': 'my.maven.component'}},0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'relationship': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}, {'req_to_be_deleted': {'capability': 'alien.test.capabilities.ReqToBeDeleted', 'relationship': 'alien.test.relationships.ReqToBeDeleted'}}, {'req_to_be_changed': {'capability': 'alien.test.capabilities.ReqToBeChanged2', 'relationship': 'alien.test.relationships.ReqToBeChanged'}}]}}",0
"{'alien.test.nodes.TestComponentSourceAncestor': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'my_property': {'type': 'string', 'required': True, 'default': 'some default value'}}}}",0
"{'alien.nodes.Ubuntu': {'derived_from': 'tosca.nodes.Compute', 'description': 'A specify compute Ubuntu 14.04\n', 'tags': {'icon': '/images/ubuntu_trusty.png'}, 'properties': {'u_disk_size': {'type': 'scalar-unit.size', 'default': '20 GiB', 'constraints': [{'greater_than': '1 GiB'}]}, 'u_disk_read_access_time': {'type': 'scalar-unit.time', 'required': False, 'constraints': [{'greater_than': '1 ms'}]}, 'os_arch': {'type': 'string', 'default': 'x86_64', 'constraints': [{'equal': 'x86_64'}]}, 'os_type': {'type': 'string', 'default': 'linux', 'constraints': [{'equal': 'linux'}]}, 'os_distribution': {'type': 'string', 'default': 'Ubuntu', 'constraints': [{'equal': 'Ubuntu'}]}, 'os_version': {'type': 'string', 'default': '14.04', 'constraints': [{'equal': '14.04'}]}}}}",0
"{'tosca.nodes.root': {'abstract': True, 'invalid_field': 'value', 'description': 'Root type that every node should derive.', 'requirements': {'dependency': {'type': 'tosca.requirements.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}}}",0
"{'alien.types.test.error.MyType': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'feature': {'type': 'tosca.capabilities.Unknown'}}}}",0
"{'alien.nodes.InputArtifactDemo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': [{'nested_uploaded_war': {'type': 'tosca.artifacts.Deployment.War'}}]}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}, {'capa_upperbound_test': 'alien.test.capabilities.CapaUpperBoundTest', 'type': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}, {'req_upperbound_test': 'alien.test.capabilities.ReqUpperBoundTest', 'type': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}, {'capa_to_be_deleted': 'alien.test.capabilities.CapaToBeDeleted', 'type': 'alien.test.relationships.CapaToBeDeleted'}, {'req_to_be_deleted': 'alien.test.capabilities.ReqToBeDeleted', 'type': 'alien.test.relationships.ReqToBeDeleted'}]}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'connectivity': {'type': 'alien.test.capabilities.TestComponentConnects'}, 'capa_upperbound_test': {'type': 'alien.test.capabilities.CapaUpperBoundTest', 'occurrences': [1, 2]}, 'req_upperbound_test': {'type': 'alien.test.capabilities.ReqUpperBoundTest', 'occurrences': [1, 2]}, 'capa_to_be_deleted': {'type': 'alien.test.capabilities.CapaToBeDeleted'}, 'req_to_be_deleted': {'type': 'alien.test.capabilities.ReqToBeDeleted'}}}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Feature', 'occurrences': [0, 'unbounded']}}, 'interfaces': {'lifecycle': {'description': 'Default lifecycle for nodes in TOSCA.', 'create': {'description': 'Basic lifecycle create operation.'}, 'configure': {'description': 'Basic lifecycle configure operation.'}, 'start': {'description': 'Basic lifecycle start operation.'}, 'stop': {'description': 'Basic lifecycle stop operation.'}, 'delete': {'description': 'Basic lifecycle delete operation.'}}}, 'tags': {'icon': './work.jpg'}}}",0
"{'tosca.nodes.Tier': {'derived_from': 'tosca.nodes.Root', 'description': 'A logical node that allows to group several nodes together.', 'properties': {'name': {'type': 'string'}}, 'tags': {'icon': '/images/FAIL-IMAGE.jpg'}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a compute instance in the IaaS layer.', 'properties': {'disk_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'num_cpus': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'os_arch': {'type': 'string'}, 'os_name': {'type': 'string'}, 'os_distribution': {'type': 'string'}, 'os_version': {'type': 'string'}}, 'tags': {'icon': '../.../images/test.jpg'}}}",0
"{'tosca.nodes.Volume': {'derived_from': 'tosca.nodes.Root', 'description': 'A storage volume in the IaaS layer.'}}",0
"{'tosca.nodes.ObjectStore': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'An object store provided by the IaaS layer.'}}",0
"{'tosca.nodes.Network': {'derived_from': 'tosca.nodes.Root', 'description': 'TODO'}}",0
{'tosca.nodes.Router': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.VirtualIp': {'derived_from': 'tosca.nodes.Root'}},0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'description': 'Root type for every node that is a software component.'}}",0
{'tosca.nodes.Middleware': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.DbServer': {'derived_from': 'tosca.nodes.Middleware'}},0
{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.Middleware'}},0
{'tosca.nodes.AppServer': {'derived_from': 'tosca.nodes.Middleware'}},0
{'tosca.nodes.MessageBus': {'derived_from': 'tosca.nodes.Middleware'}},0
{'tosca.nodes.EnterpriseServiceBus': {'derived_from': 'tosca.nodes.Middleware'}},0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'properties': {'my_app_password': {'type': 'string', 'default': 'default', 'description': 'application password', 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'my_app_duration': {'type': 'scalar-unit.time', 'default': '1 d', 'constraints': [{'greater_than': '1 h'}]}, 'my_app_size': {'type': 'scalar-unit.size', 'default': '1 GB', 'constraints': [{'less_than': '1 TB'}]}, 'my_app_port': {'type': 'integer', 'description': 'application port number'}, 'my_empty_default_prop': {'type': 'string', 'description': 'a prop with an empty string as default value', 'default': ''}}, 'requirements': [{'host': {'capability': 'mytypes.mycapabilities.MyCapabilityTypeName', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'capability_name': 'host', 'occurrences': [1, 1]}}, {'other': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'unbounded']}}], 'interfaces': ['Standard']}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsToChanged', 'occurrences': [1, 1]}]}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_than': '0 B'}]}, 'num_cpus': {'type': 'integer', 'required': False, 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'scalar-unit.size', 'required': False, 'constraints': [{'greater_than': '0 B'}]}, 'os_arch': {'type': 'string'}, 'os_type': {'type': 'string'}, 'os_distribution': {'type': 'string', 'required': False}, 'os_version': {'type': 'string', 'required': False}, 'ip_address': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The primary IP address assigned by the cloud provider that applications may use to access the Compute node. Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.\n'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'unbounded']}}], 'capabilities': {'compute': {'type': 'tosca.capabilities.Container', 'occurrences': [0, 'unbounded']}, 'scalable': 'tosca.capabilities.Scalable'}}}",0
"{'fastconnect.nodes.War': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A web application which is packaged as a war.\n', 'properties': {'version': {'type': 'version'}}, 'artifacts': [{'war': {'type': 'tosca.artifacts.WarFile'}}]}}",0
"{'fastconnect.nodes.Java': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Java Virtual Machine Software Component.\n', 'tags': {'icon': '/images/java.png', 'marurity': 'very bad'}, 'properties': {'version': {'type': 'version', 'default': '1.6', 'constraints': [{'greater_or_equal': '1.5'}]}, 'vendor': {'type': 'string', 'required': False}, 'os_name': {'type': 'string', 'required': False}, 'os_arch': {'type': 'string', 'required': False}}, 'capabilities': {'java': {'type': 'tosca.capabilities.Java', 'occurrences': [0, 'unbounded']}}}}",0
"{'fastconnect.nodes.Tomcat': {'abstract': True, 'description': 'A Tomcat application server.\n', 'tags': {'icon': '/images/tomcat.png'}, 'derived_from': 'tosca.nodes.ApplicationServer'}}",0
"{'fastconnect.nodes.TomcatRPM': {'description': 'A Tomcat application server implemented thanks to a RPM install.\n', 'derived_from': 'fastconnect.nodes.Tomcat'}}",0
"{'fastconnect.nodes.TomcatChef': {'description': 'A Tomcat application server implemented thanks to a Chef install.\n', 'derived_from': 'fastconnect.nodes.Tomcat'}}",0
"{'fastconnect.nodes.TomcatPuppet': {'abstract': False, 'description': 'A Tomcat application server implemented thanks to a Puppet install.\n', 'derived_from': 'fastconnect.nodes.Tomcat'}}",0
"{'fastconnect.nodes.Karaf': {'description': 'This type represents an Apache Karaf application server\n', 'tags': {'icon': '/images/karaf.png'}, 'properties': {'version': {'type': 'version', 'default': '3.0.0'}}, 'requirements': {'java': {'type': 'tosca.capabilities.Java'}}, 'capabilities': {'kar_container': {'type': 'tosca.capabilities.KarContainer'}, 'osgi_container': {'type': 'tosca.capabilities.OsgiContainer'}}}}",0
"{'fastconnect.nodes.Equinox': {'description': 'This type represents an Equinox application server\n', 'tags': {'icon': '/images/equinox.png'}, 'properties': {'version': {'type': 'version', 'default': '3.9.1.v20140110-1610'}}, 'requirements': {'java': {'type': 'tosca.capabilities.Java'}}, 'capabilities': {'osgi_container': {'type': 'tosca.capabilities.OsgiContainer'}}}}",0
"{'fastconnect.nodes.Kar': {'description': 'This type represents an Apache Karaf archive .kar\n', 'tags': {'icon': '/images/karaf.png'}, 'requirements': {'karaf': {'type': 'tosca.capabilities.KarContainer'}}}}",0
"{'fastconnect.nodes.OsgiBundle': {'description': 'This type represents an application/service packaged as an osgi bundle\n', 'tags': {'icon': '/images/equinox.png'}, 'requirements': {'osgi': {'type': 'tosca.capabilities.OsgiContainer'}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'occurrences': [1, 1]}, {'capa_upperbound_test': 'alien.test.capabilities.CapaUpperBoundTest', 'type': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}, {'req_upperbound_test': 'alien.test.capabilities.ReqUpperBoundTest', 'type': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}, {'capa_to_be_deleted': 'alien.test.capabilities.CapaToBeDeleted', 'type': 'alien.test.relationships.CapaToBeDeleted'}, {'req_to_be_deleted': 'alien.test.capabilities.ReqToBeDeleted', 'type': 'alien.test.relationships.ReqToBeDeleted'}]}}",0
"{'org.alien4cloud.tests.nodes.RangeProperty': {'derived_from': 'tosca.nodes.Root', 'properties': {'range_property': {'type': 'range', 'default': [1, 25], 'required': False, 'constraints': [{'in_range': [3, 65535]}]}}}}",0
{'alien.test.nodes.RockitJVM': {'derived_from': 'alien.test.nodes.JVM'}},0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'relationship': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 1]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}, {'req_to_be_deleted': {'capability': 'alien.test.capabilities.ReqToBeDeleted', 'relationship': 'alien.test.relationships.ReqToBeDeleted'}}]}}",0
"{'org.alien4cloud.tests.nodes.InputArtifactDemo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': [{'war_file': {'type': 'org.alien4cloud.tests.artifacts.deployment.War'}}]}}",0
"{'fastconnect.nodes.Java': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Java Virtual Machine Software Component.\n', 'artifacts': [{'config': {'file': './config/example.Failled', 'type': 'tosca.artifacts.ShellScript'}}]}}",0
"{'tosca.nodes.root': {'abstract': True, 'description': 'Root type that every node should derive.', 'requirements': {'dependency': {'type': 'tosca.requirements.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'interfaces': {'lifecycle': {'description': 'Default lifecycle for nodes in TOSCA.', 'operations': {'create': {'description': 'Basic lifecycle create operation.'}, 'configure': {'description': 'Basic lifecycle configure operation.'}, 'start': {'description': 'Basic lifecycle start operation.'}, 'stop': {'description': 'Basic lifecycle stop operation.'}, 'delete': {'description': 'Basic lifecycle delete operation.'}}}}}}",0
"{'tosca.nodes.tier': {'description': 'A logical node that allows to group several nodes together.', 'properties': {'name': {'type': 'string', 'constraints': [{'required': True}]}}}}",0
"{'tosca.nodes.compute': {'derived_from': 'tosca.nodes.root', 'description': 'Represents a compute instance in the IaaS layer.'}}",0
"{'tosca.nodes.volume': {'derived_from': 'tosca.nodes.root', 'description': 'A storage volume in the IaaS layer.'}}",0
"{'tosca.nodes.object_store': {'abstract': True, 'derived_from': 'tosca.nodes.root', 'description': 'An object store provided by the IaaS layer.'}}",0
"{'tosca.nodes.network': {'derived_from': 'tosca.nodes.root', 'description': 'TODO'}}",0
{'tosca.nodes.router': {'derived_from': 'tosca.nodes.root'}},0
{'tosca.nodes.load_balancer': {'derived_from': 'tosca.nodes.root'}},0
{'tosca.nodes.virtual_ip': {'derived_from': 'tosca.nodes.root'}},0
"{'tosca.nodes.software_component': {'derived_from': 'tosca.nodes.root', 'description': 'Root type for every node that is a software component.'}}",0
{'tosca.nodes.middleware': {'derived_from': 'tosca.nodes.root'}},0
{'tosca.nodes.db_server': {'derived_from': 'tosca.nodes.middleware'}},0
{'tosca.nodes.web_server': {'derived_from': 'tosca.nodes.middleware'}},0
{'tosca.nodes.app_server': {'derived_from': 'tosca.nodes.middleware'}},0
{'tosca.nodes.message_bus': {'derived_from': 'tosca.nodes.middleware'}},0
{'tosca.nodes.enterprise_service_bus': {'derived_from': 'tosca.nodes.middleware'}},0
"{'alien.test.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linuxx'}}, {'architecture': {'valid_values': ['x86_322', 'x86_644']}}]}}]}}}]}}",0
"{'org.alien4cloud.nodes.test.MyNode': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'my_capa': {'type': 'org.alien4cloud.capabilities.test.MyCapability'}}}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.Root', 'description': 'My company’s custom applicaton', 'properties': {'my_simple_secret': {'type': 'string'}}}}",0
"{'org.alien4cloud.test.matching.nodes.TopologyAbstractNode': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The abstract node to use in the topology.', 'properties': {'common_property': {'type': 'string', 'description': 'this property is defined in the top level node and should be kept if defined as post-matching property when changing selection.'}}}}",0
"{'org.alien4cloud.test.matching.nodes.LocationCustomImplOne': {'derived_from': 'org.alien4cloud.test.matching.nodes.TopologyAbstractNode', 'description': 'A node to add as custom resource to the location (do not defined props values)', 'properties': {'unique_prop': {'type': 'string'}, 'type_variant_prop': {'type': 'string'}, 'constraint_variant_prop': {'type': 'string'}}, 'capabilities': {'my_capability': 'org.alien4cloud.test.matching.capabilities.CapabilityTypeOne'}}}",0
"{'org.alien4cloud.test.matching.nodes.LocationCustomImplTwo': {'derived_from': 'org.alien4cloud.test.matching.nodes.TopologyAbstractNode', 'description': 'A node to add as custom resource to the location (do not defined props values)', 'properties': {'type_variant_prop': {'type': 'integer'}, 'constraint_variant_prop': {'type': 'string', 'constraints': [{'min_length': 6}]}}, 'capabilities': {'my_capability': 'org.alien4cloud.test.matching.capabilities.CapabilityTypeTwo'}}}",0
"{'alien.test.nodes.JVM': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'jvm': {'type': 'alien.test.capabilities.JVMEndpoint'}}}}",0
"{'alien.test.nodes.ApplicationServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'jvm': {'capability': 'alien.test.capabilities.JVMEndpoint', 'relationship': 'alien.test.relationships.DependsOnJVM', 'occurrences': [1, 1]}}], 'capabilities': {'app_server': {'type': 'alien.test.capabilities.AppServer'}}}}",0
"{'alien.test.nodes.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'server': {'capability': 'alien.test.capabilities.AppServer', 'relationship': 'alien.test.relationships.HostedOnAppServer', 'occurrences': [1, 1]}}]}}",0
{'alien.test.nodes.Tomcat': {'derived_from': 'alien.test.nodes.ApplicationServer'}},0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': 'alien.test.capabilities.TestComponentConnects', 'type': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}, {'capa_upperbound_test': 'alien.test.capabilities.CapaUpperBoundTest', 'type': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}, {'req_upperbound_test': 'alien.test.capabilities.ReqUpperBoundTest', 'type': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}, {'capa_to_be_deleted': 'alien.test.capabilities.CapaToBeDeleted', 'type': 'alien.test.relationships.CapaToBeDeleted'}]}}",0
"{'alien.test.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'connectivity': {'type': 'alien.test.capabilities.TestComponentConnects'}, 'capa_upperbound_test': {'type': 'alien.test.capabilities.CapaUpperBoundTest', 'occurrences': [1, 2]}, 'req_upperbound_test': {'type': 'alien.test.capabilities.ReqUpperBoundTest', 'occurrences': [1, 2]}, 'req_to_be_deleted': {'type': 'alien.test.capabilities.ReqToBeDeleted'}}}}",0
"{'tosca.nodes.Tier': {'derived_from': 'tosca.nodes.Root', 'description': 'A logical node that allows to group several nodes together.', 'properties': {'name': {'type': 'string'}}, 'tags': {'icon': '/images/test.jpg'}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a compute instance in the IaaS layer.', 'properties': {'disk_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'num_cpus': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'os_arch': {'type': 'string'}, 'os_name': {'type': 'string'}, 'os_distribution': {'type': 'string'}, 'os_version': {'type': 'string'}}, 'tags': {'icon': '/images/test.jpg'}}}",0
"{'my.http.component': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'create': 'https://otherCompany/script/short_notation.sh', 'start': {'inputs': {'TOTO': 'tata', 'TITI': 'tutu'}, 'implementation': {'file': 'myScript.abc', 'repository': 'script_repo', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
{'my.http.component.extended': {'derived_from': 'my.http.component'}},0
"{'my.git.component': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'create': {'implementation': {'file': 'master:myGitScript.xyz', 'repository': 'git_repo', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
"{'fastconnect.nodes.Java': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Java Virtual Machine Software Component.\n', 'artifacts': [{'config': {'file': './config/example.sh', 'type': 'tosca.artifacts.ShellScript'}}]}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'tags': {'icon': '/images/root.png'}, 'requirements': {'dependency': {'type': 'tosca.capabilities.Feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Feature', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'interfaces': {'Standard': {'description': 'Default lifecycle for nodes in TOSCA.', 'create': {'description': 'Basic lifecycle create operation.'}, 'configure': {'description': 'Basic lifecycle configure operation.'}, 'start': {'description': 'Basic lifecycle start operation.'}, 'stop': {'description': 'Basic lifecycle stop operation.'}, 'delete': {'description': 'Basic lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'num_cpus': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'mem_size': {'type': 'integer', 'constraints': [{'greater_than': 0}]}, 'os_arch': {'type': 'string'}, 'os_type': {'type': 'string'}, 'os_distribution': {'type': 'string'}, 'os_version': {'type': 'string'}, 'ip_address': {'type': 'string'}}, 'capabilities': {'compute': {'type': 'tosca.capabilities.Container', 'lower_bound': 0, 'upper_bound': 'unbounded'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent Node Type represents a generic software component that can be managed and run by a TOSCA Compute Node Type.\n', 'requirements': {'host': {'type': 'tosca.capabilities.Container'}}, 'tags': {'icon': '/images/software.png'}}}",0
"{'tosca.nodes.RDBMS': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA RDBMS Node Type represents a generic relational database. It should be inherited to define an actual Database (Such as MySQL) and lifecycle implementation.\n', 'tags': {'icon': '/images/relanode_filtertional_db.png'}}}",0
"{'tosca.nodes.ApplicationServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA ApplicationServer Node Type represents a generic application server. It should be inherited to define an actual application server (Such as Tomcat) and lifecycle implementation.\n', 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'lower_bound': 0, 'upper_bound': 'unbounded'}}}}",0
"{'alien.test.nodes.ApplicationServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'jvm': 'alien.test.capabilities.JVMEndpoint', 'type': 'alien.test.relationships.DependsOnJVM', 'occurrences': [1, 1]}], 'capabilities': {'app_server': {'type': 'alien.test.capabilities.AppServer'}}}}",0
"{'alien.test.nodes.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'server': 'alien.test.capabilities.AppServer', 'type': 'alien.test.relationships.HostedOnAppServer', 'occurrences': [1, 1]}]}}",0
{'alien.test.nodes.OracleJVM': {'derived_from': 'alien.test.nodes.JVM'}},0
"{'alien.test.nodes.JBoss': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'jvm': 'alien.test.capabilities.JVMEndpoint', 'type': 'alien.test.relationships.DependsOnJVM', 'occurrences': [1, 1]}]}}",0
"{'alien.test.MyRequirementsListCapabilities': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': [{'host': 'tosca.capabilities.Container'}, {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability'}}], 'requirements': [{'host': 'tosca.capabilities.Container'}, {'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}}, {'another_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}}]}}",0
"{'alien.test.MyRequirementsMapCapabilities': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': 'tosca.capabilities.Container', 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability'}}, 'requirements': {'host': 'tosca.capabilities.Container', 'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}, 'another_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}}}}",0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'last_name': 'Bar'}}}}}",0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'last_name': 'Bar', 'address': {'street_name': 'rue des peupliers', 'zipcode': 92130, 'city_name': 'ISSY LES MOULES'}, 'emails': ['contact@fastconnect.fr', 'info@fastconnect.fr'], 'accounts': {'main': 'root', 'secondary': 'useruser'}}}}}}",0
"{'alien4cloud.tests.nodes.IdSimple': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'id': {'type': 'string'}}}}",0
"{'alien4cloud.tests.nodes.IdComplex': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'id': {'type': 'alien.data.Complex'}}}}",0
"{'alien.test.TestComputeConcat': {'derived_from': 'tosca.nodes.Compute', 'properties': {'customHostName': {'type': 'string'}, 'serviceEndPoint': {'type': 'string'}}, 'attributes': {'simple_definition': {'type': 'integer'}, 'ip_address': {'type': 'string', 'description': 'The primary IP address assigned by the cloud provider that applications may use to access the Compute node. Note: This is used by the platform provider to convey the primary address used to access the compute node.  Future working drafts will address implementations that support floating or multiple IP addresses.\n'}, 'simple_concat': {'concat': ['http', {'get_property': ['SELF', 'serviceEndPoint']}, 'port']}, 'complex_concat': {'concat': [{'concat': [{'get_property': ['SELF', 'serviceEndPoint']}, 'test']}, {'get_property': ['SELF', 'serviceEndPoint']}, 'port']}}}}",0
"{'org.alien4cloud.tests.nodes.RangeProperty': {'derived_from': 'tosca.nodes.Root', 'properties': {'range_property': {'type': 'range', 'default': [1, 25], 'required': False}}}}",0
"{'org.alien4cloud.nodes.mock.openstack.Image': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'os': {'type': 'tosca.capabilities.OperatingSystem'}}}}",0
"{'org.alien4cloud.nodes.mock.openstack.Flavor': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'alien.test.MySoftwareDerivedFromNothing': {'properties': {'complex': {'type': 'alien.test.MyDataTypeDerivedFromNothing', 'required': False}}, 'interfaces': {'Standard': {'create': 'scripts/myscript.sh'}}, 'requirements': [{'dependency': {'capability': 'alien.test.MyCapabilityTypeDerivedFromNothing', 'relationship': 'alien.test.MyRelationshipDerivedFromNothing', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'feature': {'type': 'alien.test.MyCapabilityTypeDerivedFromNothing'}}}}",0
"{'org.alien4cloud.nodes.mock.aws.Compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'imageId': {'type': 'string', 'required': True}, 'flavorId': {'type': 'string', 'required': True}, 'zone': {'type': 'string', 'required': False}}}}",0
{'org.alien4cloud.nodes.mock.aws.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage'}},0
{'org.alien4cloud.nodes.mock.aws.Network': {'derived_from': 'tosca.nodes.Network'}},0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'last_name': 'Bar', 'address': {'street_name': 'rue des peupliers', 'zipcode': 92130, 'city_name': 'ISSY LES MOULES'}, 'emails': ['contact@fastconnect.fr', 'info@fastconnect.fr'], 'accounts': {'main': 'root', 'secondary': 'user'}}}}}}",0
"{'org.alien4cloud.nodes.test.ComplexProp': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'complex_prop': {'type': 'org.alien4cloud.nodes.test.ComplexDataType'}}, 'interfaces': {'Standard': {'create': {'inputs': {'COMPLEX': {'get_property': ['SELF', 'complex_prop']}, 'NESTED': {'get_property': ['SELF', 'complex_prop.nested']}, 'NESTED_ARRAY_ELEMENT': {'get_property': ['SELF', 'complex_prop.nested_array[0]']}, 'NESTED_MAP_ELEMENT': {'get_property': ['SELF', 'complex_prop.nested_map.tutu']}}}}}}}",0
"{'org.alien4cloud.test.TestCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'customHostName': {'type': 'string'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'customHostName': {'get_property': ['SELF', 'customHostName']}}, 'implementation': 'scripts/dummy.sh'}, 'stop': {'inputs': {'MY_IP': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}, 'custom': {'helloCmd': {'input': {'yourName': {'type': 'string', 'required': True}, 'customHostName': {'get_property': ['HOST', 'customHostName']}}, 'implementation': 'scripts/dummy.sh'}}, 'fastconnect.cloudify.extensions': {'start_detection': {'input': {'EXPECTED_HOSTNAME': {'get_property': ['SELF', 'customHostName']}}, 'implementation': 'scripts/dummy.sh'}}, 'fr.fastconnect.custom': {'bolo': {'implementation': 'scripts/dummy.sh'}, 'bala': {'implementation': 'scripts/dummy.sh', 'inputs': {'p1': {'type': 'string', 'required': True}}}, 'bashWithOuput': {'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.nodes.ComputeWindows': {'derived_from': 'tosca.nodes.Compute', 'properties': {'customHostName': {'type': 'string'}}, 'interfaces': {'Standard': {'create': 'scripts/dummy.sh', 'configure': {'inputs': {'FILENAME': 'configured.txt'}, 'implementation': 'scripts/dummy.sh'}}, 'custom': {'checkFile': {'inputs': {'FILENAME': {'type': 'string', 'required': True}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.BadTestCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'customHostName': {'type': 'string'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'testScalar': 'test', 'customHostName': {'get_property': ['SELF', 'customHostName']}, 'insufficientParams': {'get_property': ['SELF']}, 'keywordSourceBadUsage': {'get_property': ['SOURCE', 'customHostName']}, 'KeywordTargetBadUsage': {'get_property': ['TARGET', 'customHostName']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.nodes.envVarTestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'name': {'type': 'string'}}}}",0
"{'org.alien4cloud.test.TestComputeWithGetOperationOutput': {'derived_from': 'tosca.nodes.Compute', 'properties': {'customHostName': {'type': 'string'}}, 'attributes': {'old_hostname': {'get_operation_output': ['SELF', 'Standard', 'create', 'old_hostnane']}, 'new_hostname': {'get_operation_output': ['SELF', 'Standard', 'configure', 'new_hostnane']}}, 'interfaces': {'Standard': {'create': 'scripts/dummy.sh', 'configure': {'inputs': {'customHostName': {'get_property': ['SELF', 'customHostName']}, 'OUTPUT_FROM_CREATE': {'get_operation_output': ['SELF', 'Standard', 'create', 'output_from_create']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}, {'req_to_be_deleted': {'capability': 'alien.test.capabilities.ReqToBeDeleted', 'relationship': 'alien.test.relationships.ReqToBeDeleted'}}]}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurences': [1, 1], 'node_filter': {'properties': [{'os_type': {'valid_values': ['linux', 'unix']}}, {'os_mix': [{'valid_values': ['linux', 'unix']}, {'in_range': [1, 4]}]}, {'os_arch': [{'valid_values': ['x86_64', 'x86_32']}, {'in_range': [1, 4]}]}], 'capabilities': [{'host': {'properties': [{'num_cpus': {'in_range': [1, 4]}}, {'mem_size': {'greater_or_equal': '2 MB'}}]}}, {'mytypes.capabilities.compute.encryption': {'properties': [{'algorithm': {'equal': 'aes'}}, {'keylength': [{'valid_values': [128, 256]}, {'equal': 128}]}]}}]}}}, {'other': {'capability': 'tosca.capabilities.Endpoint', 'occurences': [0, 'unbounded']}}]}}",0
"{'org.alien4cloud.tests.nodes.RangeProperty': {'derived_from': 'tosca.nodes.Root', 'properties': {'range_property': {'type': 'range', 'default': 14, 'required': False}}}}",0
"{'alien.test.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'LINUX'}}, {'architecture': {'valid_values': ['X86_32', 'x86_64']}}]}}]}}}]}}",0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'last_name': 'Bar', 'emails': ['contact@fastconnect.fr', 'info@fastconnect.fr'], 'accounts': {'main': 'root', 'secondary': 'user'}}}}}}",0
"{'fastconnect.nodes.apacheLB': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This is the definition of the Apache LB Recipe. This is based on Cloudify Apache LB groovy recipe.\n', 'tags': {'icon': '/images/apache.png'}, 'properties': {'version': {'type': 'version', 'default': 2, 'constraints': [{'equal': 2}]}}, 'interfaces': {'Standard': {'operations': {'create': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/alien_apacheLB_install.groovy'}}, 'start': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_start.groovy'}}, 'stop': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_stop.groovy'}}, 'delete': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_uninstall.groovy'}}}}, 'fastconnect.cloudify.extensions': {'operations': {'start_detection': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_startDetection.groovy'}}}}, 'custom': {'operations': {'addNode': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_addNode.groovy'}}, 'removeNode': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'scripts/apacheLB_removeNode.groovy'}}}}}, 'capabilities': {'httpEndpoint': {'type': 'alien4cloud.capabilities.HttpEndpoint', 'lower_bound': 0, 'upper_bound': 'unbounded'}}, 'artifacts': [{'scripts': 'scripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
"{'alien.test.MyRequirementsListCapabilities': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': [{'host': 'tosca.capabilities.Container'}, {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability'}}], 'requirements': [{'host': 'tosca.capabilities.Container'}, {'endpoint': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}, {'another_endpoint': {'type': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}}]}}",0
"{'alien.test.MyRequirementsMapCapabilities': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': 'tosca.capabilities.Container', 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability'}}, 'requirements': {'host': 'tosca.capabilities.Container', 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}, 'another_endpoint': {'type': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'unbounded']}}}}",0
"{'alien.test.Command': {'derived_from': 'tosca.nodes.Root', 'properties': {'customer': {'type': 'sample.datatypes.Citizen', 'default': {'first_name': 'Foo', 'address': {'street_name': 'rue des peupliers', 'zipcode': 92130, 'city_name': 'ISSY LES MOULES'}, 'emails': ['contact@fastconnect.fr', 'info@fastconnect.fr'], 'accounts': {'main': 'root', 'secondary': 'user'}}}}}}",0
"{'alien.test.nodes.TestComponentSource': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'alien.test.capabilities.TestComponentConnects', 'relationship': 'alien.test.relationships.TestComponentConnectsTo', 'occurrences': [1, 1]}}, {'capa_upperbound_test': {'capability': 'alien.test.capabilities.CapaUpperBoundTest', 'relationship': 'alien.test.relationships.CapaUpperBoundTest', 'occurrences': [1, 2]}}, {'req_upperbound_test': {'capability': 'alien.test.capabilities.ReqUpperBoundTest', 'relationship': 'alien.test.relationships.ReqUpperBoundTest', 'occurrences': [1, 2]}}, {'capa_to_be_deleted': {'capability': 'alien.test.capabilities.CapaToBeDeleted', 'relationship': 'alien.test.relationships.CapaToBeDeleted'}}]}}",0
"{'tosca.nodes.tier': {'description': 'A logical node that allows to group several nodes together.', 'properties': {'name': {'type': 'string', 'constraints': [{'required': True}, {'whatever': 'arf'}]}}}}",0
"{'fastconnect.nodes.Java': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Java Virtual Machine Software Component.\n', 'artifacts': [{'config': {'file': './config/example.sh', 'type': 'tosca.artifacts.Failled'}}]}}",0
"{'my_company.my_types.MyAppNodeType': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'My company’s custom applicaton', 'properties': {'my_app_password': {'type': 'string', 'default': 'default', 'description': 'application password', 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'my_app_port': {'type': 'integer', 'description': 'application port number'}}, 'capabilities': {'some_capability': 'mytypes.mycapabilities.MyCapabilityTypeName', 'some_other_capability': {'type': 'tosca.capabilities.Endpoint', 'description': 'this is a capability', 'properties': {'port': 8080, 'range_sample': [8080, 9000]}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'other': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'standard': {'description': 'standard interface from TOSCA.'}, 'custom': {'description': 'this is a sample interface used to execute custom operations.', 'do_something': {'inputs': {'definition_input': {'type': 'string', 'default': 'default', 'description': 'an input parameter that should be queried on operation execution'}, 'value_input': 'static parameter value', 'function_input': {'get_property': ['SELF', 'some_other_capability', 'port']}}}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'Represents a real or virtual machine or ‘server’. Informations specified on the Compute node will be used to find the machine that fits the given requirements in the cloud available machines. If no sizing informations are specified the cloud’s provider default machine will be used. It is strongly recommended to specify the required cpus and memory at least.\n', 'tags': {'icon': '/images/compute.png'}, 'properties': {'disk_size': {'type': 'scalar-unit.size', 'required': False, 'default': '20 B', 'constraints': [{'greater_than': '0 B'}]}}}}",0
"{'alien.test.Software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'distribution': {'equal': 'ubuntu'}}, {'version': {'equal': 14.04}}]}}]}}}]}}",0
{'alien.nodes.test.TestWorkflow': {'derived_from': 'tosca.nodes.SoftwareComponent'}},0
"{'org.alien4cloud.tests.nodes.RangeProperty': {'derived_from': 'tosca.nodes.Root', 'properties': {'range_property': {'type': 'range', 'default': [1, 25], 'required': False, 'constraints': [{'in_range': [1, 65535]}]}}}}",0
"{'alien.nodes.LinuxFileSystem': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'FileSystem node can be used to mount and format a volume.', 'properties': {'fs_type': {'description': 'The type of the File System.', 'type': 'string', 'default': 'ext4', 'constraints': [{'valid_values': ['ext2', 'ext3', 'ext4', 'fat', 'ntfs', 'swap']}], 'required': False}, 'location': {'type': 'string', 'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as ‘/usr/data’ Note: The user must provide it and it cannot be “root”.\n', 'constraints': [{'min_length': 1}]}}, 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}]}}]}}}, {'partition': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'alien.relationships.LinuxPartition', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'FS_MOUNT_PATH': {'get_property': ['SELF', 'location']}, 'PARTITION_NAME': {'get_attribute': ['SELF', 'partition_name']}}, 'implementation': 'scripts/mount.sh'}, 'stop': {'inputs': {'FS_MOUNT_PATH': {'get_property': ['SELF', 'location']}}, 'implementation': 'scripts/unmount.sh'}}}}}",0
"{'org.alien4cloud.nodes.Job': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'run': {'description': 'Standard lifecycle run operation.'}}}}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'metadata': {'icon': '/images/root.png'}, 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance. See section “Node States” for allowed values.', 'default': 'initial'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'description': 'This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.\n', 'create': {'description': 'Standard lifecycle create operation.'}, 'configure': {'description': 'Standard lifecycle configure operation.'}, 'start': {'description': 'Standard lifecycle start operation.'}, 'stop': {'description': 'Standard lifecycle stop operation.'}, 'delete': {'description': 'Standard lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Compute': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'metadata': {'icon': '/images/compute.png'}, 'attributes': {'ip_address': {'type': 'string', 'description': 'Previous spec name for private_address still supported in alien4cloud.'}, 'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_ip_address': {'type': 'string', 'description': 'Previous spec name for public_address still supported in alien4cloud.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'attach': 'tosca.capabilities.Attachment'}}}",0
"{'tosca.nodes.SoftwareComponent': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'metadata': {'icon': '/images/software.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.\n', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'metadata': {'icon': '/images/relational_db.png'}, 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'metadata': {'icon': '/images/relational_db.png'}, 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data', 'required': False}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.ObjectStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'metadata': {'icon': '/images/objectstore.png'}, 'properties': {'name': {'type': 'string', 'required': True}, 'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'metadata': {'icon': '/images/volume.png'}, 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’ Note: this property will be moved in next releases to the AttachTo relationship as it is specified by TOSCA spec.\n', 'required': False}}, 'requirements': [{'attachment': 'tosca.capabilities.Attachment'}]}}",0
"{'tosca.nodes.Container.Runtime': {'abstract': True, 'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA Container Runtime node represents operating system-level virtualization technology used to run multiple application services on a single Compute host.\n', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application’s traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).\n', 'metadata': {'icon': '/images/loadbalancer.png'}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}]}}",0
"{'tosca.nodes.Network': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'metadata': {'icon': '/images/network.png'}, 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}}, 'capabilities': {'connection': {'type': 'tosca.capabilities.Connectivity'}}}}",0
"{'tosca.nodes.SoftwareComponent.MyElasticsearch2': {'derived_from': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosca.nodes.SoftwareComponent.Kibana', 'my.nodes.MyLogstash']}}}}",0
"{'tosca.nodes.SoftwareComponent.MyElasticsearch2': {'derived_from': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosca.nodes.SoftwareComponent.Kibana']}}}}",0
"{'tosca.nodes.SoftwareComponent.MyElasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.MyEndpoint'}}}}",0
"{'tosca.nodes.SoftwareComponent.MyElasticsearch2': {'derived_from': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'search_endpoint': {'type': 'tosca.capabilities.MyEndpoint2'}}}}",0
"{'tosca.nodes.SoftwareComponent.MyElasticsearch3': {'derived_from': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.MyEndpoint2'}}}}",0
"{'my.nodes.MyLogstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'search_endpoint': {'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'vyatta-services-v1': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'config': {'required': False, 'type': '_config'}, 'metadata': {'default': {'modules': {'vyatta-interfaces-dataplane-v1': '2015-11-23', 'vyatta-interfaces-openvpn-v1': '2015-08-14', 'vyatta-interfaces-v1': '2015-08-05', 'vyatta-service-nat-v1': '2015-09-29', 'vyatta-services-v1': '2015-08-05', 'vyatta-system-network-v1': '2015-08-14', 'vyatta-system-v1': '2015-08-05'}, 'xmlns': {'vyatta-if-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces:1', 'vyatta-interfaces-dataplane-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-dataplane:1', 'vyatta-interfaces-openvpn-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-openvpn:1', 'vyatta-service-nat-v1': 'urn:vyatta.com:mgmt:vyatta-service-nat:1', 'vyatta-services-v1': 'urn:vyatta.com:mgmt:vyatta-services:1', 'vyatta-system-network-v1': 'urn:vyatta.com:mgmt:vyatta-system-network:1', 'vyatta-system-v1': 'urn:vyatta.com:mgmt:vyatta-system:1'}}}, 'rpc': {'required': False, 'type': '_rpc'}}}}",0
"{'vyatta-machine': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'metadata': {'default': {'xmlns': {'vyatta-if-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces:1', 'vyatta-interfaces-dataplane-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-dataplane:1', 'vyatta-interfaces-openvpn-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-openvpn:1', 'vyatta-service-nat-v1': 'urn:vyatta.com:mgmt:vyatta-service-nat:1', 'vyatta-services-v1': 'urn:vyatta.com:mgmt:vyatta-services:1', 'vyatta-system-network-v1': 'urn:vyatta.com:mgmt:vyatta-system-network:1', 'vyatta-system-v1': 'urn:vyatta.com:mgmt:vyatta-system:1'}}}}}}",0
"{'ios_node_config': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'metadata': {'default': {'capabilities': ['urn:ietf:params:netconf:base:1.0', 'urn:ietf:params:netconf:capability:writeable-running:1.0', 'urn:ietf:params:netconf:capability:rollback-on-error:1.0', 'urn:ietf:params:netconf:capability:startup:1.0', 'urn:ietf:params:netconf:capability:url:1.0', 'urn:cisco:params:netconf:capability:pi-data-model:1.0', 'urn:cisco:params:netconf:capability:notification:1.0'], 'xmlns': {'cpi': 'http://www.cisco.com/cpi_10/schema'}}}}}}",0
"{'juniper_node_config': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'metadata': {'default': {'capabilities': ['urn:ietf:params:netconf:base:1.0', 'urn:ietf:params:netconf:capability:writeable-running:1.0', 'urn:ietf:params:netconf:capability:rollback-on-error:1.0', 'urn:ietf:params:netconf:capability:startup:1.0', 'urn:ietf:params:netconf:capability:url:1.0', 'http://xml.juniper.net/netconf/junos/1.0', 'http://xml.juniper.net/dmi/system/1.0'], 'xmlns': {'xnm': 'http://xml.juniper.net/xnm/1.1/xnm'}}}}}}",0
"{'vyatta-machine': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'metadata': {'default': {'xmlns': {'vyatta-interfaces-dataplane-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-dataplane:1', 'vyatta-if-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces:1'}}}}}}",0
"{'turing-machine': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'config': {'required': False, 'type': '_config'}, 'metadata': {'default': {'modules': {'turing-machine': '2013-12-27'}, 'xmlns': {'_': 'http://example.net/turing-machine'}}}, 'rpc': {'required': False, 'type': '_rpc'}}}}",0
"{'vyatta_node_config': {'derived_from': 'cloudify.netconf.nodes.xml_rpc', 'properties': {'metadata': {'default': {'capabilities': ['urn:ietf:params:netconf:base:1.0', 'urn:ietf:params:netconf:capability:writeable-running:1.0', 'urn:ietf:params:netconf:capability:rollback-on-error:1.0', 'urn:ietf:params:netconf:capability:startup:1.0', 'urn:ietf:params:netconf:capability:url:1.0'], 'xmlns': {'vyatta-if-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces:1', 'vyatta-interfaces-dataplane-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-dataplane:1', 'vyatta-interfaces-loopback-v1': 'urn:vyatta.com:mgmt:vyatta-interfaces-loopback:1', 'vyatta-protocols-static-v1': 'urn:vyatta.com:mgmt:vyatta-protocols-static:1', 'vyatta-protocols-v1': 'urn:vyatta.com:mgmt:vyatta-protocols:1', 'vyatta-service-https-v1': 'urn:vyatta.com:mgmt:vyatta-service-https:1', 'vyatta-service-nat-v1': 'urn:vyatta.com:mgmt:vyatta-service-nat:1', 'vyatta-service-netconf-v1': 'urn:vyatta.com:mgmt:vyatta-service-netconf:1', 'vyatta-service-ssh-v1': 'urn:vyatta.com:mgmt:vyatta-service-ssh:1', 'vyatta-services-v1': 'urn:vyatta.com:mgmt:vyatta-services:1', 'vyatta-system-acm-configd-v1': 'urn:vyatta.com:mgmt:vyatta-system-acm-configd:1', 'vyatta-system-acm-opd-v1': 'urn:vyatta.com:mgmt:vyatta-system-acm-opd:1', 'vyatta-system-acm-v1': 'urn:vyatta.com:mgmt:vyatta-system-acm:1', 'vyatta-system-login-v1': 'urn:vyatta.com:mgmt:vyatta-system-login:1', 'vyatta-system-mgmt-v1': 'urn:vyatta.com:mgmt:vyatta-system-mgmt:1', 'vyatta-system-misc-v1': 'urn:vyatta.com:mgmt:vyatta-system-misc:1', 'vyatta-system-network-v1': 'urn:vyatta.com:mgmt:vyatta-system-network:1', 'vyatta-system-package-v1': 'urn:vyatta.com:mgmt:vyatta-system-package:1', 'vyatta-system-syslog-v1': 'urn:vyatta.com:mgmt:vyatta-system-syslog:1', 'vyatta-system-v1': 'urn:vyatta.com:mgmt:vyatta-system:1'}}}}}}",0
"{'tosca.nodes.Root': {'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance. See section “Node States” for allowed values.', 'default': 'initial'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'properties': {'context_root': {'type': 'string', 'required': False, 'description': 'The web application’s context root which designates the application’s URL path within the web server it is hosted on.'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.SoftwareComponent.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Logstash is a tool for receiving, processing and outputting logs. All kinds of logs. System logs, webserver logs, error logs, application logs, and just about anything you can throw at it.', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'description': 'Node type that has a requirement of a capability with a defined value', 'properties': {'some_prop': {'type': 'string', 'required': False, 'default': 'some'}}, 'requirements': [{'some_req': {'capability': 'tosca.capabilities.SomeCap', 'node': 'tosca.nodes.NodeWithCap', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebApplication.PayPalPizzaStore': {'derived_from': 'tosca.nodes.WebApplication', 'description': ""Pizza store app that allows you to explore the features provided by PayPal's REST APIs. More detail can be found at https://github.com/paypal/rest-api-sample-app-nodejs/"", 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'location of the application on the github.', 'default': 'https://github.com/sample.git'}}, 'requirements': [{'database_connection': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'interfaces': {'Standard': {'configure': {'inputs': {'github_url': {'type': 'string'}, 'mongodb_ip': {'type': 'string'}}}}}}}",0
"{'tosca.nodes.SomeNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A node with a capiblity and a parent capability defined in an imported file', 'capabilities': {'lrms': {'type': 'tosca.capabilities.SomeChildCap'}}}}",0
"{'tosca.nodes.SoftwareComponent.Elasticsearch': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Elasticsearch is an open-source search engine built on top of Apache Lucene, a full-text search-engine library.', 'capabilities': {'search_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.DatabaseWithListParam': {'derived_from': 'tosca.nodes.Database', 'properties': {'list_prop': {'type': 'list', 'entry_schema': 'integer'}}}}",0
"{'tosca.nodes.Nodecellar': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Nodecellar Node Type represents a Nodecellar Application.', 'metadata': {'icon': '/images/nodecellar.jpg'}, 'properties': {'port': {'type': 'integer', 'default': 8088}}, 'attributes': {'nodecellar_url': 'http://nodecellar.example:8088'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.NodeJSAppContainer', 'relationship': 'tosca.relationships.NodecellarHostedOnNodejs'}}, {'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.NodejsConnectToMongo', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/install-nodecellar-app.sh', 'start': 'scripts/start-nodecellar-app.sh', 'stop': 'scripts/stop-nodecellar-app.sh'}}}}",0
"{'tosca.nodes.Nodejs': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Nodejs Node Type represents an Nodejs component that can be managed and run by a TOSCA Compute Node Type.\n', 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False, 'default': '0.12'}}, 'capabilities': {'host': 'tosca.capabilities.NodeJSAppContainer'}, 'metadata': {'icon': '/images/nodejs.jpg'}, 'interfaces': {'Standard': {'create': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/install-nodejs.sh'}}}}}",0
"{'tosca.nodes.ComputeWithProp': {'derived_from': 'tosca.nodes.Compute', 'description': 'Compute node type with a parameter for the get property with host test', 'properties': {'test': {'required': False, 'type': 'integer'}}}}",0
"{'tosca.nodes.Wordpress': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Wordpress Node Type represents a Wordpress CMS.', 'properties': {'zip_url': {'type': 'string', 'default': 'https://wordpress.org/latest.zip'}, 'context_root': {'type': 'string', 'default': '/'}}, 'attributes': {'max_user_number': {'type': 'integer', 'default': 10, 'description': 'Max user number'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}}, {'database': {'capability': 'tosca.capabilities.MysqlDatabaseEndpoint', 'relationship': 'tosca.capabilities.Endpoint.Database', 'occurrences': [1, 1]}}, {'php': {'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'WEBFILE_URL': {'get_property': ['SELF', 'zip_url']}}, 'implementation': 'scripts/install_wordpress.sh'}}}}}",0
"{'tosca.nodes.AbstractMongod': {'derived_from': 'tosca.nodes.DBMS', 'abstract': True, 'metadata': {'icon': '/images/mongodb.jpg'}, 'properties': {'port': {'type': 'integer', 'default': 27017, 'constraints': [{'in_range': [8000, 65535]}]}}}}",0
"{'tosca.nodes.Mongod': {'derived_from': 'tosca.nodes.AbstractMongod', 'description': 'A node to install Mongodb nosql database.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'metadata': {'icon': '/images/mongodb.jpg'}, 'interfaces': {'Standard': {'create': 'scripts/install-mongo.sh', 'configure': {'inputs': {'DB_IP': {'get_attribute': ['HOST', 'ip_address']}, 'DB_PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/configure-mongo.sh'}, 'start': 'scripts/start-mongo.sh', 'stop': 'scripts/stop-mongo.sh'}}}}",0
"{'tosca.nodes.ComputeWithAttrList': {'derived_from': 'tosca.nodes.Compute', 'description': 'Compute node type with a list attribute', 'attributes': {'attr_list': {'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'example.SomeApp': {'derived_from': 'tosca.nodes.Root', 'description': 'taken from tosca-topologies/Example18-ImplementationOfATransactionSubsytemNodeTypeUsingSubstitutionMappings', 'capabilities': {'message_receiver': 'tosca.capabilities.Endpoint'}, 'requirements': [{'database': {'capability': 'tosca.capabilities.Endpoint.Database'}}, {'host': {'node': 'tosca.nodes.WebServer'}}]}}",0
"{'tosca.nodes.PHP': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'PHP install through apt-get.', 'metadata': {'icon': '/images/php.png'}, 'properties': {'component_version': {'type': 'version', 'default': 5, 'constraints': [{'equal': 5}]}}, 'capabilities': {'attachWebsite': {'type': 'tosca.capabilities.Root'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'interfaces': {'Standard': {'create': 'scripts/install_php.sh'}}}}",0
"{'tosca.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': 'tosca.capabilities.Container'}, 'properties': {'component_version': {'type': 'version', 'default': 2.4, 'constraints': [{'equal': 2.4}]}, 'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'default': '/var/www'}}, 'interfaces': {'Standard': {'create': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}, 'DOC_ROOT': {'get_property': ['SELF', 'document_root']}}, 'implementation': 'scripts/install_apache.sh'}, 'start': 'scripts/start_apache.sh'}}}}",0
"{'tosca.nodes.SoftwareComponent.Kibana': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Kibana is an open source analytics and visualization platform designed to work with Elasticsearch. You use Kibana to search, view, and interact with data stored in Elasticsearch.', 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.AbstractMysql': {'abstract': True, 'derived_from': 'tosca.nodes.Database', 'description': 'A node that provides a mysql endpoint.', 'capabilities': {'database_endpoint': 'tosca.capabilities.Endpoint.Database'}}}",0
"{'tosca.nodes.Mysql': {'derived_from': 'tosca.nodes.AbstractMysql', 'description': 'A node that represent MySQL database with data on a attached volume.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'ubuntu', 'knoppix']}}]}}]}}}], 'properties': {'port': {'type': 'integer', 'default': 3306, 'description': 'The port on which the database will listen to data.'}, 'name': {'type': 'string', 'required': True, 'default': 'wordpress', 'description': 'The logical name of the database.'}, 'db_user': {'type': 'string', 'default': 'pass', 'description': 'The user account used for database administration.'}, 'db_password': {'type': 'string', 'default': 'pass', 'description': 'The password associated with the user account for database administration.'}, 'bind_address': {'type': 'boolean', 'default': True, 'required': False, 'description': 'If true,the server accepts TCP/IP connections on all server host IPv4 interfaces.'}, 'storage_path': {'type': 'string', 'default': '/mountedStorage', 'constraints': [{'valid_values': ['/mountedStorage', '/var/mysql']}]}}, 'interfaces': {'Standard': {'create': 'scripts/install_mysql.sh', 'start': {'inputs': {'VOLUME_HOME': {'get_property': ['SELF', 'storage_path']}, 'PORT': {'get_property': ['SELF', 'port']}, 'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'db_user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'db_password']}, 'BIND_ADDRESS': {'get_property': ['SELF', 'bind_address']}}, 'implementation': 'scripts/start_mysql.sh'}}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Collectd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'collectd is a daemon which gathers statistics about the system it is running on.', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'RSYSLOG is the Rocket-fast SYStem for LOG processing.', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Rsyslog': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'RSYSLOG is the Rocket-fast SYStem for LOG processing.', 'requirements': [{'log_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Logstash', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.SoftwareComponent.Logstash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': ""Pizza store app that allows you to explore the features provided by PayPal's REST APIs. More detail can be found at https://github.com/paypal/rest-api-sample-app-nodejs/"", 'requirements': [{'search_endpoint': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.SoftwareComponent.Elasticsearch', 'relationship': {'type': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'elasticsearch_ip': {'type': 'string'}}}}}}}}], 'capabilities': {'log_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'example.QueuingSubsystem': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'message_queue_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'receiver': {'node': 'example.TransactionSubsystem', 'capabilities': 'tosca.capabilities.Endpoint'}}]}}",0
"{'example.TransactionSubsystem': {'derived_from': 'tosca.nodes.Root', 'properties': {'mq_service_ip': {'type': 'string'}, 'receiver_port': {'type': 'integer'}}, 'attributes': {'receiver_ip': {'type': 'string'}, 'receiver_port': {'type': 'integer'}}, 'capabilities': {'message_receiver': 'tosca.capabilities.Endpoint'}, 'requirements': [{'database_endpoint': 'tosca.capabilities.Endpoint.Database'}]}}",0
"{'example.DatabaseSubsystem': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.ComputeWithCapWithAttr': {'derived_from': 'tosca.nodes.Compute', 'description': 'Compute node type with capability with an attribute of type list', 'capabilities': {'endpoint': {'type': 'tosca.capabilities.indigo.Endpoint'}}}}",0
"{'alien.nodes.Application.Docker.Mysql': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'mem_share': {'type': 'scalar-unit.size', 'required': True, 'default': '256 MB', 'constraints': [{'greater_or_equal': '256 MB'}]}, 'mysql_root_password': {'type': 'string', 'default': 'password'}, 'mysql_user': {'type': 'string', 'default': 'foo'}, 'mysql_password': {'type': 'string', 'default': 'bar'}, 'mysql_database': {'type': 'string', 'default': 'my_database'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MYSQL_ROOT_PASSWORD': {'get_property': ['SELF', 'mysql_root_password']}, 'ENV_MYSQL_USER': {'get_property': ['SELF', 'mysql_user']}, 'ENV_MYSQL_PASSWORD': {'get_property': ['SELF', 'mysql_password']}, 'ENV_MYSQL_DATABASE': {'get_property': ['SELF', 'mysql_database']}}, 'implementation': {'file': 'mysql:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}, 'capabilities': {'database_endpoint': {'type': 'org.alien4cloud.capabilities.endpoint.docker.MysqlDatabaseEndpoint'}}}}",0
"{'org.alien4cloud.nodes.Application.Docker.Apache': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'http_endpoint': {'type': 'org.alien4cloud.capabilities.endpoint.docker.Http'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'httpd:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.nodes.Application.Docker.Nodecellar': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'string', 'default': 'cd /nodecellar && nodejs server.js'}, 'docker_options': {'type': 'org.alien4cloud.datatypes.docker.cli-args.Nodecellar', 'required': False}, 'docker_env_vars': {'type': 'map', 'description': 'Environment variables for the Docker container.', 'entry_schema': {'type': 'string'}, 'default': {'LOG_LEVEL': None}}}, 'requirements': [{'mongo_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'nodecellar_app': {'type': 'org.alien4cloud.capabilities.endpoint.docker.Nodecellar'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MONGO_HOST': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'ENV_MONGO_PORT': {'get_attribute': ['TARGET', 'mongo_db', 'port']}, 'ENV_MONGO_API_VERSION': {'get_property': ['TARGET', 'mongo_db', 'api_version']}, 'ENV_NODECELLAR_PORT': {'get_property': ['SELF', 'nodecellar_app', 'port']}}, 'implementation': {'file': 'afraisse/nodecellar:exp', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.nodes.Application.Docker.Mongo': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'mongo_db': {'type': 'org.alien4cloud.capabilities.endpoint.docker.Mongo'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'mongo:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.extended.container.types.ContainerRuntime': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Can host containerized applications. A ContainerRuntime represents the container itself, while DockerContainer is the contanerized application.\n', 'capabilities': {'host': 'org.alien4cloud.extended.container.capabilities.ApplicationHost'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container.Docker', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}]}}",0
"{'org.alien4cloud.extended.container.types.ContainerDeploymentUnit': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Can host containers and be deployed as a unit. Think about Pods in K8S.\n', 'capabilities': {'host': 'tosca.capabilities.Container.Docker', 'scalable': 'tosca.capabilities.Scalable'}}}",0
"{'tosca.nodes.Container.Application.DockerContainer': {'abstract': True, 'derived_from': 'tosca.nodes.Container.Application', 'description': ""The TOSCA Container Application Docker node represents an application running in a Docker container. Properties defined in the node will be interpreted as the entrypoint's arguments.\n"", 'tags': {'icon': '/images/docker.png'}, 'properties': {'cpu_share': {'type': 'float', 'required': True, 'default': 1.0}, 'mem_share': {'type': 'scalar-unit.size', 'required': True, 'default': '128 MB', 'constraints': [{'greater_or_equal': '0 MB'}]}, 'disk_share': {'type': 'integer', 'required': False}, 'docker_options': {'type': 'map', 'required': False, 'entry_schema': {'description': 'Arbitrary command-line options for the docker run command.', 'type': 'string'}}, 'docker_run_args': {'type': 'list', 'required': False, 'entry_schema': {'description': 'Docker run arguments. Allows safe usage of Docker ENTRYPOINT statement in the Dockerfile.', 'type': 'string'}}, 'docker_run_cmd': {'type': 'string', 'required': False, 'description': 'Docker run command. Will override the Dockerfile CMD statement.'}, 'docker_env_vars': {'type': 'map', 'required': False, 'entry_schema': {'description': 'Environment variables for the Docker container.', 'type': 'string'}}}, 'attributes': {'endpoint': {'type': 'string', 'description': 'Reflects the external endpoint assigned to this container.\n'}}, 'capabilities': {'attach': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'scalable': 'tosca.capabilities.Scalable'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.extended.container.capabilities.ApplicationHost', 'relationship': 'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.nodes.DockerExtVolume': {'abstract': True, 'derived_from': 'tosca.nodes.BlockStorage', 'tags': {'icon': '/images/volume.png'}, 'requirements': [{'attachment': {'capability': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'relationship': 'org.alien4cloud.relationships.MountDockerVolume', 'occurrences': [1, 'unbounded']}}, {'host': {'capability': 'tosca.capabilities.Container.Docker', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}]}}",0
"{'alien.nodes.Application.Docker.Petclinic': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'mem_share': {'type': 'scalar-unit.size', 'required': True, 'default': '768 MB', 'constraints': [{'greater_or_equal': '768 MB'}]}, 'nexus_base_url': {'type': 'string', 'default': 'https://fastconnect.org/maven/content/repositories/opensource-snapshot/'}, 'nexus_group': {'type': 'string', 'default': 'org.springframework.samples'}, 'nexus_artifact': {'type': 'string', 'default': 'spring-petclinic'}, 'nexus_version': {'type': 'string', 'default': '4.2.6-SNAPSHOT'}}, 'capabilities': {'petclinic_app': {'type': 'alien.capabilities.endpoint.docker.Petclinic'}}, 'attributes': {'petclinic_url': {'concat': [{'get_attribute': ['SELF', 'endpoint']}, '/petclinic']}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_NEXUS_BASE': {'get_property': ['SELF', 'nexus_base_url']}, 'ENV_NEXUS_GROUP': {'get_property': ['SELF', 'nexus_group']}, 'ENV_NEXUS_ARTIFACT': {'get_property': ['SELF', 'nexus_artifact']}, 'ENV_NEXUS_VERSION': {'get_property': ['SELF', 'nexus_version']}, 'ENV_DB_IP': {'get_property': ['REQ_TARGET', 'database', 'ip_address']}, 'ENV_DB_PORT': {'get_property': ['REQ_TARGET', 'database', 'port']}, 'ENV_DB_NAME': 'my_database', 'ENV_DB_USER': 'foo', 'ENV_DB_PASS': 'bar'}, 'implementation': {'file': 'stuntv/tomcat-petclinic:1.0', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}, 'requirements': [{'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.Database.MongoDB': {'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': 'tosca.nodes.DBMS.MongoDB'}], 'capabilities': {'database_endpoint': 'tosca.capabilities.MongoEndpoint'}}}",0
"{'tosca.nodes.DBMS.MongoDB': {'derived_from': 'tosca.nodes.DBMS', 'properties': {'dbms_port': {'description': 'reflect the default MongoDB server port', 'default': 27017}}, 'requirements': [{'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}], 'capabilities': {'host': {'type': 'Container', 'properties': {'valid_node_types': ['tosca.nodes.Database.MongoDB']}}}, 'interfaces': {'Standard': {'create': '#!/bin/bash\napt-get install -y mongodb\n', 'start': '#!/bin/bash\nstart mongodb \n', 'stop': '#!/bin/bash\nstop mongodb\n', 'delete': {'implementation': '#!/bin/bash\napt-get purge -y mongodb\n          \n'}}}}}",0
"{'tosca.nodes.Nodejs': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'github_url': {'description': 'location of the application on the github.', 'default': 'https://github.com/mmm/testnode.git'}}, 'requirements': [{'mongodb': 'tosca.capabilities.MongoEndpoint', 'relationship_type': 'tosca.relationships.ConnectsTo', 'interfaces': {'tosca.interfaces.relationship.Configure': {'pre_configure_source': {'inputs': {'host': {'get_property': ['TARGET', 'ip_address']}, 'port': {'get_property': ['TARGET', 'port']}}, 'implementation': '#!/bin/bash\ncat > /opt/node/config.js<<EOF\n{\n""host"": ""${host}""\n, ""port"": ${port}\n}\nEOF\n\n    \n'}}}}, {'host': 'tosca.nodes.Compute', 'constraints': {'os_distribution': [{'valid_values': ['Ubuntu']}], 'os_version': [{'valid_values': [12.04, 14.04]}]}}], 'interfaces': {'Standard': {'create': '#!/bin/bash\nadd-apt-repository ppa: chris-lea/node.js\napt-get update\napt-get install -y nodejs build-essential curl git npm\n', 'configure': '#!/bin/bash\nexport app_dir=/opt/app\ngit clone $github_url /opt/app\nif [ -f /opt/app/package.json ] \n   cd  /opt/app/ && npm install\nfi\n\ncat > /etc/init/nodeapp.conf <<EOS\ndescription ""node.js app""\n\nstart on (net-device-up\nand local-filesystems\nand runlevel [2345])\nstop on runlevel [!2345]\n\nexpect fork\nrespawn\n\nscript\nexport HOME=/\nexport NODE_PATH=/usr/lib/node\nexec /usr/bin/node ${app_dir}/server.js >> /var/log/nodeapp.log 2>&1 &\nend script\nEOS\n', 'start': '#!/bin/bash\nstart nodeapp\n', 'stop': '#!/bin/bash\nstop nodeapp\n', 'delete': '#!/bin/bash\nrm -Rf /opt/nodeapp\napt-get remove -y nodejs npm build-essential git curl\n'}}}}",0
"{'openstack.nodes.Facts': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'facts': {'description': 'Facts capability', 'type': 'openstack.capabilities.Endpoint.Facts'}}}}",0
"{'openstack.nodes.Project': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'facts': {'capability': 'openstack.capabilities.Endpoint.Facts', 'node': 'openstack.nodes.Facts', 'relationship': 'openstack.relationships.ConnectsTo'}}]}}",0
"{'openstack.nodes.Common': {'derived_from': 'openstack.nodes.Project', 'capabilities': {'com': {'description': 'Common capability', 'type': 'openstack.capabilities.Endpoint.Common'}}}}",0
"{'openstack.nodes.HAProxy': {'derived_from': 'openstack.nodes.Project', 'capabilities': {'ha': {'description': 'HAProxy capability', 'type': 'openstack.capabilities.Endpoint.HAProxy'}}}}",0
"{'openstack.nodes.MemCached': {'derived_from': 'openstack.nodes.Project', 'capabilities': {'memcached': {'description': 'MemCached capability', 'type': 'openstack.capabilities.Endpoint.MemCached'}}}}",0
"{'openstack.nodes.RabbitMQ': {'derived_from': 'openstack.nodes.Project', 'capabilities': {'rmq': {'description': 'RabbitMQ capability', 'type': 'openstack.capabilities.Endpoint.RabbitMQ'}}}}",0
"{'openstack.nodes.MariaDB': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'mdb': {'description': 'MariaDB capability', 'type': 'openstack.capabilities.Endpoint.MariaDB'}}, 'requirements': [{'com': {'capability': 'openstack.capabilities.Endpoint.Common', 'node': 'openstack.nodes.Common', 'relationship': 'openstack.relationships.ConnectsTo'}}, {'ha': {'capability': 'openstack.capabilities.Endpoint.HAProxy', 'node': 'openstack.nodes.HAProxy', 'relationship': 'openstack.relationships.ConnectsTo'}}]}}",0
"{'openstack.nodes.Project_Requiring_MariaDB': {'derived_from': 'openstack.nodes.Project', 'requirements': [{'mdb': {'capability': 'openstack.capabilities.Endpoint.MariaDB', 'node': 'openstack.nodes.MariaDB', 'relationship': 'openstack.relationships.ConnectsTo'}}]}}",0
"{'openstack.nodes.Keystone': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB', 'capabilities': {'kst': {'description': 'Keystone capability', 'type': 'openstack.capabilities.Endpoint.Keystone'}}}}",0
"{'openstack.nodes.Project_Requiring_MariaDB_and_Keystone': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB', 'requirements': [{'kst': {'capability': 'openstack.capabilities.Endpoint.Keystone', 'node': 'openstack.nodes.Keystone', 'relationship': 'openstack.relationships.ConnectsTo'}}]}}",0
"{'openstack.nodes.Glance': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB_and_Keystone', 'capabilities': {'glance': {'description': 'Keystone capability', 'type': 'openstack.capabilities.Endpoint.Glance'}}}}",0
"{'openstack.nodes.Nova': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB_and_Keystone', 'capabilities': {'nova': {'description': 'Nova capability', 'type': 'openstack.capabilities.Endpoint.Nova'}}}}",0
"{'openstack.nodes.OpenVSwitch': {'derived_from': 'openstack.nodes.Project', 'capabilities': {'openvswitch': {'description': 'OpenVSwitch capability', 'type': 'openstack.capabilities.Endpoint.OpenVSwitch'}}}}",0
"{'openstack.nodes.Neutron': {'derived_from': 'openstack.nodes.Project_Requiring_MariaDB_and_Keystone', 'capabilities': {'neutron': {'description': 'Neutron capability', 'type': 'openstack.capabilities.Endpoint.Neutron'}}, 'requirements': [{'openvswitch': {'capability': 'openstack.capabilities.Endpoint.OpenVSwitch', 'node': 'openstack.nodes.OpenVSwitch', 'relationship': 'openstack.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.Database.MySQL': {'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': {'node': 'tosca.nodes.DBMS.MySQL'}}]}}",0
"{'tosca.nodes.DBMS.MySQL': {'derived_from': 'tosca.nodes.DBMS', 'properties': {'port': {'description': 'reflect the default MySQL server port', 'default': 3306}, 'root_password': {'required': True}}, 'capabilities': {'host': {'valid_source_types': ['tosca.nodes.Database.MySQL']}}}}",0
{'tosca.nodes.WebServer.Apache': {'derived_from': 'tosca.nodes.WebServer'}},0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'admin_user': {'type': 'string'}, 'admin_password': {'type': 'string'}, 'db_host': {'type': 'string'}}, 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.WebServer.Nodejs': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'location of the application on the github.', 'default': 'https://github.com/mmm/testnode.git'}}}}",0
{'tosca.nodes.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application'}},0
"{'tosca.nodes.WebApplication.PayPalPizzaStore': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'github_url': {'type': 'string'}}, 'requirements': [{'host': {'node': 'tosca.nodes.WebServer.Nodejs'}}, {'database_connection': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Abstract.Compute': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute'}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data', 'required': False}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.Abstract.Storage': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'default': '0 MB', 'constraints': [{'greater_or_equal': '0 MB'}], 'required': False}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage', 'relationship': 'tosca.relationships.Root'}}, {'network': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.Root'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'The Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}]}}",0
"{'tosca.nodes.network.Network': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'start_ip': {'type': 'string', 'required': False}, 'end_ip': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}, 'segmentation_id': {'type': 'string', 'required': False}, 'network_type': {'type': 'string', 'required': False}, 'physical_network': {'type': 'string', 'required': False}, 'dhcp_enabled': {'type': 'boolean', 'required': False, 'default': True}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'type': 'string', 'required': False}, 'order': {'type': 'integer', 'required': True, 'default': 0, 'constraints': [{'greater_or_equal': 0}]}, 'is_default': {'type': 'boolean', 'required': False, 'default': False}, 'ip_range_start': {'type': 'string', 'required': False}, 'ip_range_end': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
{'my.types.MyApplication': {'derived_from': 'tosca.nodes.Root'}},0
{'some.nodetype.SomeService': {'derived_from': 'tosca.nodes.Root'}},0
{'type': 'object'},0
{'additionalProperties': {'$ref': '#/definitions/node_type'}},0
"{'my.types.MyApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'admin_user': {'type': 'string'}, 'admin_password': {'type': 'string'}, 'db_endpoint_url': {'type': 'string'}}, 'requirements': [{'database_endpoint': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'my.types.nodes.MyDatabase': {'derived_from': 'tosca.nodes.Database', 'properties': {'db_version': {'type': 'string'}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip_address': {'type': 'string', 'required': False}, 'order': {'type': 'integer', 'required': True, 'default': 0, 'constraints': [{'greater_or_equal': 0}]}, 'is_default': {'type': 'boolean', 'required': False, 'default': False}, 'ip_range_start': {'type': 'string', 'required': False}, 'ip_range_end': {'type': 'string', 'required': False}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}, {'binding': {'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'tosca.nodes.network.Port': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Port node represents a logical entity that associates between Compute and Network normative types. The Port node type effectively represents a single virtual NIC on the Compute node instance.\n', 'properties': {'ip_address': {'type': 'string', 'required': False, 'description': 'Allow the user to set a static IP.\n'}, 'order': {'type': 'integer', 'required': False, 'default': 0, 'constraints': [{'greater_or_equal': 0}], 'description': 'The order of the NIC on the compute instance (e.g. eth2).\n'}, 'is_default': {'type': 'boolean', 'required': False, 'default': False, 'description': 'If is_default=true this port will be used for the default gateway route. Only one port that is associated to single compute node can set as is_default=true.\n'}, 'ip_range_start': {'type': 'string', 'required': False, 'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated with this Port.\n'}, 'ip_range_end': {'type': 'string', 'required': False, 'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated with this Port.\n'}}, 'attributes': {'ip_address': {'type': 'string'}}, 'requirements': [{'binding': {'description': 'Binding requirement expresses the relationship between Port and Compute nodes. Effectively it indicates that the Port will be attached to specific Compute node instance\n', 'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo'}}, {'link': {'description': 'Link requirement expresses the relationship between Port and Network nodes. It indicates which network this port will connect to.\n', 'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.network.LinksTo'}}]}}",0
"{'tosca.nodes.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.ystia.yorc.alien4cloud.nodes.YorcPlugin': {'description': 'Upload Yorc orchestrator plugin\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator', 'requirements': [{'yorc': {'capability': 'org.ystia.yorc.pub.capabilities.YorcRestAPI', 'relationship': 'org.ystia.yorc.alien4cloud.relationships.ConnectsToYorc', 'occurrences': [1, 1]}}], 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}}, 'properties': {'download_url': {'description': 'The URL used to download the Yorc plugin zip.', 'type': 'string', 'required': True, 'default': 'https://dl.bintray.com/ystia/yorc-a4c-plugin/releases/alien4cloud-yorc-plugin-3.1.0.zip'}, 'name': {'type': 'string', 'required': True, 'default': 'Yorc'}, 'discriminator': {'type': 'string', 'description': 'a prefix for all deployments', 'required': True, 'default': 'YourInitials'}, 'pluginId': {'type': 'string', 'required': True, 'default': 'alien4cloud-yorc-plugin'}, 'pluginBean': {'type': 'string', 'required': True, 'default': 'yorc-orchestrator-factory'}, 'yorc_address_ha': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'download_url': {'get_property': ['SELF', 'download_url']}, 'orchestrator_name': {'get_property': ['SELF', 'name']}, 'pluginId': {'get_property': ['SELF', 'pluginId']}, 'pluginBean': {'get_property': ['SELF', 'pluginBean']}, 'discriminator': {'get_property': ['SELF', 'discriminator']}}, 'implementation': 'playbook/start.yml'}}}}}",0
"{'org.ystia.yorc.alien4cloud.nodes.YorcLocationConfigurator': {'derived_from': 'org.alien4cloud.alien4cloud.config.location.nodes.SimpleLocationConfigurator', 'properties': {'type': {'type': 'string', 'required': True, 'default': 'OpenStack', 'constraints': [{'valid_values': ['Google Cloud', 'AWS', 'OpenStack', 'Slurm', 'Kubernetes', 'HostsPool']}]}}}}",0
"{'org.ystia.yorc.alien4cloud.nodes.YorcAutoconfigResourcesConfigurator': {'derived_from': 'org.alien4cloud.alien4cloud.config.location_resources.autoconfig.nodes.ResourcesConfigurator', 'properties': {'type': {'type': 'string', 'required': True, 'default': 'OpenStack', 'constraints': [{'valid_values': ['Google Cloud', 'AWS', 'OpenStack', 'Slurm', 'Kubernetes', 'HostsPool']}]}}}}",0
"{'org.ystia.yorc.alien4cloud.nodes.YorcOnDemandLocationResourcesConfigurator': {'derived_from': 'org.alien4cloud.alien4cloud.config.location_resources.on_demand.nodes.OnDemandLocationResourcesConfigurator', 'properties': {'type': {'type': 'string', 'required': True, 'default': 'OpenStack', 'constraints': [{'valid_values': ['Google Cloud', 'AWS', 'OpenStack', 'Slurm', 'Kubernetes', 'HostsPool']}]}}}}",0
"{'org.ystia.mysql.linux.bash.nodes.MySQLServer': {'derived_from': 'org.ystia.nodes.DBMS', 'description': 'MySQL Server component for linux', 'tags': {'icon': '/images/mysql_server.jpg'}, 'properties': {'root_password': {'type': 'string', 'description': 'DBMS root password', 'default': 'mysql', 'required': False}, 'port': {'type': 'integer', 'description': 'DBMS port', 'default': 3306, 'constraints': [{'equal': 3306}]}, 'component_version': {'type': 'version', 'description': 'The optional MySQL component’s version.', 'default': 5.6, 'constraints': [{'equal': 5.6}]}, 'repository': {'type': 'string', 'required': True, 'description': 'This property give the opportunity to specify an alternative download repository for this component artifact. It is your responsibility to provide an accessible download url and to store required artifacts on it.\n', 'default': 'http://repo.mysql.com/yum/mysql-5.6-community/el/7/x86_64'}}, 'capabilities': {'host': {'type': 'org.ystia.mysql.pub.capabilities.Container.MySQLServer'}}, 'interfaces': {'Standard': {'create': {'inputs': {'MYSQL_REPO': {'get_property': ['SELF', 'repository']}}, 'implementation': 'scripts/mysql_create.sh'}, 'configure': {'inputs': {'DBMS_ROOT_PASSWORD': {'get_property': ['SELF', 'root_password']}}, 'implementation': 'scripts/mysql_configure.sh'}, 'start': {'implementation': 'scripts/mysql_start.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.mysql.linux.bash.nodes.MySQLDatabase': {'derived_from': 'org.ystia.nodes.Database', 'description': 'Database component for MySQL, on linux', 'tags': {'icon': '/images/mysql_db.jpg'}, 'properties': {'name': {'type': 'string', 'description': 'Database name', 'required': True, 'default': 'DB1'}, 'user': {'type': 'string', 'description': 'DataBase user', 'required': True, 'default': 'db1'}, 'password': {'type': 'string', 'description': 'DataBase user password', 'required': True, 'default': 'secret'}, 'port': {'type': 'integer', 'description': 'DBMS port', 'default': 3306, 'constraints': [{'equal': 3306}]}}, 'capabilities': {'mysql_db_endpoint': {'type': 'org.ystia.mysql.pub.capabilities.Endpoint.MySQLDatabase', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'org.ystia.mysql.pub.capabilities.Container.MySQLServer', 'relationship': 'org.ystia.mysql.linux.bash.relationships.HostedOn.MySQLServer', 'occurrences': [1, 1]}}, {'blockstorage': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.mysql.linux.bash.relationships.DependsOn.MySqlVolume', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'password']}, 'DBMS_ROOT_PASSWORD': {'get_property': ['HOST', 'root_password']}}, 'implementation': 'scripts/mysql_db_create.sh'}, 'configure': {'inputs': {'DB_NAME': {'get_property': ['SELF', 'name']}, 'DB_USER': {'get_property': ['SELF', 'user']}, 'DB_PASSWORD': {'get_property': ['SELF', 'password']}, 'DBMS_ROOT_PASSWORD': {'get_property': ['HOST', 'root_password']}}, 'implementation': 'scripts/mysql_db_configure.sh'}, 'start': {'implementation': 'scripts/mysql_db_start.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.kafka.linux.bash.nodes.Kafka': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Kafka component for linux', 'tags': {'icon': '/images/kafka-icon.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed Kafka component', 'default': '0.10.2.2', 'constraints': [{'valid_values': ['0.10.2.2', '0.11.0.3']}]}, 'scala_version': {'type': 'version', 'description': 'Version of the scala imbedded', 'default': 2.11, 'constraints': [{'valid_values': [2.11, 2.12]}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts. It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'http://mirrors.standaloneinstaller.com/apache/', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'kf_heap_size': {'type': 'string', 'default': '1G', 'description': 'This property allows to set the heap memory size that is allocated to Kafka java process, It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).\n', 'constraints': [{'pattern': '[1-9][0-9]*[kKmMgG]'}]}, 'zk_heap_size': {'type': 'string', 'default': '500M', 'description': 'This property allows to set the heap memory size that is allocated to Zookeeper java process, It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).\n', 'constraints': [{'pattern': '[1-9][0-9]*[kKmMgG]'}]}, 'log_cleaner_enable': {'type': 'boolean', 'default': False, 'description': 'This property allows you to enable the default Kafka log cleaner. The default value is false. The default policy for the cleaner is to delete the log segments older than 7 days.\n'}}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}, 'kafka_home': {'get_operation_output': ['SELF', 'Standard', 'create', 'KAFKA_HOME']}}, 'capabilities': {'host': {'type': 'org.ystia.kafka.pub.capabilities.KafkaHosting', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}, {'filesystem_endpoint': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.kafka.linux.bash.relationships.ConnectsToFilessystem', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'KAFKA_VERSION': {'get_property': ['SELF', 'component_version']}, 'SCALA_VERSION': {'get_property': ['SELF', 'scala_version']}}, 'implementation': 'scripts/kafka_install.sh'}, 'configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}, 'LOG_CLEANER_ENABLE': {'get_property': ['SELF', 'log_cleaner_enable']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'KAFKA_HOME': {'get_attribute': ['SELF', 'kafka_home']}, 'KF_HEAP_SIZE': {'get_property': ['SELF', 'kf_heap_size']}, 'ZK_HEAP_SIZE': {'get_property': ['SELF', 'zk_heap_size']}}, 'implementation': 'scripts/kafka_configure.sh'}, 'start': {'inputs': {'KAFKA_HOME': {'get_attribute': ['SELF', 'kafka_home']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/kafka_start.sh'}, 'stop': {'inputs': {'KAFKA_HOME': {'get_attribute': ['SELF', 'kafka_home']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/kafka_stop.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.kafka.linux.bash.nodes.KafkaTopic': {'derived_from': 'org.ystia.nodes.Root', 'description': 'Kafka topic implementation for linux', 'tags': {'icon': '/images/kafka-topic-icon.png'}, 'properties': {'topic_name': {'type': 'string', 'description': 'Name of this topic', 'required': True, 'constraints': [{'pattern': '[-_A-Za-z0-9]+'}]}, 'partitions': {'type': 'integer', 'description': 'Number of partitions. default is 1 partition.', 'required': False, 'default': 1}, 'replicas': {'type': 'integer', 'description': 'Number of replicas. default is 1 replica.', 'required': False, 'default': 1}, 'min_insync_replicas': {'description': 'When a producer sets request_required_acks to in_syncs, min_insync_replicas specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful. If this minimum cannot be met, then the producer will raise an exception (either NotEnoughReplicas or NotEnoughReplicasAfterAppend). When used together, min_insync_replicas and request_required_acks allow you to enforce greater durability guarantees. A typical scenario would be to create a topic with a replication factor of 3, set min_insync_replicas to 2, and produce with request_required_acks of in_syncs. This will ensure that the producer raises an exception if a majority of replicas do not receive a write.\n', 'type': 'integer', 'required': False, 'default': 1, 'constraints': [{'greater_or_equal': 0}]}, 'retention_minutes': {'description': 'The number of minutes to keep a log file before deleting it. Default value is 7 days.\n', 'type': 'integer', 'required': False, 'default': 10080, 'constraints': [{'greater_or_equal': 1}]}, 'segment_minutes': {'description': ""This configuration controls the period of time after which Kafka will force the log to roll even if the segment file isn't full to ensure that retention can delete or compact old data. Default value is 7 days.\n"", 'type': 'integer', 'required': False, 'default': 10080, 'constraints': [{'greater_or_equal': 1}]}, 'segment_bytes': {'description': 'Segment file size for the log. Default value is 1GB.\n', 'type': 'integer', 'required': False, 'default': 1073741824, 'constraints': [{'greater_or_equal': 1024}]}}, 'capabilities': {'kafka_topic': 'org.ystia.kafka.pub.capabilities.KafkaTopic', 'spark_app_resource': 'org.ystia.kafka.pub.capabilities.SparkEndpoint'}, 'requirements': [{'host': {'capability': 'org.ystia.kafka.pub.capabilities.KafkaHosting', 'relationship': 'org.ystia.kafka.linux.bash.relationships.HostedOnKafka', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'TOPIC_NAME': {'get_property': ['SELF', 'topic_name']}, 'PARTITIONS': {'get_property': ['SELF', 'partitions']}, 'REPLICAS': {'get_property': ['SELF', 'replicas']}, 'MIN_INSYNC_REPLICAS': {'get_property': ['SELF', 'min_insync_replicas']}, 'RETENTION_MINUTES': {'get_property': ['SELF', 'retention_minutes']}, 'SEGMENT_BYTES': {'get_property': ['SELF', 'segment_bytes']}, 'SEGMENT_MINUTES': {'get_property': ['SELF', 'segment_minutes']}}, 'implementation': 'scripts/createKafkaTopic.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.samples.hybrid-demo.cost-computing-job.nodes.CostComputingSingularityJob': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'description': 'TOSCA component to compute price based on the Apache Log Generator sample from Ystia forge (https://github.com/ystia/forge)\n', 'tags': {'icon': '/images/slurm.png'}, 'requirements': [{'elasticsearch': {'capability': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'inputs': {'CC_ES_NODES': {'get_attribute': ['REQ_TARGET', 'elasticsearch', 'api']}}, 'implementation': {'file': 'docker://ystia/compute-apache-logs-ref:latest', 'repository': 'docker', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'org.ystia.flink.linux.bash.nodes.JobManager': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Flink JobManager component for linux', 'tags': {'icon': '/images/flink-icon.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.1.3', 'description': 'Version of the installed Flink component', 'constraints': [{'valid_values': ['1.1.3']}]}, 'jobmanager_rpc_port': {'type': 'integer', 'description': 'The port number of the JobManager\n', 'default': 6123, 'constraints': [{'equal': 6123}]}, 'jobmanager_head_mb': {'type': 'integer', 'description': 'JVM heap size (in megabytes) for the JobManager\n', 'default': '512'}, 'repository': {'type': 'string', 'default': 'http://archive.apache.org/dist/flink', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it.  You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}}, 'attributes': {'dashboard_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8081/']}, 'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}}, 'capabilities': {'jobmanager': {'type': 'org.ystia.flink.pub.capabilities.JobManager'}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'FLINK_REPO': {'get_property': ['SELF', 'repository']}, 'FLINK_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/flink_install.sh'}, 'configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}, 'JOBMANAGER_PORT': {'get_property': ['SELF', 'jobmanager_rpc_port']}, 'JOBMANAGER_HEAP': {'get_property': ['SELF', 'jobmanager_head_mb']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/flink_jm_configure.sh'}, 'start': {'implementation': 'scripts/flink_jm_start.sh'}, 'stop': {'implementation': 'scripts/flink_stop.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.flink.linux.bash.nodes.TaskManager': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Flink TaskManager component for linux', 'tags': {'icon': '/images/flink-icon.png'}, 'properties': {'component_version': {'type': 'version', 'default': '1.1.3', 'description': 'Version of the installed Flink component', 'constraints': [{'valid_values': ['1.1.3', '1.1.4', '1.1.5', '1.2.1', '1.3.2']}]}, 'taskmanager_rpc_port': {'type': 'integer', 'description': 'The task manager’s IPC port (DEFAULT: 0, which lets the OS choose a free port).\n', 'default': 0, 'constraints': [{'equal': 0}]}, 'taskmanager_heap_mb': {'type': 'integer', 'description': 'JVM heap size (in megabytes) for the TaskManagers, which are the parallel workers of the system. This value should be as large as possible. If the cluster is exclusively running Flink, the total amount of available memory per machine minus some memory for the operating system (maybe 1-2 GB) is a good value.\n', 'default': '512'}, 'taskmanager_numberOfTaskSlots': {'type': 'integer', 'description': 'The number of parallel operator or user function instances that a single TaskManager can run. This value is typically proportional to the number of physical CPU cores that the TaskManager’s machine has (e.g., equal to the number of cores, or half the number of cores).\n', 'default': 1}, 'parallelism_default': {'type': 'integer', 'description': 'The default parallelism to use for programs that have no parallelism specified. For setups that have no concurrent jobs running, setting this value to NumTaskManagers * NumSlotsPerTaskManager will cause the system to use all available execution resources for the program’s execution.\n', 'default': 1}, 'taskmanager_tmp_dirs': {'type': 'string', 'description': 'Specifies a list of directories into which Flink writes temporary files when data doesn’t fit into main memory. The paths of the directories need to be separated by ‘:’ (colon character)\n', 'default': '/tmp'}, 'repository': {'type': 'string', 'default': 'http://archive.apache.org/dist/flink', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it.  You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}, {'jobmanager_endpoint': {'capability': 'org.ystia.flink.pub.capabilities.JobManager', 'relationship': 'org.ystia.flink.linux.bash.relationships.TaskManagerToJobManager', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'FLINK_REPO': {'get_property': ['SELF', 'repository']}, 'FLINK_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/flink_install.sh'}, 'configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}, 'TASKMANAGER_PORT': {'get_property': ['SELF', 'taskmanager_rpc_port']}, 'TASKMANAGER_MEM': {'get_property': ['SELF', 'taskmanager_heap_mb']}, 'TASKMANAGER_SLOTS': {'get_property': ['SELF', 'taskmanager_numberOfTaskSlots']}, 'PARALLELISM_DEFAULT': {'get_property': ['SELF', 'parallelism_default']}, 'TASKMANAGER_TMP_DIRS': {'get_property': ['SELF', 'taskmanager_tmp_dirs']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/flink_tm_configure.sh'}, 'start': {'implementation': 'scripts/flink_tm_start.sh'}, 'stop': {'implementation': 'scripts/flink_stop.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.yorc.pub.location.LocationConfig': {'derived_from': 'tosca.nodes.Root', 'description': 'Location configuration configuration for Yorc\n', 'abstract': True, 'properties': {'location_name': {'description': 'Location name', 'type': 'string', 'required': True}}}}",0
"{'org.ystia.yorc.pub.location.GoogleConfig': {'derived_from': 'org.ystia.yorc.pub.location.LocationConfig', 'description': 'Google Compute Engine location configuration for Yorc\n', 'abstract': True, 'properties': {'project': {'description': 'Google Cloud project', 'type': 'string', 'required': True}, 'region': {'description': 'Google Compute Engine region', 'type': 'string', 'required': False}, 'application_credentials': {'description': 'Path to file containing service account private keys in JSON format', 'type': 'string', 'required': False}, 'credentials': {'description': 'Content of file containing service account private keys', 'type': 'string', 'required': False}, 'use_vault': {'description': 'Use vault to reference secrets in configuration', 'type': 'boolean', 'default': True}}, 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.pub.location.OpenStackConfig': {'derived_from': 'org.ystia.yorc.pub.location.LocationConfig', 'description': 'Openstack locations configuration for Yorc\n', 'abstract': True, 'properties': {'auth_url': {'description': 'Authentication url for OpenStack (should be the Keystone endpoint ie: http://your-openstack:5000/v2.0)', 'type': 'string', 'required': True}, 'tenant_name': {'description': 'OpenStack tenant name (Identity v2)', 'type': 'string', 'required': False}, 'project_name': {'description': 'OpenStack project name (Identity v3)', 'type': 'string', 'required': False}, 'project_id': {'description': 'OpenStack project ID (Identity v3)', 'type': 'string', 'required': False}, 'user_domain_name': {'description': 'OpenStack domain name where the user is located (Identity v3)', 'type': 'string', 'required': False}, 'user_name': {'description': 'OpenStack user name', 'type': 'string', 'required': True}, 'password': {'description': 'OpenStack password', 'type': 'string', 'required': True}, 'provisioning_over_fip_allowed': {'type': 'boolean', 'description': 'This allows to perform the provisioning of a Compute over the associated floating IP if it exists.', 'required': False, 'default': False}, 'private_network_name': {'description': 'Name of private network to use as primary administration network between Yorc and Compute instances. It should be a private network accessible by this instance of Yorc.', 'type': 'string'}, 'default_security_groups': {'description': 'Default security groups to be used when creating a Compute instance', 'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'use_vault': {'description': 'Use vault to reference secrets in configuration', 'type': 'boolean', 'default': True}}, 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.pub.location.AWSConfig': {'derived_from': 'org.ystia.yorc.pub.location.LocationConfig', 'description': 'AWS location configuration for Yorc\n', 'abstract': True, 'properties': {'access_key': {'description': 'AWS access key credentials', 'type': 'string', 'required': True}, 'secret_key': {'description': 'AWS secret key credentials', 'type': 'string', 'required': True}, 'region': {'description': 'AWS region', 'type': 'string', 'required': True}, 'use_vault': {'description': 'Use vault to reference secrets in configuration', 'type': 'boolean', 'default': True}}, 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.pub.location.KubernetesConfig': {'derived_from': 'org.ystia.yorc.pub.location.LocationConfig', 'description': 'Kubernetes location configuration for Yorc\n', 'abstract': True, 'properties': {'master_url': {'description': 'URL of the HTTP API of Kubernetes is exposed. Format: https://<host>:<port>', 'type': 'string', 'required': True}, 'ca': {'description': 'Trusted root certificates for server', 'type': 'string'}, 'cert': {'description': 'The TLS client certificate used for authentication', 'type': 'string'}, 'key': {'description': 'The TLS client key used for authentication', 'type': 'string'}, 'insecure': {'description': 'Server should be accessed without verifying the TLS certificate (testing only)', 'type': 'boolean', 'default': False}}, 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.pub.location.HostsPoolConfig': {'derived_from': 'org.ystia.yorc.pub.location.LocationConfig', 'description': 'Hosts Pool location configuration for Yorc\n', 'abstract': True, 'properties': {'hosts': {'type': 'string', 'description': 'Yaml description of Hosts in the Pool'}, 'use_vault': {'description': 'Use vault to reference secrets in configuration', 'type': 'boolean', 'default': True}}, 'requirements': [{'yorc': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc'}}]}}",0
"{'org.ystia.yorc.pub.ansible.Config': {'derived_from': 'tosca.nodes.Root', 'description': 'Ansible configuration for Yorc\n', 'abstract': True, 'properties': {'use_openssh': {'description': 'Use OpenSSH instead of Paramiko', 'type': 'boolean', 'default': False}, 'inventory': {'description': 'Variables to add to Ansible inventory', 'type': 'list', 'entry_schema': {'type': 'org.ystia.yorc.datatypes.ansible.inventory.Section'}, 'required': False}, 'host_operations_allowed': {'type': 'boolean', 'description': 'Allow to execute operations on orchestrator host', 'default': False}}, 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.pub.nodes.YorcServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': 'yorcicon.png'}, 'abstract': True, 'properties': {'download_url': {'description': 'The URL used to download the Yorc archive.', 'type': 'string', 'required': True, 'default': 'https://dl.bintray.com/ystia/yorc-engine/releases/yorc-3.1.0.tgz'}, 'install_dir': {'description': 'Installation directory for the Yorc binary', 'type': 'string', 'required': True, 'default': '/usr/local/bin'}, 'config_dir': {'description': 'Path to the configuration directory of Yorc', 'type': 'string', 'required': True, 'default': '/etc/yorc'}, 'data_dir': {'description': 'Yorc home dir', 'type': 'string', 'required': True, 'default': '/var/yorc'}, 'resources_prefix': {'type': 'string', 'description': 'Prefix used to create resources (like Computes and so on)', 'default': 'yorc-'}, 'private_key_content': {'description': 'Content of the default ssh private key used to connect on computes. Stored as ~/.ssh/yorc.pem', 'type': 'string'}, 'ca_pem': {'description': 'PEM-encoded certificate authority content, used to check the authenticity of client and server connections', 'type': 'string', 'required': False}, 'ca_key': {'description': 'Certificate authority private key content', 'type': 'string', 'required': False}, 'ca_passphrase': {'description': 'Certificate authority private key passphrase', 'type': 'string', 'required': False}}, 'requirements': [{'consul': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.ystia.yorc.pub.relationships.JoinConsulAgent', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.pub.relationships.ConnectsToVaultServer', 'occurrences': [0, 1]}}, {'ansible': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.ansible.pub.relationships.DependsOnAnsibleRuntime', 'occurrences': [1, 1]}}, {'terraform': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime', 'occurrences': [1, 1]}}, {'work_directory': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.yorc.pub.relationships.DependsOnFilessystem', 'occurrences': [0, 1]}}], 'capabilities': {'rest': {'type': 'org.ystia.yorc.pub.capabilities.YorcRestAPI'}, 'config': {'type': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer'}}}}",0
"{'org.ystia.docker.ansible.nodes.Docker': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/docker-icon.png'}, 'properties': {'docker_version': {'type': 'string', 'default': '', 'required': False, 'description': 'docker package version\n'}, 'repository_url': {'type': 'string', 'required': False, 'description': ""repository url to install docker from. This property is optional and the default value is 'https://download.docker.com/linux/centos/7/$basearch/stable' on Redhat systems and 'deb https://download.docker.com/linux/ubuntu xenial stable' on Debian ones.\n"", 'constraints': [{'pattern': '.*https?://.*'}]}, 'docker_gpgkey': {'type': 'string', 'required': False, 'description': ""gpg key url to use for docker package installation. This property is optional and the default value is 'https://download.docker.com/linux/centos/gpg' on Redhat systems and 'https://download.docker.com/linux/ubuntu/gpg' on Debian ones.\n"", 'constraints': [{'pattern': '.*https?://.*'}]}}, 'capabilities': {'host': 'org.alien4cloud.extended.container.capabilities.ApplicationHost'}, 'interfaces': {'Standard': {'create': {'inputs': {'DOCKER_VERSION': {'get_property': ['SELF', 'docker_version']}, 'REPOSITORY_URL': {'get_property': ['SELF', 'repository_url']}, 'DOCKER_GPGKEY': {'get_property': ['SELF', 'docker_gpgkey']}}, 'implementation': 'playbooks/create.yaml'}, 'configure': {'implementation': 'playbooks/configure.yaml'}, 'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml'}}}}",0
"{'org.ystia.kubernetes.pub.nodes.KubernetesMaster': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/kubernetes-master-icon.png'}, 'description': 'A KubernetesMaster contains Kubernetes services like the API server, the podmaster and so on.\n', 'capabilities': {'api_server': 'org.ystia.kubernetes.pub.capabilities.KubernetesAPIServer', 'app_host': 'org.ystia.kubernetes.pub.capabilities.AppHosting'}}}",0
"{'org.ystia.kubernetes.pub.nodes.KubernetesWorker': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/kubernetes-worker-icon.png'}, 'description': 'A KubernetesWorker contains Kubernetes services used to run pods.\n', 'requirements': [{'api_server': {'capability': 'org.ystia.kubernetes.pub.capabilities.KubernetesAPIServer', 'node': 'org.ystia.kubernetes.pub.nodes.KubernetesMaster', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.kubernetes.pub.nodes.KubernetesApp': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/kubernetes-app-icon.png'}, 'properties': {'specs': {'type': 'list', 'description': ""List of URLs that will be applied in order using 'kubectl apply -f <url>'\n"", 'required': True, 'entry_schema': {'type': 'string'}}}, 'requirements': [{'app_host': {'capability': 'org.ystia.kubernetes.pub.capabilities.AppHosting', 'node': 'org.ystia.kubernetes.pub.nodes.KubernetesMaster', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.ystia.elasticsearch.linux.bash.nodes.Elasticsearch': {'derived_from': 'org.ystia.elasticsearch.pub.nodes.AbstractElasticSearch', 'description': 'Elasticsearch component for linux', 'properties': {'component_version': {'type': 'version', 'description': 'The installed Elasticsearch version', 'default': '6.2.2', 'constraints': [{'valid_values': ['5.6.8', '6.2.2']}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it.  You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/elasticsearch', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'curator_repository_url': {'type': 'string', 'default': 'https://packages.elastic.co/curator/5/centos/7', 'description': 'The yum repository to use to install the package elasticsearch-curator.\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'curator_repository_key_url': {'type': 'string', 'default': 'https://packages.elastic.co/GPG-KEY-elasticsearch', 'description': 'This property give the opportunity to specify an alternative URL to download public key used to install Elastic curator.\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'heap_size': {'type': 'string', 'default': '2G', 'description': 'This property allows to set the heap memory size that is allocated to Elasticsearch java process, It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).\n', 'constraints': [{'pattern': '[1-9][0-9]*[kKmMgG]'}]}, 'number_of_shards': {'type': 'integer', 'default': 5, 'required': False, 'description': 'Set the number of shards (splits) of an index (5 by default)', 'constraints': [{'greater_than': 0}]}, 'number_of_replicas': {'type': 'integer', 'default': 1, 'required': False, 'description': 'Set the number of replicas (additional copies) of an index (1 by default)', 'constraints': [{'greater_or_equal': 0}]}, 'nb_close_older_than': {'type': 'integer', 'required': False, 'description': 'Choose the number to match with ""unit_close_older_than"" to close the indices older than ""nb_close_older_than"" ""unit_close_older_than"" (Default: do nothing)\n', 'constraints': [{'greater_or_equal': 1}]}, 'unit_close_older_than': {'type': 'string', 'required': False, 'description': 'Choose the Unit to match with ""nb_close_older_than"" to close the indices older than ""nb_close_older_than"" ""unit_close_older_than"" (Default: do nothing)\n', 'constraints': [{'valid_values': ['days', 'months', 'years']}]}, 'nb_delete_older_than': {'type': 'integer', 'required': False, 'description': 'Choose the number to match with ""unit_delete_older_than"" to delete the indices older than ""nb_delete_older_than"" ""unit_delete_older_than"" (Default: do nothing)\n', 'constraints': [{'greater_or_equal': 1}]}, 'unit_delete_older_than': {'type': 'string', 'required': False, 'description': 'Choose the Unit to match with ""nb_delete_older_than"" to delete the indices older than ""nb_delete_older_than"" ""unit_delete_older_than"" (Default: do nothing)\n', 'constraints': [{'valid_values': ['days', 'months', 'years']}]}}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}, 'api': {'concat': [{'get_attribute': ['SELF', 'search_resource', 'ip_address']}, ':', {'get_property': ['SELF', 'search_resource', 'port']}]}}, 'capabilities': {'search_resource': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}, {'filesystem_endpoint': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.elasticsearch.linux.bash.relationships.ConnectsToFilessystem', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'ES_VERSION': {'get_property': ['SELF', 'component_version']}, 'CURATOR_REPO_URL': {'get_property': ['SELF', 'curator_repository_url']}, 'CURATOR_REPO_KEY_URL': {'get_property': ['SELF', 'curator_repository_key_url']}}, 'implementation': 'scripts/elasticsearch_install.sh'}, 'configure': {'inputs': {'ES_VERSION': {'get_property': ['SELF', 'component_version']}, 'ELASTICSEARCH_HEAP_SIZE': {'get_property': ['SELF', 'heap_size']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'ip_address': {'get_attribute': ['SELF', 'ip_address']}, 'cluster_name': {'get_property': ['SELF', 'search_resource', 'cluster_name']}, 'number_of_shards': {'get_property': ['SELF', 'number_of_shards']}, 'number_of_replicas': {'get_property': ['SELF', 'number_of_replicas']}, 'nb_close_older_than': {'get_property': ['SELF', 'nb_close_older_than']}, 'unit_close_older_than': {'get_property': ['SELF', 'unit_close_older_than']}, 'nb_delete_older_than': {'get_property': ['SELF', 'nb_delete_older_than']}, 'unit_delete_older_than': {'get_property': ['SELF', 'unit_delete_older_than']}}, 'implementation': 'scripts/elasticsearch_configure.sh'}, 'start': {'inputs': {'ES_VERSION': {'get_property': ['SELF', 'component_version']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'number_of_replicas': {'get_property': ['SELF', 'number_of_replicas']}, 'number_of_shards': {'get_property': ['SELF', 'number_of_shards']}}, 'implementation': 'scripts/elasticsearch_start.sh'}, 'stop': {'implementation': 'scripts/elasticsearch_stop.sh'}, 'delete': {'inputs': {'ES_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/elasticsearch_delete.sh'}}, 'custom': {'update_replicas': {'inputs': {'number_of_shards': {'get_property': ['SELF', 'number_of_shards']}, 'nb_replicas': {'type': 'integer', 'description': 'Number of replicas for indexes', 'required': True}, 'index': {'type': 'string', 'description': 'The name of the index to be updated (specify no value for all indexes)', 'required': False}, 'order': {'type': 'integer', 'description': 'Priority of the interpretation of this replicas value for indexes (must be greater than zero)', 'required': True, 'constraints': [{'greater_than': 0}]}}, 'implementation': 'scripts/elasticsearch_updateReplicas.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'config_file': {'file': 'config/elasticsearch.yml', 'type': 'org.ystia.elasticsearch.linux.bash.artifacts.elasticsearchConfig'}}, {'curator_cron_tab': {'file': 'config/curator-crontab', 'type': 'tosca.artifacts.File'}}, {'curator_action_file': {'file': 'config/curator-action.yaml', 'type': 'tosca.artifacts.File'}}, {'curator_config_file': {'file': 'config/curator.yml', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.ystia.kubernetes.linux.ansible.nodes.KubernetesMaster': {'derived_from': 'org.ystia.kubernetes.pub.nodes.KubernetesMaster', 'tags': {'icon': '/images/kubernetes-master-icon.png'}, 'properties': {'component_version': {'type': 'version', 'required': False, 'default': '1.17', 'constraints': [{'greater_or_equal': '1.17'}]}, 'pod_network': {'type': 'string', 'default': 'calico', 'constraints': [{'valid_values': ['calico', 'cilium', 'flannel', 'weave']}]}, 'cfssl_download_url': {'type': 'string', 'default': 'https://pkg.cfssl.org/R1.2'}, 'ca_certificate': {'type': 'string', 'default': '', 'required': False, 'description': 'This property should contains a PEM-encoded Certificate Authority (CA) certificate.\nIf not provided along with a ca_key a self-signed certificate and key will be automatically created.\nIt should allows to sign clients, servers and peers certification requests.\nIt will be used a Root CA for etcd and the Kubernetes API server.\n'}, 'ca_key': {'type': 'string', 'default': '', 'required': False, 'description': 'This property should contains a PEM-encoded Certificate Authority (CA) key.\nIf not provided along with a ca_certificate a self-signed certificate and key will be automatically created.\nIt should allows to sign clients, servers and peers certification requests.\nIt will be used a Root CA for etcd and the Kubernetes API server.\n'}, 'hosts_pods': {'type': 'boolean', 'default': False, 'required': False, 'description': 'Whever or not a Kubernetes master node can hosts PODs. This is useful when deploying a test cluster with only one node, but this is not recommended for production.\n'}, 'kube_yum_repo': {'type': 'string', 'default': 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64', 'required': True}, 'kube_yum_repo_gpg_keys': {'type': 'string', 'default': 'https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg', 'required': True}}, 'attributes': {'kubernetes_selected_version': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBERNETES_SELECTED_VERSION']}, 'api_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'API_URL']}, 'admin_token': {'get_operation_output': ['SELF', 'Standard', 'configure', 'ADMIN_TOKEN']}, 'ca_cert_hash': {'get_operation_output': ['SELF', 'Standard', 'configure', 'CA_CERT_HASH']}, 'pods_cidr': {'get_operation_output': ['SELF', 'Standard', 'configure', 'POD_CIDR']}, 'node_name': {'get_operation_output': ['SELF', 'Standard', 'configure', 'node_name']}, 'lb_ip': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_IP']}, 'lb_port': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_PORT']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['centos', 'rhel']}}]}}]}}}, {'load_balancer': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.LoadBalancer', 'relationship': 'org.ystia.kubernetes.linux.ansible.relationships.UseLoadBalancer', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'inputs': {'PRIVATE_IP': {'get_attribute': ['HOST', 'private_address']}, 'PUBLIC_IP': {'get_attribute': ['HOST', 'public_address']}, 'LB_IP': {'get_attribute': ['SELF', 'lb_ip']}, 'LB_PORT': {'get_attribute': ['SELF', 'lb_port']}}, 'create': {'inputs': {'CFSSL_DOWNLOAD_URL': {'get_property': ['SELF', 'cfssl_download_url']}, 'CA_CERT': {'get_property': ['SELF', 'ca_certificate']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'KUBE_YUM_REPO': {'get_property': ['SELF', 'kube_yum_repo']}, 'KUBE_YUM_REPO_GPG_KEYS': {'get_property': ['SELF', 'kube_yum_repo_gpg_keys']}, 'KUBE_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'playbooks/master/create.yaml'}, 'configure': {'inputs': {'API_SERVER_PORT': {'get_property': ['SELF', 'api_server', 'port']}, 'pod_network': {'get_property': ['SELF', 'pod_network']}, 'hosts_pods': {'get_property': ['SELF', 'hosts_pods']}, 'KUBERNETES_SELECTED_VERSION': {'get_attribute': ['SELF', 'kubernetes_selected_version']}}, 'implementation': 'playbooks/master/configure.yaml'}, 'start': {'implementation': 'playbooks/master/start.yaml'}, 'stop': {'implementation': 'playbooks/commons/kubeadm/stop.yaml'}, 'delete': {'implementation': 'playbooks/commons/kubeadm/delete.yaml'}}}}}",unknown
"{'org.ystia.kubernetes.linux.ansible.nodes.KubernetesWorker': {'derived_from': 'org.ystia.kubernetes.pub.nodes.KubernetesWorker', 'tags': {'icon': '/images/kubernetes-master-icon.png'}, 'properties': {'component_version': {'type': 'version', 'required': False, 'default': '1.17', 'constraints': [{'greater_or_equal': '1.17'}]}, 'kube_yum_repo': {'type': 'string', 'default': 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64', 'required': True}, 'kube_yum_repo_gpg_keys': {'type': 'string', 'default': 'https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg', 'required': True}}, 'attributes': {'node_name': {'get_operation_output': ['SELF', 'Standard', 'create', 'node_name']}, 'lb_ip': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_IP']}, 'lb_port': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_PORT']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['centos', 'rhel']}}]}}]}}}, {'api_server': {'capability': 'org.ystia.kubernetes.pub.capabilities.KubernetesAPIServer', 'node': 'org.ystia.kubernetes.linux.ansible.nodes.KubernetesMaster', 'relationship': 'org.ystia.kubernetes.linux.ansible.relationships.JoinCluster', 'occurrences': [1, 1]}}, {'load_balancer': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.LoadBalancer', 'relationship': 'org.ystia.kubernetes.linux.ansible.relationships.UseLoadBalancer', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'inputs': {'PRIVATE_IP': {'get_attribute': ['HOST', 'private_address']}, 'LB_IP': {'get_attribute': ['SELF', 'lb_ip']}, 'LB_PORT': {'get_attribute': ['SELF', 'lb_port']}}, 'create': {'inputs': {'KUBE_YUM_REPO': {'get_property': ['SELF', 'kube_yum_repo']}, 'KUBE_YUM_REPO_GPG_KEYS': {'get_property': ['SELF', 'kube_yum_repo_gpg_keys']}, 'KUBE_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'playbooks/worker/create.yaml'}, 'start': {'implementation': 'playbooks/commons/kubeadm/start.yaml'}, 'stop': {'implementation': 'playbooks/commons/kubeadm/stop.yaml'}, 'delete': {'implementation': 'playbooks/commons/kubeadm/delete.yaml'}}}}}",unknown
"{'org.ystia.kubernetes.linux.ansible.nodes.KubernetesMasterAPI': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This component is a dummy component allowing to workaround the chicken & egg issue on Kubernetes API and LoadBalancer on HA env that depends on each other', 'capabilities': {'api_server': 'org.ystia.kubernetes.pub.capabilities.KubernetesAPIServer'}}}",0
"{'org.ystia.kubernetes.linux.ansible.nodes.KubernetesDashBoard': {'derived_from': 'org.ystia.kubernetes.linux.ansible.nodes.KubernetesApp', 'tags': {'icon': '/images/kubernetes-dashboard-icon.png'}, 'properties': {'specs': {'type': 'list', 'description': ""List of URLs that will be applied in order using 'kubectl apply -f <url>'\n"", 'required': True, 'entry_schema': {'type': 'string'}, 'default': ['https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc5/aio/deploy/recommended.yaml', 'https://gist.githubusercontent.com/loicalbertin/1a7c1bebf1854924bf285f0553cde268/raw/f2df07f978cb390902908247a4e8e73e5d3efafa/KubernetesDashboardAdminUserSA.yaml']}, 'service_type': {'type': 'string', 'default': 'default', 'description': 'How the dashboard service is exposed\n', 'constraints': [{'valid_values': ['default', 'NodePort', 'LoadBalancer']}]}, 'expose_admin_token': {'type': 'boolean', 'default': False, 'required': False}}, 'attributes': {'admin_token': {'get_operation_output': ['SELF', 'Standard', 'start', 'admin_token']}, 'url': {'get_operation_output': ['SELF', 'Standard', 'start', 'url']}}, 'interfaces': {'Standard': {'inputs': {'specs': {'get_property': ['SELF', 'specs']}, 'MASTER_PRIVATE_IP': {'get_attribute': ['HOST', 'private_address']}, 'MASTER_PUBLIC_IP': {'get_attribute': ['HOST', 'public_address']}}, 'create': 'playbooks/apps/dashboard/create.yaml', 'start': {'inputs': {'service_type': {'get_property': ['SELF', 'service_type']}, 'expose_admin_token': {'get_property': ['SELF', 'expose_admin_token']}}, 'implementation': 'playbooks/apps/dashboard/start.yaml'}}}}}",0
"{'org.ystia.kubernetes.linux.ansible.nodes.KubernetesApp': {'derived_from': 'org.ystia.kubernetes.pub.nodes.KubernetesApp', 'tags': {'icon': '/images/kubernetes-app-icon.png'}, 'properties': None, 'interfaces': {'Standard': {'inputs': {'specs': {'get_property': ['SELF', 'specs']}, 'MASTER_PRIVATE_IP': {'get_attribute': ['HOST', 'private_address']}, 'MASTER_PUBLIC_IP': {'get_attribute': ['HOST', 'public_address']}}, 'configure': 'playbooks/apps/commons/configure.yaml', 'delete': 'playbooks/apps/commons/delete.yaml'}}}}",0
"{'org.ystia.docker.containers.docker.generic.nodes.GenericContainer': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'auto_remove': {'type': 'boolean', 'description': 'enable auto-removal of the container on daemon side when the container\'s process exits. This property is incompatible with a ""restart_policy"" set to ""on-failure"", ""unless-stopped"" or ""always"".\n', 'default': False}, 'cleanup': {'type': 'boolean', 'description': 'Use with detach=false to remove the container after successful execution.\n', 'default': False}, 'detach': {'type': 'boolean', 'description': 'Enable detached mode to leave the container running in background. If disabled, the task will reflect the status of the container run (failed if the command failed).\n', 'default': True}, 'exposed_ports': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of additional container ports which informs Docker that the container listens on the specified network ports at runtime. If the port is already exposed using EXPOSE in a Dockerfile, it does not need to be exposed again.\n', 'required': False}, 'image': {'type': 'string', 'description': ""Repository path and tag used to create the container. If an image is not found or pull is true, the image will be pulled from the registry. If no tag is included, 'latest' will be used.\n"", 'required': True}, 'keep_volumes': {'type': 'boolean', 'description': 'Retain volumes associated with a removed container.\n', 'default': True}, 'published_ports': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of ports to publish from the container to the host.\nUse docker CLI syntax: 8000, 9000:8000, or 0.0.0.0:9000:8000, where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.\nContainer ports must be exposed either in the Dockerfile or via the expose option.\nA value of all will publish all exposed container ports to random host ports, ignoring any other mappings.\n', 'required': False}, 'restart_policy': {'type': 'string', 'constraints': [{'valid_values': ['no', 'on-failure', 'always', 'unless-stopped']}], 'default': 'no'}, 'shm_size': {'type': 'scalar-unit.size', 'description': 'Size of /dev/shm, shared memory used by the container.\nIf omitted, the system uses 64 MB.\n', 'constraints': [{'greater_or_equal': '0 B'}], 'required': False}, 'user': {'type': 'string', 'description': 'Username or UID (format: <name|uid>[:<group|gid>])', 'required': False}, 'volumes': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of volumes to mount within the container.\nUse docker CLI-style syntax: /host:/container[:mode]\nYou can specify a read mode for the mount with either ro or rw.\nSELinux hosts can additionally use z or Z to use a shared or private label for the volume.\n', 'required': False}, 'workdir': {'type': 'string', 'description': 'working directory inside the container', 'required': False}}, 'attributes': {'container_id': {'get_operation_output': ['SELF', 'Standard', 'create', 'CONTAINER_ID']}}, 'interfaces': {'Standard': {'inputs': {'CONTAINER_ID': {'get_attribute': ['SELF', 'container_id']}, 'AUTO_REMOVE': {'get_property': ['SELF', 'auto_remove']}, 'CLEANUP': {'get_property': ['SELF', 'cleanup']}, 'CPU_SHARE': {'get_property': ['SELF', 'cpu_share']}, 'DETACH': {'get_property': ['SELF', 'detach']}, 'ENV_VARS': {'get_property': ['SELF', 'docker_env_vars']}, 'EXPOSED_PORTS': {'get_property': ['SELF', 'exposed_ports']}, 'IMAGE': {'get_property': ['SELF', 'image']}, 'KEEP_VOLUMES': {'get_property': ['SELF', 'keep_volumes']}, 'MEM_SHARE': {'get_property': ['SELF', 'mem_share']}, 'MEM_SHARE_LIMIT': {'get_property': ['SELF', 'mem_share_limit']}, 'PUBLISHED_PORTS': {'get_property': ['SELF', 'published_ports']}, 'RESTART_POLICY': {'get_property': ['SELF', 'restart_policy']}, 'SHM_SIZE': {'get_property': ['SELF', 'shm_size']}, 'USER': {'get_property': ['SELF', 'user']}, 'VOLUMES': {'get_property': ['SELF', 'volumes']}, 'WORKDIR': {'get_property': ['SELF', 'workdir']}}, 'create': {'implementation': 'playbooks/create.yaml'}, 'start': {'implementation': 'playbooks/start.yaml'}, 'stop': {'implementation': 'playbooks/stop.yaml'}, 'delete': {'implementation': 'playbooks/delete.yaml'}}}}}",unknown
"{'org.ystia.ansible.linux.ansible.nodes.AnsibleRuntime': {'derived_from': 'org.ystia.ansible.pub.nodes.AnsibleRuntime', 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERSION': {'get_property': ['SELF', 'component_version']}, 'ANSIBLE_EXTRA_PACKAGE_REPOSITORY': {'get_property': ['SELF', 'extra_package_repository_url']}}, 'implementation': 'playbooks/create.yml'}}}}}",0
"{'org.ystia.terraform.linux.terraform.nodes.TerraformRuntime': {'derived_from': 'org.ystia.terraform.pub.nodes.TerraformRuntime', 'interfaces': {'Standard': {'inputs': {'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}, 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'PLUGINS_DIR': {'get_property': ['SELF', 'plugins_dir']}, 'PLUGINS_DOWNLOAD_URLS': {'get_property': ['SELF', 'plugins_download_urls']}}, 'create': 'playbooks/create.yml', 'delete': 'playbooks/delete.yml'}}}}",0
"{'org.ystia.nifi.linux.bash.nodes.NiFi': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Apache NiFi component which enables the automation of data flow between systems', 'tags': {'icon': '/images/nifi.png'}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}, 'nifi_home': {'get_operation_output': ['SELF', 'Standard', 'create', 'NIFI_HOME']}, 'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8080/nifi/']}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed NiFi component', 'default': '1.6.0', 'constraints': [{'valid_values': ['1.6.0']}]}, 'install_directory': {'type': 'string', 'default': '~/nifi', 'description': 'Home directory of NiFi installation'}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts. It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'http://archive.apache.org/dist/nifi/1.6.0', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1], 'node_filter': {'properties': [{'version': {'equal': 8}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'NIFI_VERSION': {'get_property': ['SELF', 'component_version']}, 'NIFI_INSTALL_DIR': {'get_property': ['SELF', 'install_directory']}, 'REPOSITORY': {'get_property': ['SELF', 'repository']}}, 'implementation': 'scripts/nifi_install.sh'}, 'configure': {'inputs': {'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'NIFI_HOME': {'get_attribute': ['SELF', 'nifi_home']}, 'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/nifi_configure.sh'}, 'start': {'implementation': 'scripts/nifi_start.sh'}, 'stop': {'implementation': 'scripts/nifi_stop.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.haproxy.linux.bash.nodes.HAProxy': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'HAProxy Server component for linux', 'tags': {'icon': '/images/logo.png'}, 'capabilities': {'host': {'type': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy'}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/haproxy/create.sh'}, 'configure': {'implementation': 'scripts/haproxy/configure.sh'}, 'start': {'implementation': 'scripts/haproxy/start.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.haproxy.linux.bash.nodes.HAProxyHTTP': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'HAProxy Server for HTTP connection on linux', 'tags': {'icon': '/images/logo.png'}, 'properties': {'port': {'type': 'integer', 'required': True, 'description': 'Port number for mode HTTP'}}, 'requirements': [{'host': {'capability': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/haproxy_http/configure.sh'}, 'start': {'implementation': 'scripts/haproxy/reload.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.haproxy.linux.bash.nodes.HAProxyTCP': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'HAProxy Server for TCP connexion on linux', 'tags': {'icon': '/images/logo.png'}, 'properties': {'port': {'type': 'integer', 'required': True, 'description': 'Port number for mode TCP'}}, 'capabilities': {'app_endpoint': 'tosca.capabilities.Endpoint'}, 'requirements': [{'host': {'capability': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 'unbounded']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'scripts/haproxy_tcp/configure.sh'}, 'start': {'implementation': 'scripts/haproxy/reload.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.kibana.linux.bash.nodes.Kibana': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Kibana component from Elastic Stack for linux', 'tags': {'icon': '/images/kibana-icon.png'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':5601/app/kibana#/dashboards']}, 'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed Kibana component', 'default': '6.2.2', 'constraints': [{'valid_values': ['5.6.8', '6.2.2']}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts. It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/kibana', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'es_heap_size': {'type': 'string', 'default': '2G', 'description': 'This property allows to set the heap memory size that is allocated to Elasticsearch client node java process, It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).\n', 'constraints': [{'pattern': '[1-9][0-9]*[kKmMgG]'}]}}, 'capabilities': {'host': {'type': 'org.ystia.kibana.pub.capabilities.DashboardHosting', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}, {'search_endpoint': {'capability': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint', 'relationship': 'org.ystia.kibana.linux.bash.relationships.ConnectsKibanaToElasticsearch', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'KBN_VERSION': {'get_property': ['SELF', 'component_version']}, 'REPOSITORY': {'get_property': ['SELF', 'repository']}}, 'implementation': 'scripts/kibana_install.sh'}, 'configure': {'inputs': {'KBN_VERSION': {'get_property': ['SELF', 'component_version']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/kibana_configure.sh'}, 'start': {'inputs': {'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/kibana_start.sh'}, 'stop': {'implementation': 'scripts/kibana_stop.sh'}, 'delete': {'inputs': {'KBN_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/kibana_delete.sh'}}, 'custom': {'load_dashboard': {'inputs': {'url': {'type': 'string', 'description': 'URL of the dashboard to upload and import in Kibana', 'required': True}}, 'implementation': 'scripts/load_dashboard.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'plugins': {'file': 'plugins', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.ystia.kibana.linux.bash.nodes.KibanaDashboard': {'derived_from': 'org.ystia.nodes.Root', 'description': 'Default Dashboard component hosted on Kibana', 'tags': {'icon': '/images/chart-icon.png'}, 'requirements': [{'host': {'capability': 'org.ystia.kibana.pub.capabilities.DashboardHosting', 'relationship': 'org.ystia.kibana.linux.bash.relationships.DashboardHostedOnKibana', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/load_dashboard.sh'}, 'custom': {'update_dashboard': {'inputs': {'url': {'type': 'string', 'description': 'URL of the dashboard to upload to update the current one in Kibana', 'required': True}}, 'implementation': 'scripts/load_dashboard.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'dashboard_file': {'file': 'dashboards/kdb_default.json', 'type': 'org.ystia.kibana.pub.artifacts.Dashboard'}}]}}",0
"{'org.ystia.kibana.linux.bash.nodes.BeatsDashboards': {'derived_from': 'org.ystia.nodes.Root', 'description': 'Dashboard component for Beats components hosted on Kibana', 'tags': {'icon': '/images/chart-icon.png'}, 'requirements': [{'host': {'capability': 'org.ystia.kibana.pub.capabilities.DashboardHosting', 'relationship': 'org.ystia.kibana.linux.bash.relationships.BeatsDashboardsHostedOnKibana', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/load_beats_dashboards.sh'}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'dashboards_zip': {'file': 'dashboards/beats_dashboards.zip', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.nfs.linux.ansible.nodes.NFSServer': {'derived_from': 'org.ystia.nfs.pub.nodes.NFSServer', 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/create_server.yml'}, 'stop': {'implementation': 'playbooks/stop_server.yml'}}}}}",0
"{'org.ystia.nfs.linux.ansible.nodes.NFSClient': {'derived_from': 'org.ystia.nfs.pub.nodes.NFSClient', 'interfaces': {'Standard': {'inputs': {'DIRECTORY': {'get_property': ['SELF', 'location']}}, 'create': {'implementation': 'playbooks/create_client.yml'}}}, 'requirements': [{'partition': {'capability': 'org.ystia.nfs.pub.capabilities.NFSServer', 'relationship': 'org.ystia.nfs.linux.ansible.relationships.JoinNFSServer', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.ssl.ansible.certificates.nodes.SSLCertificateGenerator': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/icons/ssl-certificate.png'}, 'properties': {'common_name': {'type': 'string', 'description': 'Certificate common name'}, 'key_path': {'type': 'string', 'description': 'Path of a directory where private keys should be stored.'}, 'certificate_path': {'type': 'string', 'description': 'Path of a directory where certificates should be stored.'}, 'linux_owner': {'type': 'string', 'description': 'Linux user that should be the owner of the certificates and keys. This user should have rights to write on certificate_path and key_path. By default it is the user used to connect to the machine.\n', 'required': False, 'default': ''}, 'key_name': {'type': 'string', 'required': False, 'description': ""Name including extention of the private key file. By default it will be the node template within the topology + '.key'"", 'default': ''}, 'certificate_name': {'type': 'string', 'required': False, 'description': ""Name including extention of the certificate file. By default it will be the node template within the topology + '.pem'"", 'default': ''}, 'private_key': {'type': 'string', 'required': False, 'description': 'Content of a private key to use to generate the certificate', 'default': ''}, 'extra_sub_alt_name': {'type': 'string', 'required': False, 'default': '', 'description': ""Optional coma separated list of subject alternative names (format is 'IP:<An IP Address>,DNS:<A DNS Name>')""}, 'extended_key_usage': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'Additional restrictions (e.g. client authentication, server authentication) on the allowed purposes for which the public key may be used.', 'required': False, 'default': []}, 'ca_key': {'type': 'string', 'description': 'Private key of the Certificate Authority', 'required': True}, 'ca_certificate': {'type': 'string', 'description': 'Certificate Authority certificate', 'required': True}, 'ca_passphrase': {'type': 'string', 'description': 'Pass pharse for the Certificate Authority private key', 'default': '', 'required': False}}, 'interfaces': {'Standard': {'create': 'playbooks/create.yml', 'configure': {'inputs': {'KEY_NAME': {'get_property': ['SELF', 'key_name']}, 'CERTIFICATE_NAME': {'get_property': ['SELF', 'certificate_name']}, 'KEY_PATH': {'get_property': ['SELF', 'key_path']}, 'CERTIFICATE_PATH': {'get_property': ['SELF', 'certificate_path']}, 'GEN_CERT_BECOME_USER': {'get_property': ['SELF', 'linux_owner']}, 'PRIVATE_KEY': {'get_property': ['SELF', 'private_key']}, 'EXTRA_SUB_ALT_NAME': {'get_property': ['SELF', 'extra_sub_alt_name']}, 'COMMON_NAME': {'get_property': ['SELF', 'common_name']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'CA_CERTIFICATE': {'get_property': ['SELF', 'ca_certificate']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'EXTENDED_KEY_USAGE': {'get_property': ['SELF', 'extended_key_usage']}, 'IP_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}, 'PUBLIC_ADDRESS': {'get_attribute': ['HOST', 'public_address']}}, 'implementation': 'playbooks/configure.yml'}, 'delete': {'inputs': {'KEY_NAME': {'get_property': ['SELF', 'key_name']}, 'CERTIFICATE_NAME': {'get_property': ['SELF', 'certificate_name']}, 'KEY_PATH': {'get_property': ['SELF', 'key_path']}, 'CERTIFICATE_PATH': {'get_property': ['SELF', 'certificate_path']}, 'GEN_CERT_BECOME_USER': {'get_property': ['SELF', 'linux_owner']}}, 'implementation': 'playbooks/delete.yml'}}}}}",0
"{'org.ystia.ssl.ansible.certificates.nodes.SSLRootCAInstaller': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/icons/ssl-certificate.png'}, 'properties': {'certificate_authority': {'type': 'string', 'description': 'A single Root CA certificate to install, it should be the PEM-encoded certificate content. Property certificate_authorities allows to define several certificates at the same time', 'required': False}, 'certificate_authorities': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'Additional Root CA certificates to install, it should be the PEM-encoded certificate content.', 'required': False}}, 'interfaces': {'Standard': {'configure': {'inputs': {'CA_CERTS': {'get_property': ['SELF', 'certificate_authorities']}, 'CA_CERT': {'get_property': ['SELF', 'certificate_authority']}}, 'implementation': 'playbooks/ca_installer/configure.yaml'}}}}}",0
"{'org.ystia.dns.dnsmasq.ansible.nodes.Dnsmasq': {'derived_from': 'org.ystia.dns.pub.nodes.DnsServer', 'metadata': {'icon': '/images/dnsmasq-icon.png'}, 'properties': {'domain': {'type': 'string', 'default': '', 'required': False, 'description': ""Local domain name.\nMost queries for names within this domain can use short names relative to the local domain. If no domain entry is present, the domain is determined from the local hostname returned by gethostname(2); the domain part is taken to be everything after the first '.'. Finally, if the hostname does not contain a domain part, the root domain is assumed.\n""}, 'upstream_servers': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}, 'description': 'Optional list of servers to relay non locally resolvable requests\n'}}, 'interfaces': {'Standard': {'create': {'inputs': {'DOMAIN': {'get_property': ['SELF', 'domain']}, 'UPSTREAM_SERVERS': {'get_property': ['SELF', 'upstream_servers']}}, 'implementation': 'playbooks/create.yaml'}}}}}",0
"{'org.ystia.nfs.pub.nodes.NFSServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'tags': {'icon': 'nfs.png'}, 'abstract': True, 'capabilities': {'nfs_server': {'type': 'org.ystia.nfs.pub.capabilities.NFSServer'}}}}",0
"{'org.ystia.nfs.pub.nodes.NFSClient': {'derived_from': 'alien.nodes.LinuxFileSystem', 'tags': {'icon': 'nfs.png'}, 'abstract': True, 'requirements': [{'partition': {'capability': 'org.ystia.nfs.pub.capabilities.NFSServer', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.samples.tcpecho.ansible.nodes.TCPEcho': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Installation of the TCPEcho Very Simple TCP Server, an Ystia Sample.', 'tags': {'icon': '/images/echo-icon.png'}, 'attributes': {'url': {'concat': ['tcp://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'endpoint', 'port']}]}}, 'capabilities': {'endpoint': 'org.ystia.samples.tcpecho.capabilities.Endpoint'}, 'interfaces': {'Standard': {'inputs': {'PORT': {'get_property': ['SELF', 'endpoint', 'port']}}, 'start': 'playbooks/echo-start.yaml', 'stop': 'playbooks/echo-stop.yaml'}}}}",0
"{'org.ystia.ntp.pub.nodes.NtpServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/images/ntp-icon.png'}, 'capabilities': {'ntp_endpoint': 'org.ystia.ntp.pub.capabilities.NtpEndpoint'}}}",0
"{'org.ystia.yorc.alien4cloud.nodes.YorcProvider': {'description': 'Upload Yorc Orchestrator Plugin\n', 'derived_from': 'org.alien4cloud.alien4cloud.config.pub.nodes.OrchestratorConfigurator', 'requirements': [{'yorc': {'capability': 'org.ystia.yorc.pub.capabilities.YorcRestAPI', 'relationship': 'org.ystia.yorc.alien4cloud.relationships.ConnectsToYorc', 'occurrences': [1, 1]}}], 'attributes': {'orchestratorId': {'get_operation_output': ['SELF', 'Standard', 'start', 'orchestratorId']}}, 'properties': {'download_url': {'description': 'The URL used to download the Yorc Plugin zip.', 'type': 'string', 'required': False}, 'name': {'type': 'string', 'required': True, 'default': 'Yorc'}, 'discriminator': {'type': 'string', 'description': 'a prefix for all deployments', 'required': True, 'default': 'YourInitials'}, 'pluginId': {'type': 'string', 'required': True, 'default': 'alien4cloud-yorc-provider'}, 'pluginBean': {'type': 'string', 'required': True, 'default': 'yorc-orchestrator-factory'}, 'yorc_address_ha': {'type': 'string', 'required': False}}, 'interfaces': {'Standard': {'start': {'inputs': {'alien_user': {'get_property': ['HOST', 'rest', 'user']}, 'alien_password': {'get_property': ['HOST', 'rest', 'password']}, 'alien_url': {'get_attribute': ['HOST', 'alien_url']}, 'download_url': {'get_property': ['SELF', 'download_url']}, 'orchestrator_name': {'get_property': ['SELF', 'name']}, 'pluginId': {'get_property': ['SELF', 'pluginId']}, 'pluginBean': {'get_property': ['SELF', 'pluginBean']}, 'discriminator': {'get_property': ['SELF', 'discriminator']}}, 'implementation': 'playbook/start.yml'}}}}}",0
"{'org.ystia.mongodb.linux.ansible.nodes.MongoDB': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'MongoDB component for linux', 'tags': {'icon': '/images/mongodb.jpg'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':28017']}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed MongoDB component', 'default': 3.6, 'constraints': [{'valid_values': [3.2, 3.4, 3.6]}]}, 'port': {'type': 'integer', 'description': 'MongoDB port', 'default': 27017, 'required': True}, 'db_path': {'type': 'string', 'description': 'Path of the database', 'default': '/var/lib/mongo', 'required': True}, 'quota_enforced': {'type': 'boolean', 'description': 'Limits each database to a certain number of files', 'default': False, 'required': True}, 'quota_maxfiles': {'type': 'integer', 'description': 'Number of quota files per DB', 'default': 8, 'required': True}}, 'capabilities': {'host': {'type': 'org.ystia.mongodb.pub.capabilities.Container.MongoDB'}}, 'interfaces': {'Standard': {'create': {'description': 'MongoDB installation step', 'inputs': {'IP_ADDRESS': {'get_attribute': ['HOST', 'private_address']}, 'MONGODB_VERSION': {'get_property': ['SELF', 'component_version']}, 'MONGODB_PORT': {'get_property': ['SELF', 'port']}, 'MONGODB_DB_PATH': {'get_property': ['SELF', 'db_path']}, 'MONGODB_QUOTA_ENFORCED': {'get_property': ['SELF', 'quota_enforced']}, 'MONGODB_QUOTA_MAXFILES': {'get_property': ['SELF', 'quota_maxfiles']}}, 'implementation': 'playbooks/mongodb_install.yaml'}}}}}",0
"{'org.ystia.samples.apache-log-generator.linux.ansible.nodes.ApacheLogGeneratorDashboard': {'derived_from': 'org.ystia.kibana.linux.bash.nodes.KibanaDashboard', 'description': 'The dashboard element hosted on Kibana for the Apache log generator Sample', 'artifacts': [{'dashboard_file': {'file': 'dashboards/kdb_ApacheLogGenerator.json', 'type': 'org.ystia.kibana.pub.artifacts.Dashboard'}}]}}",0
"{'org.ystia.samples.apache-log-generator.linux.ansible.nodes.ApacheLogGenerator': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Installation of the ApacheLogGenerator', 'tags': {'icon': '/images/log.png'}, 'properties': {'log_path': {'type': 'string', 'required': True, 'default': '/tmp/apache.log'}, 'total_logs_nb': {'type': 'integer', 'required': True, 'default': 0}, 'delay_s': {'type': 'integer', 'required': True, 'default': 1}}, 'interfaces': {'Standard': {'create': {'implementation': 'linux/ansible/apache-log-generator_install.yaml'}, 'start': {'inputs': {'LOG_PATH': {'get_property': ['SELF', 'log_path']}, 'TOTAL_LOGS_NB': {'get_property': ['SELF', 'total_logs_nb']}, 'DELAY_S': {'get_property': ['SELF', 'delay_s']}}, 'implementation': 'linux/ansible/apache-log-generator_start.yaml'}, 'stop': {'implementation': 'linux/ansible/apache-log-generator_stop.yaml'}, 'delete': {'inputs': {'LOG_PATH': {'get_property': ['SELF', 'log_path']}}, 'implementation': 'linux/ansible/apache-log-generator_delete.yaml'}}}}}",0
"{'org.ystia.consul.linux.bash.nodes.Consul': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Consul Server or Consul Agent component for linux', 'requirements': [{'server_endpoint': {'capability': 'org.ystia.consul.pub.capabilities.ConsulServer', 'relationship': 'org.ystia.consul.linux.bash.relationships.ConnectsConsulAgentToServer', 'occurrences': [0, 1]}}], 'tags': {'icon': '/images/consul-icon.png'}, 'attributes': {'dnsmask_previous': {'get_operation_output': ['SELF', 'Standard', 'create', 'YSTIA_DNSMASK_PREVIOUS']}}, 'properties': {'install_dnsmasq': {'type': 'boolean', 'description': 'By default, a dnsmask is installed as a DNS proxy. It is sometimes needed to remove it if another DNS is already installed (bind for example)\n', 'default': True}, 'installation_directory': {'type': 'string', 'description': 'installation path of consul', 'default': '~/consul'}, 'component_version': {'type': 'version', 'description': 'the Consul version installed.', 'default': '0.5.2', 'constraints': [{'equal': '0.5.2'}]}}, 'capabilities': {'agent': {'type': 'org.ystia.consul.pub.capabilities.ConsulAgent'}, 'server': {'type': 'org.ystia.consul.pub.capabilities.ConsulServer'}}, 'interfaces': {'Standard': {'create': {'inputs': {'INSTALL_DNSMASQ': {'get_property': ['SELF', 'install_dnsmasq']}, 'INSTALL_DIR': {'get_property': ['SELF', 'installation_directory']}, 'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/consul_install.sh'}, 'configure': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'installation_directory']}, 'IP_ADDRESS': {'get_attribute': ['SELF', 'ip_address']}}, 'implementation': 'scripts/consul_configure.sh'}, 'start': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'installation_directory']}}, 'implementation': 'scripts/consul_start.sh'}, 'stop': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'installation_directory']}}, 'implementation': 'scripts/consul_stop.sh'}, 'delete': {'inputs': {'INSTALL_DNSMASQ': {'get_property': ['SELF', 'install_dnsmasq']}, 'INSTALL_DIR': {'get_property': ['SELF', 'installation_directory']}, 'DNSMASQ_PREVIOUS': {'get_attribute': ['SELF', 'dnsmask_previous']}}, 'implementation': 'scripts/consul_delete.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.logstash.linux.bash.nodes.Logstash': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Logstash component from Elastic Stack for linux', 'tags': {'icon': '/images/logstash-icon.png'}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}, 'ls_home': {'get_operation_output': ['SELF', 'Standard', 'create', 'LOGSTASH_HOME']}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed Logstash component', 'default': '6.2.2', 'constraints': [{'valid_values': ['5.6.8', '6.2.2']}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifact. It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/logstash', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'auto_reload': {'type': 'boolean', 'description': 'Monitor configuration changes and reload whenever it is changed', 'default': False}, 'reload_interval': {'type': 'integer', 'description': 'How frequently to poll the configuration location for changes, in seconds', 'default': 60}, 'stdout': {'type': 'boolean', 'description': 'Define the stdout logstash output, to allow to see the events pipeline.', 'default': False}, 'heap_size': {'type': 'string', 'default': '1G', 'description': 'This property allows to set the heap memory size that is allocated to Logstash java process, It allocates the same value to both initial and maximum values (ie -Xms and -Xmx java options).\n', 'constraints': [{'pattern': '[1-9][0-9]*[kKmMgG]'}]}, 'log_level': {'type': 'string', 'description': ""Define Logstash log level. By default very few logs are generated by Logstash. All logs are redirected to a file except if you set 'stdout' to 'true'.\n"", 'default': 'warn', 'constraints': [{'valid_values': ['fatal', 'error', 'warn', 'info', 'debug', 'trace']}]}}, 'capabilities': {'logstash_resource': {'type': 'org.ystia.logstash.pub.capabilities.LogstashEndpoint'}, 'connector_host': {'type': 'org.ystia.logstash.pub.capabilities.LogstashConnectorHosting', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}, {'search_endpoint': {'capability': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint', 'relationship': 'org.ystia.logstash.linux.bash.relationships.LogstashToElasticsearch', 'occurrences': [0, 1]}}, {'kafka_output': {'capability': 'org.ystia.kafka.pub.capabilities.KafkaTopic', 'relationship': 'org.ystia.logstash.linux.bash.relationships.LogstashToKafka', 'occurrences': [0, 1]}}, {'kafka_input': {'capability': 'org.ystia.kafka.pub.capabilities.KafkaTopic', 'relationship': 'org.ystia.logstash.linux.bash.relationships.KafkaToLogstash', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'LS_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/logstash_install.sh'}, 'configure': {'inputs': {'LS_VERSION': {'get_property': ['SELF', 'component_version']}, 'STDOUT': {'get_property': ['SELF', 'stdout']}, 'LOGSTASH_HEAP_SIZE': {'get_property': ['SELF', 'heap_size']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}, 'AUTO_RELOAD': {'get_property': ['SELF', 'auto_reload']}, 'RELOAD_INTERVAL': {'get_property': ['SELF', 'reload_interval']}, 'LOGSTASH_LOG_LEVEL': {'get_property': ['SELF', 'log_level']}}, 'implementation': 'scripts/logstash_configure.sh'}, 'start': {'inputs': {'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}}, 'implementation': 'scripts/logstash_start.sh'}, 'stop': {'inputs': {'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}}, 'implementation': 'scripts/logstash_stop.sh'}, 'delete': {'inputs': {'LS_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/logstash_delete.sh'}}, 'custom': {'change_input': {'inputs': {'url': {'type': 'string', 'description': 'Input param for change_input', 'required': True}, 'AUTO_RELOAD': {'get_property': ['SELF', 'auto_reload']}, 'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}}, 'implementation': 'scripts/logstash_changeInput.sh'}, 'change_output': {'inputs': {'url': {'type': 'string', 'description': 'Input param for change_output', 'required': True}, 'AUTO_RELOAD': {'get_property': ['SELF', 'auto_reload']}, 'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}}, 'implementation': 'scripts/logstash_changeOutput.sh'}, 'change_filter': {'inputs': {'url': {'type': 'string', 'description': 'Input param for change_filter', 'required': True}, 'AUTO_RELOAD': {'get_property': ['SELF', 'auto_reload']}, 'LOGSTASH_HOME': {'get_attribute': ['SELF', 'ls_home']}}, 'implementation': 'scripts/logstash_changeFilter.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'conf': {'file': 'conf', 'type': 'tosca.artifacts.File'}}, {'certificates': {'file': 'certificates', 'type': 'tosca.artifacts.File'}}, {'private_key': {'file': 'certificates/default-logstash-forwarder.key', 'type': 'tosca.artifacts.File'}}, {'certificate': {'file': 'certificates/default-logstash-forwarder.crt', 'type': 'tosca.artifacts.File'}}, {'inputs_conf': {'file': 'conf/1-1_logstash_inputs.conf', 'type': 'tosca.artifacts.File'}}, {'filters_conf': {'file': 'conf/2-1_logstash_filters.conf', 'type': 'tosca.artifacts.File'}}, {'outputs_conf': {'file': 'conf/3-1_logstash_outputs.conf', 'type': 'tosca.artifacts.File'}}, {'extra_host': {'file': 'artifactsFiles/hosts_to_add.txt', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.ystia.logstash.linux.bash.nodes.GeoNames': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'A GeoNames connector for Logstash on linux', 'tags': {'icon': '/images/geonames.gif'}, 'properties': {'repository': {'type': 'string', 'description': 'The repository to download the geonames archives. You may want to specify a local directory where you have previously copied the archive files.\n', 'required': False, 'default': 'http://download.geonames.org/export/dump/', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'filename': {'type': 'string', 'default': 'allCountries', 'description': 'Name of the file containing GeoNames data Choose allCountries to get a complete information (very heavy) You can choose a country code in capitals (US, FR, ...) Or another file like cities15000 or cities5000 A .zip suffix will be added to this name.\n', 'required': True}, 'indexname': {'type': 'string', 'default': 'geonames', 'description': 'Name of index to store GeoNames data\n', 'required': True}}, 'capabilities': {'geonames_resource': 'org.ystia.logstash.pub.capabilities.GeonamesEndpoint'}, 'requirements': [{'host': {'capability': 'org.ystia.logstash.pub.capabilities.LogstashConnectorHosting', 'relationship': 'org.ystia.logstash.linux.bash.relationships.GeonamesHostedOnLogstash', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'FNAME': {'get_property': ['SELF', 'filename']}}, 'implementation': 'geonames/create.sh'}, 'start': {'implementation': 'geonames/start.sh'}, 'stop': {'implementation': 'geonames/stop.sh'}}, 'custom': {'update': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'FNAME': {'type': 'string', 'description': 'File name used for update (without .zip suffix)', 'required': True}}, 'implementation': 'geonames/update.sh'}}}, 'artifacts': [{'geoscripts': {'file': 'geonames', 'type': 'tosca.artifacts.File'}}, {'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.logstash.linux.bash.nodes.TwitterConnector': {'derived_from': 'org.ystia.nodes.Root', 'description': 'A twitter connector', 'tags': {'icon': '/images/twitter-icon.png'}, 'requirements': [{'connector_host': {'capability': 'org.ystia.logstash.pub.capabilities.LogstashConnectorHosting', 'relationship': 'org.ystia.logstash.linux.bash.relationships.TwitterConnectorHostedOnLogstash', 'occurrences': [1, 1]}}], 'properties': {'consumer_key': {'type': 'string', 'description': ""Your Twitter App's consumer key."", 'required': True}, 'consumer_secret': {'type': 'string', 'description': ""Your Twitter App's consumer secret."", 'required': True}, 'oauth_token': {'type': 'string', 'description': 'Your Twitter oauth token.', 'required': True}, 'oauth_token_secret': {'type': 'string', 'description': 'Your Twitter oauth token secret.', 'required': True}, 'use_proxy': {'type': 'boolean', 'default': False, 'description': 'Use a proxy to handle the connections.', 'required': False}, 'proxy_address': {'type': 'string', 'description': 'Address of the proxy to use. If use_proxy property is true, and no value is set for this property, then default environment proxy settings on the compute will be used.\n', 'required': False}, 'proxy_port': {'type': 'integer', 'description': 'Port of the proxy to use. If use_proxy property is true, and no value is set for this property, then default environment proxy settings on the compute will be used.\n', 'required': False}, 'keywords': {'type': 'list', 'entry_schema': {'description': 'a keyword to track in the Twitter stream', 'type': 'string'}, 'description': 'An list of keywords to track in the Twitter stream Ex: [foo, bar] At least one property ""keywords"" or ""follows"" must be specified if use_samples property is not set.\n', 'required': False}, 'follows': {'type': 'list', 'entry_schema': {'description': 'a stringified user ID. ID can be obtained from Twitter username: http://gettwitterid.com\n', 'type': 'string', 'constraints': [{'pattern': '(\\d)+'}]}, 'description': 'A list of user IDs, indicating the users to return statuses for in the Twitter stream. Ex: [122345, 414512]. At least one property ""keywords"" or ""follows"" must be specified if use_samples property is not set.\n', 'required': False}, 'languages': {'type': 'list', 'entry_schema': {'description': 'a BCP 47 language identifier', 'type': 'string'}, 'description': ""A list of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search page will only return tweets that have been detected as being written in the specified languages. Ex: [ en, fr ]\n"", 'required': False}, 'use_samples': {'type': 'boolean', 'default': False, 'description': 'Returns a small random sample of all public statuses. If set to true, the keywords, follows and languages properties will be ignored.\n', 'required': False}, 'full_tweet': {'type': 'boolean', 'default': False, 'description': 'Record full tweet object as given to us by the Twitter Streaming API.\n', 'required': False}, 'tags': {'type': 'list', 'entry_schema': {'description': 'a tag to add to your event', 'type': 'string'}, 'description': 'A list of tags to add to your event. This can help with processing later. Ex: [TagName]\n', 'required': False}, 'ignore_retweets': {'type': 'boolean', 'default': False, 'description': 'Lets you ignore the retweets coming out of the Twitter API.\n', 'required': False}}, 'interfaces': {'custom': {'change_authentication': {'inputs': {'consumer_key': {'type': 'string', 'description': ""Your Twitter App's consumer key."", 'required': True}, 'consumer_secret': {'type': 'string', 'description': ""Your Twitter App's consumer secret."", 'required': True}, 'oauth_token': {'type': 'string', 'description': 'Your Twitter oauth token.', 'required': True}, 'oauth_token_secret': {'type': 'string', 'description': 'Your Twitter oauth token secret.', 'required': True}}, 'implementation': 'twitter/twitter_changeAuthentication.sh'}, 'change_follows': {'inputs': {'follows': {'type': 'list', 'entry_schema': {'constraints': [{'pattern': '(\\d)+'}]}, 'description': 'An list of user IDs, indicating the users to return statuses for in the Twitter stream. ID can be obtained from Twitter username: http://gettwitterid.com Ex: [122345, 414512]. At least one property ""keywords"" or ""follows"" must be specified if use_samples property is not set.\n', 'required': False}}, 'implementation': 'twitter/twitter_changeFollows.sh'}, 'change_keywords': {'inputs': {'keywords': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'An list of keywords to track in the Twitter stream Ex: [foo, bar] At least one property ""keywords"" or ""follows"" must be specified if use_samples property is not set.\n', 'required': False}}, 'implementation': 'twitter/twitter_changeKeywords.sh'}, 'change_languages': {'inputs': {'languages': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': ""An list of BCP 47 language identifiers corresponding to any of the languages listed on Twitter's advanced search page will only return tweets that have been detected as being written in the specified languages. Ex: [ en, fr ]\n"", 'required': False}}, 'implementation': 'twitter/twitter_changeLanguages.sh'}, 'change_tags': {'inputs': {'tags': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'An list of tags to add to your event. This can help with processing later. Ex: [TagName]\n', 'required': False}}, 'implementation': 'twitter/twitter_changeTags.sh'}, 'change_use_samples': {'inputs': {'use_samples': {'type': 'boolean', 'default': False, 'description': 'Returns a small random sample of all public statuses. If set to true, the keywords, follows and languages properties will be ignored.\n', 'required': True}}, 'implementation': 'twitter/twitter_changeUseSamples.sh'}, 'change_full_tweet': {'inputs': {'full_tweet': {'type': 'boolean', 'default': False, 'description': 'Record full tweet object as given to us by the Twitter Streaming API.\n', 'required': True}}, 'implementation': 'twitter/twitter_changeFullTweet.sh'}, 'change_ignore_retweets': {'inputs': {'ignore_retweets': {'type': 'boolean', 'default': False, 'description': 'Lets you ignore the retweets coming out of the Twitter API.\n', 'required': True}}, 'implementation': 'twitter/twitter_changeIgnoreRetweets.sh'}, 'add_tags': {'inputs': {'tags': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of tag(s) to add to existing tags list Ex: [tag1, tag2]\n', 'required': True}}, 'implementation': 'twitter/twitter_addTags.sh'}, 'remove_tags': {'inputs': {'tags': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of tag(s) to remove to existing tags list Ex: [tag1, tag2]\n', 'required': True}}, 'implementation': 'twitter/twitter_removeTags.sh'}, 'add_keywords': {'inputs': {'keywords': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of keyword(s) to add to existing keywords list Ex: [keyword1, keyword2]\n', 'required': True}}, 'implementation': 'twitter/twitter_addKeywords.sh'}, 'remove_keywords': {'inputs': {'keywords': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of keyword(s) to remove to existing keywords list Ex: [keyword1, keyword2]\n', 'required': True}}, 'implementation': 'twitter/twitter_removeKeywords.sh'}, 'add_languages': {'inputs': {'languages': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of language(s) to add to existing languages list Ex: [cz, de]\n', 'required': True}}, 'implementation': 'twitter/twitter_addLanguages.sh'}, 'remove_languages': {'inputs': {'languages': {'type': 'string', 'entry_schema': {'type': 'string'}, 'description': 'A list of language(s) to remove to existing languages list Ex: [cz, de]\n', 'required': True}}, 'implementation': 'twitter/twitter_removeLanguages.sh'}, 'add_follows': {'inputs': {'follows': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of follow(s) to add to existing follows list Ex: [@ID1, @ID2]\n', 'required': True}}, 'implementation': 'twitter/twitter_addFollows.sh'}, 'remove_follows': {'inputs': {'follows': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'A list of follow(s) to remove to existing Follows list Ex: [@ID1, @ID2]\n', 'required': True}}, 'implementation': 'twitter/twitter_removeFollows.sh'}}}, 'artifacts': [{'twitterscripts': {'file': 'twitter', 'type': 'tosca.artifacts.File'}}, {'lsscripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.yorc.experimental.consul.pub.nodes.Consul': {'derived_from': 'org.alien4cloud.consul.pub.nodes.ConsulAgent', 'abstract': True, 'description': 'Base component for Consul. It describes how both agents and servers work.', 'tags': {'icon': '/images/consul-icon.png'}, 'properties': {'tls_enabled': {'description': 'Defines if the communication with the consul agent will be secured (HTTPS)', 'type': 'boolean', 'required': True, 'default': False}, 'tls_for_checks_enabled': {'description': 'Allows to set up HTTP health check', 'type': 'boolean', 'required': True, 'default': False}, 'ca_key': {'description': 'The provided CA key', 'type': 'string', 'required': False}, 'ca_pem': {'description': 'The provided CA certificate', 'type': 'string', 'required': False}, 'ca_passphrase': {'description': 'The provided CA certificate passphrase', 'type': 'string', 'required': False}, 'encrypt_key': {'description': 'The key to encrypt gossip exchanges within the consul cluster (must be a 16-bytes, Base64 encoded key)', 'type': 'string', 'required': False}, 'mode': {'description': 'The mode (agent or server) for operating Consul', 'type': 'string', 'constraints': [{'valid_values': ['agent', 'server']}], 'required': True}, 'download_url': {'description': 'The URL to download the consul archive.', 'default': 'https://releases.hashicorp.com/consul/1.2.3/consul_1.2.3_linux_amd64.zip', 'type': 'string', 'required': True}, 'install_dir': {'description': 'Installation directory for the Consul binary', 'type': 'string', 'required': True, 'default': '/usr/local/bin'}, 'config_dir': {'description': 'Path to the configuration directory of Consul', 'type': 'string', 'required': True, 'default': '/etc/consul.d'}, 'datacenter': {'description': 'Name of the DataCenter for this Consul. When an agent joins a server they should be in the same data center.\n', 'type': 'string', 'required': True, 'default': 'dc1'}, 'domain': {'description': 'DNS domain name for Consul DNS interface\n', 'type': 'string', 'required': True, 'default': 'consul'}, 'web_ui': {'description': 'Enable Consul Web UI\n', 'type': 'boolean', 'required': False, 'default': False}}, 'attributes': {'web_ui_url': {'description': 'Consul Web UI URL\n', 'type': 'string'}}, 'capabilities': {'consul_agent': {'type': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent'}}}}",0
"{'org.ystia.yorc.experimental.consul.pub.nodes.ConsulServer': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.nodes.Consul', 'abstract': True, 'properties': {'mode': {'description': ""The mode for operating Consul 'server' in this case."", 'type': 'string', 'constraints': [{'equal': 'server'}], 'required': True, 'default': 'server'}}, 'capabilities': {'consul_server': {'type': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer'}, 'join_wan': {'type': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN'}}, 'requirements': [{'wan_server': {'capability': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.experimental.consul.pub.nodes.ConsulAgent': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.nodes.Consul', 'abstract': True, 'properties': {'mode': {'description': ""The mode for operating Consul 'agent' in this case."", 'type': 'string', 'constraints': [{'equal': 'agent'}], 'required': True, 'default': 'agent'}}, 'requirements': [{'consul_server': {'capability': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.traefik.pub.nodes.Traefik': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/icons/traefik.logo.png'}, 'capabilities': {'entrypoint': 'org.ystia.traefik.pub.capabilities.EntryPoint', 'cfg_fragment_host': 'org.ystia.traefik.pub.capabilities.ConfigFragmentHost'}}}",0
"{'org.ystia.traefik.pub.nodes.TraefikRoute': {'derived_from': 'tosca.nodes.LoadBalancer', 'abstract': True, 'metadata': {'icon': '/icons/traefik-route.png'}, 'properties': {'rules': {'type': 'string', 'default': '', 'required': False}}, 'capabilities': {'health_check_cfg_host': 'org.ystia.traefik.pub.capabilities.HealthCheckConfigHost'}, 'requirements': [{'cfg_host': {'capability': 'org.ystia.traefik.pub.capabilities.ConfigFragmentHost', 'node': 'org.ystia.traefik.pub.nodes.Traefik', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.ystia.traefik.pub.nodes.TraefikRouteHealthCheck': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'metadata': {'icon': '/icons/traefik-route-hb.png'}, 'properties': {'configuration': {'type': 'org.ystia.traefik.pub.datatypes.HealthCheckConfig', 'required': False}}, 'requirements': [{'hc_cfg_host': {'capability': 'org.ystia.traefik.pub.capabilities.HealthCheckConfigHost', 'node': 'org.ystia.traefik.pub.nodes.TraefikRoute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'org.ystia.yorc.location.GoogleConfig': {'derived_from': 'org.ystia.yorc.pub.location.GoogleConfig', 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigGoogleHostedOnYorc', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.GoogleSecretsOnVault', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.location.OpenStackConfig': {'derived_from': 'org.ystia.yorc.pub.location.OpenStackConfig', 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigOpenstackHostedOnYorc', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.OpenstackSecretsOnVault', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.location.AWSConfig': {'derived_from': 'org.ystia.yorc.pub.location.AWSConfig', 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigAWSHostedOnYorc', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.AWSSecretsOnVault', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.location.KubernetesConfig': {'derived_from': 'org.ystia.yorc.pub.location.KubernetesConfig', 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigKubernetesHostedOnYorc', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.location.HostsPoolConfig': {'derived_from': 'org.ystia.yorc.pub.location.HostsPoolConfig', 'interfaces': {'Standard': {'start': {'inputs': {'YORC_CONFIG_DIR': {'get_property': ['REQ_TARGET', 'yorc', 'config_dir']}, 'YORC_INSTALL_DIR': {'get_property': ['REQ_TARGET', 'yorc', 'install_dir']}, 'LOCATION_NAME': {'get_property': ['SELF', 'location_name']}}, 'implementation': 'playbooks/apply_hostspool.yml'}}}, 'requirements': [{'yorc': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigHostsPoolHostedOnYorc'}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.HostsPoolSecretsOnVault', 'occurrences': [0, 1]}}]}}",0
"{'org.ystia.yorc.ansible.Config': {'derived_from': 'org.ystia.yorc.pub.ansible.Config', 'requirements': [{'host': {'capability': 'org.ystia.yorc.pub.capabilities.YorcConfigContainer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.YorcConfigAnsible', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.linux.ansible.nodes.YorcServer': {'derived_from': 'org.ystia.yorc.pub.nodes.YorcServer', 'description': 'Yorc server instance', 'interfaces': {'Standard': {'inputs': {'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}}, 'create': {'inputs': {'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'playbooks/create.yml'}, 'configure': {'inputs': {'REST_API_PORT': {'get_property': ['SELF', 'rest', 'port']}, 'REST_API_PROTOCOL': {'get_property': ['SELF', 'rest', 'protocol']}, 'IP_ADDRESS': {'get_attribute': ['HOST', 'private_address']}, 'PUBLIC_ADDRESS': {'get_attribute': ['HOST', 'public_address']}, 'SSH_KEY': {'get_property': ['SELF', 'private_key_content']}, 'CA_PEM': {'get_property': ['SELF', 'ca_pem']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'RESOURCES_PREFIX': {'get_property': ['SELF', 'resources_prefix']}}, 'implementation': 'playbooks/configure.yml'}, 'start': 'playbooks/start.yml', 'stop': 'playbooks/stop.yml', 'delete': 'playbooks/delete.yml'}}, 'requirements': [{'consul': {'capability': 'org.alien4cloud.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.JoinConsulAgent', 'occurrences': [1, 1]}}, {'vault': {'capability': 'org.alien4cloud.vault.pub.capabilities.VaultServer', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.ConnectsToVaultServer', 'occurrences': [0, 1]}}, {'work_directory': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.DependsOnFilessystem', 'occurrences': [0, 1]}}, {'terraform': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.yorc.linux.ansible.relationships.DependsOnTerraformRuntime', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.elasticsearch.pub.nodes.AbstractElasticSearch': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'abstract': True, 'tags': {'icon': '/images/elasticsearch-icon.png'}, 'attributes': {'api': {'type': 'string'}}, 'capabilities': {'search_resource': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'}}}",0
"{'org.ystia.samples.dummylogs.linux.bash.nodes.DummyLogsDashboard': {'derived_from': 'org.ystia.kibana.linux.bash.nodes.KibanaDashboard', 'description': 'The dashboard element hosted on Kibana for the DummyLogs Sample', 'artifacts': [{'dashboard_file': {'file': 'dashboards/kdb_DummyLogs.json', 'type': 'org.ystia.kibana.pub.artifacts.Dashboard'}}]}}",0
"{'org.ystia.samples.dummylogs.linux.bash.nodes.DummyLogsGenerator': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Installation of the DummyLogs Sample logs Generator', 'tags': {'icon': '/images/log.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'The installed DummyLogsGenerator version', 'default': '1.4.0', 'constraints': [{'equal': '1.4.0'}]}, 'log_path': {'type': 'string', 'required': True, 'default': '/tmp/dummy.log'}, 'total_logs_nb': {'type': 'integer', 'required': True, 'default': 2147483647}, 'delay_s': {'type': 'float', 'required': True, 'default': 1}}, 'interfaces': {'Standard': {'create': 'scripts/dummylogs_install.sh', 'start': {'inputs': {'LOG_PATH': {'get_property': ['SELF', 'log_path']}, 'TOTAL_LOGS_NB': {'get_property': ['SELF', 'total_logs_nb']}, 'DELAY_S': {'get_property': ['SELF', 'delay_s']}}, 'implementation': 'scripts/logs_generator_start.sh'}, 'stop': {'implementation': 'scripts/logs_generator_stop.sh'}, 'delete': {'inputs': {'LOG_PATH': {'get_property': ['SELF', 'log_path']}}, 'implementation': 'scripts/dummylogs_delete.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.ansible.pub.nodes.AnsibleRuntime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'tags': {'icon': 'ansible.png'}, 'properties': {'component_version': {'type': 'version', 'required': True, 'default': '2.10.0'}, 'extra_package_repository_url': {'description': 'URL of package indexes where to find the ansible package, instead of the default Python Package repository', 'type': 'string', 'required': False}}}}",0
"{'org.ystia.cloudera.linux.bash.nodes.ClouderaServer': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Cloudera Manager Server (including the embedded PostgreSQL database).', 'tags': {'icon': '/images/cloudera-icon.png'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':7180/']}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of Cloudera Manager Server component', 'default': '5.14.1', 'constraints': [{'equal': '5.14.1'}]}, 'cloudera_manager_repository': {'type': 'string', 'default': 'https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.14.1/', 'description': ""This property give the opportunity to specify an alternative download repository for Cloudera Manager Server.\nBy default, the value is 'https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.14.1/'.\n"", 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'ntp_server': {'type': 'string', 'description': ""The hostname on an NTP server. By default, the valueis 'fr.pool.ntp.org'.\n"", 'default': 'fr.pool.ntp.org', 'required': False}}, 'capabilities': {'cloudera_server_endpoint': 'org.ystia.cloudera.pub.capabilities.ClouderaServerEndpoint'}, 'interfaces': {'Standard': {'create': {'inputs': {'CLOUDERA_MANAGER_REPO': {'get_property': ['SELF', 'cloudera_manager_repository']}, 'NTP_SERVER': {'get_property': ['SELF', 'ntp_server']}}, 'implementation': 'scripts/clouderamanager_install.sh'}, 'configure': {'implementation': 'scripts/clouderamanager_config.sh'}, 'start': {'implementation': 'scripts/clouderamanager_start.sh'}, 'stop': {'implementation': 'scripts/clouderamanager_stop.sh'}}}, 'artifacts': [{'data': {'type': 'tosca.artifacts.File', 'file': 'data'}}, {'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.cloudera.linux.bash.nodes.ClouderAgent': {'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Cloudera Manager Agent (including Cloudera Distribution Hadoop CDH).', 'tags': {'icon': '/images/cloudera-icon.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of Cloudera Manager Agent component', 'default': '5.14.1', 'constraints': [{'equal': '5.14.1'}]}, 'cdh_version': {'type': 'version', 'description': 'Version of Cloudera Distribution Hadoop (CDH).', 'default': '5.14.0', 'constraints': [{'equal': '5.14.0'}]}, 'cloudera_manager_repository': {'type': 'string', 'default': 'https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.14.1/', 'description': ""This property give the opportunity to specify an alternative download repository for Cloudera Manager Server.\nBy default, the value is 'https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.14.1/'.\n"", 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'cdh_repository': {'type': 'string', 'default': 'https://archive.cloudera.com/cdh5/redhat/7/x86_64/cdh/5/', 'description': ""This property give the opportunity to specify an alternative download repository for Cloudera Distribution Hadoop (CDH).\nIf you do not specify any value, it's set as 'https://archive.cloudera.com/cdh5/redhat/7/x86_64/cdh/5/'.\n"", 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'cdh_kafka_repository': {'type': 'string', 'default': 'http://archive.cloudera.com/kafka/redhat/7/x86_64/kafka/3.0.0/', 'description': ""This property give the opportunity to specify an alternative download repository for Kafka Cloudera Distribution Hadoop (CDH).\nIf you do not specify any value, it's set as 'http://archive.cloudera.com/kafka/redhat/7/x86_64/kafka/3.0.0/'.\n"", 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'ntp_server': {'type': 'string', 'description': ""The hostname on an NTP server. By default, the valueis 'fr.pool.ntp.org'.\n"", 'default': 'fr.pool.ntp.org', 'required': False}}, 'requirements': [{'server_endpoint': {'capability': 'org.ystia.cloudera.pub.capabilities.ClouderaServerEndpoint', 'relationship': 'org.ystia.cloudera.linux.bash.relationships.ClouderaAgentConnectsToClouderaServer', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'CDH_REPO': {'get_property': ['SELF', 'cdh_repository']}, 'KAFKA_REPO': {'get_property': ['SELF', 'cdh_kafka_repository']}, 'CLOUDERA_MANAGER_REPO': {'get_property': ['SELF', 'cloudera_manager_repository']}, 'NTP_SERVER': {'get_property': ['SELF', 'ntp_server']}}, 'implementation': 'scripts/clouderaagent_install.sh'}, 'start': {'implementation': 'scripts/clouderaagent_start.sh'}, 'stop': {'implementation': 'scripts/clouderaagent_stop.sh'}}}, 'artifacts': [{'data': {'type': 'tosca.artifacts.File', 'file': 'data'}}, {'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.samples.hybrid-demo.cost-computing-dashboard.nodes.CostComputingJobDashboard': {'derived_from': 'org.ystia.kibana.linux.bash.nodes.KibanaDashboard', 'description': 'The dashboard element hosted on Kibana for the Apache log generator sample cost computing part', 'artifacts': [{'dashboard_file': {'file': 'dashboards/cost_computing_dashboard.json', 'type': 'org.ystia.kibana.pub.artifacts.Dashboard'}}]}}",0
"{'org.ystia.beats.linux.bash.nodes.Beat': {'abstract': True, 'derived_from': 'org.ystia.consul.pub.nodes.ConsulUser', 'description': 'Abstract Component for supporting common operations on Beats', 'tags': {'icon': '/images/beats-icon.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the embedded Beat components', 'default': '6.2.2', 'constraints': [{'valid_values': ['5.6.8', '6.2.2']}]}, 'debug': {'type': 'boolean', 'default': False, 'description': 'Enable debug logs for this beat'}}, 'requirements': [{'search_endpoint': {'capability': 'org.ystia.elasticsearch.pub.capabilities.SearchEndpoint', 'relationship': 'org.ystia.beats.linux.bash.relationships.ConnectsBeatToES', 'occurrences': [0, 1]}}, {'logstash_endpoint': {'capability': 'org.ystia.logstash.pub.capabilities.LogstashEndpoint', 'relationship': 'org.ystia.beats.linux.bash.relationships.ConnectsBeatToLS', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'BT_VERSION': {'get_property': ['SELF', 'component_version']}, 'DEBUG_LOGS': {'get_property': ['SELF', 'debug']}}, 'implementation': 'scripts/install_beat.sh'}, 'start': 'scripts/start_beat.sh', 'stop': 'scripts/stop_beat.sh', 'delete': {'inputs': {'BT_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/delete_beat.sh'}}}}}",0
"{'org.ystia.beats.linux.bash.nodes.FileBeat': {'derived_from': 'org.ystia.beats.linux.bash.nodes.Beat', 'description': 'A FileBeat ships content of files (typically log files)', 'tags': {'icon': '/images/file-icon.png'}, 'properties': {'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/beats/filebeat', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'files': {'type': 'string', 'description': 'A coma separated list of files to beat', 'default': '/var/log/*.log'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'FILES': {'get_property': ['SELF', 'files']}}, 'implementation': 'scripts/configure_filebeat.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}, {'beat_v5_config': {'file': 'configs/v5/filebeat.yml', 'type': 'tosca.artifacts.File'}}, {'beat_v6_config': {'file': 'configs/v6/filebeat.yml', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.beats.linux.bash.nodes.MetricBeat': {'derived_from': 'org.ystia.beats.linux.bash.nodes.Beat', 'description': 'A MetricBeat ships information about process/system/filesystem', 'tags': {'icon': '/images/metric-icon.png'}, 'properties': {'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/beats/metricbeat', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'period': {'type': 'integer', 'default': 10, 'description': 'In seconds, defines how often to read server statistics'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'PERIOD': {'get_property': ['SELF', 'period']}}, 'implementation': 'scripts/configure_metricbeat.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}, {'beat_v5_config': {'file': 'configs/v5/metricbeat.yml', 'type': 'tosca.artifacts.File'}}, {'beat_v6_config': {'file': 'configs/v6/metricbeat.yml', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.beats.linux.bash.nodes.PacketBeat': {'derived_from': 'org.ystia.beats.linux.bash.nodes.Beat', 'description': 'A PacketBeat ships information about network traffic', 'tags': {'icon': '/images/packet-icon.png'}, 'properties': {'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/beats/packetbeat', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'device': {'type': 'string', 'default': 'any', 'description': 'Select the network interfaces to sniff the data. You can use the any keyword to sniff on all connected interfaces.'}}, 'interfaces': {'Standard': {'configure': {'inputs': {'DEVICE': {'get_property': ['SELF', 'device']}}, 'implementation': 'scripts/configure_packetbeat.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}, {'beat_v5_config': {'file': 'configs/v5/packetbeat.yml', 'type': 'tosca.artifacts.File'}}, {'beat_v6_config': {'file': 'configs/v6/packetbeat.yml', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.beats.linux.bash.nodes.HeartBeat': {'derived_from': 'org.ystia.beats.linux.bash.nodes.Beat', 'description': 'A HeartBeat ships information about running services', 'tags': {'icon': '/images/heartbeat-icon.png'}, 'properties': {'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for this component artifacts.  It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature.\n', 'required': True, 'default': 'https://artifacts.elastic.co/downloads/beats/heartbeat', 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'schedule': {'type': 'integer', 'default': 5, 'description': 'In seconds, defines how often to check services'}}, 'requirements': [{'connect_toComponent': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.beats.linux.bash.relationships.ConnectsHeartBeatToComponent', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'SCHEDULE': {'get_property': ['SELF', 'schedule']}}, 'implementation': 'scripts/configure_heartbeat.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}, {'beat_v5_config': {'file': 'configs/v5/heartbeat.yml', 'type': 'tosca.artifacts.File'}}, {'beat_v6_config': {'file': 'configs/v6/heartbeat.yml', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.slurm.pub.nodes.Slurm': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/images/slurm-icon.png'}, 'properties': {'download_url': {'type': 'string', 'default': 'https://www.schedmd.com/downloads/latest/slurm-17.02.11.tar.bz2', 'constraints': [{'pattern': 'https?://.+'}]}}, 'attributes': {'hostname': {'type': 'string'}}}}",0
"{'org.ystia.slurm.pub.nodes.SlurmController': {'derived_from': 'org.ystia.slurm.pub.nodes.Slurm', 'abstract': True, 'properties': {'cluster_name': {'type': 'string', 'default': 'cluster', 'constraints': [{'min_length': 1}]}}, 'capabilities': {'slurmctl_endpoint': 'org.ystia.slurm.pub.capabilities.SlurmControllerEndpoint'}}}",0
"{'org.ystia.slurm.pub.nodes.SlurmDaemon': {'derived_from': 'org.ystia.slurm.pub.nodes.Slurm', 'abstract': True, 'capabilities': {'slurmd_endpoint': 'org.ystia.slurm.pub.capabilities.SlurmDaemonEndpoint'}, 'requirements': [{'slurmctl': {'capability': 'org.ystia.slurm.pub.capabilities.SlurmControllerEndpoint', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.slurm.ansible.nodes.SlurmController': {'derived_from': 'org.ystia.slurm.pub.nodes.SlurmController', 'attributes': {'hostname': {'get_operation_output': ['SELF', 'Standard', 'create', 'HOSTNAME']}}, 'interfaces': {'Standard': {'create': {'inputs': {'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'playbooks/create.yaml'}, 'configure': {'inputs': {'HOSTNAME': {'get_attribute': ['SELF', 'hostname']}, 'CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'SLURM_CTLD_PORT': {'get_property': ['SELF', 'slurmctl_endpoint', 'port']}}, 'implementation': 'playbooks/configure-ctld.yaml'}, 'start': 'playbooks/start-ctld.yaml', 'stop': 'playbooks/stop-ctld.yaml'}}}}",0
"{'org.ystia.slurm.ansible.nodes.SlurmDaemon': {'derived_from': 'org.ystia.slurm.pub.nodes.SlurmDaemon', 'attributes': {'hostname': {'get_operation_output': ['SELF', 'Standard', 'create', 'HOSTNAME']}, 'sockets': {'get_operation_output': ['SELF', 'Standard', 'configure', 'sockets']}, 'cores_per_socket': {'get_operation_output': ['SELF', 'Standard', 'configure', 'cores_per_socket']}, 'threads_per_core': {'get_operation_output': ['SELF', 'Standard', 'configure', 'threads_per_core']}, 'real_memory': {'get_operation_output': ['SELF', 'Standard', 'configure', 'real_memory']}}, 'interfaces': {'Standard': {'create': {'inputs': {'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'playbooks/create.yaml'}, 'start': 'playbooks/start-daemon.yaml', 'stop': 'playbooks/stop-daemon.yaml', 'configure': {'inputs': {'SLURM_DAEMON_PORT': {'get_property': ['SELF', 'slurmd_endpoint', 'port']}, 'hostname': {'get_attribute': ['SELF', 'hostname']}}, 'implementation': 'playbooks/configure-daemon.yaml'}}}, 'requirements': [{'slurmctl': {'capability': 'org.ystia.slurm.pub.capabilities.SlurmControllerEndpoint', 'relationship': 'org.ystia.slurm.ansible.relationships.SlurmDaemonConnectsTo', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.consul.pub.nodes.ConsulUser': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'abstract': True, 'description': 'Ystia Software Component using Consul Agent', 'requirements': [{'consul': {'capability': 'org.ystia.consul.pub.capabilities.ConsulAgent', 'relationship': 'org.ystia.consul.pub.relationships.ConnectsToConsulAgent', 'occurrences': [0, 1]}}], 'artifacts': [{'consul_utils': {'type': 'tosca.artifacts.File', 'file': 'consul_utils'}}]}}",0
"{'org.ystia.alien.docker.nodes.Alien': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'nb_retry': {'description': 'number tentatives to connect to Yorc orchestrator', 'type': 'integer', 'required': False, 'default': 25}}, 'requirements': [{'yorc_server': {'capability': 'org.ystia.yorc.docker.capabilities.YorcRestAPI', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'alien_console': {'type': 'org.ystia.alien.docker.capabilities.AlienUI'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_NB_RETRY': {'get_property': ['SELF', 'nb_retry']}, 'ENV_YORC_HOST': {'get_attribute': ['TARGET', 'yorc_server', 'service_name']}, 'ENV_YORC_PORT': {'get_attribute': ['TARGET', 'yorc_server', 'port']}}, 'implementation': {'file': 'ystia/alien4cloud', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'description': 'Abstract Ystia Root component', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'Abstract Ystia Software component', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.nodes.DBMS': {'derived_from': 'tosca.nodes.DBMS', 'abstract': True, 'description': 'Abstract Ystia DBMS component', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.nodes.Database': {'derived_from': 'tosca.nodes.Database', 'abstract': True, 'description': 'Abstract Ystia Database component', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.rstudio.linux.bash.nodes.RStudio': {'derived_from': 'org.ystia.nodes.Root', 'description': 'RStudio Studio component for linux system', 'tags': {'icon': '/images/rstudio-icon.png'}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}, 'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8787']}}, 'properties': {'component_version': {'type': 'version', 'default': '1.1.383', 'description': 'Version of the installed RStudio component', 'constraints': [{'equal': '1.1.383'}]}, 'proxy_to_use': {'type': 'string', 'required': False, 'description': ""Setup a proxy configuration in Renviron.site in order to allow downloading remote packages. If a value is set for this property then it will be used as http and https proxy (it should honor the unix http_proxy env var format). If not set or set to an empty string then the default environment proxy settings on the compute will be used (http_proxy, https_proxy and no_proxy). This is the default. If set to 'None' then proxies are not configured at all.\n""}, 'cran_mirror_to_use': {'type': 'string', 'required': False, 'default': '', 'description': 'Mirror for R packages download to use. This allow to setup and use your own mirror. If you don\'t specify any value, it\'s set to \'https://cran.r-project.org""\'.\n'}, 'user_to_create': {'type': 'string', 'required': True, 'description': 'User to be created for RStudio', 'default': 'rstudio'}, 'password_to_create': {'type': 'string', 'description': 'Password of the User created.', 'required': True, 'default': 'rstudio'}, 'repository': {'type': 'string', 'description': ""This property give the opportunity to specify an alternative download repository for this component artifacts. It is your responsibility to provide an accessible download url and to store required artifacts on it. You should specify only the base repository url. Artifacts names will be appended to it, so this property could be shared among several components using the inputs feature. If you don't specify any value, it's set to 'https://download2.rstudio.org'.\n"", 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}}, 'requirements': [{'filesystem_endpoint': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.rstudio.linux.bash.relationships.ConnectsRStudioToFilessystem', 'occurrences': [0, 1]}}, {'host': {'capability': 'org.ystia.java.pub.capabilities.JavaHosting', 'relationship': 'org.ystia.java.pub.relationships.HostedOnJavaRuntime', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'RSTUDIO_VERSION': {'get_property': ['SELF', 'component_version']}, 'REPOSITORY': {'get_property': ['SELF', 'repository']}}, 'implementation': 'scripts/rstudio_install.sh'}, 'configure': {'inputs': {'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'PROXY': {'get_property': ['SELF', 'proxy_to_use']}, 'LOGIN': {'get_property': ['SELF', 'user_to_create']}, 'PASSWORD': {'get_property': ['SELF', 'password_to_create']}, 'CRAN_MIRROR': {'get_property': ['SELF', 'cran_mirror_to_use']}}, 'implementation': 'scripts/rstudio_configure.sh'}, 'start': {'inputs': {'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}, 'ENABLE_RHADOOP': False, 'DISTRIB': False, 'SET_SPARKR_ENV': False, 'REPOSITORY': {'get_property': ['SELF', 'repository']}}, 'implementation': 'scripts/rstudio_start.sh'}, 'stop': 'scripts/rstudio_stop.sh'}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.ystia.dns.resolvconf.ansible.Resolvconf': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/dns-icon.png'}, 'properties': {'domain': {'type': 'string', 'default': '', 'required': False, 'description': ""Local domain name.\nMost queries for names within this domain can use short names relative to the local domain. If no domain entry is present, the domain is determined from the local hostname returned by gethostname(2); the domain part is taken to be everything after the first '.'. Finally, if the hostname does not contain a domain part, the root domain is assumed.\n""}, 'search': {'type': 'string', 'default': '', 'required': False, 'description': 'Search list for host-name lookup (space-separated).\nThe search list is normally determined from the local domain name; by default, it contains only the local domain name. This may be changed by listing the desired domain search path following the search keyword with spaces or tabs separating the names. Resolver queries having fewer than ndots dots (default is 1) in them will be attempted using each component of the search path in turn until a match is found. For environments with multiple subdomains please read options ndots:n below to avoid man-in-the-middle attacks and unnecessary traffic for the root-dns-servers. Note that this process may be slow and will generate a lot of network traffic if the servers for the listed domains are not local, and that queries will time out if no server is available for one of the domains. The search list is currently limited to six domains with a total of 256 characters.\n'}}, 'attributes': {'hostname': {'get_operation_output': ['SELF', 'Standard', 'configure', 'HOSTNAME']}}, 'requirements': [{'dns_server': {'capability': 'org.ystia.dns.pub.capabilities.DnsEndpoint', 'relationship': 'org.ystia.dns.resolvconf.ansible.relationships.ConnectsTo', 'occurrences': [1, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'DOMAIN': {'get_property': ['SELF', 'domain']}, 'SEARCH': {'get_property': ['SELF', 'search']}}, 'implementation': 'playbooks/configure.yaml'}}}}}",0
"{'org.ystia.haproxy.linux.ansible.nodes.HAProxy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'HAProxy Server component for linux', 'tags': {'icon': '/images/logo.png'}, 'capabilities': {'host': {'type': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy'}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/create.yaml'}, 'start': {'implementation': 'playbooks/start.yaml'}, 'stop': {'implementation': 'playbooks/stop.yaml'}, 'delete': {'implementation': 'playbooks/delete.yaml'}}}}}",0
"{'org.ystia.haproxy.linux.ansible.nodes.HAProxyHTTP': {'derived_from': 'tosca.nodes.LoadBalancer', 'description': 'HAProxy Server for HTTP connection on linux', 'tags': {'icon': '/images/logo.png'}, 'requirements': [{'host': {'capability': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.ystia.haproxy.linux.ansible.relationships.HAProxyRoutesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'PORT': {'get_property': ['SELF', 'client', 'port']}, 'MODE': 'http'}, 'implementation': 'playbooks/configure-route.yaml'}, 'delete': 'playbooks/delete-route.yaml'}}}}",0
"{'org.ystia.haproxy.linux.ansible.nodes.HAProxyTCP': {'derived_from': 'tosca.nodes.LoadBalancer', 'description': 'HAProxy Server for TCP connexion on linux', 'tags': {'icon': '/images/logo.png'}, 'requirements': [{'host': {'capability': 'org.ystia.haproxy.pub.capabilities.Container.HAProxy', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.ystia.haproxy.linux.ansible.relationships.HAProxyRoutesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'PORT': {'get_property': ['SELF', 'client', 'port']}, 'MODE': 'tcp'}, 'implementation': 'playbooks/configure-route.yaml'}, 'delete': 'playbooks/delete-route.yaml'}}}}",0
"{'org.ystia.traefik.ansible-linux.nodes.Traefik': {'derived_from': 'org.ystia.traefik.pub.nodes.Traefik', 'properties': {'download_url': {'type': 'string', 'default': 'https://github.com/containous/traefik/releases/download/v2.1.4/traefik_v2.1.4_linux_amd64.tar.gz'}, 'install_dir': {'type': 'string', 'default': '/usr/local/bin', 'required': True}, 'config_dir': {'type': 'string', 'default': '/etc/traefik', 'required': True}, 'enable_dashboard': {'type': 'boolean', 'default': False, 'required': False}, 'default_tls_certificate': {'type': 'string', 'default': '', 'required': False, 'description': 'could be either a path to the default server TLS certificate or the certificate itself'}, 'default_tls_key': {'type': 'string', 'default': '', 'required': False, 'description': 'could be either a path to the default server TLS key or the key itself'}, 'component_version': {'type': 'version', 'default': '2.1.4', 'required': False}}, 'interfaces': {'Standard': {'create': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}, 'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}}, 'implementation': 'playbooks/create.yaml'}, 'configure': {'inputs': {'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'ENTRYPOINT_PORT': {'get_property': ['SELF', 'entrypoint', 'port']}, 'ENTRYPOINT_PROTOCOL': {'get_property': ['SELF', 'entrypoint', 'protocol']}, 'ENABLE_DASHBOARD': {'get_property': ['SELF', 'enable_dashboard']}, 'DEFAULT_TLS_CERT': {'get_property': ['SELF', 'default_tls_certificate']}, 'DEFAULT_TLS_KEY': {'get_property': ['SELF', 'default_tls_key']}}, 'implementation': 'playbooks/configure.yaml'}, 'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml', 'delete': {'inputs': {'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}, 'implementation': 'playbooks/delete.yaml'}}}}}",0
"{'org.ystia.traefik.ansible-linux.nodes.TraefikRoute': {'derived_from': 'org.ystia.traefik.pub.nodes.TraefikRoute', 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'configure': {'inputs': {'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'RULES': {'get_property': ['SELF', 'rules']}, 'ENTRYPOINT_PROTOCOL': {'get_property': ['HOST', 'entrypoint', 'protocol']}}, 'implementation': 'playbooks/configure_route.yaml'}, 'stop': {'inputs': {'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}}, 'implementation': 'playbooks/remove_route.yaml'}}}}}",0
"{'org.ystia.traefik.ansible-linux.nodes.TraefikRouteHealthCheck': {'derived_from': 'org.ystia.traefik.pub.nodes.TraefikRouteHealthCheck', 'requirements': [{'hc_cfg_host': {'capability': 'org.ystia.traefik.pub.capabilities.HealthCheckConfigHost', 'node': 'org.ystia.traefik.pub.nodes.TraefikRoute', 'relationship': 'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesHealthCheckHostedOn', 'occurrences': [1, 1]}}]}}",0
"{'org.ystia.yorc.experimental.consul.linux.ansible.nodes.ConsulServer': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.nodes.ConsulServer', 'description': 'Installation of a Consul Server on Linux using Ansible', 'tags': {'icon': '/images/consul-icon.png'}, 'properties': {'install_dnsmasq': {'type': 'boolean', 'description': 'By default, a dnsmask is installed as a DNS proxy. It is sometimes needed to remove it if another DNS is already installed (bind for example)\n', 'default': True}}, 'attributes': {'web_ui_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_address']}, ':', {'get_property': ['SELF', 'consul_agent', 'port']}]}}, 'requirements': [{'wan_server': {'capability': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN', 'relationship': 'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServerWAN', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'MODE': {'get_property': ['SELF', 'mode']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'WEB_UI': {'get_property': ['SELF', 'web_ui']}}, 'create': {'description': 'Consul installation step', 'inputs': {'INSTALL_DNSMASQ': {'get_property': ['SELF', 'install_dnsmasq']}, 'DOMAIN': {'get_property': ['SELF', 'domain']}, 'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'playbooks/consul_install.yaml'}, 'configure': {'inputs': {'DATACENTER': {'get_property': ['SELF', 'datacenter']}, 'DOMAIN': {'get_property': ['SELF', 'domain']}, 'WEB_UI': {'get_property': ['SELF', 'web_ui']}, 'TLS_ENABLED': {'get_property': ['SELF', 'tls_enabled']}, 'TLS_FOR_CHECKS_ENABLED': {'get_property': ['SELF', 'tls_for_checks_enabled']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'CA_PEM': {'get_property': ['SELF', 'ca_pem']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'ENCRYPT_KEY': {'get_property': ['SELF', 'encrypt_key']}, 'PORT': {'get_property': ['SELF', 'consul_server', 'port']}, 'IP_ADDRESS': {'get_attribute': ['HOST', 'private_address']}, 'WAN_ADDRESS': {'get_attribute': ['HOST', 'public_address']}}, 'implementation': 'playbooks/consul_configure.yaml'}, 'start': {'implementation': 'playbooks/consul_start.yml'}, 'stop': {'implementation': 'playbooks/consul_stop.yaml'}, 'delete': {'description': 'Consul data directory cleanup step', 'inputs': {'DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}}, 'implementation': 'playbooks/consul_cleanup.yaml'}}, 'custom': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}, 'maintenance_on': {'inputs': {'MAINT_MODE': 'on'}, 'implementation': 'playbooks/consul_maint.yml'}, 'maintenance_off': {'inputs': {'MAINT_MODE': 'off'}, 'implementation': 'playbooks/consul_maint.yml'}}}}}",unknown
"{'org.ystia.yorc.experimental.consul.linux.ansible.nodes.ConsulAgent': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.nodes.ConsulAgent', 'description': 'Installation of a Consul Agent on Linux using Ansible', 'tags': {'icon': '/images/consul-icon.png'}, 'properties': {'install_dnsmasq': {'type': 'boolean', 'description': 'By default, a dnsmask is installed as a DNS proxy. It is sometimes needed to remove it if another DNS is already installed (bind for example)\n', 'default': True}, 'web_ui_url': {'description': 'Consul Web UI URL\n', 'type': 'string', 'required': False}}, 'requirements': [{'consul_server': {'capability': 'org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer', 'relationship': 'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServer', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}, 'CONFIG_DIR': {'get_property': ['SELF', 'config_dir']}, 'MODE': {'get_property': ['SELF', 'mode']}, 'DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'WEB_UI': {'get_property': ['SELF', 'web_ui']}}, 'create': {'description': 'Consul installation step', 'inputs': {'INSTALL_DNSMASQ': {'get_property': ['SELF', 'install_dnsmasq']}, 'DOMAIN': {'get_property': ['SELF', 'domain']}, 'DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'playbooks/consul_install.yaml'}, 'configure': {'inputs': {'DATACENTER': {'get_property': ['SELF', 'datacenter']}, 'DOMAIN': {'get_property': ['SELF', 'domain']}, 'WEB_UI': {'get_property': ['SELF', 'web_ui']}, 'TLS_ENABLED': {'get_property': ['SELF', 'tls_enabled']}, 'TLS_FOR_CHECKS_ENABLED': {'get_property': ['SELF', 'tls_for_checks_enabled']}, 'CA_KEY': {'get_property': ['SELF', 'ca_key']}, 'CA_PEM': {'get_property': ['SELF', 'ca_pem']}, 'CA_PASSPHRASE': {'get_property': ['SELF', 'ca_passphrase']}, 'ENCRYPT_KEY': {'get_property': ['SELF', 'encrypt_key']}, 'PORT': {'get_property': ['SELF', 'consul_agent', 'port']}, 'IP_ADDRESS': {'get_attribute': ['HOST', 'private_address']}, 'WAN_ADDRESS': {'get_attribute': ['HOST', 'public_address']}}, 'implementation': 'playbooks/consul_configure.yaml'}, 'start': {'implementation': 'playbooks/consul_start.yml'}, 'stop': {'implementation': 'playbooks/consul_stop.yaml'}}, 'custom': {'inputs': {'INSTALL_DIR': {'get_property': ['SELF', 'install_dir']}}, 'maintenance_on': {'inputs': {'MAINT_MODE': 'on'}, 'implementation': 'playbooks/consul_maint.yml'}, 'maintenance_off': {'inputs': {'MAINT_MODE': 'off'}, 'implementation': 'playbooks/consul_maint.yml'}}}}}",unknown
"{'org.ystia.terraform.pub.nodes.TerraformRuntime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'tags': {'icon': 'terraform.jpg'}, 'properties': {'download_url': {'description': 'Terraform download URL', 'type': 'string', 'required': True, 'default': 'https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip'}, 'install_dir': {'description': 'Installation directory for the Terraform binary', 'type': 'string', 'required': True, 'default': '/usr/local/bin'}, 'plugins_dir': {'description': 'The directory where are located Terraform plugins', 'type': 'string', 'required': True, 'default': '/var/terraform/plugins'}, 'plugins_download_urls': {'description': 'List of Terraform plugins download urls', 'type': 'list', 'required': True, 'entry_schema': {'type': 'string'}, 'default': ['https://releases.hashicorp.com/terraform-provider-null/1.0.0/terraform-provider-null_1.0.0_linux_amd64.zip', 'https://releases.hashicorp.com/terraform-provider-consul/2.1.0/terraform-provider-consul_2.1.0_linux_amd64.zip', 'https://releases.hashicorp.com/terraform-provider-openstack/1.9.0/terraform-provider-openstack_1.9.0_linux_amd64.zip', 'https://releases.hashicorp.com/terraform-provider-aws/1.36.0/terraform-provider-aws_1.36.0_linux_amd64.zip', 'https://releases.hashicorp.com/terraform-provider-google/1.18.0/terraform-provider-google_1.18.0_linux_amd64.zip']}}}}",0
"{'org.ystia.ntp.ansible.nodes.NtpServer': {'derived_from': 'org.ystia.ntp.pub.nodes.NtpServer', 'interfaces': {'Standard': {'create': 'playbooks/create.yaml', 'configure': {'inputs': {'TYPE': 'server'}, 'implementation': 'playbooks/configure.yaml'}, 'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml'}}}}",0
"{'org.ystia.ntp.ansible.nodes.NtpClient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/ntp-client-icon.png'}, 'requirements': [{'ntp_server': {'capability': 'org.ystia.ntp.pub.capabilities.NtpEndpoint', 'relationship': 'org.ystia.ntp.ansible.relationships.ConnectsTo', 'occurrences': [1, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': 'playbooks/create.yaml', 'configure': {'inputs': {'TYPE': 'client'}, 'implementation': 'playbooks/configure.yaml'}, 'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml'}}}}",0
"{'org.ystia.jupyter.linux.bash.nodes.Jupyter': {'derived_from': 'org.ystia.nodes.Root', 'description': 'Jupyter notebook component for linux system', 'tags': {'icon': '/images/jupyter-logo.png'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':9888']}}, 'properties': {'component_version': {'type': 'version', 'description': 'The installed Jupyter version', 'default': 4.3, 'constraints': [{'valid_values': [4.3]}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for Anaconda and the additionnal packages. It is your responsibility to provide an accessible download url and to store required artifact on it. You should specify only the base repository url.\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'irkernel': {'type': 'boolean', 'description': 'Is the installed Jupyter must have IRkernel (R)', 'default': True}, 'py35kernel': {'type': 'boolean', 'description': 'Is the installed Jupyter must have Python 3.5 kernel', 'default': True}}, 'requirements': [{'host': {'capability': 'org.ystia.python.pub.capabilities.PythonHosting', 'relationship': 'org.ystia.python.pub.relationships.HostedOnPythonRuntime', 'occurrences': [1, 1]}}, {'filesystem_endpoint': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.jupyter.linux.bash.relationships.ConnectsJupyterToFilessystem', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'IRKERNEL': {'get_property': ['SELF', 'irkernel']}, 'PY35KERNEL': {'get_property': ['SELF', 'py35kernel']}, 'SPARK_KERNEL': False, 'H2O': False}, 'implementation': 'scripts/jupyter_create.sh'}, 'start': {'implementation': 'scripts/jupyter_start.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}, {'data_file': {'type': 'tosca.artifacts.File', 'file': 'data'}}]}}",0
"{'org.ystia.yorc.docker.nodes.Yorc': {'metadata': {'icon': 'yorcicon.png'}, 'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'consul_ui': {'type': 'org.ystia.yorc.docker.capabilities.ConsulUI', 'description': 'Endpoint to acess consul UI'}, 'yorc_server': {'type': 'org.ystia.yorc.docker.capabilities.YorcRestAPI', 'description': 'Endpoint to communicate with yorc API'}}, 'properties': {'yorc_debug': {'description': ""Enable or not Yorc's log debuging"", 'type': 'string', 'required': True, 'default': 'NO_DEBUG', 'constraints': [{'valid_values': ['DEBUG', 'NO_DEBUG']}]}, 'consul_ui': {'description': 'Enable consul UI available on port 8500', 'type': 'boolean', 'required': True, 'default': True}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_YORC_LOG': {'get_property': ['SELF', 'yorc_debug']}, 'ENV_CONSUL_ENV_ui': {'get_property': ['SELF', 'consul_ui']}, 'ENV_CONSUL_ENV_client_addr': '""0.0.0.0""'}, 'implementation': {'file': 'ystia-docker.jfrog.io/ystia/yorc', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.samples.job.mocks.DelayJob': {'derived_from': 'tosca.nodes.Root', 'properties': {'run_delay': {'type': 'integer', 'default': 3, 'required': False, 'constraints': [{'greater_or_equal': 0}]}, 'random_status': {'type': 'boolean', 'default': False, 'required': False}, 'failure': {'type': 'boolean', 'default': False, 'description': 'if both failure and random_status are true a fail become one of the possible status with running and done', 'required': False}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': 'scripts/submit.sh', 'run': {'inputs': {'DELAY': {'get_property': ['SELF', 'run_delay']}, 'RANDOM_STATUS': {'get_property': ['SELF', 'random_status']}, 'FAILURE': {'get_property': ['SELF', 'failure']}}, 'implementation': 'scripts/run.sh'}, 'cancel': 'scripts/cancel.sh'}}}}",0
"{'org.ystia.docker.containers.docker.registry.nodes.Registry': {'derived_from': 'org.ystia.docker.containers.docker.generic.nodes.GenericContainer', 'metadata': {'icon': '/icons/registry.png'}, 'capabilities': {'api': 'org.ystia.docker.containers.docker.registry.capabilities.RegistryAPI'}, 'properties': {'image': {'type': 'string', 'description': ""Repository path and tag used to create the container. If an image is not found, the image will be pulled from the registry. If no tag is included, 'latest' will be used.\n"", 'required': True, 'default': 'registry:2'}, 'restart_policy': {'type': 'string', 'constraints': [{'valid_values': ['no', 'on-failure', 'always', 'unless-stopped']}], 'default': 'always'}, 'published_ports': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of ports to publish from the container to the host.\nUse docker CLI syntax: 8000, 9000:8000, or 0.0.0.0:9000:8000, where 8000 is a container port, 9000 is a host port, and 0.0.0.0 is a host interface.\nContainer ports must be exposed either in the Dockerfile or via the expose option.\nA value of all will publish all exposed container ports to random host ports, ignoring any other mappings.\n', 'required': False, 'default': ['5000:5000']}}}}",0
"{'org.ystia.java.linux.bash.nodes.Java': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Java component for linux', 'tags': {'icon': '/images/java-icon.png'}, 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Standard', 'create', 'YSTIA_JAVA_HOME']}}, 'properties': {'component_version': {'type': 'version', 'description': 'The installed Java version', 'default': 8, 'constraints': [{'valid_values': [6, 7, 8]}]}, 'jre': {'type': 'boolean', 'description': 'Is the installed Java a JRE or a JDK', 'default': True}, 'headless': {'type': 'boolean', 'description': 'This option is only relevant when installing a JRE. If true try to install an headless version of the JRE. That means without graphical libraries. Depending on the OS and the Java version the headless version may not be available, in this case the usual version will be used.\n', 'default': True}, 'download_url': {'type': 'string', 'description': 'By default we will try to use the OS package manager to install Java. If you use this property you can specify an url used to download a Java archive. This url should be a direct access url without redirection. Supported archive types are: zip, tar, tar.gz, tgz, tar.bz2. The Java distribution should be include in a top directory inside of this archive (ie: This directory is the JAVA_HOME directory).\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.+(zip|tar|tar.gz|tgz|tar.bz2)$'}]}}, 'interfaces': {'Standard': {'create': {'inputs': {'JAVA_VERSION': {'get_property': ['SELF', 'component_version']}, 'JAVA_IS_JRE': {'get_property': ['SELF', 'jre']}, 'JAVA_IS_HEADLESS': {'get_property': ['SELF', 'headless']}, 'JAVA_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'scripts/java_install.sh'}, 'delete': {'inputs': {'JAVA_VERSION': {'get_property': ['SELF', 'component_version']}, 'JAVA_HOME': {'get_attribute': ['SELF', 'java_home']}}, 'implementation': 'scripts/java_uninstall.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}], 'capabilities': {'java_host': {'type': 'org.ystia.java.pub.capabilities.JavaHosting', 'occurrences': [0, 'unbounded']}}}}",0
"{'org.ystia.dns.pub.nodes.DnsServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'metadata': {'icon': '/images/dns-icon.png'}, 'capabilities': {'dns_endpoint': 'org.ystia.dns.pub.capabilities.DnsEndpoint'}}}",0
"{'org.ystia.samples.welcome.linux.bash.nodes.Welcome': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Installation of the Welcome Very Simple HTTP Server, an Ystia Sample.', 'tags': {'icon': '/images/welcome-icon.png'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'endpoint', 'port']}]}}, 'properties': {'component_version': {'type': 'version', 'description': 'The installed Welcome version', 'default': '1.4.0', 'constraints': [{'equal': '1.4.0'}]}}, 'capabilities': {'endpoint': 'org.ystia.samples.welcome.capabilities.Endpoint'}, 'interfaces': {'Standard': {'start': {'inputs': {'PORT': {'get_property': ['SELF', 'endpoint', 'port']}}, 'implementation': 'scripts/welcome_start.sh'}, 'stop': 'scripts/welcome_stop.sh'}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.python.linux.bash.nodes.Python': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'Python Anaconda component for linux', 'tags': {'icon': '/images/python-logo.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'The installed Anaconda Python version', 'default': '2.7.15', 'constraints': [{'valid_values': ['2.7.15']}]}, 'repository': {'type': 'string', 'description': 'This property give the opportunity to specify an alternative download repository for Anaconda and the additionnal packages. It is your responsibility to provide an accessible download url and to store required artifact on it. You should specify only the base repository url.\n', 'required': False, 'constraints': [{'pattern': '^(http|https|ftp)://.+/.*$'}]}, 'nlp_twitter': {'type': 'boolean', 'description': 'Install additional packages for Natural Language Processing and twitter API (nltk,twython)', 'default': True}, 'dataviz': {'type': 'boolean', 'description': 'Install additional packages for data visualization (seaborn,plotly)', 'default': True}, 'dataformat': {'type': 'boolean', 'description': 'Install additional packages for data formatting (csvkit,configparser)', 'default': True}, 'pybrain': {'type': 'boolean', 'description': 'Install Python-Based Reinforcement Learning, Artificial Intelligence and Neural Network Library (pybrain)', 'default': False}, 'ml': {'type': 'boolean', 'description': 'Install additionnal package for machine learning topics (pandas and scikit-learn)', 'default': False}}, 'capabilities': {'python_host': {'type': 'org.ystia.python.pub.capabilities.PythonHosting', 'occurrences': [0, 'unbounded']}}, 'interfaces': {'Standard': {'create': {'inputs': {'REPOSITORY': {'get_property': ['SELF', 'repository']}, 'NLP_TWITTER': {'get_property': ['SELF', 'nlp_twitter']}, 'DATAVIZ': {'get_property': ['SELF', 'dataviz']}, 'DATAFORMAT': {'get_property': ['SELF', 'dataformat']}, 'PYBRAIN': {'get_property': ['SELF', 'pybrain']}, 'ML': {'get_property': ['SELF', 'ml']}}, 'implementation': 'scripts/anaconda_install.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.xfs.linux.bash.nodes.XFS': {'derived_from': 'org.ystia.nodes.SoftwareComponent', 'description': 'XFS FileSystem component which can be used to mount and format a volume', 'tags': {'icon': '/images/volume.png'}, 'properties': {'location': {'type': 'string', 'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as ‘/usr/data’ Note: The user must provide it and it cannot be “root”.\n', 'constraints': [{'min_length': 1}]}}, 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}]}}]}}}, {'partition': {'capability': 'tosca.capabilities.Node', 'relationship': 'org.ystia.xfs.linux.bash.relationships.LinuxPartition', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'FS_MOUNT_PATH': {'get_property': ['SELF', 'location']}, 'PARTITION_NAME': {'get_attribute': ['SELF', 'partition_name']}}, 'implementation': 'scripts/mount.sh'}, 'stop': {'inputs': {'FS_MOUNT_PATH': {'get_property': ['SELF', 'location']}}, 'implementation': 'scripts/unmount.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.munge.ansible.nodes.Munge': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/munge-icon.png'}, 'properties': {'key': {'type': 'string', 'default': '', 'required': False, 'description': 'Base64-encoded Munge secret key. If not provided a key will be generated automatically using a pseudo-random seed.\n'}}, 'interfaces': {'Standard': {'create': {'inputs': {'KEY': {'get_property': ['SELF', 'key']}}, 'implementation': 'playbooks/create.yaml'}, 'start': 'playbooks/start.yaml', 'stop': 'playbooks/stop.yaml'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'attributes': {'private_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.', 'required': False}, 'public_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.', 'required': False}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}, 'required': False}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}, 'required': False}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'tags': {'icon': '/images/relational_db.png'}, 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database', 'required': True}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data', 'required': False}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.BlockStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'tags': {'icon': '/images/volume.png'}, 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'clearwater.nodes.MonitoredServer': {'derived_from': 'cloudify.openstack.nodes.Server', 'properties': {'openstack_config': {'default': {'username': {'get_secret': 'keystone_username'}, 'password': {'get_secret': 'keystone_password'}, 'project_name': {'get_secret': 'keystone_tenant_name'}, 'auth_url': {'get_secret': 'keystone_url'}, 'region': {'get_secret': 'region'}, 'user_domain_name': {'get_secret': 'user_domain_name'}, 'project_domain_name': {'get_secret': 'project_domain_name'}, 'custom_configuration': {'keystone_client': {'insecure': True}, 'nova_client': {'insecure': True}, 'neutron_client': {'insecure': True}, 'cinder_client': {'insecure': True}}}}, 'cloudify_agent': {'default': {'user': {'get_input': 'agent_user'}, 'key': {'get_property': ['keypair', 'private_key_path']}}}, 'image': {'default': {'get_input': 'image_id'}}, 'flavor': {'default': {'get_input': 'flavor_id'}}, 'management_network_name': {'default': {'get_input': 'network_name'}}}, 'interfaces': {'cloudify.interfaces.monitoring_agent': {'install': {'implementation': 'diamond.diamond_agent.tasks.install', 'inputs': {'diamond_config': {'default': {'interval': 5}}}}, 'start': 'diamond.diamond_agent.tasks.start', 'stop': 'diamond.diamond_agent.tasks.stop', 'uninstall': 'diamond.diamond_agent.tasks.uninstall'}, 'cloudify.interfaces.monitoring': {'start': {'implementation': 'diamond.diamond_agent.tasks.add_collectors', 'inputs': {'collectors_config': {'default': {'CPUCollector': {}, 'MemoryCollector': {}, 'LoadAverageCollector': {}, 'DiskUsageCollector': {'config': {'devices': 'x?vd[a-z]+[0-9]*$'}}, 'NetworkCollector': {}}}}}}}}}",0
"{'DB': {'capabilities': {'metadata': 'k8s:Metadata', 'db': 'DB'}}}",0
"{'radon.policies.createRole': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}, 'role_name': {'type': 'string'}, 'role_description': {'type': 'string'}}, 'attributes': {'role_arn': {'type': 'string', 'description': 'AWS role arn identifier'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'role_name': {'default': {'get_property': ['SELF', 'role_name']}, 'type': 'string'}, 'role_description': {'default': {'get_property': ['SELF', 'role_description']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/aws_role/create.yml'}}}, 'capabilities': {'requires_role': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.function.aws_lambda']}}}}",0
"{'radon.nodes.function.aws_lambda': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}, 'function_name': {'type': 'string'}, 'zip_file': {'type': 'string', 'description': 'path to a function zip file'}, 'function_alias': {'type': 'string'}, 'permission_id': {'type': 'string'}, 'lambda_runtime': {'type': 'string', 'description': 'Runtime for lambda (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'}, 'lambda_handler': {'type': 'string', 'description': 'Handler for lambda function'}, 'lambda_timeout': {'type': 'string', 'description': 'Function timeout in seconds'}, 'lambda_memory': {'type': 'string', 'description': 'Function memory in MB'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'zip_file': {'default': {'get_property': ['SELF', 'zip_file']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}, 'type': 'string'}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}, 'type': 'string'}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}, 'type': 'string'}, 'lambda_runtime': {'default': {'get_property': ['SELF', 'lambda_runtime']}, 'type': 'string'}, 'lambda_handler': {'default': {'get_property': ['SELF', 'lambda_handler']}, 'type': 'string'}, 'lambda_timeout': {'default': {'get_property': ['SELF', 'lambda_timeout']}, 'type': 'string'}, 'lambda_memory': {'default': {'get_property': ['SELF', 'lambda_memory']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/lambda/create.yml', 'delete': 'playbooks/lambda/undeploy.yml'}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}, 'requirements': [{'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}, {'requires_role': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.s3_bucket': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'bucket_name': {'type': 'string', 'description': 'The name of the bucket'}, 'aws_region': {'type': 'string'}}, 'attributes': {'bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'bucket_name': {'default': {'get_property': ['SELF', 'bucket_name']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/bucket/create.yml', 'delete': 'playbooks/bucket/undeploy.yml'}}}, 'capabilities': {'bucket': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}}}",0
"{'radon.nodes.triggers.bucket_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'event_name': {'default': 'radon_on_jpg_add', 'type': 'string'}, 'bucket_name': {'default': {'get_property': ['SELF', 'bucket', 'bucket_name']}, 'type': 'string'}, 'lambda_function_arn': {'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}, 'type': 'string'}, 'events': {'default': 's3:ObjectCreated:*', 'type': 'string'}, 'suffix': {'default': '.jpg', 'type': 'string'}, 'region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/bucket_notification/create.yml'}}}, 'requirements': [{'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}, {'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.policies.createRole': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}, 'role_name': {'type': 'string'}, 'role_description': {'type': 'string'}}, 'attributes': {'role_arn': {'type': 'string', 'description': 'AWS role arn identifier'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}}, 'role_name': {'default': {'get_property': ['SELF', 'role_name']}}, 'role_description': {'default': {'get_property': ['SELF', 'role_description']}}}, 'implementation': 'playbooks/aws_role/create.yml'}}}, 'capabilities': {'requires_role': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.function.aws_lambda']}}}}",0
"{'radon.nodes.function.aws_lambda': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}, 'function_name': {'type': 'string'}, 'zip_file': {'type': 'string', 'description': 'path to a function zip file'}, 'function_alias': {'type': 'string'}, 'permission_id': {'type': 'string'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'function_name': {'default': {'get_property': ['SELF', 'function_name']}}, 'zip_file': {'default': {'get_property': ['SELF', 'zip_file']}}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}}}, 'implementation': 'playbooks/lambda/create.yml'}, 'delete': {'inputs': {'function_name': {'default': {'get_property': ['SELF', 'function_name']}}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}}}, 'implementation': 'playbooks/lambda/undeploy.yml'}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}, 'requirements': [{'requires_role': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}, {'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationship.DependsOn'}}]}}",0
"{'radon.nodes.s3_bucket': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'bucket_name': {'type': 'string', 'description': 'The name of the bucket'}, 'aws_region': {'type': 'string'}}, 'attributes': {'bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'bucket_name': {'default': {'get_property': ['SELF', 'bucket_name']}}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}}}, 'implementation': 'playbooks/bucket/create.yml'}, 'delete': {'inputs': {'bucket_name': {'default': {'get_property': ['SELF', 'bucket_name']}}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}}}, 'implementation': 'playbooks/bucket/undeploy.yml'}}}, 'capabilities': {'bucket': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}}}",0
"{'radon.nodes.triggers.bucket_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'event_name': {'default': 'radon_on_jpg_add'}, 'bucket_name': {'default': {'get_attribute': ['SELF', 'bucket', 'bucket_name']}}, 'lambda_function_arn': {'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}}, 'events': {'default': 's3:ObjectCreated:*'}, 'suffix': {'default': '.jpg'}, 'region': {'default': {'get_property': ['SELF', 'aws_region']}}}, 'implementation': 'playbooks/bucket_notification/create.yml'}}}, 'requirements': [{'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.function.aws_lambda': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}, 'function_name': {'type': 'string'}, 'zip_file': {'type': 'string', 'description': 'path to a function zip file'}, 'function_alias': {'type': 'string'}, 'permission_id': {'type': 'string'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'zip_file': {'default': {'get_property': ['SELF', 'zip_file']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}, 'type': 'string'}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}, 'type': 'string'}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/lambda/create.yml', 'delete': 'playbooks/lambda/undeploy.yml'}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.api_gateway']}}, 'requirements': [{'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}, {'requires_role': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.s3_bucket': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'bucket_name': {'type': 'string', 'description': 'The name of the bucket'}, 'aws_region': {'type': 'string'}}, 'attributes': {'bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'bucket_name': {'default': {'get_property': ['SELF', 'bucket_name']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/bucket/create.yml', 'delete': 'playbooks/bucket/undeploy.yml'}}}, 'capabilities': {'bucket': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.api_gateway']}}}}",0
"{'radon.nodes.triggers.api_gateway': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'api_gateway_title': {'type': 'string', 'description': 'Name of the API gateway region'}, 'aws_region': {'type': 'string', 'description': 'AWS region'}, 'role_name': {'type': 'string', 'description': 'The name of the aws role'}, 'function_name': {'type': 'string', 'description': 'The name of the lambda function'}, 'api_gateway_resource_uri': {'type': 'string', 'description': 'URI of the resource to connect to API Gateway'}}, 'attributes': {'api_gateway_title': {'type': 'string'}, 'aws_region': {'type': 'string'}, 'role_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'api_gateway_resource_uri': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'api_gateway_title': {'default': {'get_property': ['SELF', 'api_gateway_title']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'role_name': {'default': {'get_property': ['SELF', 'role_name']}, 'type': 'string'}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'api_gateway_resource_uri': {'default': {'get_property': ['SELF', 'api_gateway_resource_uri']}, 'type': 'string'}, 'lambda_function_arn': {'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/api_gateway/create.yml'}}}, 'requirements': [{'requires_role': {'capability': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn'}}, {'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'tosca.test.node': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.invalid_implementation.node': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'module'}}}}}",0
"{'tosca.test.node': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:create', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:start', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:stop', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:delete', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:configure', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.node': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}, 'my_type': {'type': 'string', 'default': 'tosca.test.node'}}, 'attributes': {'name': {'type': 'string'}, 'my_type': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:create', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:start', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:stop', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:delete', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:configure', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.node.dependent': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'requirements': [{'requirement': {'capability': 'tosca.capabilities.Node', 'node': 'aiorchestra.node', 'relationship': 'tosca.test.relationships.node'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:create', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:start', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:stop', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:delete', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:configure', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.test.relationships.operations': {'derived_from': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'aiorchestra.tests.plugin:link', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'aiorchestra.tests.plugin:unlink', 'inputs': {'type': 'map'}}}}",0
"{'tosca.test.relationships.node': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'aiorchestra.tests.plugin:link', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'aiorchestra.tests.plugin:unlink', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.test.node': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.node': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}, 'my_type': {'type': 'string', 'default': 'tosca.test.node'}}, 'attributes': {'name': {'type': 'string'}, 'my_type': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:create', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:is_not_coroutine', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.node.dependent': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'requirements': [{'requirement': {'capability': 'tosca.capabilities.Node', 'node': 'aiorchestra.node', 'relationship': 'tosca.test.relationships.node'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.tests.plugin:create', 'inputs': {'type': 'map'}}, 'start': {'implementation': 'aiorchestra.tests.plugin:fail_start', 'inputs': {'type': 'map'}}, 'stop': {'implementation': 'aiorchestra.tests.plugin:stop', 'inputs': {'type': 'map'}}, 'delete': {'implementation': 'aiorchestra.tests.plugin:delete', 'inputs': {'type': 'map'}}, 'configure': {'implementation': 'aiorchestra.tests.plugin:configure', 'inputs': {'type': 'map'}}}}}}",0
"{'aiorchestra.invalid.node': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'module:method'}}}}}",0
"{'aiorchestra.node': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'aiorchestra.node.dependent': {'derived_from': 'tosca.test.node', 'properties': {'name': {'type': 'string'}}, 'attributes': {'name': {'type': 'string'}}, 'requirements': [{'requirement': {'capability': 'tosca.capabilities.Node', 'node': 'aiorchestra.node', 'relationship': 'tosca.test.relationships.node'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'tosca.test.relationships.operations': {'derived_from': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'aiorchestra.core.noop:noop', 'inputs': {'type': 'map'}}}}",0
"{'tosca.test.relationships.node': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'aiorchestra.core.noop:link', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'aiorchestra.core.noop:unlink', 'inputs': {'type': 'map'}}}}}}",0
"{'yorc.nodes.google.Compute': {'derived_from': 'yorc.nodes.Compute', 'description': 'Google Compute Engine Virtual Machine (Compute Instance)\n', 'properties': {'image_project': {'type': 'string', 'description': 'The project against which all image and image family references will be resolved. If not specified, and either image or image_family is provided, the current default project is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'image_family': {'type': 'string', 'description': 'The family of the image from which to initialize the boot disk. When a family is specified instead of an image, the latest non-deprecated  image associated with that family is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'image': {'type': 'string', 'description': 'Image from which to initialize the boot disk. If not specified, and an image family is specified, the latest  non-deprecated image associated with that family is used. At least one of the tuples image_project/image_family, image_project/image, family, image, should be defined.\n', 'required': False}, 'machine_type': {'type': 'string', 'description': 'The machine type used for the Compute Node, defining the Compute Node  CPU and Memory resources.\n', 'default': 'n1-standard-1'}, 'zone': {'type': 'string', 'description': 'The zone on which the Compute Node should be hosted.\n'}, 'description': {'type': 'string', 'description': 'Textual description of this Compute Node.\n', 'required': False}, 'labels': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs to assign to the Compute Node. \n', 'required': False}, 'metadata': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs made available to the Compute Node Operating System. On Google official images, the metadata keys startup-script or startup-script-url can be used to specify a script that will be executed by the Compute Node once it starts running.\n', 'required': False}, 'no_address': {'type': 'boolean', 'description': 'If set to true, the instance will not be assigned an external IP address\n', 'required': False}, 'preemptible': {'type': 'boolean', 'description': 'If set to true, the Compute Node is preemptible and time-limited.\n', 'required': False}, 'scopes': {'type': 'string', 'description': 'Comma-separated list of service scopes defining access to Google Cloud APIs. A scope can be either the full URI of the scope or an alias, like default  or cloud-platform.\n', 'required': False}, 'service_account': {'type': 'string', 'description': 'Service Account (e-mail or alias) to attach to the Compute Node. If not provided, the Compute Node will get the project default service account. \n', 'required': False}, 'tags': {'type': 'string', 'description': 'Comma-separated list of tags to apply to the instances for identifying the instances to which network firewall rules will apply.\n', 'required': False}, 'scratch_disks': {'type': 'list', 'description': 'Additional scratch disks to attach to the instance. Maximum allowed is 8.', 'required': False, 'entry_schema': {'type': 'yorc.datatypes.google.ScratchDisk', 'constraints': [{'greater_or_equal': 0}, {'max_length': 8}]}}}, 'requirements': [{'assignment': {'capability': 'yorc.capabilities.Assignable', 'node': 'yorc.nodes.google.Address', 'relationship': 'yorc.relationships.AssignsTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'yorc.nodes.google.PrivateNetwork': {'derived_from': 'tosca.nodes.Network', 'properties': {'auto_create_subnetworks': {'type': 'boolean', 'description': 'If set to true, this network will be created in auto subnet mode, and Google will create a subnet for each region automatically. If set to false, a custom subnetted network must be created. Defaults to true.\n', 'required': False, 'default': False}, 'routing_mode': {'type': 'string', 'description': 'Sets the network-wide routing mode for Cloud Routers to use. Accepted values are ""GLOBAL"" or ""REGIONAL"". Defaults to ""REGIONAL"". Refer to the Cloud Router (https://cloud.google.com/router/docs/concepts/overview#dynamic-routing-mode) documentation for more details.\n', 'required': False}, 'description': {'type': 'string', 'description': 'An optional description of this resource.\n', 'required': False}, 'network_name': {'type': 'string', 'description': 'Any existing network to use. You can create default or custom subnets with existing network.\n', 'required': False}, 'cidr': {'type': 'string', 'description': 'CIDR range for default subnet creation. If this field is specified, you must fill the cidr_region too.\n', 'required': False}, 'cidr_region': {'type': 'string', 'description': 'The Google region to used with specified cidr for default subnet creation. This field is mandatory is cidr is set.\n', 'required': False}, 'project': {'type': 'string', 'description': 'The ID of the project in which the resource belongs. If it is not provided, the infrastructure location project is used.\n', 'required': False}, 'custom_subnetworks': {'type': 'list', 'description': 'if auto_create_subnetworks is set to false, you must create at least one custom sub-network for this network. Each VPC network is subdivided into subnets, and each subnet is contained within a single region. You can have more than one subnet in a region for a given VPC network. Each subnet has a contiguous private RFC1918 IP space. When you create an instance in a subnet, the instance draws its internal IP address from that subnet.\n', 'entry_schema': {'type': 'yorc.datatypes.google.Subnetwork'}, 'required': False}}, 'attributes': {'network_name': {'type': 'string', 'description': 'The unique name of the network.'}}}}",0
"{'yorc.nodes.google.Address': {'derived_from': 'tosca.nodes.Root', 'properties': {'addresses': {'type': 'string', 'description': 'Comma-separated list of external addresses. Only IPv4 is supported. The IP address must be inside the specified subnetwork, if any.\n', 'required': False}, 'address_type': {'type': 'string', 'description': 'The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.\n', 'required': False}, 'description': {'type': 'string', 'description': 'An optional description of this resource.\n', 'required': False}, 'network_tier': {'type': 'string', 'description': 'The networking tier used for configuring this address. This field can take the following values: PREMIUM or STANDARD. If this field is not specified, it is assumed to be PREMIUM.\n', 'required': False}, 'subnetwork': {'type': 'string', 'description': ""The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.\n"", 'required': False}, 'labels': {'type': 'string', 'description': 'Comma-separated list of label KEY=VALUE pairs to assign to the Compute Address.\n', 'required': False, 'entry_schema': {'type': 'string'}}, 'region': {'type': 'string', 'description': 'The Region in which the created address should reside. If it is not provided, the infrastructure location region is used.\n', 'required': False}, 'project': {'type': 'string', 'description': 'The ID of the project in which the resource belongs. If it is not provided, the infrastructure location project is used.\n', 'required': False}}, 'capabilities': {'assignment': {'type': 'yorc.capabilities.Assignable'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'fake.sh', 'type': 'yorc.artifacts.google.Deployment'}}, 'delete': {'implementation': {'file': 'fake.sh', 'type': 'yorc.artifacts.google.Deployment'}}}}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The compute IP address.'}}}}",0
"{'yorc.nodes.google.PublicNetwork': {'derived_from': 'tosca.nodes.Network', 'properties': {'addresses': {'type': 'string', 'description': 'A comma-separated address IPs to use.', 'required': False}, 'region': {'type': 'string', 'description': 'The public network Google Compute Platform region. If it is not provided, the infrastructure location region is used.\n', 'required': False}, 'subnetwork': {'type': 'string', 'description': ""The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type with GCE_ENDPOINT/DNS_RESOLVER purposes.\n"", 'required': False}}}}",0
"{'yorc.nodes.google.Image': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Google location configuration type representing the boot image of the Compute Node.\n', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'os': {'type': 'tosca.capabilities.OperatingSystem'}}}}",0
"{'yorc.nodes.google.MachineType': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Google location configuration type representing a Machine type, which defines  the Compute Node CPU and Memory resources.\n', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'org.alien4cloud.aws.EC2Instance': {'derived_from': 'yorc.nodes.Compute', 'properties': {'aws_access_key_id': {'type': 'string', 'required': True}, 'aws_secret_access_key': {'type': 'string', 'required': True}, 'aws_default_region': {'type': 'string', 'required': True}, 'image_id': {'type': 'string', 'required': True}, 'instance_type': {'type': 'string', 'required': True}, 'security_group_ids': {'type': 'string', 'required': True}, 'key_name': {'type': 'string'}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'IP_ADDRESS']}, 'private_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'IP_ADDRESS']}, 'public_ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'PUBLIC_IP_ADDRESS']}, 'public_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'PUBLIC_IP_ADDRESS']}, 'instance_id': {'get_operation_output': ['SELF', 'Standard', 'start', 'INSTANCE_ID']}}, 'capabilities': {'endpoint': {'type': 'yorc.capabilities.Endpoint.ProvisioningAdmin', 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'IP_ADDRESS']}}}}, 'interfaces': {'Standard': {'start': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'IMAGE_ID': {'get_property': ['SELF', 'image_id']}, 'INSTANCE_TYPE': {'get_property': ['SELF', 'instance_type']}, 'SECURITY_GROUP_IDS': {'get_property': ['SELF', 'security_group_ids']}, 'KEY_NAME': {'get_property': ['SELF', 'key_name']}}, 'operation_host': 'ORCHESTRATOR', 'implementation': 'scripts/EC2Instance/start.sh'}, 'stop': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_attribute': ['SELF', 'instance_id']}}, 'operation_host': 'ORCHESTRATOR', 'implementation': 'scripts/EC2Instance/stop.sh'}, 'delete': {'inputs': {'AWS_ACCESS_KEY_ID': {'get_property': ['SELF', 'aws_access_key_id']}, 'AWS_SECRET_ACCESS_KEY': {'get_property': ['SELF', 'aws_secret_access_key']}, 'AWS_DEFAULT_REGION': {'get_property': ['SELF', 'aws_default_region']}, 'INSTANCE_ID': {'get_attribute': ['SELF', 'instance_id']}}, 'operation_host': 'ORCHESTRATOR', 'implementation': 'scripts/EC2Instance/delete.sh'}}}}}",0
"{'org.ystia.yorc.samples.vision.linux.ansible.nodes.Detector': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'GCP Vision API client', 'tags': {'icon': '/images/detector-icon.png'}, 'properties': {'project_id': {'type': 'string', 'description': 'Google Cloud Project hosting the Cloud Storage buckets where images to analyze will be uploaded \n'}, 'api_keys_file': {'type': 'string', 'description': 'Path to a Google Cloud API keys file providing credentials needed to use the API \n'}, 'subscription_id': {'type': 'string', 'description': 'Google Cloud Pub/Sub subscription identifier used to be notified of images uploads\n'}, 'output_bucket_name': {'type': 'string', 'description': 'Name of the Google Cloud Storage bucket where to store detection results\n'}}, 'interfaces': {'Standard': {'create': {'description': 'Detector installation step', 'inputs': {'PROJECT_ID': {'get_property': ['SELF', 'project_id']}, 'API_KEYS_FILE': {'get_property': ['SELF', 'api_keys_file']}, 'SUBSCRIPTION_ID': {'get_property': ['SELF', 'subscription_id']}, 'OUTPUT_BUCKET_NAME': {'get_property': ['SELF', 'output_bucket_name']}}, 'implementation': 'playbooks/detector_install.yaml'}, 'start': {'implementation': 'playbooks/detector_start.yaml'}, 'stop': {'implementation': 'playbooks/detector_stop.yaml'}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.mpi.nodes.MPI2Component': {'derived_from': 'yorc.nodes.slurm.Job', 'tags': {'icon': '/images/slurm.png'}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'bin/submit.sh', 'type': 'yorc.artifacts.Deployment.SlurmJobBatch'}}}}}}",0
"{'yorc.nodes.aws.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'image_id': {'type': 'string', 'description': 'The AMI (Amazon Machine Image) ID.', 'required': True}, 'instance_type': {'type': 'string', 'description': ""The AWS type representing Amazon flavor. It's a combination of CPU, memory, storage, and networking capacity (By instance t2.micro)"", 'required': True}, 'key_name': {'type': 'string', 'required': True}, 'security_groups': {'type': 'string', 'description': 'Coma separated list of security groups to add to the Compute\n', 'required': True}, 'availability_zone': {'type': 'string', 'required': False, 'description': 'AWS Availability zone on which to create the instance.'}, 'placement_group': {'type': 'string', 'required': False, 'description': 'AWS Placement Group on which to add the instance.'}, 'elastic_ips': {'type': 'string', 'description': 'Coma separated list of Elastic IPs to use.', 'required': False}, 'delete_volume_on_termination': {'type': 'boolean', 'description': 'Whether the root device volume should be destroyed on instance termination (Default: true).\n', 'required': False, 'default': True}}, 'attributes': {'public_dns': {'type': 'string', 'description': 'The public DNS name assigned to the instance.'}}}}",0
"{'yorc.nodes.aws.Image': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'AWS location configuration type that represents an amazon image (ami).', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'os': {'type': 'tosca.capabilities.OperatingSystem'}}}}",0
"{'yorc.nodes.aws.InstanceType': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'AWS location configuration type that represents an amazon flavor.', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.MySQL': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'tags': {'icon': 'images/mysql.png'}, 'capabilities': {'mysql_db': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.MysqlDB'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MYSQL_DATABASE': {'get_property': ['SELF', 'mysql_db', 'db_name']}, 'ENV_MYSQL_USER': {'get_property': ['SELF', 'mysql_db', 'db_user']}, 'ENV_MYSQL_PASSWORD': {'get_property': ['SELF', 'mysql_db', 'db_password']}, 'ENV_MYSQL_ROOT_PASSWORD': 'notused', 'ENV_MYSQL_RANDOM_ROOT_PASSWORD': 'yes'}, 'implementation': {'file': 'mysql:8.0', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.wordpress': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'requirements': [{'mysql_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'wordpress_app': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.wordpress'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_WORDPRESS_DB_HOST': {'concat': [{'get_attribute': ['TARGET', 'mysql_db', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'mysql_db', 'port']}]}, 'ENV_WORDPRESS_DB_USER': {'get_attribute': ['TARGET', 'mysql_db', 'db_user']}, 'ENV_WORDPRESS_DB_PASSWORD': {'get_attribute': ['TARGET', 'mysql_db', 'db_password']}, 'ENV_WORDPRESS_DB_NAME': {'get_attribute': ['TARGET', 'mysql_db', 'db_name']}}, 'implementation': {'file': 'wordpress:4.8.1-fpm-alpine', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.test.ErrorComponent': {'description': 'This component could be configured to failed during its create or start operation.\nThis is used to test Yorc capability to return accurate error messages.\nBy default it do not fail at all. The failing behavior is controlled by boolean properties.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'failOnCreate': {'description': 'Should the create operation implemented in bash fail?', 'type': 'boolean', 'required': False, 'default': False}, 'failOnStart': {'description': 'Should the start operation implemented with an Ansible playbook fail?', 'type': 'boolean', 'required': False, 'default': False}, 'failOnStop': {'description': 'Should the stop operation implemented with an Ansible playbook fail?', 'type': 'boolean', 'required': False, 'default': False}}, 'interfaces': {'Standard': {'create': {'inputs': {'SHOULD_FAIL': {'get_property': ['SELF', 'failOnCreate']}}, 'implementation': 'implementation/create.sh'}, 'start': {'inputs': {'SHOULD_FAIL': {'get_property': ['SELF', 'failOnStart']}}, 'implementation': 'implementation/start.yaml'}, 'stop': {'inputs': {'SHOULD_FAIL': {'get_property': ['SELF', 'failOnStop']}}, 'implementation': 'implementation/stop.yaml'}}}}}",0
"{'yorc.nodes.openstack.FloatingIP': {'derived_from': 'tosca.nodes.Network', 'properties': {'ip': {'type': 'string', 'description': ""A specific Floating IP to use. Note that either 'ip' or 'floating_network_name' should be specified and 'ip' take the precedence."", 'required': False}, 'floating_network_name': {'type': 'string', 'description': ""Name of the Pool of Floating IPs to use. Note that either 'ip' or 'floating_network_name' should be specified and 'ip' take the precedence."", 'required': False}}, 'capabilities': {'connection': {'type': 'yorc.capabilities.openstack.FIPConnectivity'}}}}",0
"{'yorc.nodes.openstack.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'image': {'type': 'string', 'description': ""Openstack VM Image ID, this property is required when 'imageName' is not set and not booting from a volume\n"", 'required': False}, 'imageName': {'type': 'string', 'description': ""Openstack VM Image Name, this property is required when 'image' is not set and not booting from a volume\n"", 'required': False}, 'boot_volume': {'type': 'yorc.datatypes.openstack.BootVolume', 'description': 'Boot Volume to create\n', 'required': False}, 'flavor': {'type': 'string', 'description': ""The Openstack VM Flavor ID either this property or the 'flavorName' property is required"", 'required': False}, 'flavorName': {'type': 'string', 'description': ""The Openstack VM Image Name either this property or the 'flavor' property is required.\n"", 'required': False}, 'availability_zone': {'type': 'string', 'description': 'The Openstack Availability Zone on which the Compute should be hosted.\n', 'required': False}, 'region': {'type': 'string', 'description': ""The Openstack Region. Defaults to 'RegionOne'\n"", 'required': False}, 'key_pair': {'type': 'string', 'description': 'The Openstack Key Pair name to use when creating this Compute\n', 'required': False}, 'security_groups': {'type': 'string', 'description': 'Coma separated list of security groups to add to the Compute\n', 'required': False}}, 'requirements': [{'group': {'capability': 'yorc.capabilities.Group', 'node': 'yorc.nodes.openstack.ServerGroup', 'relationship': 'yorc.relationships.MemberOf', 'occurrences': [0, 1]}}]}}",0
"{'yorc.nodes.openstack.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'availability_zone': {'type': 'string', 'description': 'The Openstack Availability Zone on which the BlockStorage should be hosted.\n', 'required': False}, 'region': {'type': 'string', 'description': ""The Openstack Region. Defaults to 'RegionOne'\n"", 'required': False}, 'deletable': {'type': 'boolean', 'description': 'should this volume be deleted at undeployment', 'required': False, 'default': False}}}}",0
"{'yorc.nodes.openstack.PublicNetwork': {'derived_from': 'tosca.nodes.Network', 'properties': {'ip': {'type': 'string', 'description': ""A specific Floating IP to use. Note that either 'ip' or 'floating_network_name' should be specified and 'ip' take the precedence."", 'required': False}, 'floating_network_name': {'type': 'string', 'description': ""Name of the Pool of Floating IPs to use. Note that either 'ip' or 'floating_network_name' should be specified and 'ip' take the precedence."", 'required': False}}}}",0
{'yorc.nodes.openstack.Network': {'derived_from': 'tosca.nodes.Network'}},0
"{'yorc.nodes.openstack.ServerGroup': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'The name of the server group.', 'required': True}, 'policy': {'type': 'string', 'description': 'The policy applied to the server group.', 'required': True}}, 'attributes': {'id': {'type': 'string', 'description': 'The unique id of the server group.'}}, 'capabilities': {'group': {'type': 'yorc.capabilities.Group', 'valid_source_types': ['yorc.nodes.openstack.Compute']}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'fake.sh', 'type': 'yorc.artifacts.openstack.Deployment'}}, 'delete': {'implementation': {'file': 'fake.sh', 'type': 'yorc.artifacts.openstack.Deployment'}}}}}}",0
"{'yorc.nodes.openstack.Image': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'os': {'type': 'tosca.capabilities.OperatingSystem'}}}}",0
"{'yorc.nodes.openstack.Flavor': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'org.ystia.yorc.samples.orchestratorhost.sh.Component': {'derived_from': 'tosca.nodes.Root', 'properties': {'myinput': {'type': 'string', 'default': 'test'}}, 'attributes': {'output': {'get_operation_output': ['SELF', 'Standard', 'create', 'MY_OUTPUT']}}, 'interfaces': {'Standard': {'create': {'inputs': {'MY_INPUT': {'get_property': ['SELF', 'myinput']}}, 'implementation': 'scripts/create.sh'}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.mpi.nodes.MPIComponent': {'derived_from': 'yorc.nodes.slurm.Job', 'tags': {'icon': '/images/slurm.png'}, 'artifacts': [{'bin': {'type': 'tosca.artifacts.File', 'file': 'bin'}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'bin/submit.sh', 'type': 'yorc.artifacts.Deployment.SlurmJobBatch'}}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.singularity.nodes.MNISTComponent': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'tags': {'icon': '/images/singularity.png'}, 'artifacts': [{'bin': {'type': 'tosca.artifacts.File', 'file': 'bin'}}, {'data': {'type': 'tosca.artifacts.File', 'file': 'data'}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'docker://tensorflow/tensorflow:1.13.1-py3 ', 'repository': 'docker', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'yorc.nodes.hostspool.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'shareable': {'type': 'boolean', 'description': 'Specify if the compute can be shared.', 'required': False, 'default': False}, 'filters': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}}, 'attributes': {'hostname': {'type': 'string', 'description': 'The hostname as known in the hosts pool'}}, 'capabilities': {'endpoint': {'type': 'yorc.capabilities.Endpoint.ProvisioningAdmin', 'properties': {'credentials': {'user': 'not significant, will be set by Yorc itself'}}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.singularity.nodes.LolcowComponent': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'tags': {'icon': '/images/singularity.png'}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'docker://godlovedc/lolcow:latest', 'repository': 'docker', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.singularity.nodes.HelloComponent': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'tags': {'icon': '/images/singularity.png'}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': '/home_nfs/commons/hello-world.img', 'repository': 'cluster_nfs', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.singularity.nodes.ComputePIComponent': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'tags': {'icon': '/images/singularity.png'}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'docker://perl:latest', 'repository': 'docker', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'org.ystia.yorc.samples.job.slurm.singularity.nodes.BashLoopComponent': {'derived_from': 'yorc.nodes.slurm.SingularityJob', 'tags': {'icon': '/images/singularity.png'}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'docker://yikaus/alpine-bash:latest', 'repository': 'docker', 'type': 'yorc.artifacts.Deployment.SlurmJobImage'}}}}}}",0
"{'org.yorc.samples.python.Component': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Sample component to illustrate\nhow to implement a Component lifecycle in Python\n', 'tags': {'icon': '/images/python.png'}, 'properties': {'hello_message': {'description': 'A simple message to print', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': False, 'default': 'ov2'}, 'mapProp': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}, 'default': {'m1': 'v1', 'm2': 'v2'}}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}}, 'capabilities': {'myCap': {'type': 'tosca.capabilities.Endpoint', 'description': 'A very wide\ndescription\n', 'properties': {'protocol': 'ssh', 'network_name': {'get_attribute': ['SELF', 'resolvedOutput1']}}, 'valid_source_types': ['tosca.nodes.Compute', 'tosca:.nodes.Root'], 'occurrences': [1, 2]}, 'myOtherCap': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.Root', 'node': 'tosca.nodes.Root', 'occurrences': [1, 1]}}, {'filesystem_endpoint': {'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.Root', 'occurrences': [0, 1]}}, {'shortcut': 'tosca.capabilities.Root'}], 'interfaces': {'Standard': {'inputs': {'debug': 'true'}, 'create': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}}, 'implementation': 'scripts/create.sh'}, 'start': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': {'file': 'scripts/start.sh', 'type': 'tosca.artifacts.Implementation.Bash'}}}, 'custom': {'inputs': {'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}}, 'implementation': 'scripts/op.sh'}}}, 'artifacts': [{'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'type': 'tosca.artifacts.Implementation.Bash', 'file': 'somewhere/here.sh', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}]}}",0
{'yorc.nodes.kubernetes.api.types.DeploymentResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.DeploymentResource'}},0
{'yorc.nodes.kubernetes.api.types.JobResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.JobResource'}},0
{'yorc.nodes.kubernetes.api.types.ServiceResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.ServiceResource'}},0
{'yorc.nodes.kubernetes.api.types.SimpleResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.SimpleResource'}},0
"{'org.ystia.yorc.samples.kube.containers.nodes.Graphite': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'metadata': {'icon': 'images/graphite.png'}, 'capabilities': {'http_endpoint': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.Graphite', 'description': 'Endpoint to graphite Web UI'}, 'data_collection': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.GraphiteDataCollectionEndpoint', 'description': 'Endpoint to collect data'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'sitespeedio/graphite', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.Grafana': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'metadata': {'icon': 'images/grafana.png'}, 'capabilities': {'http_endpoint': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.Grafana', 'description': 'Endpoint to visualize grafana collected data'}}, 'requirements': [{'http_endpoint': {'capability': 'org.ystia.yorc.samples.kube.containers.capabilities.Graphite', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'create': {'inputs': {'ENV_GRAPHITE_URL': {'concat': ['http://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'ENV_GF_AUTH_ANONYMOUS_ENABLED': True}, 'implementation': {'file': 'laurentg/grafana', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.job.mocks.DelayJob': {'derived_from': 'tosca.nodes.Root', 'properties': {'run_delay': {'type': 'integer', 'default': 3, 'required': False, 'constraints': [{'greater_or_equal': 0}]}, 'random_status': {'type': 'boolean', 'default': False, 'required': False}, 'failure': {'type': 'boolean', 'default': False, 'description': 'if both failure and random_status are true a fail become one of the possible status with running and done', 'required': False}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': 'scripts/submit.sh', 'run': {'inputs': {'DELAY': {'get_property': ['SELF', 'run_delay']}, 'RANDOM_STATUS': {'get_property': ['SELF', 'random_status']}, 'FAILURE': {'get_property': ['SELF', 'failure']}}, 'implementation': 'scripts/run.sh'}, 'cancel': 'scripts/cancel.sh'}}}}",0
"{'org.ystia.yorc.samples.job.slurm.failure.nodes.FailureComponent': {'derived_from': 'yorc.nodes.slurm.Job', 'description': 'Component with batch script failure', 'tags': {'icon': '/images/slurm.png'}, 'artifacts': [{'bin': {'type': 'tosca.artifacts.File', 'file': 'bin'}}], 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'bin/submit_err.sh', 'type': 'yorc.artifacts.Deployment.SlurmJobBatch'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.Yorc': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'consul_ui': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.ConsulUI', 'description': 'Endpoint to acess consul UI'}, 'yorc_server': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.YorcRestAPI', 'description': 'Endpoint to communicate with yorc API'}}, 'properties': {'yorc_debug': {'description': ""Enable or not Yorc's log debuging"", 'type': 'string', 'required': True, 'default': 'NO_DEBUG', 'constraints': [{'valid_values': ['DEBUG', 'NO_DEBUG']}]}, 'consul_ui': {'description': 'Enable consul UI available on port 8500', 'type': 'boolean', 'required': True, 'default': True}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_YORC_LOG': {'get_property': ['SELF', 'yorc_debug']}, 'ENV_CONSUL_ENV_ui': {'get_property': ['SELF', 'consul_ui']}, 'ENV_CONSUL_ENV_client_addr': '""0.0.0.0""'}, 'implementation': {'file': 'ystia/yorc:3.0.2', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.Apache': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'http_endpoint': {'type': 'org.ystia.yorc.samples.kube.containers.capabilities.Http'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'httpd:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'yorc.nodes.slurm.Compute': {'derived_from': 'yorc.nodes.Compute', 'properties': {'gres': {'type': 'string', 'required': False, 'description': 'Specifies a comma delimited list of generic consumable resources. The format of each entry on the list is ""name[[:type]:count]"". The name is that of the consumable resource. The count is the number of those resources with a default value of 1. The specified resources will be allocated to the job on each node. The available generic consumable resources is configurable by the system administrator. Examples of use include ""--gres=gpu:2,mic=1"", ""--gres=gpu:kepler:2"", and ""--gres=help"".\n'}, 'constraint': {'type': 'string', 'required': False, 'description': 'Nodes can have features assigned to them by the Slurm administrator. Users can specify which of these features are required by their job using the constraint option. Only nodes having features matching the job constraints will be used to satisfy the request. Multiple constraints may be specified with AND, OR, matching OR, resource counts, etc. (some operators are not supported on all system types).\n'}, 'partition': {'type': 'string', 'required': False, 'description': 'Slurm partition where the nodes will be deployed'}, 'job_name': {'type': 'string', 'required': False, 'description': 'Specify a name for the job allocation. The specified name will appear along with the job id.'}, 'account': {'type': 'string', 'description': 'Charge resources used by this allocation to specified account. May be mandatory according to configuration.\n', 'required': False}, 'reservation': {'type': 'string', 'description': 'Allocate resources from the named reservation.\n', 'required': False}}, 'capabilities': {'endpoint': {'type': 'yorc.capabilities.slurm.Endpoint'}}, 'attributes': {'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.'}, 'job_id': {'type': 'string', 'description': 'The ID of the job allocation.'}, 'partition': {'type': 'string', 'description': 'Slurm partition where the nodes are deployed.'}}}}",0
"{'yorc.nodes.slurm.Job': {'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'slurm_options': {'type': 'yorc.datatypes.slurm.JobOptions', 'description': 'Job properties used for Slurm sbatch execution. See Slurm documentation (https://slurm.schedmd.com/sbatch.html) for more details.\n', 'required': False}, 'working_directory': {'type': 'string', 'description': ""Directory where the batch script or command will be executed. Default is home's related user."", 'required': False}, 'execution_options': {'type': 'yorc.datatypes.slurm.ExecutionOptions', 'description': 'Properties used for the execution itself.\n', 'required': False}, 'monitoring_time_interval': {'type': 'string', 'description': 'Time interval duration used for job monitoring as ""5s"" or ""300ms"" Valid time units are ""ns"", ""us"" (or ""µs""), ""ms"", ""s"", ""m"", ""h"".\n', 'required': False}, 'credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Provide user credentials for connection to slurm client node\n', 'required': False}}, 'attributes': {'job_id': {'type': 'string', 'description': 'The ID of the job.'}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'implementation': {'file': 'resources.yaml', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}, 'run': {'implementation': {'file': 'resources.yaml', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}, 'cancel': {'implementation': {'file': 'resources.yaml', 'type': 'yorc.artifacts.Deployment.SlurmJob'}}}}}}",0
"{'yorc.nodes.slurm.SingularityJob': {'derived_from': 'yorc.nodes.slurm.Job', 'properties': {'singularity_command_options': {'type': 'list', 'description': 'Options passed to the ""singularity run"" or ""singularity exec"" command. See Singularity documentation (https://www.sylabs.io/docs/) for more details.\n', 'required': False, 'entry_schema': {'type': 'string'}}, 'singularity_debug': {'type': 'boolean', 'description': 'Print all debug and verbose information during singularity execution', 'required': False, 'default': False}}}}",0
"{'org.ystia.yorc.samples.job.noscheduler.SpawnJob': {'derived_from': 'org.alien4cloud.nodes.Job', 'properties': {'command': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'attributes': {'commandSpawned': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'submit', 'COMMAND_SPAWNED']}, 'commandStdout': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'run', 'COMMAND_STDOUT']}, 'commandStderr': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'run', 'COMMAND_STDERR']}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'inputs': {'COMMAND_TO_SPAWN': {'get_property': ['SELF', 'command']}}, 'submit': 'scripts/operations/submit.sh', 'run': 'scripts/operations/run.sh', 'cancel': 'scripts/operations/cancel.sh'}}}}",0
"{'org.ystia.yorc.samples.job.noscheduler.DisplayResJob': {'derived_from': 'org.alien4cloud.nodes.Job', 'requirements': [{'spawnedJob': {'capability': 'tosca.capabilities.Node', 'node': 'org.ystia.yorc.samples.job.noscheduler.SpawnJob', 'relationship': 'org.ystia.yorc.samples.relationships.noscheduler.DisplayResult', 'occurrences': [1, 'UNBOUNDED']}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'attributes': {'results': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'run', 'COMMAND_STDOUT']}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'inputs': {'STDOUT_RESULT': {'get_attribute': ['REQ_TARGET', 'spawnedJob', 'commandStdout']}}, 'implementation': 'scripts/operations/submit_display_results.sh'}, 'run': 'scripts/operations/run.sh', 'cancel': 'scripts/operations/cancel.sh'}}, 'artifacts': [{'display_results_script': {'file': 'scripts/artifacts/display_results.sh', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.yorc.samples.python.Component': {'metadata': {'icon': '/images/python.png'}, 'description': 'Sample component to illustrate\nhow to implement a Component lifecycle in Python\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'hello_message': {'type': 'string', 'description': 'A simple message to print', 'default': 'Hello World!'}, 'outputVar1': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'default': 'ov1'}, 'outputVar2': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'required': False, 'default': 'ov2'}, 'mapProp': {'type': 'map', 'required': False, 'default': {'m1': 'v1', 'm2': 'v2'}, 'entry_schema': {'type': 'string'}}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}}, 'interfaces': {'custom': {'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}, 'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'implementation': 'scripts/op.sh'}}, 'Standard': {'start': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}, 'debug': True}, 'implementation': {'file': 'scripts/start.sh', 'type': 'tosca.artifacts.Implementation.Bash'}}, 'create': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}, 'debug': True}, 'implementation': 'scripts/create.sh'}}}, 'artifacts': {'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'file': 'somewhere/here.sh', 'type': 'tosca.artifacts.Implementation.Bash', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}, 'capabilities': {'myCap': {'type': 'tosca.capabilities.Endpoint', 'description': 'A very wide\ndescription\n', 'properties': {'protocol': 'ssh', 'network_name': {'get_attribute': ['SELF', 'resolvedOutput1']}}, 'valid_source_types': ['tosca.nodes.Compute', 'tosca:.nodes.Root'], 'occurrences': [1, 2]}, 'myOtherCap': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Root', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.Root'}}, {'filesystem_endpoint': {'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.Root', 'occurrences': [0, 1]}}, {'shortcut': {'capability': 'tosca.capabilities.Root'}}]}}",0
"{'org.ystia.yorc.samples.orchestratorhost.ansible.Component': {'derived_from': 'tosca.nodes.Root', 'properties': {'myinput': {'type': 'string', 'default': 'test'}}, 'attributes': {'output': {'get_operation_output': ['SELF', 'Standard', 'create', 'MY_OUTPUT']}}, 'interfaces': {'Standard': {'create': {'inputs': {'MY_INPUT': {'get_property': ['SELF', 'myinput']}}, 'implementation': 'playbooks/create.yml'}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.ComputePIJob': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['perl', '-Mbignum=bpi', '-wle', 'print bpi(2000)']}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'perl:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.ComputeBashLoop': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['/bin/bash', '-c', ""for d in $(seq 1 15); do echo $d; sleep $d; done; echo 'Computation done!';""]}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'yikaus/alpine-bash:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.kube.containers.nodes.ComputeFail': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['/bin/bash', '-c', ""sleep 10; >&2 echo 'Computation Failed!'; exit 1""]}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'yikaus/alpine-bash:latest', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.python.Component': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Sample component to illustrate how to implement a Component lifecycle in Python\n', 'tags': {'icon': '/images/python.png'}, 'properties': {'user': {'description': 'name to whom say hello or goodbye in custom command', 'type': 'string', 'required': True, 'default': 'John Doe'}, 'hello_message': {'description': 'A simple message to print', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}}, 'interfaces': {'Standard': {'create': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}}, 'implementation': 'scripts/create.py'}, 'start': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': 'scripts/start.py'}}, 'custom': {'inputs': {'user': {'get_property': ['SELF', 'user']}}, 'say_hello': {'implementation': 'scripts/hello.py'}, 'say_goodbye': {'implementation': 'scripts/goodbye.py'}}}}}",0
"{'dice.firewall_rules.Raw': {'derived_from': 'cloudify.nodes.SecurityGroup', 'properties': {'rules': {'description': 'List of firewall rules. Firewall rules should have the following fields: ip_prefix, protocol, from_port, to_port. If only a single port should be opened, from_port and to_port fields can be replaced by single port field.\n', 'default': []}, 'platform': {'description': 'Specifies what platform will host blueprint.\n', 'required': True}, 'platform_config': {'description': 'Configuration for underlying platform.', 'type': 'dice.datatypes.PlatformConfig', 'required': False}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'dice.dice_plugin.general.create_firewall', 'executor': 'central_deployment_agent'}, 'delete': {'implementation': 'dice.dice_plugin.general.delete_firewall', 'executor': 'central_deployment_agent'}}, 'cloudify.interfaces.validation': {'creation': {'implementation': 'dice.dice_plugin.general.validate_firewall', 'executor': 'central_deployment_agent'}}}}}",0
"{'dice.RawVirtualIP': {'derived_from': 'cloudify.nodes.VirtualIP', 'properties': {'platform': {'description': 'Specifies what platform will host blueprint.\n', 'required': True}, 'platform_config': {'description': 'Configuration for underlying platform.', 'type': 'dice.datatypes.PlatformConfig', 'required': False}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'dice.dice_plugin.general.create_virtual_ip', 'executor': 'central_deployment_agent'}, 'delete': {'implementation': 'dice.dice_plugin.general.delete_virtual_ip', 'executor': 'central_deployment_agent'}}, 'cloudify.interfaces.validation': {'creation': {'implementation': 'dice.dice_plugin.general.validate_virtual_ip', 'executor': 'central_deployment_agent'}}}}}",0
"{'dice.images.Raw': {'derived_from': 'cloudify.nodes.Root', 'properties': {'image': {'description': 'Image source (URL or blueprint-relative path).\n', 'required': True}, 'container_format': {'description': 'Container format', 'required': False, 'default': 'bare'}, 'disk_format': {'description': 'Disk format', 'required': False, 'default': 'qcow2'}, 'platform': {'description': 'Specifies what platform will host blueprint.\n', 'required': True}, 'platform_config': {'description': 'Configuration for underlying platform.', 'type': 'dice.datatypes.PlatformConfig', 'required': False}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': {'implementation': 'dice.dice_plugin.general.create_image', 'executor': 'central_deployment_agent', 'inputs': {'image': {'default': {'get_property': ['SELF', 'image']}}}}, 'delete': {'implementation': 'dice.dice_plugin.general.delete_image', 'executor': 'central_deployment_agent'}}}}}",0
"{'dice.hosts.Raw': {'derived_from': 'cloudify.nodes.Compute', 'properties': {'image': {'description': 'Cloud image of the operating system.', 'required': True}, 'user': {'description': 'User that can be usde to SSH into instance.', 'required': True}, 'instance_type': {'description': 'Instance type that should be used.', 'required': True}, 'disk_type': {'description': 'Disk type to be used.', 'required': True}, 'user_data': {'description': 'User data (cloud init) to use when booting', 'default': ''}, 'platform': {'description': 'Specifies what platform will host blueprint.\n', 'required': True}, 'platform_config': {'description': 'Configuration for underlying platform.', 'type': 'dice.datatypes.PlatformConfig', 'required': False}, 'agent_config': {'default': {'user': {'get_property': ['SELF', 'user']}, 'key': '/root/.ssh/dice.key', 'install_method': 'remote'}}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'dice.dice_plugin.general.create_server', 'executor': 'central_deployment_agent', 'inputs': {'image': {'default': {'get_property': ['SELF', 'image']}}, 'instance_type': {'default': {'get_property': ['SELF', 'instance_type']}}, 'disk_type': {'default': {'get_property': ['SELF', 'disk_type']}}, 'user_data': {'default': {'get_property': ['SELF', 'user_data']}}}}, 'start': {'implementation': 'dice.dice_plugin.general.start_server', 'executor': 'central_deployment_agent'}, 'stop': {'implementation': 'dice.dice_plugin.general.stop_server', 'executor': 'central_deployment_agent'}, 'delete': {'implementation': 'dice.dice_plugin.general.delete_server', 'executor': 'central_deployment_agent'}}, 'cloudify.interfaces.validation': {'creation': {'implementation': 'dice.dice_plugin.general.validate_server', 'executor': 'central_deployment_agent'}}}}}",0
"{'tosca.aiorchestra.node': {'derived_from': 'tosca.nodes.Root', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}, 'start': {'implementation': 'aiorchestra.core.noop:noop'}, 'stop': {'implementation': 'aiorchestra.core.noop:noop'}, 'delete': {'implementation': 'aiorchestra.core.noop:noop'}, 'configure': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'test.asyncssh.plugin.inject_host_key': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'asyncssh_plugin.tests.plugin:inject_host_and_key'}, 'unlink': {'implementation': 'asyncssh_plugin.tests.plugin:eject_host_and_key'}}}}}",0
"{'software_configuration_environment': {'derived_from': 'tosca.nodes.Root', 'properties': {'my_own_var': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}, 'start': {'implementation': 'aiorchestra.core.noop:noop'}, 'stop': {'implementation': 'aiorchestra.core.noop:noop'}, 'delete': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'tosca.asyncssh.software_configuration.inject_environment': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'asyncssh_plugin.tasks:inject', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'asyncssh_plugin.tasks:eject', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.asyncssh.software_configuration.script': {'derived_from': 'tosca.nodes.Root', 'properties': {'username': {'type': 'string', 'required': True}, 'password': {'type': 'string', 'default': '', 'required': False}, 'port': {'type': 'integer', 'required': False, 'default': 22}, 'install_script': {'type': 'string', 'required': True}, 'uninstall_script': {'type': 'string', 'required': False, 'default': ''}}, 'requirements': [{'compute': {'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}, {'environment': {'node': 'tosca.nodes.Root', 'relationship': 'tosca.asyncssh.software_configuration.inject_environment', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'asyncssh_plugin.tasks:create'}, 'start': {'implementation': 'asyncssh_plugin.tasks:install', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}, 'stop': {'implementation': 'asyncssh_plugin.tasks:uninstall', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}, 'delete': {'implementation': 'asyncssh_plugin.tasks:delete'}}}}}",0
"{'software_configuration_environment': {'derived_from': 'tosca.nodes.Root', 'properties': {'my_own_var': {'type': 'string'}, 'my_own_another_var': {'type': 'integer'}, 'ssh_private_key': {'type': 'string'}, 'ssh_public_key': {'type': 'string'}, 'floating_ip': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}, 'start': {'implementation': 'aiorchestra.core.noop:noop'}, 'stop': {'implementation': 'aiorchestra.core.noop:noop'}, 'delete': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'properties': {'mem_size': {'type': 'scalar-unit'}, 'num_cpus': {'type': 'integer'}, 'disk_size': {'type': 'scalar-unit'}, 'availability': {'type': 'float'}}}}",0
"{'seaclouds.nodes.Platform': {'derived_from': 'tosca.nodes.Root', 'properties': {'java_support': {'type': 'boolean', 'default': False}, 'java_version': {'type': 'string', 'default': ''}}}}",0
"{'seaclouds.nodes.Logic': {'derived_from': 'tosca.nodes.Root', 'properties': {'qos_requirements': {'type': 'seaclouds.types.QosRequirements'}, 'qos_info': {'type': 'seaclouds.types.QosInfo'}}}}",0
"{'seaclouds.nodes.Compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'scaling_horizontal': {'type': 'string', 'constraints': [{'valid_values': [False, 'manual', 'auto']}], 'default': False}, 'scaling_vertical': {'type': 'string', 'constraints': [{'valid_values': [False, 'manual', 'auto']}], 'default': False}, 'storage_type': {'type': 'string', 'default': ''}, 'storage_file_system': {'type': 'string', 'default': ''}, 'region': {'type': 'string', 'default': ''}, 'networking': {'type': 'seaclouds.types.NodeNetworkInfo', 'default': {'outbound_bandwidth': '2 MB', 'inbound_bandwidth': '1 MB', 'load_balancing': False, 'number_of_ipv4': 1}}, 'location': {'type': 'string'}, 'disk_type': {'type': 'string'}, 'load_balancing': {'type': 'boolean'}, 'local_storage': {'type': 'scalar-unit'}}}}",0
{'seaclouds.nodes.Compute.Amazon': {'derived_from': 'seaclouds.nodes.Compute'}},0
{'seaclouds.nodes.Compute.HP': {'derived_from': 'seaclouds.nodes.Compute'}},0
{'seaclouds.nodes.deploy': {'derived_from': 'tosca.nodes.Root'}},0
"{'seaclouds.nodes.deploy.MySQL': {'derived_from': 'seaclouds.nodes.deploy', 'properties': {'port': {'type': 'string'}, 'db_name': {'type': 'string'}, 'db_user': {'type': 'string'}, 'db_password': {'type': 'string'}, 'version': {'type': 'string'}}}}",0
"{'seaclouds.nodes.deploy.Tomcat': {'derived_from': 'seaclouds.nodes.deploy', 'properties': {'name': {'type': 'string'}, 'user': {'type': 'string'}, 'password': {'type': 'string'}}}}",0
"{'tosca.nodes.openstack.authorization': {'derived_from': 'tosca.nodes.Root', 'properties': {'username': {'type': 'string', 'required': True}, 'password': {'type': 'string', 'required': True}, 'project_name': {'type': 'string', 'required': True}, 'auth_url': {'type': 'string', 'required': True}, 'region_name': {'type': 'string', 'required': False}, 'user_domain_name': {'type': 'string', 'required': False}, 'project_domain_name': {'type': 'string', 'required': False}}, 'attributes': {'auth_properties': {'type': 'map'}, 'auth_token': {'type': 'string'}}, 'capabilities': {'attachable': {'type': 'tosca.capabilities.openstack.auth.attachable'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.authorization:authorize', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.nodes.openstack.ssh_keypair': {'derived_from': 'tosca.nodes.Root', 'properties': {'use_connection_pool': {'type': 'boolean', 'default': False}, 'compute_api_version': {'type': 'string', 'default': '2', 'constraints': [{'valid_values': ['2']}]}, 'use_existing': {'type': 'boolean', 'default': False, 'constraints': [{'valid_values': [True, False]}]}, 'name': {'type': 'string', 'required': True}, 'public_key': {'type': 'string', 'required': False}}, 'attributes': {'id': {'type': 'string'}, 'name': {'type': 'string'}, 'public_key': {'type': 'string'}, 'private_key_content': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.ssh:create'}, 'delete': {'implementation': 'openstack_plugin.tasks.ssh:delete'}}}}}",0
"{'tosca.nodes.openstack.compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'use_connection_pool': {'type': 'boolean', 'default': False}, 'compute_api_version': {'type': 'string', 'default': '2', 'constraints': [{'valid_values': ['2']}]}, 'compute_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Compte instance in the underlying cloud infrastructure or can be used as the name of the newly created compute. If compute_name is provided (with exception of compute_id), then an existing compute instance will be used. If compute_name is provided alongside with more properties then a new compute with this name will be created.\n'}, 'compute_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Compute instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except compute_name. This can be used alone or together with compute_name to identify an existing network.\n'}, 'availability_zone': {'type': 'string', 'required': False}, 'config_drive': {'type': 'boolean', 'default': True, 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.openstack.flavor'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}, 'attributes': {'compute_id': {'type': 'string'}, 'networks': {'type': 'list'}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'artifacts': {'image_ref': {'type': 'tosca.artifacts.openstack.image'}, 'userdata': {'type': 'tosca.artifacts.openstack.user_data'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.compute:create', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}, 'start': {'implementation': 'openstack_plugin.tasks.compute:start', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}, 'stop': {'implementation': 'openstack_plugin.tasks.compute:stop', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}, 'delete': {'implementation': 'openstack_plugin.tasks.compute:delete', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}}}}}",0
"{'tosca.nodes.openstack.network': {'derived_from': 'tosca.nodes.network.Network', 'description': 'The TOSCA OpenStack Network node type', 'properties': {'is_external': {'type': 'boolean', 'required': False, 'default': False}, 'network_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure or can be used as the name of the newly created network. If network_name is provided and no other properties are provided (with exception of network_id), then an existing network instance will be used. If network_name is provided alongside with more properties then a new network with this name will be created.\n'}, 'network_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name. This can be used alone or together with network_name to identify an existing network.\n'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}, 'attributes': {'network_id': {'type': 'string'}, 'network_name': {'type': 'string'}, 'subnets': {'type': 'list'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.net:network_create'}, 'start': {'implementation': 'openstack_plugin.tasks.net:network_start'}, 'delete': {'implementation': 'openstack_plugin.tasks.net:network_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}}}",0
"{'tosca.nodes.openstack.network.subnet': {'derived_from': 'tosca.nodes.network.Network', 'description': 'The TOSCA OpenStack Network subnet node type', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}], 'description': 'The IP version of the requested network. Valid values are 4 for ipv4 or 6 for ipv6.\n'}, 'cidr': {'type': 'string', 'required': False, 'description': 'The cidr block of the requested network.\n'}, 'start_ip': {'type': 'string', 'required': False, 'description': 'The IP address to be used as the start of a pool of addresses within the full IP range derived from the cidr block.\n'}, 'end_ip': {'type': 'string', 'required': False, 'description': 'The IP address to be used as the end of a pool of addresses within the full IP range derived from the cidr block.\n'}, 'gateway_ip': {'type': 'string', 'required': False, 'description': 'The gateway IP address.\n'}, 'network_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure or can be used as the name of the newly created network. If network_name is provided and no other properties are provided (with exception of network_id), then an existing network instance will be used. If network_name is provided alongside with more properties then a new network with this name will be created.\n'}, 'network_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Network instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except network_name. This can be used alone or together with network_name to identify an existing network.\n'}, 'segmentation_id': {'type': 'string', 'required': False, 'description': 'A segmentation identifier in the underlying cloud infrastructure. E.g. VLAN ID, GRE tunnel ID, etc..\n'}, 'network_type': {'type': 'string', 'required': False, 'description': 'It specifies the nature of the physical network in the underlying cloud infrastructure. Examples are flat, vlan, gre or vxlan. For flat and vlan types, physical_network should be provided too.\n'}, 'physical_network': {'type': 'string', 'required': False, 'description': 'It identifies the physical network on top of which the network is implemented, e.g. physnet1. This property is required if network_type is flat or vlan.\n'}, 'dhcp_enabled': {'type': 'boolean', 'required': False, 'default': True, 'description': 'Indicates should DHCP service be enabled on the network or not.\n'}, 'dns_nameservers': {'type': 'list', 'required': False, 'default': ['8.8.8.8', '8.8.4.4'], 'description': 'DNS nameserver'}}, 'attributes': {'link_id': {'type': 'string'}, 'network_id': {'type': 'string'}, 'network_name': {'type': 'string'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'node': 'tosca.nodes.openstack.network', 'relationship': 'tosca.relationships.openstack.network.linked'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.subnet:subnet_create', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}, 'delete': {'implementation': 'openstack_plugin.tasks.subnet:subnet_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}}}",0
"{'tosca.nodes.openstack.network.port': {'derived_from': 'tosca.nodes.network.Port', 'description': 'OpenStack network subnet port type', 'properties': {'port_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Port instance in the underlying cloud infrastructure or can be used as the name of the newly created port. If port_name is provided and no other properties are provided (with exception of port_id), then an existing port instance will be used. If port_name is provided alongside with more properties then a new port with this name will be created.\n'}, 'port_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing Port instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except port_name. This can be used alone or together with port_name to identify an existing network.\n'}, 'ip_address': {'type': 'string', 'required': False, 'description': 'Allow the user to set a static IP.'}, 'order': {'type': 'integer', 'required': False, 'default': 0, 'constraints': [{'greater_or_equal': 0}], 'description': 'The order of the NIC on the compute instance (e.g. eth2).'}, 'is_default': {'type': 'boolean', 'required': False, 'default': False, 'description': 'If is_default=true this port will be used for the default gateway route. Only one port that is associated to single compute node can set as is_default=true.\n'}, 'ip_range_start': {'type': 'string', 'required': False, 'description': 'Defines the starting IP of a range to be allocated for the compute instances that are associated with this Port.\n'}, 'ip_range_end': {'type': 'string', 'required': False, 'description': 'Defines the ending IP of a range to be allocated for the compute instances that are associated with this Port.\n'}}, 'attributes': {'ip_address': {'type': 'string'}}, 'requirements': [{'binding': {'description': 'Binding requirement expresses the relationship between Port and Compute nodes. Effectively it indicates that the Port will be attached to specific Compute node instance\n', 'capability': 'tosca.capabilities.network.Bindable', 'relationship': 'tosca.relationships.network.BindsTo', 'node': 'tosca.nodes.openstack.compute'}}, {'link': {'description': 'Link requirement expresses the relationship between Port and Network nodes. It indicates which network this port will connect to.\n', 'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.openstack.network.linked', 'node': 'tosca.nodes.openstack.network.subnet'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.port:port_create'}, 'start': {'implementation': 'openstack_plugin.tasks.port:port_start'}, 'stop': {'implementation': 'openstack_plugin.tasks.port:port_stop'}, 'delete': {'implementation': 'openstack_plugin.tasks.port:port_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}}}",0
"{'tosca.nodes.openstack.network.router': {'derived_from': 'tosca.nodes.Root', 'description': 'OpenStack network router', 'properties': {'router_name': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing router instance in the underlying cloud infrastructure or can be used as the name of the newly created port. If port_name is provided and no other properties are provided (with exception of router_id), then an existing port instance will be used. If router_name is provided alongside with more properties then a new port with this name will be created.\n'}, 'router_id': {'type': 'string', 'required': False, 'description': 'An identifier that represents an existing router instance in the underlying cloud infrastructure. This property is mutually exclusive with all other properties except router_name. This can be used alone or together with router_name to identify an existing network.\n'}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}, 'attributes': {'router_id': {'type': 'string'}}, 'requirements': [{'link': {'description': 'Binding requirement expresses the relationship between Router and External network. Effectively it indicates that the Router will be attached to specific Router using external gateway info\n', 'capability': 'tosca.capabilities.network.Linkable', 'relationship': 'tosca.relationships.openstack.network.router.bind', 'node': 'tosca.nodes.openstack.network'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.router:router_create'}, 'start': {'implementation': 'openstack_plugin.tasks.router:router_start'}, 'delete': {'implementation': 'openstack_plugin.tasks.router:router_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}}}",0
"{'tosca.nodes.openstack.network.floating_ip': {'derived_from': 'tosca.nodes.Root', 'properties': {'floating_ip_id': {'type': 'string', 'required': False, 'desceription': 'Specify floating IP ID to use existing instead of allocating new'}}, 'attributes': {'fixed_ip_address': {'type': 'string'}, 'floating_ip_address': {'type': 'string'}, 'floating_ip_id': {'type': 'string'}, 'port_id': {'type': 'string'}, 'router_id': {'type': 'string'}}, 'capabilities': {'binding': {'type': 'tosca.capabilities.network.Bindable'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.floating_ip:floatingip_create'}, 'delete': {'implementation': 'openstack_plugin.tasks.floating_ip:floatingip_delete', 'inputs': {'task_retries': 10, 'task_retry_interval': 10}}}}, 'requirements': [{'link': {'capability': 'tosca.capabilities.network.Linkable', 'node': 'tosca.nodes.openstack.network', 'relationship': 'tosca.relationships.openstack.network.floating_ip'}}, {'binding': {'capability': 'tosca.capabilities.Bindable', 'node': 'tosca.nodes.openstack.network.port', 'relationship': 'tosca.relationships.openstack.network.port.floating_ip'}}]}}",0
"{'tosca.nodes.openstack.network.port.security_group': {'derived_from': 'tosca.nodes.Root', 'properties': {'security_group_name': {'type': 'string', 'required': False}, 'security_group_id': {'type': 'string', 'required': False}, 'description': {'type': 'string', 'required': False}}, 'attributes': {'security_group_id': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.security_group:security_group_create'}, 'delete': {'implementation': 'openstack_plugin.tasks.security_group:security_group_delete'}}}}}",0
"{'tosca.nodes.openstack.network.port.security_group.rule': {'derived_from': 'tosca.nodes.Root', 'properties': {'direction': {'type': 'string', 'required': True, 'constraints': [{'valid_values': ['ingress', 'egress']}]}, 'ethertype': {'type': 'string', 'constraints': [{'valid_values': ['IPv4', 'IPv6']}], 'required': True}, 'port_range_min': {'type': 'integer', 'required': True, 'constraints': [{'valid_values': [1, 65535]}]}, 'port_range_max': {'type': 'integer', 'required': True, 'constraints': [{'valid_values': [1, 65535]}]}, 'protocol': {'type': 'string', 'constraints': [{'valid_values': ['tcp', 'icmp', 'udp']}], 'required': True}, 'remote_ip_prefix': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'aiorchestra.core.noop:noop'}, 'delete': {'implementation': 'aiorchestra.core.noop:noop'}}}}}",0
"{'tosca.nodes.openstack.network.load_balancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False}, 'protocol': {'type': 'string', 'required': False, 'default': 'tcp'}, 'protocol_port': {'type': 'integer', 'required': False, 'default': 80}}, 'capabilities': {'client': {'type': 'tosca.capabilities.openstack.network.load_balancer.endpoint'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.openstack.network.load_balancer.member.endpoint', 'relationship': 'tosca.relationships.openstack.network.load_balancer.member', 'node': 'tosca.nodes.openstack.compute', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.lbaas:create'}, 'start': {'implementation': 'openstack_plugin.tasks.lbaas:start'}, 'stop': {'implementation': 'openstack_plugin.tasks.lbaas:stop'}, 'delete': {'implementation': 'openstack_plugin.tasks.lbaas:delete'}}}}}",0
"{'tosca.nodes.openstack.compute.file': {'derived_from': 'tosca.nodes.Root', 'properties': {'source': {'type': 'string', 'required': True}, 'destination': {'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'openstack_plugin.tasks.compute:setup_injection'}}}}}",0
"{'tosca.artifacts.openstack.image': {'derived_from': 'tosca.artifacts.Deployment.Image', 'description': 'Glance image artifact', 'image': {'type': 'string'}}}",0
"{'tosca.artifacts.openstack.compute.injection_file': {'derived_from': 'tosca.artifacts.Deployment.Image', 'description': 'Nova boot file injection', 'source': {'type': 'string'}, 'destination': {'type': 'string'}}}",0
"{'tosca.artifacts.openstack.compute.userdata': {'derived_from': 'tosca.artifacts.Implementation.Bash', 'description': 'Nova compute boot user data', 'script': {'type': 'string'}}}",0
"{'tosca.relationships.openstack.inject_auth': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.authorization:inject', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.authorization:eject', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.ssh_keypair_provider': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.ssh:link', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.ssh:unlink', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.compute.injected_with': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.compute:inject_file', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.compute:eject_file', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.linked': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.network', 'tosca.nodes.openstack.network.subnet'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.net:link', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.net:unlink', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.compute.port.bind': {'derived_from': 'tosca.relationships.Root', 'description': 'Effectively binds network port to compute. This relationship should be used with compute node in its requirements.\n', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.port:add_port', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.port:remove_port', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.port.bind': {'derived_from': 'tosca.relationships.Root', 'description': 'Effectively binds compute to network port. This relationship should be used with port node in its requirements.\n', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.port:bind_compute_to_port', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.port:unbind_compute_from_port', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.router.bind': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.network'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.router:link_router_to_external_network', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.router:unlink_router_from_external_network', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.router.link': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.network.subnet'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.subnet:link_subnet_to_router', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.subnet:unlink_subnet_to_router', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.floating_ip.provider': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.floating_ip:inject_floating_ip_attributes'}, 'unlink': {'implementation': 'openstack_plugin.tasks.floating_ip:eject_floating_ip_attributes'}}}}}",0
"{'tosca.relationships.openstack.network.floating_ip': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.floating_ip:link_floatingip_to_network', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.floating_ip:unlink_floatingip_from_network', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.port.floating_ip': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.network.port'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.floating_ip:link_floatingip_to_port', 'inputs': {'type': 'map'}}, 'unlink': {'implementation': 'openstack_plugin.tasks.floating_ip:unlink_floatingip_from_port', 'inputs': {'type': 'map'}}}}}}",0
"{'tosca.relationships.openstack.network.port.security_group.rule': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.network.port.security_group.rule'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.security_group:connect_security_groups_rule'}, 'unlink': {'implementation': 'openstack_plugin.tasks.security_group:disconnect_security_groups_rule'}}}}}",0
"{'tosca.relationships.openstack.network.port.security_group.attached': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.security_group:link_security_groups_to_port'}, 'unlink': {'implementation': 'openstack_plugin.tasks.security_group:unlink_security_groups_from_port'}}}}}",0
"{'tosca.relationships.openstack.network.load_balancer.member': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.openstack.compute'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'link': {'implementation': 'openstack_plugin.tasks.lbaas:add_member', 'inputs': {'network_id': {'type': 'string'}}}, 'unlink': {'implementation': 'openstack_plugin.tasks.lbaas:remove_member'}}}}}",0
"{'tosca.capabilities.openstack.network.load_balancer.endpoint': {'derived_from': 'tosca.capabilities.Endpoint.Public', 'properties': {'network_id': {'type': 'string'}}}}",0
"{'tosca.capabilities.openstack.network.load_balancer.member.endpoint': {'derived_from': 'tosca.capabilities.Endpoint', 'properties': {'weight': {'type': 'integer', 'default': 1}, 'ip_address': {'type': 'integer'}}}}",0
{'tosca.capabilities.openstack.network.port.bindable': {'derived_from': 'tosca.capabilities.Node'}},0
{'tosca.capabilities.openstack.network.port.security_group.attachable': {'derived_from': 'tosca.capabilities.Node'}},0
{'tosca.capabilities.openstack.network.port.security_group.rule.attachable': {'derived_from': 'tosca.capabilities.Node'}},0
{'tosca.capabilities.openstack.auth.attachable': {'derived_from': 'tosca.capabilities.Node'}},0
{'tosca.capabilities.openstack.compute.ssh.attachable': {'derived_from': 'tosca.capabilities.Node'}},0
"{'tosca.capabilities.openstack.flavor': {'derived_from': 'tosca.capabilities.Container', 'properties': {'flavor': {'type': 'string', 'required': True}, 'num_cpus': {'required': False, 'type': 'integer', 'constraints': [{'greater_or_equal': 1}]}, 'cpu_frequency': {'required': False, 'type': 'scalar-unit.frequency', 'constraints': [{'greater_or_equal': '0.1 GHz'}]}, 'disk_size': {'required': False, 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 MB'}]}, 'mem_size': {'required': False, 'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 MB'}]}}}}",0
"{'cisco.1VDU.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['altiostar_vDU']}], 'default': 'altiostar_vDU'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['Cisco']}], 'default': 'Cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['altiostar_vDU']}], 'default': 'altiostar_vDU'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.1']}], 'default': '1.1'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['Cisco ESC']}], 'default': ['Cisco ESC']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.1VDU.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['altiostar_vCU']}], 'default': 'altiostar_vCU'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['Cisco']}], 'default': 'Cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['altiostar_vCU']}], 'default': 'altiostar_vCU'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['Cisco ESC']}], 'default': ['Cisco ESC']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.VPC.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['Cirros-Multi-Vdu']}], 'default': 'Cirros-Multi-Vdu'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['cisco']}], 'default': 'cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['Cirros-Multi-Vdu']}], 'default': 'Cirros-Multi-Vdu'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['9:Cisco Elastic Services Controller:v04.04.01']}], 'default': ['9:Cisco Elastic Services Controller:v04.04.01']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.VDU.custom': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['89a2b1f7-dc08-468c-b351-6da0281b02f5']}], 'default': '89a2b1f7-dc08-468c-b351-6da0281b02f5'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['cisco']}], 'default': 'cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['1VDU-Cisco-wizard']}], 'default': '1VDU-Cisco-wizard'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['24.0']}], 'default': '24.0'}, 'product_info_name': {'type': 'string', 'constraints': [{'valid_values': ['']}], 'default': ''}, 'product_info_description': {'type': 'string', 'constraints': [{'valid_values': ['']}], 'default': ''}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': [['9:Cisco Elastic Services Controller:vX.Y']]}], 'default': ['9:Cisco Elastic Services Controller:vX.Y']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration', 'required': False}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.VPC.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'default': 'VEPC-SI'}, 'provider': {'type': 'string', 'default': 'cisco'}, 'product_name': {'type': 'string', 'default': 'VPC'}, 'software_version': {'type': 'string', 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'default': '1.0'}, 'flavour_id': {'type': 'string', 'default': 'default'}, 'flavour_description': {'type': 'string', 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['9:Cisco Elastic Services Controller:v04.04.01']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.VPC.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['VEPC-DI']}], 'default': 'VEPC-DI'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['cisco']}], 'default': 'cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['VPC']}], 'default': 'VPC'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.1']}], 'default': '1.1'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['9:Cisco Elastic Services Controller:v04.04.01']}], 'default': ['9:Cisco Elastic Services Controller:v04.04.01']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.nodes.nfv.Vdu.Compute': {'derived_from': 'tosca.nodes.nfv.Vdu.Compute', 'properties': {'configurable_properties': {'type': 'cisco.datatypes.nfv.VnfcConfigurableProperties', 'description': 'Describes the configurable properties of all VNFC instances based on this VDU', 'required': False}, 'kpi_data': {'type': 'map', 'description': 'The different KPIs applicable to this VDU', 'required': False, 'entry_schema': {'type': 'cisco.datatypes.nfv.data.Kpi', 'description': 'A single KPI'}}, 'admin_rules': {'type': 'map', 'description': 'Actions for events', 'required': False, 'entry_schema': {'type': 'cisco.datatypes.nfv.data.Admin_rules', 'description': 'Define actions for events'}}, 'name_override': {'type': 'string', 'description': 'An optional custom name that be be configured on the VIM', 'required': False}, 'vendor_section': {'type': 'cisco.datatypes.nfv.VendorExtension', 'required': False}}}}",0
"{'cisco.nodes.nfv.Vdu.VirtualBlockStorage': {'derived_from': 'tosca.nodes.nfv.Vdu.VirtualBlockStorage', 'properties': {'vendor_section': {'type': 'cisco.datatypes.nfv.VendorExtension', 'required': False}}}}",0
"{'cisco.nodes.nfv.VduCp': {'derived_from': 'tosca.nodes.nfv.VduCp', 'properties': {'management': {'type': 'boolean', 'description': 'Whether this interface is a management port', 'required': False}, 'ip_subnet': {'type': 'list', 'required': False, 'entry_schema': {'type': 'cisco.datatypes.nfv.IpAddress', 'description': 'The stacked IP addresses for this interface'}}, 'allowed_address_pairs': {'type': 'list', 'required': False, 'entry_schema': {'type': 'cisco.datatypes.nfv.IpAddress', 'description': 'MAC/ IP address (cidr) pairs that are allowed to pass through a port regardless of subnet'}}, 'name_override': {'type': 'string', 'description': 'An optional custom name that be be configured on the VIM', 'required': False}, 'nw_card_model': {'type': 'string', 'description': 'Describes the type of the virtual network card', 'required': False, 'constraints': [{'valid_values': ['virtio', 'e1000', 'ne2k_pci', 'i82551', 'i82557b', 'i82559er', 'rtl8139', 'pcnet']}]}, 'iface_type': {'type': 'string', 'description': 'An optional type for vCloudDirector', 'required': False, 'constraints': [{'valid_values': ['virtual', 'passthru', 'direct', 'macvtap']}]}}}}",0
"{'cisco.Cirros.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['Cirros']}], 'default': 'Cirros'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['cisco']}], 'default': 'cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['Cirros']}], 'default': 'Cirros'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['9:Cisco Elastic Services Controller:v04.04.01']}], 'default': ['9:Cisco Elastic Services Controller:v04.04.01']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'cisco.VPC.1_0.1_0': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['VPC-4.4']}], 'default': 'VPC-4.4'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['cisco']}], 'default': 'cisco'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['VPC']}], 'default': 'VPC'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['default']}], 'default': 'default'}, 'flavour_description': {'type': 'string', 'constraints': [{'valid_values': ['Default VNF Deployment Flavour']}], 'default': 'Default VNF Deployment Flavour'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'constraints': [{'valid_values': ['9:Cisco Elastic Services Controller:v04.04.01']}], 'default': ['9:Cisco Elastic Services Controller:v04.04.01']}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'description': 'Describes the configurable properties of the VNF', 'required': False}, 'lcm_operations_configuration': {'type': 'cisco.datatypes.nfv.VnfLcmOperationsConfiguration'}}, 'interfaces': {'Vnflcm': {'type': 'cisco.interfaces.nfv.Vnflcm'}}, 'artifacts': None}}",0
"{'com.toscaruntime.docker.nodes.DockerDaemon': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The docker software component to install/ start/ stop docker daemon\n', 'properties': {'port': {'type': 'integer', 'default': 2376}, 'pull_images': {'type': 'string', 'description': ""list of images to pull once the daemon is started separated by ','""}}, 'attributes': {'docker_address': {'concat': [{'get_attribute': ['HOST', 'ip_address']}, ':', {'get_property': ['SELF', 'port']}]}, 'docker_url': {'concat': ['http://', {'get_attribute': ['HOST', 'ip_address']}, ':', {'get_property': ['SELF', 'port']}]}, 'public_docker_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}]}}, 'capabilities': {'daemon': 'com.toscaruntime.docker.capabilities.DeployContainer'}, 'requirements': [{'discovery_service': 'com.toscaruntime.consul.capabilities.ConsulDiscoveryService', 'type': 'com.toscaruntime.docker.relationships.AdvertiseConsul'}], 'interfaces': {'Standard': {'create': 'daemon/scripts/create_docker_daemon.sh', 'configure': {'inputs': {'DAEMON_PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'daemon/scripts/configure_docker_daemon.sh'}, 'start': {'inputs': {'PULL_IMAGES': {'get_property': ['SELF', 'pull_images']}}, 'implementation': 'daemon/scripts/start_docker_daemon.sh'}, 'stop': 'daemon/scripts/stop_docker_daemon.sh'}}}}",0
"{'com.toscaruntime.docker.nodes.DockerComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Softwares that are packaged as docker image ready to deploy\n', 'properties': {'docker_image': {'type': 'string'}, 'docker_image_tag': {'type': 'string', 'default': 'latest'}, 'docker_command': {'type': 'string', 'required': False}, 'docker_labels': {'type': 'string', 'required': False}, 'port_mapping': {'type': 'string', 'required': False}, 'docker_container_name': {'type': 'string', 'required': False}}, 'requirements': [{'daemon': 'com.toscaruntime.docker.capabilities.DeployContainer', 'type': 'com.toscaruntime.docker.relationships.DeployedOnDaemon'}]}}",0
"{'com.toscaruntime.docker.nodes.ProxyWebApp': {'derived_from': 'com.toscaruntime.docker.nodes.DockerComponent', 'properties': {'port_mapping': {'type': 'string', 'default': '9000:9000', 'constraints': [{'equal': '9000:9000'}]}, 'docker_image': {'type': 'string', 'default': 'toscaruntime/proxy'}, 'docker_container_name': {'type': 'string', 'default': 'toscaruntime_proxy'}, 'docker_labels': {'type': 'string', 'default': '--label com.toscaruntime.componentType=proxy\n'}}, 'attributes': {'proxy_url': {'concat': ['http://', {'get_attribute': ['HOST', 'ip_address']}, ':9000']}, 'public_proxy_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':9000']}}}}",0
"{'com.toscaruntime.docker.nodes.SwarmManager': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'swarm_port': {'type': 'integer', 'default': 2375}}, 'attributes': {'docker_url': {'concat': ['http://', {'get_attribute': ['HOST', 'ip_address']}, ':', {'get_property': ['SELF', 'swarm_port']}]}, 'public_docker_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'swarm_port']}]}}, 'requirements': [{'daemon': 'com.toscaruntime.docker.capabilities.DeployContainer', 'type': 'com.toscaruntime.docker.relationships.SwarmManagerDependsOnDaemon'}, {'discovery_service': 'com.toscaruntime.consul.capabilities.ConsulDiscoveryService', 'type': 'com.toscaruntime.docker.relationships.SwarmUseConsul'}], 'capabilities': {'daemon': 'com.toscaruntime.docker.capabilities.DeployContainer'}}}",0
"{'com.toscaruntime.consul.nodes.ConsulAgent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Consul discovery service installation\n', 'properties': {'download_url': {'type': 'string', 'default': 'https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_linux_amd64.zip'}, 'agent_mode': {'type': 'string', 'constraints': [{'valid_values': ['server', 'client']}], 'default': 'server'}, 'server_count': {'type': 'integer', 'constraints': [{'greater_than': 0}], 'default': 1}, 'data_dir': {'type': 'string', 'default': '/var/consul'}}, 'requirements': [{'formCluster': 'com.toscaruntime.consul.capabilities.FormCluster', 'type': 'com.toscaruntime.consul.relationships.JoinCluster'}], 'capabilities': {'discovery_service': 'com.toscaruntime.consul.capabilities.ConsulDiscoveryService', 'formCluster': 'com.toscaruntime.consul.capabilities.FormCluster'}, 'attributes': {'consul_client_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'CONSUL_CLIENT_ADDRESS']}, 'consul_server_address': {'get_operation_output': ['SELF', 'Standard', 'start', 'CONSUL_SERVER_ADDRESS']}}, 'interfaces': {'Standard': {'create': {'inputs': {'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_DOWNLOAD_URL': {'get_property': ['SELF', 'download_url']}}, 'implementation': 'consul/scripts/create_consul.sh'}, 'start': {'inputs': {'CONSUL_AGENT_MODE': {'get_property': ['SELF', 'agent_mode']}, 'CONSUL_SERVERS_COUNT': {'get_property': ['SELF', 'server_count']}, 'CONSUL_DATA_DIR': {'get_property': ['SELF', 'data_dir']}, 'CONSUL_BIND_ADDRESS': {'get_attribute': ['HOST', 'ip_address']}}, 'implementation': 'consul/scripts/start_consul_agent.sh'}}}}}",0
{'com.toscaruntime.mock.nodes.MockCompute': {'derived_from': 'tosca.nodes.Compute'}},0
{'com.toscaruntime.mock.nodes.MockNetwork': {'derived_from': 'tosca.nodes.Network'}},0
"{'com.toscaruntime.aws.nodes.Instance': {'derived_from': 'tosca.nodes.Compute', 'properties': {'image_id': {'type': 'string'}, 'instance_type': {'type': 'string'}, 'login': {'type': 'string', 'default': 'root'}, 'key_path': {'type': 'string', 'required': False}, 'key_content': {'type': 'string', 'required': False}, 'ssh_port': {'type': 'integer', 'default': 22}, 'elevate_privilege': {'type': 'boolean', 'default': False}, 'recipe_location': {'type': 'string', 'required': True, 'default': '/tmp/recipe'}, 'key_name': {'type': 'string'}, 'elastic_ip_address': {'type': 'string', 'required': False}, 'security_groups': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'availability_zone': {'type': 'string', 'required': False}, 'subnet_id': {'type': 'string', 'required': False}, 'user_data': {'type': 'string', 'required': False}, 'aws_fail_safe': {'type': 'com.toscaruntime.aws.AWSFailSafeConfiguration', 'default': {'operation_retry': 720, 'wait_between_operation_retry': '10 s'}}, 'compute_fail_safe': {'type': 'com.toscaruntime.aws.ComputeFailSafeConfiguration', 'default': {'wait_before_connection': '10 s', 'connect_retry': 720, 'wait_between_connect_retry': '5 s', 'artifact_execution_retry': 1, 'wait_between_artifact_execution_retry': '10 s', 'wait_before_artifact_execution': '10 s'}}}}}",0
{'com.toscaruntime.aws.nodes.PublicNetwork': {'derived_from': 'tosca.nodes.Network'}},0
"{'com.toscaruntime.nodes.Sleep': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This type sleep with a configurable duration for testing purpose\n', 'properties': {'create_sleep_time': {'type': 'integer', 'default': 0}, 'configure_sleep_time': {'type': 'integer', 'default': 0}, 'start_sleep_time': {'type': 'integer', 'default': 0}, 'stop_sleep_time': {'type': 'integer', 'default': 0}, 'delete_sleep_time': {'type': 'integer', 'default': 0}}, 'interfaces': {'Standard': {'create': {'inputs': {'SLEEP_TIME': {'get_property': ['SELF', 'create_sleep_time']}}, 'implementation': 'scripts/sleep.sh'}, 'configure': {'inputs': {'SLEEP_TIME': {'get_property': ['SELF', 'configure_sleep_time']}}, 'implementation': 'scripts/sleep.sh'}, 'start': {'inputs': {'SLEEP_TIME': {'get_property': ['SELF', 'start_sleep_time']}}, 'implementation': 'scripts/sleep.sh'}, 'stop': {'inputs': {'SLEEP_TIME': {'get_property': ['SELF', 'stop_sleep_time']}}, 'implementation': 'scripts/sleep.sh'}, 'delete': {'inputs': {'SLEEP_TIME': {'get_property': ['SELF', 'delete_sleep_time']}}, 'implementation': 'scripts/sleep.sh'}}}}}",0
"{'com.toscaruntime.nodes.Error': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': ""This type throws error if it's required to do so\n"", 'properties': {'create_throw_error': {'type': 'boolean', 'default': False}, 'configure_throw_error': {'type': 'boolean', 'default': False}, 'start_throw_error': {'type': 'boolean', 'default': False}, 'stop_throw_error': {'type': 'boolean', 'default': False}, 'delete_throw_error': {'type': 'boolean', 'default': False}}, 'interfaces': {'Standard': {'create': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'create_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'configure': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'configure_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'start': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'start_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'stop': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'stop_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'delete': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'delete_throw_error']}}, 'implementation': 'scripts/error.sh'}}}}}",0
"{'com.toscaruntime.nodes.SourceConflict': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'generate_error': 'com.toscaruntime.capabilities.GenerateConflict', 'type': 'com.toscaruntime.relationships.ConflictRelationship'}]}}",0
"{'com.toscaruntime.nodes.TargetConflict': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'generate_error': 'com.toscaruntime.capabilities.GenerateConflict'}}}",0
"{'toscaruntime.test.nodes.BadFunction': {'derived_from': 'tosca.nodes.Root', 'properties': {'good_prop': {'type': 'string'}, 'bad_prop': {'type': 'string'}}, 'attributes': {'a_bad_one': {'get_attribute': ['SOURCE', 'bad_prop']}}, 'interfaces': {'Standard': {'create': {'inputs': {'bad_input': {'get_property': ['TARGET', 'bad_prop']}, 'composite_bad_input': {'concat': [{'get_attribute': ['SELF', 'a']}, {'get_attribute': ['SOURCE', 'b']}, {'get_property': ['HOST', 'c']}, {'get_property': ['TARGET', 'd']}]}}}}}}}",0
"{'com.toscaruntime.docker.nodes.Container': {'derived_from': 'tosca.nodes.Compute', 'properties': {'image_id': {'type': 'string'}, 'tag': {'type': 'string', 'default': 'latest'}, 'interactive': {'type': 'boolean', 'default': True}, 'exposed_ports': {'type': 'list', 'entry_schema': {'type': 'com.toscaruntime.docker.datatypes.ExposedPort'}, 'required': False}, 'port_mappings': {'type': 'list', 'entry_schema': {'type': 'com.toscaruntime.docker.datatypes.PortMapping'}, 'required': False}, 'commands': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'recipe_location': {'type': 'string', 'required': False}, 'elevate_privilege': {'type': 'boolean', 'default': False}}}}",0
"{'com.toscaruntime.docker.nodes.Network': {'derived_from': 'tosca.nodes.Network', 'properties': {'ip_range': {'type': 'string', 'required': False}, 'driver': {'type': 'string', 'required': False}, 'options': {'type': 'map', 'entry_schema': {'type': 'string'}, 'required': False}}}}",0
"{'com.toscaruntime.docker.nodes.Volume': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'volume_driver': {'type': 'string', 'required': True, 'default': 'local'}, 'volume_driver_opts': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}, 'location': {'type': 'string'}}}}",0
{'com.toscaruntime.docker.nodes.DeletableVolume': {'derived_from': 'com.toscaruntime.docker.nodes.Volume'}},0
"{'com.toscaruntime.openstack.nodes.Compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'image': {'type': 'string'}, 'flavor': {'type': 'string'}, 'login': {'type': 'string', 'default': 'root'}, 'admin_pass': {'type': 'string', 'required': False}, 'key_pair_name': {'type': 'string'}, 'key_path': {'type': 'string', 'required': False}, 'key_content': {'type': 'string', 'required': False}, 'recipe_location': {'type': 'string', 'required': True, 'default': '/tmp/recipe'}, 'ssh_port': {'type': 'integer', 'default': 22}, 'elevate_privilege': {'type': 'boolean', 'default': False}, 'networks': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'security_group_names': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'availability_zone': {'type': 'string', 'required': False}, 'user_data': {'type': 'string', 'required': False}, 'config_drive': {'type': 'boolean', 'required': False}, 'openstack_fail_safe': {'type': 'com.toscaruntime.openstack.OpenstackFailSafeConfiguration', 'default': {'operation_retry': 720, 'wait_between_operation_retry': '10 s'}}, 'compute_fail_safe': {'type': 'com.toscaruntime.openstack.ComputeFailSafeConfiguration', 'default': {'wait_before_connection': '10 s', 'connect_retry': 720, 'wait_between_connect_retry': '5 s', 'artifact_execution_retry': 1, 'wait_between_artifact_execution_retry': '10 s', 'wait_before_artifact_execution': '10 s'}}}}}",0
"{'com.toscaruntime.openstack.nodes.Network': {'derived_from': 'tosca.nodes.Network', 'properties': {'dns_name_servers': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'openstack_fail_safe': {'type': 'com.toscaruntime.openstack.OpenstackFailSafeConfiguration', 'default': {'operation_retry': 720, 'wait_between_operation_retry': '10 s'}}}}}",0
{'com.toscaruntime.openstack.nodes.ExternalNetwork': {'derived_from': 'tosca.nodes.Network'}},0
"{'com.toscaruntime.openstack.nodes.Volume': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'availability_zone': {'type': 'string', 'required': False}, 'device': {'type': 'string', 'required': False}, 'volume_description': {'type': 'string', 'required': False}, 'volume_type': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}, 'metadata': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}, 'openstack_fail_safe': {'type': 'com.toscaruntime.openstack.OpenstackFailSafeConfiguration', 'default': {'operation_retry': 720, 'wait_between_operation_retry': '10 s'}}}}}",0
{'com.toscaruntime.openstack.nodes.DeletableVolume': {'derived_from': 'com.toscaruntime.openstack.nodes.Volume'}},0
"{'SNMPSecurityGroup': {'derived_from': 'cloudify.openstack.nodes.SecurityGroup', 'properties': {'security_group': {'default': {'name': 'snmp_security_group', 'description': 'Allows UDP communication for SNMP'}}, 'rules': {'default': [{'remote_ip_prefix': '0.0.0.0/0', 'port': 161, 'protocol': 'udp'}]}}}}",0
"{'SNMPProxy': {'derived_from': 'cloudify.nodes.Root', 'interfaces': {'cloudify.interfaces.lifecycle': {'create': 'scripts/install_requirements.sh'}, 'cloudify.interfaces.monitoring': {'start': {'implementation': 'diamond.diamond_agent.tasks.add_collectors', 'inputs': {'collectors_config': {'default': {'SNMPProxyCollector': {'path': 'collectors/snmpproxy.py', 'config': {'get_attribute': ['SELF', 'snmp_collector_config']}}}}}}}}}}",0
"{'SnmpdConfiguringNode': {'derived_from': 'cloudify.nodes.Root', 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': 'scripts/setup_snmpd.sh'}}}}",0
"{'SNMPManagerProxy': {'derived_from': 'cloudify.nodes.Compute', 'properties': {'install_agent': {'default': False}, 'diamond_config': {'default': {'interval': 1}}}, 'interfaces': {'cloudify.interfaces.monitoring_agent': {'install': {'executor': 'central_deployment_agent', 'implementation': 'diamond.diamond_agent.tasks.install', 'inputs': {'diamond_config': {'default': {'get_property': ['SELF', 'diamond_config']}}}}, 'start': {'executor': 'central_deployment_agent', 'implementation': 'diamond.diamond_agent.tasks.start'}, 'stop': {'executor': 'central_deployment_agent', 'implementation': 'diamond.diamond_agent.tasks.stop'}, 'uninstall': {'executor': 'central_deployment_agent', 'implementation': 'diamond.diamond_agent.tasks.uninstall'}}, 'cloudify.interfaces.lifecycle': {'configure': {'executor': 'central_deployment_agent', 'implementation': 'scripts/install_requirements.sh'}}, 'cloudify.interfaces.monitoring': {'start': {'implementation': 'diamond.diamond_agent.tasks.add_collectors', 'executor': 'central_deployment_agent', 'inputs': {'collectors_config': {'default': {'SNMPProxyCollector': {'path': 'collectors/snmpproxy.py', 'config': {'get_attribute': ['SELF', 'snmp_collector_config']}}}}}}}}}}",0
"{'policy_node_type': {'derived_from': 'cloudify.nodes.SoftwareComponent', 'properties': {'nodes_to_monitor': {'default': []}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'start': {'implementation': 'scripts/policy-start.sh', 'executor': 'central_deployment_agent'}, 'stop': {'implementation': 'scripts/policy-stop.sh', 'executor': 'central_deployment_agent'}}}}}",0
"{'org.ystia.monitoring.service.impl.Graphite': {'derived_from': 'org.ystia.monitoring.service.pub.MonitoringService', 'metadata': {'icon': '/images/graphite.png'}, 'attributes': {'web_ui_url': {'concat': ['http://', {'get_attribute': ['SELF', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['SELF', 'http_endpoint', 'port']}]}}, 'capabilities': {'http_endpoint': {'type': 'org.ystia.monitoring.service.impl.GraphiteHttpEndpoint', 'description': 'Endpoint to Graphite Web UI'}, 'data_collection': {'type': 'org.ystia.monitoring.service.impl.GraphiteDataCollectionEndpoint', 'description': 'Endpoint to collect data'}}, 'interfaces': {'Standard': {'start': {'implementation': {'file': 'sitespeedio/graphite:1.0.2-2-b', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.bugs.complex-types.nodes.CT': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'keywords': {'type': 'list', 'description': 'List of keywords.', 'required': False, 'entry_schema': {'type': 'string'}}}, 'interfaces': {'Standard': {'create': {'implementation': 'scripts/create.sh'}, 'configure': {'inputs': {'KEYWORDS': {'get_property': ['SELF', 'keywords']}}, 'implementation': 'scripts/configure.sh'}}, 'custom': {'change_kw': {'inputs': {'KEYWORDS': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}}, 'implementation': 'scripts/change_kw.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.monitoring.service.impl.Grafana': {'derived_from': 'org.ystia.monitoring.service.pub.MonitoringService', 'metadata': {'icon': '/images/grafana.png'}, 'attributes': {'web_ui_url': {'concat': ['http://', {'get_attribute': ['SELF', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['SELF', 'http_endpoint', 'port']}]}}, 'capabilities': {'http_endpoint': {'type': 'org.ystia.monitoring.service.impl.GrafanaEndpoint', 'description': 'Endpoint to visualize collected data'}}, 'requirements': [{'graphite': {'capability': 'org.ystia.monitoring.service.pub.HttpEndpoint', 'relationship': 'org.ystia.monitoring.relationships.GrafanaConnectToGraphite', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'start': {'inputs': {'GRAPHITE_URL': {'get_attribute': ['REQ_TARGET', 'graphite', 'web_ui_url']}, 'GF_AUTH_ANONYMOUS_ENABLED': True}, 'implementation': {'file': 'laurentg/grafana', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.yorc.samples.tests.BashIterationComponent': {'description': 'This component iterates on printing a message n times, sleeping a given\nnumber of seconds between each iteration.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'messageToPrint': {'description': 'Message to print on each iteration', 'type': 'string', 'default': 'Message'}, 'numberOfIterations': {'description': 'Number of iterations to perform', 'type': 'integer', 'default': 12}, 'pauseDuration': {'description': 'Duration in seconds of the pause after each iteration', 'type': 'integer', 'default': 5}}, 'interfaces': {'Standard': {'create': {'inputs': {'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/create.sh'}, 'start': {'inputs': {'MESSAGE': {'get_property': ['SELF', 'messageToPrint']}, 'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/iterate.sh'}}, 'custom': {'iterate': {'inputs': {'MESSAGE': {'get_property': ['SELF', 'messageToPrint']}, 'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/iterate.sh'}}}}}",0
"{'org.ystia.yorc.samples.tests.BashIterationHostOperation': {'description': 'This component iterates on printing a message n times, sleeping a given\nnumber of seconds between each iteration. Can be run as a Host Operation\n', 'derived_from': 'tosca.nodes.Root', 'properties': {'messageToPrint': {'description': 'Message to print on each iteration', 'type': 'string', 'default': 'Message'}, 'numberOfIterations': {'description': 'Number of iterations to perform', 'type': 'integer', 'default': 12}, 'pauseDuration': {'description': 'Duration in seconds of the pause after each iteration', 'type': 'integer', 'default': 5}}, 'interfaces': {'Standard': {'create': {'inputs': {'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/create.sh'}, 'start': {'inputs': {'MESSAGE': {'get_property': ['SELF', 'messageToPrint']}, 'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/iterate.sh'}}, 'custom': {'iterate': {'inputs': {'MESSAGE': {'get_property': ['SELF', 'messageToPrint']}, 'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'scripts/iterate.sh'}}}}}",0
"{'org.ystia.yorc.samples.tests.AnsibleIterationComponent': {'description': 'This component iterates on printing a message n times, sleeping a given\nnumber of seconds between each iteration.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'messageToPrint': {'description': 'Message to print on each iteration', 'type': 'string', 'default': 'Message'}, 'numberOfIterations': {'description': 'Number of iterations to perform', 'type': 'integer', 'default': 10}, 'pauseDuration': {'description': 'Duration in seconds of the pause after each iteration', 'type': 'integer', 'default': 1}}, 'interfaces': {'Standard': {'create': {'inputs': {'MESSAGE': {'get_property': ['SELF', 'messageToPrint']}, 'ITERATIONS': {'get_property': ['SELF', 'numberOfIterations']}, 'PAUSE_DURATION': {'get_property': ['SELF', 'pauseDuration']}}, 'implementation': 'ansible/create.yaml'}, 'start': {'implementation': 'ansible/iterate.yaml'}}, 'custom': {'iterate': {'inputs': None, 'implementation': 'ansible/iterate.yaml'}}}}}",0
"{'org.ystia.yorc.samples.openshift.hello.Container': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'capabilities': {'http_endpoint': {'type': 'org.ystia.yorc.samples.openshift.hello.capabilities.Http'}}, 'interfaces': {'Standard': {'create': {'implementation': {'file': 'openshift/hello-openshift:v3.9.0', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.ystia.monitoring.service.pub.MonitoringService': {'derived_from': 'yorc.nodes.DockerContainer', 'abstract': True, 'description': 'Data visualization front-end and data collection back-end\n', 'metadata': {'icon': '/images/metrics.png'}, 'attributes': {'web_ui_url': {'description': 'Service Web UI URL\n', 'type': 'string'}}, 'capabilities': {'http_endpoint': {'type': 'org.ystia.monitoring.service.pub.HttpEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Endpoint to visualize collected data'}, 'data_collection': {'type': 'org.ystia.monitoring.service.pub.DataCollectionEndpoint', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Endpoint to collect data'}}}}",0
"{'org.ystia.yorc.samples.python3.Component': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Sample component to illustrate how to implement a Component lifecycle in Python\n', 'tags': {'icon': '/images/python.png'}, 'properties': {'user': {'description': 'name to whom say hello or goodbye in custom command', 'type': 'string', 'required': True, 'default': 'John Doe'}, 'hello_message': {'description': 'A simple message to print', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}}, 'interfaces': {'Standard': {'create': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}}, 'implementation': 'scripts/create.py'}, 'start': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': 'scripts/start.py'}}, 'custom': {'inputs': {'user': {'get_property': ['SELF', 'user']}}, 'say_hello': {'implementation': 'scripts/hello.py'}, 'say_goodbye': {'implementation': 'scripts/goodbye.py'}}}}}",0
"{'org.alien4cloud.diamond.pub.nodes.DiamondAgent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'description': 'A Diamond Agent.', 'metadata': {'icon': '/images/diamond.png'}, 'capabilities': {'collector_container': {'type': 'org.alien4cloud.diamond.pub.capabilities.DiamondCollectorContainer', 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'org.alien4cloud.diamond.agent_linux.nodes.DiamondLinuxAgent': {'description': 'Deploy a Diamond Agent on linux.\n', 'derived_from': 'org.alien4cloud.diamond.pub.nodes.DiamondAgent', 'properties': {'datasource_name': {'type': 'string', 'description': 'The datasource that connects grafana to graphite.\nWe need it to prepare grafana dashboards.\n', 'required': True, 'default': 'Graphite'}, 'collectors_path': {'type': 'string', 'description': 'The path where the collector sources are (read only).', 'required': True, 'default': '/opt/ansible_diamond/env/share/diamond/collectors'}, 'collectors_conf_path': {'type': 'string', 'description': 'The path where the collector configuration are (read only).', 'required': True, 'default': '/etc/ansible_diamond/collectors'}}, 'attributes': {'dashboard_dir': {'get_operation_output': ['SELF', 'Standard', 'create', 'dashboard_dir']}, 'grafana_url': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_url']}, 'grafana_user': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_user']}, 'grafana_password': {'get_operation_output': ['SELF', 'Standard', 'configure', 'grafana_password']}, 'grafana_dashboads_urls': {'get_operation_output': ['SELF', 'Standard', 'start', 'grafana_dashboads_urls']}}, 'requirements': [{'http_endpoint': {'capability': 'org.ystia.monitoring.service.pub.HttpEndpoint', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToFrontEnd', 'occurrences': [0, 1]}}, {'data_collection': {'capability': 'org.ystia.monitoring.service.pub.DataCollectionEndpoint', 'relationship': 'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToBackEnd', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml', 'collectors_conf_path': {'get_property': ['SELF', 'collectors_conf_path']}}, 'implementation': 'playbook/create.yml'}, 'configure': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml', 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/configure.yml'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml', 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/start.yml'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/stop.yml'}, 'delete': {'inputs': {'ANSIBLE_VERBOSE': False, 'dashboard_dir': {'get_attribute': ['SELF', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['SELF', 'grafana_url']}, 'grafana_user': {'get_attribute': ['SELF', 'grafana_user']}, 'grafana_password': {'get_attribute': ['SELF', 'grafana_password']}}, 'implementation': 'playbook/delete.yml'}}}}}",0
"{'org.atos.visualization.Xrv': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'port': {'type': 'integer', 'description': 'Port to use'}}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}]}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/create.yaml'}, 'start': {'inputs': {'PORT': {'get_property': ['SELF', 'port']}}, 'implementation': 'playbooks/start.yaml'}, 'stop': {'implementation': 'playbooks/stop.yaml'}, 'delete': {'implementation': 'playbooks/delete.yaml'}}}}}",0
"{'tosca.nodes.QC.Root': {'description': 'root QC node', 'attributes': {'current_state': {'type': 'string', 'required': False, 'description': 'the current state of the node'}, 'desired_state': {'type': 'string', 'required': False, 'description': 'the current state of the node'}}}}",0
"{'tosca.nodes.CloudProvider': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'provider': {'description': 'Name of cloud provider', 'type': 'string', 'required': True, 'default': 'Azure'}, 'datacenter': {'description': 'Location of data center', 'type': 'string', 'required': True, 'default': 'West Europe'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Host.Compute'}}}}",0
"{'tosca.nodes.QC.Container.Application.Docker': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'description of container', 'properties': {'ports': {'description': 'ports to be forwarded', 'type': 'list', 'required': False}, 'container_ports': {'description': 'ports used by the container but not exposed', 'type': 'list', 'required': False}, 'entrypoint': {'description': 'command', 'type': 'string', 'required': False}, 'cmd': {'description': 'cmd', 'type': 'string', 'required': False}, 'environment': {'description': 'environment variables', 'type': 'map', 'required': False}, 'volumes': {'description': 'volume', 'type': 'list', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.QC.docker.Orchestrator', 'node': 'tosca.nodes.QC.docker.Orchestrator', 'relationship': 'tosca.relationships.HostedOn'}}], 'attributes': {'service_url': {'type': 'string', 'required': False, 'description': 'url of the service'}}, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.QC.Kubernetes', 'delete': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/delete_service.yml']}}, 'create': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/create_service.yml']}}, 'configure': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/get_services.yaml']}}, 'scale': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/scale_service.yml'], 'replicas': 1}}, 'autoscale': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/autoscale_service.yml'], 'horizontal_pod_autoscaler': 'horizontal_pod_autoscaler.yml'}}, 'info': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/get_services.yaml']}}}}}}",0
"{'tosca.nodes.QC.docker.Orchestrator': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'a container orchestrator', 'requirements': [{'host': {'capability': 'tosca.capabilities.QC.VM.topology', 'node': 'tosca.nodes.QC.VM.topology', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'orchestrator': {'type': 'tosca.capabilities.QC.docker.Orchestrator'}, 'host': {'type': 'tosca.capabilities.Container.Docker'}, 'container': {'type': 'tosca.capabilities.Container'}}, 'properties': {'min_masters_num': {'type': 'integer', 'required': True, 'default': 1, 'constraints': [{'greater_or_equal': 1}]}, 'min_workers_num': {'type': 'integer', 'required': True, 'default': 1, 'constraints': [{'greater_or_equal': 1}]}}}}",0
"{'tosca.nodes.QC.docker.Orchestrator.Kubernetes': {'derived_from': 'tosca.nodes.QC.docker.Orchestrator', 'description': 'Kubernetes orchestrator', 'attributes': {'tokens': {'type': 'list', 'required': False, 'entry_schema': {'type': 'tosca.datatypes.Credential'}, 'description': 'list of tokens to access the kubernetes dashboard and other kubernetes resources'}, 'dashboard_url': {'type': 'string', 'required': False, 'description': 'the dashboard access url'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.QC.Standard', 'create': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['ec2/ec2_mount.yaml', 'docker/install_docker.yaml', 'k8s/install_k8s_prerequisites.yaml', 'k8s/install_k8s.yaml']}}, 'configure': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/set_master_k8s_cluster.yaml', 'k8s/join_k8s_cluster.yaml', 'k8s/create_k8s_dashboard.yaml']}}, 'delete': {'inputs': {'repository': 'https://github.com/QCDIS/playbooks.git', 'resources': ['k8s/k8s_delete.yaml']}}}}}}",0
"{'tosca.nodes.QC.VM.topology': {'derived_from': 'tosca.nodes.QC.Infrastructure', 'description': 'topology of VMs', 'requirements': [{'vm': {'capability': 'tosca.capabilities.QC.VM', 'node': 'tosca.nodes.QC.Infrastructure', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'scalable': {'type': 'tosca.capabilities.Scalable'}, 'topology': {'type': 'tosca.capabilities.QC.VM.topology'}}, 'properties': {'name': {'type': 'string', 'required': False, 'description': 'the name of this topology'}, 'subnet': {'type': 'string', 'required': False, 'description': 'The subnet of the VMs this topology e.g. 192.168.10.10/24'}, 'domain': {'type': 'string', 'required': True, 'default': 'Ireland', 'description': 'the domain of this topology e.g. California, UvA (Amsterdam, The Netherlands) XO Rack, Frankfurt, etc'}, 'provider': {'type': 'string', 'required': True, 'default': 'EC2', 'description': 'The name of the provider e.g. EC2, ExoGENI etc.'}, 'coordinates': {'type': 'tosca.datatypes.QC.coordinates', 'required': False, 'description': 'The coordinates of the domain'}}, 'attributes': {'ssh_keys': {'type': 'tosca.datatypes.QC.Credential', 'required': False}}, 'artifacts': {'provisioned_files': {'type': 'string', 'required': False}}, 'interfaces': {'CloudsStorm': {'type': 'tosca.interfaces.QC.CloudsStorm', 'provision': {'inputs': {'code_type': 'SEQ', 'object_type': 'SubTopology'}}, 'delete': {'inputs': {'code_type': 'SEQ', 'object_type': 'SubTopology'}}, 'hscale': {'inputs': {'code_type': 'SEQ', 'object_type': 'SubTopology'}}, 'stop': {'inputs': {'code_type': 'SEQ', 'object_type': 'SubTopology'}}, 'start': {'inputs': {'code_type': 'SEQ', 'object_type': 'SubTopology'}}}}}}",0
"{'tosca.nodes.QC.VM.Compute': {'derived_from': 'tosca.nodes.QC.Infrastructure', 'description': 'vm', 'capabilities': {'compute': {'type': 'tosca.capabilities.QC.VM'}}, 'properties': {'running_time': {'type': 'integer', 'required': False, 'description': 'the time units needed for this resource to execute the assigned workflow tasks'}, 'num_cores': {'type': 'integer', 'required': True, 'default': 2, 'constraints': [{'greater_or_equal': 1}]}, 'cpu_frequency': {'type': 'scalar-unit.frequency', 'required': False, 'constraints': [{'greater_or_equal': '0.5 GHz'}]}, 'disk_size': {'type': 'scalar-unit.size', 'required': True, 'default': '40000 MB', 'constraints': [{'greater_or_equal': '5000 MB'}]}, 'mem_size': {'type': 'scalar-unit.size', 'required': True, 'default': '4000 MB', 'constraints': [{'greater_or_equal': '500 MB'}]}, 'os': {'type': 'string', 'required': True, 'default': 'Ubuntu 18.04'}, 'user_name': {'type': 'string', 'required': True, 'default': 'vm_user'}}, 'attributes': {'private_ip': {'type': 'string', 'required': False, 'description': 'The private IP of the VM e.g. 192.168.10.10'}, 'public_ip': {'type': 'string', 'required': False, 'description': 'The public IP'}, 'role': {'type': 'string', 'required': True, 'description': 'the role of the VM in the topology', 'default': 'master', 'constraints': [{'valid_values': ['master', 'worker']}]}, 'node_type': {'type': 'string', 'required': False, 'description': 'the type of VM depending on the provider. e.g. XOSmall, t.medium etc. It has to match the mem_size, num_cores etc.'}, 'host_name': {'type': 'string', 'required': False, 'default': 'vm'}, 'root_key_pair': {'type': 'tosca.datatypes.QC.Credential', 'required': False}, 'user_key_pair': {'type': 'tosca.datatypes.QC.Credential', 'required': False}}, 'interfaces': {'Standard': {'create': 'dumy.yaml'}}}}",0
"{'tosca.nodes.QC.Infrastructure': {'derived_from': 'tosca.nodes.QC.Root', 'description': 'Base infrastructure node', 'capabilities': {'compute': {'type': 'tosca.capabilities.Compute'}, 'node': {'type': 'tosca.capabilities.Node'}}}}",0
"{'tosca.nodes.QC.Application': {'derived_from': 'tosca.nodes.QC.Root', 'description': 'Base application node'}}",0
"{'tosca.nodes.QC.Application.GlusterFS': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'description of container', 'capabilities': {'storage': {'type': 'tosca.capabilities.QC.GlusterFS'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.QC.VM.topology', 'node': 'tosca.nodes.QC.VM.topology', 'relationship': 'tosca.relationships.HostedOn'}}], 'attributes': {'service_url': {'type': 'string', 'required': False, 'description': 'url of the service'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.QC.Standard', 'create': {'inputs': {'repository': 'https://github.com/bityoga/mysome_glusterfs.git', 'resources': ['000.purge.yml', '001.requirements.yml', '002.setup_glusterfs_infra.yml', '003.setup_glusterfs_cluster.yml']}}}}, 'properties': {'min_masters_num': {'type': 'integer', 'required': True, 'default': 1, 'constraints': [{'greater_or_equal': 1}]}, 'min_workers_num': {'type': 'integer', 'required': True, 'default': 1, 'constraints': [{'greater_or_equal': 1}]}}}}",0
"{'tosca.nodes.QC.Application.TIC': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'description of TIC', 'requirements': [{'storage': {'capability': 'tosca.capabilities.QC.GlusterFS', 'node': 'tosca.nodes.QC.Application.GlusterFS', 'relationship': 'tosca.relationships.DependsOn'}}, {'host': {'capability': 'tosca.capabilities.QC.VM.topology', 'node': 'tosca.nodes.QC.VM.topology', 'relationship': 'tosca.relationships.HostedOn'}}], 'attributes': {'service_urls': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.QC.Standard', 'create': {'inputs': {'repository': 'https://github.com/QCDIS/fabric_as_code.git', 'resources': ['011.initialize_hosts.yml', '012.prepare_docker_images.yml', '013.mount_fs.yml', '014.spawn_swarm.yml', '016.deploy_portainer.yml', '100.deploy_ca.yml', '101.deploy_orderer.yml', '102.deploy_peers.yml', '103.deploy_cli.yml', '104.deploy_hlf_explorer.yml']}}}}, 'properties': {'gluster_cluster_volume': {'type': 'string', 'required': True, 'default': 'gv0'}}}}",0
"{'tosca.nodes.QC.cwl.task': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'description of common workflow language task', 'requirements': [{'host': {'capability': 'tosca.capabilities.QC.VM.topology', 'node': 'tosca.nodes.QC.VM.topology', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'start_time': {'type': 'string', 'required': False}, 'end_time': {'type': 'string', 'required': False}}}}",0
"{'tosca.nodes.QC.Application.CWLRunner': {'derived_from': 'tosca.nodes.QC.Application', 'description': 'the cwl-runner https://github.com/common-workflow-language/cwltool', 'requirements': [{'host': {'capability': 'tosca.capabilities.QC.VM.topology', 'node': 'tosca.nodes.QC.VM.topology', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'swz.dist.nodes.Compute': {'description': 'The compute node in an HPC cluster.\n', 'version': 1.0, 'derived_from': 'tosca.nodes.Root', 'attributes': {'hostname': {'type': 'string'}}, 'requirements': [{'group': {'capability': 'swz.dist.capabilities.Group', 'node': 'swz.dist.nodes.Group', 'relationship': 'swz.dist.relationships.InGroup', 'occurrences': [0, 'UNBOUNDED']}}, {'queue': {'capability': 'swz.dist.capabilities.Queue', 'node': 'swz.dist.nodes.Queue', 'relationship': 'swz.dist.relationships.InQueue', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.HostGroup': {'derived_from': 'tosca.nodes.Root', 'attributes': {'hostname': {'type': 'string'}}, 'capabilities': {'hosts': {'type': 'swz.dist.capabilities.Host', 'valid_source_types': ['swz.dist.nodes.Compute']}}}}",0
"{'tosca.nodes.Queue': {'derived_from': 'tosca.nodes.Root', 'attributes': {'hostname': {'type': 'string'}}, 'capabilities': {'hosts': {'type': 'swz.dist.capabilities.Host', 'valid_source_types': ['swz.dist.nodes.Compute']}, 'hostgroups': {'type': 'swz.dist.capabilities.HostGroup', 'valid_source_types': ['swz.dist.nodes.HostGroup']}}}}",0
"{'swz.dist.nodes.Library': {'attributes': {'software_id': {'type': 'string'}, 'version': {'type': 'string'}}, 'capabilities': {'application_dependency': {'type': 'swz.dist.capabilities.SoftwareComponent', 'valid_source_types': ['swz.dist.nodes.Application']}}, 'requirements': [{'host': {'capability': 'swz.dist.capabilities.Library', 'node': 'swz.dist.nodes.Compute', 'relationship': 'swz.dist.relationships.InstalledOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.SoftwareComponent': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'metadata': {'icon': '/images/software.png'}, 'properties': {'component_version': {'type': 'integer', 'description': 'The optional software component’s version.', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.ObjectStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'metadata': {'icon': '/images/objectstore.png'}, 'properties': {'name': {'type': 'string', 'required': True}, 'size': {'type': 'integer', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}, 'maxsize': {'type': 'integer', 'constraints': [{'greater_or_equal': '0 GB'}], 'required': False}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.BlockStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'metadata': {'icon': '/images/volume.png'}, 'properties': {'size': {'type': 'integer', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’ Note: this property will be moved in next releases to the AttachTo relationship as it is specified by TOSCA spec.\n', 'required': False}}, 'requirements': [{'attachment': 'tosca.capabilities.Attachment'}]}}",0
"{'tosca.nodes.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.Abstract.Compute': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': []}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Abstract.Compute', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': {'type': 'tosca.capabilities.Endpoint'}, 'admin_endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.EndPoint'}}]}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'properties': {'my_app_password': {'type': 'string', 'description': 'application password', 'constraints': [{'min_length': 6}, {'max_length': 10}]}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'ansible.nodes.Application': {'derived_from': 'cloudify.nodes.ApplicationModule', 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': {'implementation': 'ansible.ansible_plugin.tasks.configure'}, 'start': {'implementation': 'ansible.ansible_plugin.tasks.ansible_playbook'}}}}}",0
{'swe.simpaas.nodes.mpihost': {'derived_from': 'cloudify.openstack.nodes.Server'}},0
"{'cloudify.nodes.Root': {'interfaces': {'cloudify.interfaces.lifecycle': {'create': {}, 'configure': {}, 'start': {}, 'stop': {}, 'delete': {}}, 'cloudify.interfaces.validation': {'creation': {}, 'deletion': {}}, 'cloudify.interfaces.monitoring': {'start': {}, 'stop': {}}}}}",0
"{'cloudify.nodes.Compute': {'derived_from': 'cloudify.nodes.Root', 'properties': {'ip': {'default': ''}, 'os_family': {'description': 'Property specifying what type of operating system family\nthis compute node will run.\n', 'default': 'linux'}, 'agent_config': {'type': 'cloudify.datatypes.AgentConfig', 'default': {'install_method': 'remote', 'port': 22}}, 'install_agent': {'default': ''}, 'cloudify_agent': {'default': {}}}, 'interfaces': {'cloudify.interfaces.cloudify_agent': {'create': {'implementation': 'agent.cloudify_agent.installer.operations.create', 'executor': 'central_deployment_agent'}, 'configure': {'implementation': 'agent.cloudify_agent.installer.operations.configure', 'executor': 'central_deployment_agent'}, 'start': {'implementation': 'agent.cloudify_agent.installer.operations.start', 'executor': 'central_deployment_agent'}, 'stop': {'implementation': 'agent.cloudify_agent.installer.operations.stop', 'executor': 'central_deployment_agent'}, 'stop_amqp': {'implementation': 'agent.cloudify_agent.operations.stop', 'executor': 'host_agent'}, 'delete': {'implementation': 'agent.cloudify_agent.installer.operations.delete', 'executor': 'central_deployment_agent'}, 'restart': {'implementation': 'agent.cloudify_agent.installer.operations.restart', 'executor': 'central_deployment_agent'}, 'restart_amqp': {'implementation': 'agent.cloudify_agent.operations.restart', 'executor': 'host_agent'}, 'install_plugins': {'implementation': 'agent.cloudify_agent.operations.install_plugins', 'executor': 'host_agent'}, 'create_amqp': {'implementation': 'agent.cloudify_agent.operations.create_agent_amqp', 'executor': 'central_deployment_agent', 'inputs': {'install_agent_timeout': {'default': 300}}}, 'validate_amqp': {'implementation': 'agent.cloudify_agent.operations.validate_agent_amqp', 'executor': 'central_deployment_agent', 'inputs': {'validate_agent_timeout': {'default': 20}}}}, 'cloudify.interfaces.host': {'get_state': {}}, 'cloudify.interfaces.monitoring_agent': {'install': {}, 'start': {}, 'stop': {}, 'uninstall': {}}}}}",0
"{'cloudify.nodes.FileSystem': {'derived_from': 'cloudify.nodes.Root', 'properties': {'use_external_resource': {'description': 'Enables the use of already formatted volumes.\n', 'type': 'boolean', 'default': False}, 'partition_type': {'description': 'The partition type. 83 is a Linux Native Partition.\n', 'type': 'integer', 'default': 83}, 'fs_type': {'description': 'The type of the File System. Supported types are [ext2, ext3, ext4, fat, ntfs, swap]\n', 'type': 'string'}, 'fs_mount_path': {'description': 'The path of the mount point.\n', 'type': 'string'}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'configure': {'implementation': 'script.script_runner.tasks.run', 'inputs': {'script_path': {'default': 'https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/master/resources/rest-service/cloudify/fs/mkfs.sh'}}}}}}}",0
"{'cloudify.nodes.CloudifyManager': {'derived_from': 'cloudify.nodes.SoftwareComponent', 'properties': {'cloudify': {'description': 'Configuration for Cloudify Manager\n', 'default': {'transient_deployment_workers_mode': {'enabled': True, 'global_parallel_executions_limit': 50}, 'resources_prefix': '', 'cloudify_agent': {'min_workers': 2, 'max_workers': 5, 'remote_execution_port': 22, 'user': 'ubuntu'}, 'workflows': {'task_retries': -1, 'task_retry_interval': 30}, 'policy_engine': {'start_timeout': 30}}}, 'cloudify_packages': {'description': 'Links to Cloudify packages to be installed on the manager\n'}}}}",0
{'key': '{}'},0
"{'org.apache.brooklyn.entity.webapp.tomcat.TomcatServer': {'derived_from': 'tosca.nodes.Root', 'description': 'A simple Tomcat server\n', 'properties': {'version': {'type': 'string', 'required': False, 'default': '7.0.65'}, 'http.port': {'type': 'list', 'required': False, 'entry_schema': {'type': 'string'}}, 'java.sysprops': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}}, 'wars.root': {'type': 'string', 'required': False}}, 'capabilities': {'endpoint_configuration': 'tosca.capabilities.Endpoint'}, 'requirements': [{'dbConnection': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'unbounded'}, {'endpoint_configuration': 'tosca.nodes.Root', 'type': 'brooklyn.relationships.Configure', 'lower_bound': 0, 'upper_bound': 'unbounded'}]}}",0
"{'org.apache.brooklyn.entity.database.mysql.MySqlNode': {'derived_from': 'tosca.nodes.Root', 'description': 'A node to install MySQL v5.5 database with data on a specific attached volume.\n', 'properties': {'port': {'type': 'integer', 'default': 3306, 'description': 'The port on which the underlying database service will listen to data.'}, 'version': {'type': 'string', 'default': '5.6.26', 'requirements': False}, 'creationScriptUrl': {'type': 'string', 'required': True}}, 'capabilities': {'dbConnection': 'tosca.capabilities.Endpoint.Database'}}}",0
"{'org.alien4cloud.kubernetes.api.types.ConfigMapFactory': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'description': 'Component in charge of creating a configMap using a container (of type ConfigurableDockerContainer) inputs.\n', 'properties': {'name': {'type': 'string', 'description': 'The name of the configMap\n', 'constraints': [{'pattern': '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'}]}, 'service_dependency_lookups': {'type': 'string', 'required': False, 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n'}, 'input_variables': {'type': 'map', 'entry_schema': {'type': 'string'}, 'description': 'The variables names and values that should be replaced in the files\n'}}, 'interfaces': {'Standard': {'create': {'inputs': {'CONFIGMAP_NAME': {'get_property': ['SELF', 'name']}, 'INPUT_VARIABLES': {'get_property': ['SELF', 'input_variables']}, 'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_configmap_create.sh'}, 'delete': {'inputs': {'CONFIGMAP_NAME': {'get_attribute': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_configmap_delete.sh'}}}, 'artifacts': [{'configs': {'file': 'configs', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.Base': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'c.f. https://kubernetes.io/docs/api-reference/v1.6/#deployment-v1beta1-apps\n', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources\n'}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\n', 'constraints': [{'valid_values': ['StatefulSet', 'Deployment', 'Service', 'Ingress', 'HorizontalPodAutoscaler']}]}, 'metadata': {'type': 'map', 'required': False, 'entry_schema': {'type': 'string'}, 'description': ""Standard object's metadata. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#metadata\n""}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'https://v1-6.docs.kubernetes.io/docs/api-reference/v1.6/#volume-v1-core\n', 'requirements': [{'attachment': {'capability': 'org.alien4cloud.capabilities.DockerVolumeAttachment', 'relationship': 'org.alien4cloud.relationships.MountDockerVolume', 'occurrences': [1, 'unbounded']}}, {'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB).\n'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.VolumeBase': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase', 'properties': {'volume_type': {'type': 'string', 'constraints': [{'valid_values': ['emptyDir', 'hostPath', 'awsElasticBlockStore', 'persistentVolumeClaim', 'configMap', 'cephfs']}]}, 'spec': {'type': 'tosca.datatypes.Root', 'description': 'may be overriden by concrete implementations', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AbstractArtifactVolumeBase': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractVolumeBase', 'description': 'A volume linked to an artifact\n', 'artifacts': [{'resources': {'type': 'tosca.artifacts.File', 'file': 'README.md'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.ArtifactVolumeBase': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.AbstractArtifactVolumeBase', 'properties': {'volume_type': {'type': 'string', 'constraints': [{'valid_values': ['secret']}]}, 'spec': {'type': 'tosca.datatypes.Root', 'description': 'may be overriden by concrete implementations', 'required': False}}, 'artifacts': [{'resources': {'type': 'tosca.artifacts.File', 'file': 'README.md'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.EmptyDirVolumeSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': 'An emptyDir volume is first created when a Pod is assigned to a Node, and exists as long as that Pod is running on that node.\nAs the name says, it is initially empty.\nContainers in the pod can all read and write the same files in the emptyDir volume, though that volume can be mounted at the same or different paths in each container.\nWhen a Pod is removed from a node for any reason, the data in the emptyDir is deleted forever.\n', 'properties': {'volume_type': {'type': 'string', 'default': 'emptyDir', 'constraints': [{'equal': 'emptyDir'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.EmptyDirVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.CephFSVolumeSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': 'A cephfs volume allows an existing CephFS volume to be mounted into your Pod.\nUnlike emptyDir, which is erased when a Pod is removed, the contents of a cephfs volume are preserved and the volume is merely unmounted.\nThis means that a CephFS volume can be pre-populated with data, and that data can be ""handed off"" between Pods.\nCephFS can be mounted by multiple writers simultaneously.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#cephfs\n', 'properties': {'volume_type': {'type': 'string', 'default': 'cephfs', 'constraints': [{'equal': 'cephfs'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.CephFSVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.HostPathVolumeSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': 'HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.\nThis is generally used for system agents or other privileged things that are allowed to see the host machine.\nMost containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath\n', 'properties': {'volume_type': {'type': 'string', 'default': 'hostPath', 'constraints': [{'equal': 'hostPath'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.HostPathVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.AWSElasticBlockStoreVolumeSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': ""AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore\n"", 'properties': {'volume_type': {'type': 'string', 'default': 'awsElasticBlockStore', 'constraints': [{'equal': 'awsElasticBlockStore'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.AWSElasticBlockStoreVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': 'PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims\n', 'properties': {'volume_type': {'type': 'string', 'default': 'persistentVolumeClaim', 'constraints': [{'equal': 'persistentVolumeClaim'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.PersistentVolumeClaimSpec', 'required': False}, 'accessModes': {'description': 'AccessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1\n', 'type': 'string', 'default': 'ReadWriteOnce', 'constraints': [{'valid_values': ['ReadWriteOnce', 'ReadOnlyMany', 'ReadWriteMany']}]}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimStorageClassSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.PersistentVolumeClaimSource', 'description': 'An extension of PersistentVolumeClaimSource that allows to specify a storageClass.\nIf no volume that match this claim is found in the PersistentVolume pool, a volume will be allocated in the IAAS.\nWhen using this kind of volume, your Kube admin should ensure to have a storageClass defined in the cluster.\n', 'properties': {'storageClassName': {'type': 'string', 'default': 'default'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.ConfigMapSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.VolumeBase', 'description': 'The configMap resource provides a way to inject configuration data into Pods.\nMore info: https://kubernetes.io/docs/concepts/storage/#configmap\n', 'properties': {'volume_type': {'type': 'string', 'default': 'configMap', 'constraints': [{'equal': 'configMap'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.ConfigMapVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.volume.SecretSource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.volume.ArtifactVolumeBase', 'description': ""Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.\nMore info: https://kubernetes.io/docs/concepts/configuration/secret/\n"", 'properties': {'volume_type': {'type': 'string', 'default': 'secret', 'constraints': [{'equal': 'secret'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.volumes.SecretVolumeSpec', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.SecretFactory': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'description': 'Component in charge of creating a secret using one or more files (from an artifact).\n', 'properties': {'name': {'type': 'string', 'description': 'The name of the secret\n', 'constraints': [{'pattern': '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'}]}}, 'artifacts': [{'resources': {'type': 'tosca.artifacts.File', 'file': 'README.md'}}], 'interfaces': {'Standard': {'create': {'inputs': {'SECRET_NAME': {'get_property': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_secret_create.sh'}, 'delete': {'inputs': {'SECRET_NAME': {'get_property': ['SELF', 'name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_secret_delete.sh'}}}}}",0
{'org.alien4cloud.kubernetes.api.types.Service': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractService'}},0
"{'org.alien4cloud.kubernetes.api.types.KubeService': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractService', 'capabilities': {'service_endpoint': {'type': 'org.alien4cloud.kubernetes.api.capabilities.KubeServiceEndpoint', 'properties': {'proxy_for': 'expose'}}}, 'requirements': [{'expose': {'capability': 'org.alien4cloud.kubernetes.api.capabilities.KubeEndpoint', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeNodeportService': {'derived_from': 'org.alien4cloud.kubernetes.api.types.KubeService', 'properties': {'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ServiceSpec', 'default': {'service_type': 'NodePort'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeIngress': {'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'description': 'Represent a kubernetes Ingress\n', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources\n', 'default': 'networking.k8s.io/v1beta1', 'constraints': [{'equal': 'networking.k8s.io/v1beta1'}]}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\n', 'default': 'Ingress', 'constraints': [{'equal': 'Ingress'}]}, 'tls_crt': {'type': 'string', 'description': 'Optionnal base64 encoded certificate (if TLS need to be set for the ingress)\n', 'required': False}, 'tls_key': {'type': 'string', 'description': 'Optionnal base64 encoded key (if TLS need to be set for the ingress)\n', 'required': False}}, 'requirements': [{'expose': {'capability': 'org.alien4cloud.kubernetes.api.capabilities.KubeServiceEndpoint', 'relationship': 'org.alien4cloud.kubernetes.api.relationships.ConnectUrlTo', 'occurrences': [1, 'unbounded']}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.IngressService': {'derived_from': 'org.alien4cloud.kubernetes.api.types.Service', 'description': 'This kind of service can be used of you want to expose your service using the Ingress controler.\nIf tls_crt AND tls_key are set, the Ingress will be secured using a secret.\n', 'properties': {'host': {'type': 'string', 'description': 'The dns name for the ingress.\n', 'required': True, 'constraints': [{'pattern': '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'}]}, 'tls_crt': {'type': 'string', 'description': 'Optionnal base64 encoded certificate (if TLS need to be set for the ingress)\n', 'required': False}, 'tls_key': {'type': 'string', 'description': 'Optionnal base64 encoded key (if TLS need to be set for the ingress)\n', 'required': False}}}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractService': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'description': 'Represent a kubernetes Service\n', 'properties': {'service_name': {'type': 'string', 'description': 'Usually, the service name is generated by the plugin. If you need to define a static service name, you can define it using this property.\n253 characters and consist of lower case alphanumeric characters, -, and .\n', 'required': False, 'constraints': [{'pattern': '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'}]}, 'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources\n', 'default': 'v1', 'constraints': [{'equal': 'v1'}]}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\n', 'default': 'Service', 'constraints': [{'equal': 'Service'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ServiceSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractController': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'capabilities': {'host': 'tosca.capabilities.Container.Docker', 'scalable': 'tosca.capabilities.Scalable'}, 'properties': {'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ControllerSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.StatefulSet': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractStatefulSet', 'properties': {'volumeDeletable': {'type': 'boolean', 'required': False, 'description': 'Delete or not volume(s) at undeployment.\n'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractStatefulSet': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractController', 'description': 'Represent a kubernetes StatefulSet\n', 'properties': {'apiVersion': {'type': 'string', 'default': 'apps/v1', 'constraints': [{'equal': 'apps/v1'}]}, 'kind': {'type': 'string', 'default': 'StatefulSet', 'constraints': [{'equal': 'StatefulSet'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.StatefulSetSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Deployment': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractDeployment', 'tags': {'icon': '/images/kubernetes.Deployment.png'}}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeDeployment': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractDeployment', 'tags': {'icon': '/images/kubernetes.png'}, 'properties': {'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.DeploymentSpec', 'required': False}}, 'capabilities': {'host': 'org.alien4cloud.kubernetes.api.capabilities.KubeContainerHost'}}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractDeployment': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractController', 'description': 'Represent a kubernetes Deployment\n', 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources\n', 'default': 'apps/v1', 'constraints': [{'equal': 'apps/v1'}]}, 'kind': {'type': 'string', 'default': 'Deployment', 'constraints': [{'equal': 'Deployment'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.DeploymentSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.Job': {'tags': {'icon': '/images/kubernetes.Job.png'}, 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractJob'}}",0
"{'org.alien4cloud.kubernetes.api.types.AbstractJob': {'abstract': True, 'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractController', 'description': 'Represent a kubernetes Job\n', 'capabilities': {'host': 'tosca.capabilities.Container.Docker'}, 'properties': {'apiVersion': {'type': 'string', 'description': 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#resources\n', 'default': 'batch/v1', 'constraints': [{'equal': 'batch/v1'}]}, 'kind': {'type': 'string', 'description': 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds\n', 'default': 'Job', 'constraints': [{'equal': 'Job'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.JobSpec'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.HorizontalPodAutoscaler': {'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'description': 'A kubernetes HorizontalPodAutoscaler object\nsee https://v1-7.docs.kubernetes.io/docs/api-reference/v1.7/#horizontalpodautoscaler-v2alpha1-autoscaling\n', 'properties': {'apiVersion': {'type': 'string', 'default': 'autoscaling/v2alpha1', 'constraints': [{'equal': 'autoscaling/v2alpha1'}]}, 'kind': {'type': 'string', 'default': 'HorizontalPodAutoscaler', 'constraints': [{'equal': 'HorizontalPodAutoscaler'}]}, 'spec': {'type': 'org.alien4cloud.kubernetes.api.datatypes.autoscaler.HorizontalPodAutoscalerSpec'}}}}",0
{'org.alien4cloud.kubernetes.api.types.Container': {'derived_from': 'org.alien4cloud.kubernetes.api.types.AbstractContainer'}},0
"{'org.alien4cloud.kubernetes.api.types.AbstractContainer': {'abstract': True, 'derived_from': 'org.alien4cloud.extended.container.types.ContainerRuntime', 'description': 'Represent a kubernetes ContainerSpec.\n', 'properties': {'container': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ContainerSpec'}, 'repository': {'type': 'string', 'description': 'This property can be specified to select from which repository the image will be pulled. The kubernetes image will be the concatenation of this property to the image property: {repository}/{image} Note that you may want to define imagePullSecrets references so kubernetes uses the right repository credentials. This property must be configured on the Deployment object.\n'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeContainer': {'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/kubernetes.png'}, 'description': 'Represent a kubernetes ContainerSpec.\n', 'properties': {'container': {'type': 'org.alien4cloud.kubernetes.api.datatypes.ContainerSpec'}}, 'capabilities': {'attach': 'org.alien4cloud.capabilities.DockerVolumeAttachment'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.kubernetes.api.capabilities.KubeContainerHost', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/void.sh'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeConfigurableContainer': {'derived_from': 'org.alien4cloud.kubernetes.api.types.KubeContainer', 'description': 'A specification of a Kube Container that is configurable using configMaps.\n', 'properties': {'config_settings': {'type': 'list', 'required': False, 'entry_schema': {'type': 'org.alien4cloud.kubernetes.api.datatypes.internal.ConfigSetting'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.BaseResource': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'Represent a kubernetes final resource after node matching (Pod, ReplicaSet or Deployment)\n', 'properties': {'namespace': {'type': 'string', 'required': False, 'description': 'The namespace where the resource is deployed.\n'}, 'resource_spec': {'type': 'string', 'description': 'The the JSON serialization (and eventually transformation) of initial node properties.\nThis JSON can be used to instanciate the resource on the K8S cluster.\n'}, 'kube_config': {'type': 'string', 'required': False, 'description': 'The kube config that will be used if provided\n'}}, 'attributes': {'namespace': {'get_property': ['SELF', 'namespace']}, 'spec': {'get_property': ['SELF', 'resource_spec']}}, 'artifacts': [{'commons': {'type': 'tosca.artifacts.File', 'file': 'scripts/commons.sh'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.DeploymentResource': {'tags': {'icon': '/images/kubernetes.Deployment.png'}, 'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'resource_id': {'type': 'string', 'required': True, 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'\n""}, 'service_dependency_lookups': {'type': 'string', 'required': False, 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n'}}, 'attributes': {'deployment_id': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBE_DEPLOYMENT_ID']}}, 'interfaces': {'Standard': {'create': {'inputs': {'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'KUBE_RESOURCE_DEPLOYMENT_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_deployment_create.sh', 'description': '- filter variable in the artifact file\n- Deploy the deployment onto kubernets\n- Export some informations to expose it as attributes ?\n'}, 'delete': {'inputs': {'KUBE_DEPLOYMENT_ID': {'get_property': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_deployment_delete.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.StatefulSetResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'tags': {'icon': '/images/kubernetes.StatefulSet.png'}, 'properties': {'resource_id': {'type': 'string', 'required': True, 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'\n""}, 'service_dependency_lookups': {'type': 'string', 'required': False, 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n'}, 'volumeDeletable': {'type': 'boolean', 'required': False, 'description': 'Delete or not volume(s) at undeployment.\n'}}, 'capabilities': {'scalable': 'org.alien4cloud.capabilities.ClusterController'}, 'attributes': {'deployment_id': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBE_DEPLOYMENT_ID']}}, 'interfaces': {'Standard': {'create': {'inputs': {'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'KUBE_RESOURCE_STATEFULSET_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/void.sh'}, 'delete': {'inputs': {'KUBE_STATEFULSET_ID': {'get_property': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/void.sh'}}, 'org.alien4cloud.management.ClusterControl': {'scale': {'inputs': {'KUBE_STATEFULSET_ID': {'get_attribute': ['SELF', 'deployment_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'EXPECTED_INSTANCES': {'type': 'integer'}, 'INSTANCES_DELTA': {'type': 'integer'}}, 'implementation': 'scripts/void.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.BaseJobResource': {'abstract': True, 'derived_from': 'org.alien4cloud.nodes.Job', 'description': 'Represent a Job kubernetes final resource after node matching\n', 'properties': {'namespace': {'type': 'string', 'required': False, 'description': 'The namespace where the resource is deployed.\n'}, 'resource_spec': {'type': 'string', 'description': 'The the JSON serialization (and eventually transformation) of initial node properties.\nThis JSON can be used to instanciate the resource on the K8S cluster.\n'}, 'kube_config': {'type': 'string', 'required': False, 'description': 'The kube config that will be used if provided\n'}}, 'artifacts': [{'commons': {'type': 'tosca.artifacts.File', 'file': 'scripts/commons.sh'}}]}}",0
"{'org.alien4cloud.kubernetes.api.types.JobResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseJobResource', 'tags': {'icon': '/images/kubernetes.Job.png'}, 'properties': {'service_dependency_lookups': {'type': 'string', 'required': False, 'description': 'A CSV key:value pairs where key should be replaced by the interpretation of value in the JSON.\nThe value is the Kube name of the service for which the scheduler will need to find the ClusterIP and\nreplace the key in the JSON with the found value.\n'}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'inputs': {'KUBE_SERVICE_DEPENDENCIES': {'get_property': ['SELF', 'service_dependency_lookups']}, 'KUBE_RESOURCE_JOB_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_job_submit.sh', 'description': 'Standard lifecycle submit operation.'}, 'run': {'inputs': {'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_job_run.sh', 'description': 'Standard lifecycle run operation.'}, 'cancel': {'inputs': {'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_job_cancel.sh', 'description': 'Standard lifecycle cancel operation.'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.EndpointResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'properties': {'resource_id': {'type': 'string', 'required': True, 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'\n""}, 'subsets': {'type': 'list', 'required': True, 'entry_schema': {'type': 'org.alien4cloud.kubernetes.api.datatypes.EndpointSubsets'}}}, 'attributes': {'spec_path': {'get_operation_output': ['SELF', 'Standard', 'create', 'KUBE_SPEC_PATH']}}, 'requirements': [{'endpoint': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'KUBE_RESOURCE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}}, 'implementation': 'scripts/kubectl_endpoint_create.sh'}, 'start': {'inputs': {'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'KUBE_SPEC_PATH': {'get_attribute': ['SELF', 'spec_path']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_endpoint_start.sh'}, 'delete': {'inputs': {'KUBE_RESOURCE_TYPE': 'endpoints', 'KUBE_RESOURCE_ID': {'get_attribute': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_resource_wrapper_uninstall.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.ServiceResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'tags': {'icon': '/images/kubernetes.ServiceResource.png'}, 'properties': {'service_name': {'type': 'string', 'required': True}, 'node_address': {'type': 'string', 'required': False, 'description': 'Address of one of the K8S cluster node, or front behind cluster (used to build a NodePort service url).\n'}, 'cluster_url': {'type': 'string', 'required': False, 'description': 'URL of the ClusterIP in the cluster.\n'}, 'context_path': {'type': 'string', 'required': False, 'description': 'If exists, the context path of the application behind the service (used to build a NodePort service url).\n'}}, 'attributes': {'ip_address': {'get_operation_output': ['SELF', 'Standard', 'create', 'IP_ADDRESS']}, 'port': {'get_operation_output': ['SELF', 'Standard', 'create', 'PORT']}, 'node_port': {'get_operation_output': ['SELF', 'Standard', 'create', 'NODE_PORT']}, 'node_url': {'concat': ['http://', {'get_property': ['SELF', 'node_address']}, ':', {'get_attribute': ['SELF', 'node_port']}, {'get_property': ['SELF', 'context_path']}]}, 'url': {'get_property': ['SELF', 'url']}, 'cluster_url': {'get_property': ['SELF', 'cluster_url']}}, 'capabilities': {'cluster_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'interfaces': {'Standard': {'create': {'input': {'KUBE_SERVICE_NAME': {'get_property': ['SELF', 'service_name']}, 'KUBE_SERVICE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_service_wrapper.sh', 'description': '- Deploy the service onto kubernetes\n- Export the service ip_address and port to expose it as attributes\n'}, 'delete': {'inputs': {'KUBE_SERVICE_NAME': {'get_property': ['SELF', 'service_name']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_service_wrapper_uninstall.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.SimpleResource': {'derived_from': 'org.alien4cloud.kubernetes.api.types.BaseResource', 'tags': {'icon': '/images/kubernetes.resource.png'}, 'description': 'A generic resource used to deploy any kind of resource on the kube cluster.\n', 'properties': {'resource_type': {'type': 'string', 'description': '\nThe resource type known by K8S examples: pod,service,pv,pvc\n', 'constraints': [{'valid_values': ['pvc', 'hpa', 'ing', 'namespaces', 'networkpolicy', 'role', 'rolebinding', 'serviceaccount']}]}, 'resource_id': {'type': 'string', 'required': True, 'description': ""a unique id set by a4c to identify a resource. it should be added as a label named 'a4c_id'\n""}, 'json_path_expr': {'type': 'string', 'required': False, 'description': 'the JSON path expression that will get the expected output to check resource avalaibility\n'}, 'json_path_value': {'type': 'string', 'required': False, 'description': 'the value excpected to obtain using the JSON path expression to check resource avalaibility\n'}}, 'interfaces': {'Standard': {'create': {'input': {'KUBE_RESOURCE_TYPE': {'get_property': ['SELF', 'resource_type']}, 'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'KUBE_RESOURCE_CONFIG': {'get_property': ['SELF', 'resource_spec']}, 'KUBE_JSON_PATH_EXPR': {'get_property': ['SELF', 'json_path_expr']}, 'KUBE_JSON_PATH_VALUE': {'get_property': ['SELF', 'json_path_value']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_resource_wrapper.sh'}, 'delete': {'inputs': {'KUBE_RESOURCE_TYPE': {'get_property': ['SELF', 'resource_type']}, 'KUBE_RESOURCE_ID': {'get_property': ['SELF', 'resource_id']}, 'NAMESPACE': {'get_property': ['SELF', 'namespace']}, 'KUBE_CONFIG': {'get_property': ['SELF', 'kube_config']}}, 'implementation': 'scripts/kubectl_resource_wrapper_uninstall.sh'}}}}}",0
"{'org.alien4cloud.kubernetes.api.types.nodes.KubeCluster': {'derived_from': 'tosca.nodes.Root', 'abstract': True, 'properties': {'config': {'type': 'string', 'required': False}, 'node_address': {'type': 'string', 'description': 'One of the K8S node public address, or DNS name or load balancer address in front of them. Used to build an url when using NodePort services.\n', 'required': False}}, 'capabilities': {'k8s_endpoint': {'type': 'org.alien4cloud.kubernetes.api.capabilities.KubeCluster'}}}}",0
"{'org.alien4cloud.kubernetes.api.types.KubeNamespace': {'derived_from': 'org.alien4cloud.kubernetes.api.types.Base', 'tags': {'icon': '/images/kubernetes.png'}, 'properties': {'namespace': {'type': 'string', 'required': True, 'description': 'namespace to be created / deleted\n'}, 'kind': {'type': 'string', 'required': True, 'default': 'Namespace'}, 'metadata': {'type': 'org.alien4cloud.kubernetes.api.datatypes.Metadata', 'required': False, 'description': 'namespace metadata\n'}}}}",0
"{'org.alien4cloud.nodes.Application.Docker.Nodecellar': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'string', 'default': 'cd /nodecellar && nodejs server.js'}, 'docker_options': {'type': 'org.alien4cloud.datatypes.docker.cli-args.Nodecellar', 'required': False}, 'docker_env_vars': {'type': 'map', 'description': 'Environment variables for the Docker container.', 'entry_schema': {'type': 'string'}, 'default': {'LOG_LEVEL': None}}}, 'requirements': [{'mongo_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'nodecellar_app': {'type': 'org.alien4cloud.capabilities.endpoint.Nodecellar'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MONGO_HOST': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'ENV_MONGO_PORT': {'get_attribute': ['TARGET', 'mongo_db', 'port']}, 'ENV_MONGO_API_VERSION': {'get_property': ['TARGET', 'mongo_db', 'api_version']}, 'ENV_NODECELLAR_PORT': {'get_property': ['SELF', 'nodecellar_app', 'port']}}, 'implementation': {'file': 'afraisse/nodecellar:exp', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'otc.nodes.SoftwareComponent.ComponentWithArifact': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'create': 'scripts/create.sh'}}, 'artifacts': [{'hello_script': {'type': 'tosca.artifacts.File'}}]}}",0
"{'otc.nodes.WebApplication.Nodecellar': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Nodecellar Node Type represents a Nodecellar Application.', 'metadata': {'icon': '/images/nodecellar.jpg'}, 'attributes': {'nodecellar_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'app_endpoint', 'port']}]}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint', 'properties': {'port': 8080}}}, 'requirements': [{'host': {'capability': 'otc.capabilities.NodeJSAppContainer', 'relationship': 'otc.relationships.NodecellarHostedOnNodejs'}}, {'mongo_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'otc.relationships.NodejsConnectToMongo', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': 'scripts/install-nodecellar-app.sh', 'start': 'scripts/start-nodecellar-app.sh', 'stop': 'scripts/stop-nodecellar-app.sh'}}}}",0
"{'otc.nodes.SoftwareComponent.MongoDB': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'MongoDB component for linux', 'tags': {'icon': '/images/mongodb.jpg'}, 'attributes': {'url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}]}}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the installed MongoDB component', 'default': 3.6, 'constraints': [{'valid_values': [3.2, 3.4, 3.6]}]}, 'db_path': {'type': 'string', 'description': 'Path of the database', 'default': '/var/lib/mongo', 'required': True}, 'quota_enforced': {'type': 'boolean', 'description': 'Limits each database to a certain number of files', 'default': False, 'required': True}, 'quota_maxfiles': {'type': 'integer', 'description': 'Number of quota files per DB', 'default': 8, 'required': True}}, 'capabilities': {'mongo_db': {'type': 'tosca.capabilities.Endpoint.Database', 'properties': {'port': 27017}}}, 'interfaces': {'Standard': {'create': {'description': 'MongoDB installation step', 'inputs': {'IP_ADDRESS': {'get_attribute': ['HOST', 'private_address']}, 'MONGODB_VERSION': {'get_property': ['SELF', 'component_version']}, 'MONGODB_PORT': {'get_property': ['SELF', 'mongo_db', 'port']}, 'MONGODB_DB_PATH': {'get_property': ['SELF', 'db_path']}, 'MONGODB_QUOTA_ENFORCED': {'get_property': ['SELF', 'quota_enforced']}, 'MONGODB_QUOTA_MAXFILES': {'get_property': ['SELF', 'quota_maxfiles']}}, 'implementation': 'playbooks/mongodb_install.yaml'}}}}}",0
"{'org.alien4cloud.nodes.Application.Docker.Nodecellar': {'derived_from': 'tosca.nodes.Container.Application.DockerContainer', 'properties': {'docker_run_cmd': {'type': 'string', 'default': '/bin/sh'}, 'docker_run_args': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['-c', 'nodejs server.js']}, 'docker_options': {'type': 'org.alien4cloud.datatypes.docker.cli-args.Nodecellar', 'required': False}, 'docker_env_vars': {'type': 'map', 'description': 'Environment variables for the Docker container.', 'entry_schema': {'type': 'string'}, 'default': {'LOG_LEVEL': None}}}, 'requirements': [{'mongo_db': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo', 'occurrences': [1, 1]}}], 'capabilities': {'nodecellar_app': {'type': 'org.alien4cloud.capabilities.endpoint.docker.Nodecellar'}}, 'interfaces': {'Standard': {'create': {'inputs': {'ENV_MONGO_HOST': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'ENV_MONGO_PORT': {'get_attribute': ['TARGET', 'mongo_db', 'port']}, 'ENV_MONGO_API_VERSION': {'get_property': ['TARGET', 'mongo_db', 'api_version']}, 'ENV_NODECELLAR_PORT': {'get_property': ['SELF', 'nodecellar_app', 'port']}}, 'implementation': {'file': 'afraisse/nodecellar:exp', 'repository': 'docker', 'type': 'tosca.artifacts.Deployment.Image.Container.Docker'}}}}}}",0
"{'org.alien4cloud.apache.linux_ans.nodes.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type. This version is installed by using Ansible.\n', 'metadata': {'icon': '/images/apache.png'}, 'attributes': {'apache_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/']}}, 'properties': {'document_root': {'type': 'string', 'default': '/var/www/html'}}, 'capabilities': {'data_endpoint': 'org.alien4cloud.apache.pub.capabilities.ApacheDataEndpoint', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['org.alien4cloud.apache.pub.nodes.WebApplication']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['red hat', 'centos', 'rhel', 'debian', 'ubuntu']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'create.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'configure': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'configure.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'start': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'start.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'stop': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'stop.yml'}, 'implementation': 'playbook/playbook.ansible'}, 'delete': {'inputs': {'port': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'document_root': {'get_property': ['SELF', 'document_root']}, 'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'delete.yml'}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'otc.nodes.SoftwareComponent.Python': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Sample component to illustrate how to implement a Component lifecycle in Python\n', 'tags': {'icon': '/images/python.png'}, 'properties': {'user': {'description': 'name to whom say hello or goodbye in custom command', 'type': 'string', 'required': True, 'default': 'John Doe'}, 'hello_message': {'description': 'A simple message to print', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}}, 'interfaces': {'Standard': {'create': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}}, 'implementation': 'scripts/create.py'}, 'start': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': 'scripts/start.py'}}, 'custom': {'inputs': {'user': {'get_property': ['SELF', 'user']}}, 'say_hello': {'implementation': 'scripts/hello.py'}, 'say_goodbye': {'implementation': 'scripts/goodbye.py'}}}}}",0
"{'tosca.nodes.CustomWebServer': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'custom_install_path': {'type': 'string', 'default': '/home/custom/custom'}}, 'interfaces': {'Standard': {'create': {'implementation': 'install.sh', 'inputs': {'path': {'get_property': ['SELF', 'custom_install_path']}}}}}}}",0
"{'tosca.nodes.CustomCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'install_path': {'type': 'string', 'default': '/opt'}}, 'interfaces': {'Standard': {'create': {'implementation': 'install.sh', 'inputs': {'install_path': {'get_property': ['SELF', 'install_path']}}}}}}}",0
"{'tosca.nodes.CustomWebServer': {'derived_from': 'tosca.nodes.WebServer', 'interfaces': {'Standard': {'create': {'implementation': 'install.sh'}}}}}",0
"{'tosca.nodes.CustomWebServer': {'derived_from': 'tosca.nodes.WebServer', 'artifacts': {'my_galaxyansible_role': {'file': 'user.role', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'web_content': {'file': 'http://www.mycompany.org/content.tgz', 'type': 'tosca.artifacts.File'}}, 'interfaces': {'Standard': {'create': {'inputs': {'content': {'get_artifact': ['SELF', 'web_content']}}, 'implementation': 'install.sh'}}}}}",0
"{'tosca.nodes.nfv.MyType': {'derived_from': 'tosca.nodes.Compute', 'properties': {'key_name': {'type': 'string'}, 'image': {'type': 'string'}, 'flavor': {'type': 'string'}}}}",0
"{'tosca.nodes.sdno.networkService': {'derived_from': 'tosca.nodes.Root', 'description': None, 'properties': {'name': {'type': 'string', 'required': False}}, 'interfaces': {'tosca.nodes.sdno.lifecycle.networkService': {'create': {'description': None}, 'delete': {'description': None}, 'get': {'description': None}, 'provision': {'description': None}, 'terminate': {'description': None}, 'update': {'description': None}}}}}",0
{'tosca.nodes.sdno.networkDevice': {'derived_from': 'tosca.nodes.Root'}},0
"{'tosca.nodes.sdno.e2dc': {'derived_from': 'tosca.nodes.sdno.networkService', 'description': 'it represents a non atomic network service', 'requirements': [{'dependency': 'tosca.nodes.sdno.networkService'}]}}",0
"{'tosca.nodes.sdno.networkDevice.ThinCPE': {'derived_from': 'tosca.nodes.sdno.networkDevice', 'description': None, 'properties': {'portvlan': {'type': 'string', 'description': None, 'required': True}, 'siteCidr': {'type': 'string', 'description': None, 'required': True}, 'siteThinCpeIP': {'type': 'string', 'description': None, 'required': True}}}}",0
"{'tosca.nodes.sdno.networkDevice.Vpc': {'derived_from': 'tosca.nodes.sdno.networkService', 'description': None, 'properties': {'vpcName': {'type': 'string', 'description': None, 'required': True}, 'dcGWIP': {'type': 'string', 'description': None, 'required': True}}}}",0
"{'tosca.nodes.sdno.networkDevice.vCPE': {'derived_from': 'tosca.nodes.sdno.networkDevice', 'description': None, 'properties': {'siteCidr': {'type': 'string', 'description': None, 'required': True}, 'mgrIp': {'type': 'string', 'description': None, 'required': True}}}}",0
"{'tosca.nodes.sdno.networkservice.Vxlan': {'type': 'tosca.nodes.sdno.networkService', 'description': 'VxLAN Access Network', 'properties': {'siteVNI': {'type': 'string', 'required': True}}, 'attributes': {'connectionId': {'type': 'string', 'required': True}}}}",0
"{'tosca.nodes.sdno.networkservice.Ipsec': {'type': 'tosca.nodes.sdno.networkService', 'description': 'ipsec Access Network', 'properties': None, 'attributes': {'connectionId': {'type': 'string', 'requied': True}}}}",0
"{'tosca.nodes.Database.MySQL': {'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': '', 'db_access_host': '%'}}}}}}",0
"{'tosca.nodes.DBMS.MySQL': {'derived_from': 'tosca.nodes.DBMS', 'properties': {'port': {'type': 'integer', 'description': 'reflect the default MySQL server port', 'default': 3306}, 'root_password': {'type': 'string', 'required': True}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database.MySQL']}}, 'interfaces': {'Standard': {'create': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_install.yml', 'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_configure.yml', 'inputs': {'root_password': {'get_property': ['SELF', 'root_password']}, 'port': {'get_property': ['SELF', 'port']}}}}}}}",0
"{'tosca.nodes.WebServer.Apache': {'derived_from': 'tosca.nodes.WebServer', 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_install.yml'}, 'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_start.yml'}}}}}",0
"{'tosca.nodes.indigo.Database.MySQL': {'derived_from': 'tosca.nodes.Database.MySQL', 'properties': {'access_host': {'type': 'string', 'required': False, 'default': '%'}, 'root_password': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': {'get_property': ['SELF', 'root_password']}, 'db_access_host': {'get_property': ['SELF', 'access_host']}}}}}}}",0
"{'tosca.nodes.indigo.Compute': {'derived_from': 'tosca.nodes.indigo.MonitoredCompute', 'attributes': {'private_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'public_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'ctxt_log': {'type': 'string'}}, 'capabilities': {'scalable': {'type': 'tosca.capabilities.indigo.Scalable'}, 'os': {'type': 'tosca.capabilities.indigo.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.indigo.Endpoint'}, 'host': {'type': 'tosca.capabilities.indigo.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}}}}",0
"{'tosca.nodes.indigo.MonitoredCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'zabbix_server': {'type': 'string', 'required': False, 'default': 'to.be.defined'}, 'zabbix_server_port': {'type': 'PortDef', 'required': False, 'default': 10051}, 'zabbix_server_metadata': {'type': 'string', 'required': False, 'default': 'Linux      668c875e-9a39-4dc0-a710-17c41376c1e0'}}, 'artifacts': {'zabbix_agent_role': {'file': 'indigo-dc.zabbix-agent', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/zabbix/zabbix_agent_install.yml', 'inputs': {'zabbix_server': {'get_property': ['SELF', 'zabbix_server']}, 'zabbix_server_port': {'get_property': ['SELF', 'zabbix_server_port']}, 'zabbix_server_metadata': {'get_property': ['SELF', 'zabbix_server_metadata']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyPortal': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'admin_email': {'type': 'string', 'description': 'email of the admin user', 'default': 'admin@admin.com', 'required': False}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'user': {'type': 'string', 'description': 'username to launch the galaxy daemon', 'default': 'galaxy', 'required': False}, 'install_path': {'type': 'string', 'description': 'path to install the galaxy tool', 'default': '/home/galaxy/galaxy', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version to install', 'default': 'master', 'required': False}, 'instance_description': {'type': 'string', 'description': 'galaxy instance description', 'default': 'INDIGO Galaxy test'}, 'instance_key_pub': {'type': 'string', 'description': 'galaxy instance ssh public key', 'default': 'your_ssh_public_key'}}, 'requirements': [{'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxycloud', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_install.yml', 'inputs': {'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyPortalAndStorage': {'derived_from': 'tosca.nodes.indigo.GalaxyPortal', 'properties': {'os_storage': {'type': 'string', 'description': 'Storage type (Iaas Block Storage (default), Onedaata, Filesystem encryption)', 'default': 'IaaS', 'required': True}, 'token': {'type': 'string', 'description': 'Access token for onedata space', 'default': 'not_a_token', 'required': False}, 'provider': {'type': 'string', 'description': 'default OneProvider', 'default': 'not_a_provider_url', 'required': False}, 'space': {'type': 'string', 'description': 'Onedata space', 'default': 'galaxy', 'required': False}}, 'artifacts': {'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_os_install.yml', 'inputs': {'os_storage': {'get_property': ['SELF', 'os_storage']}, 'userdata_token': {'get_property': ['SELF', 'token']}, 'userdata_oneprovider': {'get_property': ['SELF', 'provider']}, 'userdata_space': {'get_property': ['SELF', 'space']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyWN': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_wn_configure.yml'}}}}}",0
"{'tosca.nodes.indigo.GalaxyShedTool': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxy-tools,master', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_tools_configure.yml', 'inputs': {'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_admin_api_key': {'get_property': ['HOST', 'admin_api_key']}, 'instance_public_ip': {'get_attribute': ['HOST', 'public_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyReferenceData': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': True}, 'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'refdata_repository_name': {'type': 'string', 'description': 'Onedata space name, CernVM-FS repository name or subdirectory downaload name', 'default': 'elixir-italy.galaxy.refdata', 'required': False}, 'refdata_provider_type': {'type': 'string', 'description': 'Select Reference data provider type (Onedata, CernVM-FS or download)', 'default': 'onedata', 'required': False}, 'refdata_provider': {'type': 'string', 'description': 'Oneprovider for reference data', 'default': 'not_a_provider', 'required': False}, 'refdata_token': {'type': 'string', 'description': 'Access token for reference data', 'default': 'not_a_token', 'required': False}, 'refdata_cvmfs_server_url': {'type': 'string', 'description': 'CernVM-FS server, replica or stratum-zero', 'default': 'server_url', 'required': False}, 'refdata_cvmfs_repository_name': {'type': 'string', 'description': 'Reference data CernVM-FS repository name', 'default': 'not_a_cvmfs_repository_name', 'requred': False}, 'refdata_cvmfs_key_file': {'type': 'string', 'description': 'CernVM-FS public key', 'default': 'not_a_key', 'required': False}, 'refdata_cvmfs_proxy_url': {'type': 'string', 'description': 'CernVM-FS proxy url', 'default': 'DIRECT', 'required': False}, 'refdata_cvmfs_proxy_port': {'type': 'integer', 'description': 'CernVM-FS proxy port', 'default': 80, 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'cvmfs_role': {'file': 'indigo-dc.cvmfs-client', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud-refdata', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_redfata_configure.yml', 'inputs': {'get_refdata': {'get_property': ['SELF', 'reference_data']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'refdata_repository_name': {'get_property': ['SELF', 'refdata_repository_name']}, 'refdata_provider_type': {'get_property': ['SELF', 'refdata_provider_type']}, 'refdata_provider': {'get_property': ['SELF', 'refdata_provider']}, 'refdata_token': {'get_property': ['SELF', 'refdata_token']}, 'refdata_cvmfs_server_url': {'get_property': ['SELF', 'refdata_cvmfs_server_url']}, 'refdata_cvmfs_repository_name': {'get_property': ['SELF', 'refdata_cvmfs_repository_name']}, 'refdata_cvmfs_key_file': {'get_property': ['SELF', 'refdata_cvmfs_key_file']}, 'refdata_cvmfs_proxy_url': {'get_property': ['SELF', 'refdata_cvmfs_proxy_url']}, 'refdata_cvmfs_proxy_port': {'get_property': ['SELF', 'refdata_cvmfs_proxy_port']}}}}}}}",0
"{'tosca.nodes.indigo.ElasticCluster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'secret_token': {'type': 'string', 'description': 'Token to access CLUES web interface', 'default': 'not_very_secret_token', 'required': False}, 'deployment_id': {'type': 'string', 'description': 'ID of the deployment of this elastic cluster in the orchestrator', 'required': False}, 'orchestrator_url': {'type': 'string', 'description': 'URL of the orchestrator', 'required': False, 'default': 'http://orchestrator01-indigo.cloud.ba.infn.it:8080/orchestrator'}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': False, 'default': 'iam_access_token'}, 'iam_clues_client_id': {'type': 'string', 'description': 'INDIGO IAM client id to be used by CLUES', 'required': False, 'default': 'iam_clues_client_id'}, 'iam_clues_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret to be used by CLUES', 'required': False, 'default': 'iam_clues_client_secret'}, 'marathon_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the marathon endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}, 'chronos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the chronos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}, 'mesos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the mesos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.clues', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ec3/ec3_install.yml', 'inputs': {'clues_secret_token': {'get_property': ['SELF', 'secret_token']}, 'clues_queue_system': {'get_property': ['SELF', 'lrms', 'type']}, 'ec3_max_instances': {'get_property': ['SELF', 'wn', 'max_instances']}, 'ec3_deployment_id': {'get_property': ['SELF', 'deployment_id']}, 'orchestrator_url': {'get_property': ['SELF', 'orchestrator_url']}, 'ec3_iam_access_token': {'get_property': ['SELF', 'iam_access_token']}, 'ec3_iam_clues_client_id': {'get_property': ['SELF', 'iam_clues_client_id']}, 'ec3_iam_clues_client_secret': {'get_property': ['SELF', 'iam_clues_client_secret']}, 'clues_marathon_credentials': {'get_property': ['SELF', 'marathon_credentials']}, 'clues_chronos_credentials': {'get_property': ['SELF', 'chronos_credentials']}, 'clues_mesos_credentials': {'get_property': ['SELF', 'mesos_credentials']}}}}}, 'requirements': [{'wn': {'capability': 'tosca.capabilities.Scalable', 'node': 'tosca.nodes.indigo.LRMS.WorkerNode', 'relationship': 'tosca.relationships.indigo.Manages'}}, {'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'front_end_ip': {'type': 'string', 'description': 'IP of the Front-End node', 'required': True}}, 'capabilities': {'wn': {'type': 'tosca.capabilities.Scalable', 'valid_source_types': ['tosca.nodes.indigo.ElasticCluster']}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_wn_install.yml', 'inputs': {'torque_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_wn_install.yml', 'inputs': {'slurm_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'wn_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the WNs', 'required': False, 'default': []}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Torque'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/torque/torque_fe_install.yml', 'inputs': {'torque_wn_ips': {'get_property': ['SELF', 'wn_ips']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Slurm'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/lrms/slurm/slurm_fe_install.yml', 'inputs': {'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.Container.Runtime.Docker': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'properties': {'command': {'required': True, 'type': 'string'}, 'uris': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'environment_variables': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'labels': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker.Chronos': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'properties': {'schedule': {'required': False, 'type': 'string'}, 'description': {'required': False, 'type': 'string'}, 'retries': {'required': False, 'type': 'integer'}}, 'capabilities': {'parent_job': {'type': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'valid_source_types': ['tosca.nodes.indigo.Container.Application.Docker.Chronos'], 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'parent_job': {'capability': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'node': 'tosca.nodes.indigo.Container.Application.Docker.Chronos', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.indigo.DariahRepository': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': {'dariahrepo_role': {'file': 'indigo-dc.dariahrepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/dariahrepo-setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
{'tosca.nodes.indigo.Container.Application.Docker.Marathon': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker'}},0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Mesos'}, 'host': {'type': 'tosca.capabilities.indigo.MesosMaster'}}, 'properties': {'mesos_masters_list': {'type': 'string', 'required': False, 'default': [{'get_attribute': ['HOST', 'public_address']}]}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}}}}}}}",0
"{'tosca.nodes.indigo.CmsServices': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_squid_image': {'type': 'string', 'required': False, 'default': 'spiga/frontiersquidv1'}, 'cms_wn_image': {'type': 'string', 'default': 'spiga/cmswn', 'required': False}, 'cms_proxycache_image': {'type': 'string', 'required': False, 'default': 'spiga/ttscache'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}, 'iam_client_id': {'type': 'string', 'description': 'INDIGO IAM client id', 'required': True}, 'iam_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret', 'required': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_services_start.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_iamtoken': {'get_property': ['SELF', 'iam_access_token']}, 'cms_config_iam_client_id': {'get_property': ['SELF', 'iam_client_id']}, 'cms_config_iam_client_secret': {'get_property': ['SELF', 'iam_client_secret']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_squid_image': {'get_property': ['SELF', 'cms_squid_image']}, 'cms_config_wn_image': {'get_property': ['SELF', 'cms_wn_image']}, 'cms_config_proxycache_image': {'get_property': ['SELF', 'cms_proxycache_image']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.MesosSlave'}}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}}}}}}}",0
"{'tosca.nodes.indigo.CmsWnConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_stageoutsite': {'type': 'string', 'required': True}, 'cms_stageoutserver': {'type': 'string', 'required': True}, 'cms_stageoutprefix': {'type': 'string', 'required': True}, 'cms_stageoutsite_fallback': {'type': 'string', 'required': True}, 'cms_stageoutserver_fallback': {'type': 'string', 'required': True}, 'cms_stageoutprefix_fallback': {'type': 'string', 'required': True}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'monitordb_ip': {'type': 'string', 'required': False}, 'elasticsearch_secret': {'type': 'string', 'required': False}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_wn_configure.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_stageoutsite': {'get_property': ['SELF', 'cms_stageoutsite']}, 'cms_config_stageoutserver': {'get_property': ['SELF', 'cms_stageoutserver']}, 'cms_config_stageoutprefix': {'get_property': ['SELF', 'cms_stageoutprefix']}, 'cms_config_stageoutsite_fallback': {'get_property': ['SELF', 'cms_stageoutsite_fallback']}, 'cms_config_stageoutserver_fallback': {'get_property': ['SELF', 'cms_stageoutserver_fallback']}, 'cms_config_stageoutprefix_fallback': {'get_property': ['SELF', 'cms_stageoutprefix_fallback']}, 'cms_config_elastic_secret': {'get_property': ['SELF', 'elasticsearch_secret']}, 'monitordb_ip': {'get_property': ['SELF', 'monitordb_ip']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosSlave', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.indigo.MesosLoadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_lb_role': {'file': 'indigo-dc.marathon-lb', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_lb_install.yml', 'inputs': {'consul_server_ips': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.SparkMesos': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'zookeeper_peers': {'type': 'string', 'required': True}, 'spark_mesos_deploy_app': {'type': 'string', 'constraints': [{'valid_values': ['apache-zeppelin', 'spark-dispatcher']}], 'required': False}, 'spark_hdfs_uri': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_auth_url': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_http_port': {'type': 'string', 'required': False, 'default': '8080'}, 'spark_swift_region': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_tenant': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_username': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_password': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_provider': {'type': 'string', 'required': False, 'default': 'Test'}, 'spark_cores_max': {'type': 'string', 'required': False, 'default': ''}, 'spark_executor_cores': {'type': 'string', 'required': False, 'default': ''}, 'spark_executor_mem': {'type': 'string', 'required': False, 'default': ''}, 'spark_driver_mem': {'type': 'string', 'required': False, 'default': ''}, 'spark_driver_cores': {'type': 'string', 'required': False, 'default': ''}}, 'artifacts': {'spark_mesos_role': {'file': 'indigo-dc.spark-mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/spark_mesos_setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_peers': {'get_property': ['SELF', 'zookeeper_peers']}, 'spark_mesos_hdfs_uri': {'get_property': ['SELF', 'spark_hdfs_uri']}, 'spark_mesos_swift_auth_url': {'get_property': ['SELF', 'spark_swift_auth_url']}, 'spark_mesos_swift_http_port': {'get_property': ['SELF', 'spark_swift_http_port']}, 'spark_mesos_swift_region': {'get_property': ['SELF', 'spark_swift_region']}, 'spark_mesos_swift_tenant': {'get_property': ['SELF', 'spark_swift_tenant']}, 'spark_mesos_swift_username': {'get_property': ['SELF', 'spark_swift_username']}, 'spark_mesos_swift_password': {'get_property': ['SELF', 'spark_swift_password']}, 'spark_mesos_swift_provider': {'get_property': ['SELF', 'spark_swift_provider']}, 'spark_mesos_cores_max': {'get_property': ['SELF', 'spark_cores_max']}, 'spark_mesos_executor_cores': {'get_property': ['SELF', 'spark_executor_cores']}, 'spark_mesos_executor_memory': {'get_property': ['SELF', 'spark_executor_mem']}, 'spark_mesos_driver_memory': {'get_property': ['SELF', 'spark_driver_mem']}, 'spark_mesos_driver_cores': {'get_property': ['SELF', 'spark_driver_cores']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.indigo.OneDataStorage': {'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'size': {'type': 'scalar-unit.size', 'required': False}, 'oneprovider_host': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'onezone_endpoint': {'type': 'string', 'required': False}, 'dataspace': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'credential': {'type': 'tosca.datatypes.Credential', 'required': True}}}}",0
"{'tosca.nodes.indigo.HadoopMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_master_install.yml', 'inputs': {'hadoop_master_ip': {'get_attribute': ['HOST', 'private_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.HadoopSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ip': {'required': True, 'type': 'string'}}, 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_wn_install.yml', 'inputs': {'hadoop_master_ip': {'get_property': ['SELF', 'master_ip']}}}}}}}",0
"{'tosca.nodes.indigo.HaddockApp': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'haddock_app_name': {'type': 'string', 'description': 'Haddocking application', 'required': True, 'constraints': [{'valid_values': ['disvis', 'powerfit']}]}}, 'artifacts': {'galaxy_role': {'file': 'indigo-dc.disvis-powerfit', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/haddock/haddock_install.yml', 'inputs': {'haddock_app_name': {'get_property': ['SELF', 'haddock_app_name']}}}}}}}",0
"{'tosca.nodes.indigo.Disvis': {'derived_from': 'tosca.nodes.indigo.HaddockApp', 'properties': {'haddock_app_name': {'type': 'string', 'required': True, 'default': 'disvis', 'constraints': [{'equal': 'disvis'}]}}}}",0
"{'tosca.nodes.indigo.Powerfit': {'derived_from': 'tosca.nodes.indigo.HaddockApp', 'properties': {'haddock_app_name': {'type': 'string', 'required': True, 'default': 'powerfit', 'constraints': [{'equal': 'powerfit'}]}}}}",0
"{'tosca.nodes.indigo.Eubiosteo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.eubiosteo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/eubiosteo/eubiosteo_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Ambertools': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.ambertools', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ambertools/ambertools_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Kepler': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.kepler', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/kepler/kepler_install.yml'}}}}}",0
"{'tosca.nodes.indigo.OphidiaServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'io_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the Ophidia IO nodes', 'required': False, 'default': []}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_server_install.yml', 'inputs': {'ophidia_io_ips': {'get_property': ['SELF', 'io_ips']}}}}}}}",0
"{'tosca.nodes.indigo.OphidiaIO': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'server_ip': {'type': 'string', 'description': 'IP of the OphidiaServer node', 'required': True}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_io_install.yml', 'inputs': {'ophidia_server_ip': {'get_property': ['SELF', 'server_ip']}}}}}}}",0
"{'onap.vcpe_vbrgemu': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['b1bb0ce7-4444-4fa7-95ed-4840d70a1177']}], 'default': 'b1bb0ce7-4444-4fa7-95ed-4840d70a1177'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['onap']}], 'default': 'onap'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['vcpe_vbrgemu']}], 'default': 'vcpe_vbrgemu'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['simple']}], 'default': 'simple'}, 'flavour_description': {'type': 'string', 'default': 'simple'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['gvnfm']}}}}",0
"{'tosca.nodes.nfv.Vdu.Compute': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'required': True}, 'description': {'type': 'string', 'required': True}, 'boot_order': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'nfvi_constraints': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'configurable_properties': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.nfv.VnfcConfigurableProperties'}, 'required': True}, 'vdu_profile': {'type': 'tosca.datatypes.nfv.VduProfile', 'required': True}, 'inject_files': {'type': 'tosca.datatypes.nfv.injectFile', 'required': False}, 'meta_data': {'type': 'map', 'entry_schema': {'type': 'string'}, 'required': False}, 'user_data': {'type': 'string', 'required': False}}, 'capabilities': {'virtual_compute': {'type': 'tosca.capabilities.nfv.VirtualCompute'}, 'virtual_binding': {'type': 'tosca.capabilities.nfv.VirtualBindable', 'occurrences': [1, 'UNBOUNDED']}, 'monitoring_parameter': {'type': 'tosca.capabilities.nfv.Metric', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'virtual_storage': {'capability': 'tosca.capabilities.nfv.VirtualStorage', 'relationship': 'tosca.relationships.nfv.Vdu.AttachedTo', 'node': 'tosca.nodes.nfv.Vdu.VirtualStorage', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'tosca.nodes.nfv.Vdu.VirtualStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'type_of_storage': {'type': 'string', 'constraints': [{'valid_values': ['volume', 'object', 'root', 'block']}], 'required': True}, 'size_of_storage': {'type': 'scalar-unit.size', 'required': True}, 'vdu_storage_requirements': {'type': 'map', 'entry_schema': {'type': 'string'}, 'required': False}, 'rdma_enabled': {'type': 'boolean', 'required': False}}, 'capabilities': {'virtual_storage': {'type': 'tosca.capabilities.nfv.VirtualStorage'}}}}",0
"{'tosca.nodes.nfv.Cp': {'derived_from': 'tosca.nodes.Root', 'properties': {'layer_protocol': {'type': 'list', 'entry_schema': {'constraints': [{'valid_values': ['ethernet', 'mpls', 'odu2', 'ipv4', 'ipv6', 'pseudo_wire']}], 'type': 'string'}, 'required': True}, 'role': {'type': 'string', 'constraints': [{'valid_values': ['root', 'leaf']}], 'required': False}, 'description': {'type': 'string', 'required': False}, 'protocol_data': {'type': 'list', 'entry_schema': {'type': 'tosca.datatypes.nfv.CpProtocolData'}, 'required': True}, 'trunk_mode': {'type': 'boolean', 'required': True}, 'allowedAddressData': {'type': 'tosca.datatypes.nfv.AddressData', 'required': False}}}}",0
"{'tosca.nodes.nfv.VduCp': {'derived_from': 'tosca.nodes.nfv.Cp', 'properties': {'bitrate_requirement': {'type': 'integer', 'required': False}, 'vnic_name': {'type': 'string', 'required': False}, 'vnic_order': {'type': 'integer', 'required': False}, 'vnic_type': {'type': 'string', 'constraints': [{'valid_values': ['normal', 'macvtap', 'direct', 'baremetal', 'direct-physical', 'virtio-forwarder']}], 'required': False}, 'virtual_network_interface_requirements': {'type': 'list', 'entry_schema': {'type': 'tosca.datatypes.nfv.VirtualNetworkInterfaceRequirements'}, 'required': False}}, 'requirements': [{'virtual_link': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'tosca.nodes.nfv.VnfVirtualLink'}}, {'virtual_binding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'tosca.nodes.nfv.Vdu.Compute'}}]}}",0
"{'tosca.nodes.nfv.VnfVirtualLink': {'derived_from': 'tosca.nodes.Root', 'properties': {'connectivity_type': {'type': 'tosca.datatypes.nfv.ConnectivityType', 'required': True}, 'description': {'type': 'string', 'required': False}, 'test_access': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'vl_profile': {'type': 'tosca.datatypes.nfv.VlProfile', 'required': True}}, 'capabilities': {'monitoring_parameter': {'type': 'tosca.capabilities.nfv.Metric', 'occurrences': [0, 'UNBOUNDED']}, 'virtual_linkable': {'type': 'tosca.capabilities.nfv.VirtualLinkable'}}}}",0
"{'tosca.nodes.nfv.VNF': {'derived_from': 'tosca.nodes.Root', 'properties': {'descriptor_id': {'type': 'string', 'required': True}, 'descriptor_version': {'type': 'string', 'required': True}, 'provider': {'type': 'string', 'required': True}, 'product_name': {'type': 'string', 'required': True}, 'software_version': {'type': 'string', 'required': True}, 'product_info_name': {'type': 'string', 'required': False}, 'product_info_description': {'type': 'string', 'required': False}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': True}, 'localization_languages': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'default_localization_language': {'type': 'string', 'required': False}, 'configurable_properties': {'type': 'tosca.datatypes.nfv.VnfConfigurableProperties', 'required': False}, 'modifiable_attributes': {'type': 'tosca.datatypes.nfv.VnfInfoModifiableAttributes', 'required': False}, 'flavour_id': {'type': 'string', 'required': True}, 'flavour_description': {'type': 'string', 'required': True}}, 'requirements': [{'virtual_link': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'tosca.nodes.nfv.VnfVirtualLink', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Nfv': {'type': 'tosca.interfaces.nfv.vnf.lifecycle.Nfv'}}}}",0
"{'onap.vcpe_vgmux': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['b1bb0ce7-3333-4fa7-95ed-4840d70a1177']}], 'default': 'b1bb0ce7-3333-4fa7-95ed-4840d70a1177'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['onap']}], 'default': 'onap'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['vcpe_vgmux']}], 'default': 'vcpe_vgmux'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['simple']}], 'default': 'simple'}, 'flavour_description': {'type': 'string', 'default': 'simple'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['gvnfm']}}}}",0
"{'onap.vsn': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string'}, 'provider': {'type': 'string'}, 'product_name': {'type': 'string'}, 'software_version': {'type': 'string'}, 'descriptor_version': {'type': 'string'}, 'flavour_id': {'type': 'string'}, 'flavour_description': {'type': 'string'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}}}}}",0
"{'onap.vcpe_vgw': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['b1bb0ce7-2222-4fa7-95ed-4840d70a1177']}], 'default': 'b1bb0ce7-2222-4fa7-95ed-4840d70a1177'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['onap']}], 'default': 'onap'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['vcpe_vgw']}], 'default': 'vcpe_vgw'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['simple']}], 'default': 'simple'}, 'flavour_description': {'type': 'string', 'default': 'simple'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['gvnfm']}}}}",0
"{'onap.vcpe_infra': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['b1bb0ce7-1111-4fa7-95ed-4840d70a1177']}], 'default': 'b1bb0ce7-1111-4fa7-95ed-4840d70a1177'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['onap']}], 'default': 'onap'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['vcpe_infra']}], 'default': 'vcpe_infra'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['simple']}], 'default': 'simple'}, 'flavour_description': {'type': 'string', 'default': 'simple'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['gvnfm']}}}}",0
"{'onap.vcpe_vbng': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'descriptor_id': {'type': 'string', 'constraints': [{'valid_values': ['b1bb0ce7-5555-4fa7-95ed-4840d70a1177']}], 'default': 'b1bb0ce7-5555-4fa7-95ed-4840d70a1177'}, 'provider': {'type': 'string', 'constraints': [{'valid_values': ['onap']}], 'default': 'onap'}, 'product_name': {'type': 'string', 'constraints': [{'valid_values': ['vcpe_vbng']}], 'default': 'vcpe_vbng'}, 'software_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'descriptor_version': {'type': 'string', 'constraints': [{'valid_values': ['1.0']}], 'default': '1.0'}, 'flavour_id': {'type': 'string', 'constraints': [{'valid_values': ['simple']}], 'default': 'simple'}, 'flavour_description': {'type': 'string', 'default': 'simple'}, 'vnfm_info': {'type': 'list', 'entry_schema': {'type': 'string'}, 'default': ['gvnfm']}}}}",0
"{'micro.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['micro.nodes.Root'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'micro.nodes.Service': {'derived_from': 'micro.nodes.Root', 'requirements': [{'interaction': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
{'micro.nodes.CommunicationPattern': {'derived_from': 'micro.nodes.Root'}},0
"{'micro.nodes.Database': {'derived_from': 'micro.nodes.Root', 'capabilities': {'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['micro.nodes.Service'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
{'micro.nodes.MessageBroker': {'derived_from': 'micro.nodes.CommunicationPattern'}},0
"{'micro.nodes.MessageRouter': {'derived_from': 'micro.nodes.CommunicationPattern', 'requirements': [{'interaction': {'capability': 'tosca.capabilities.Node', 'occurrences': [1, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
"{'micro.nodes.Service': {'derived_from': 'micro.nodes.Root', 'requirements': [{'run_time': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
"{'micro.nodes.CommunicationPattern': {'derived_from': 'micro.nodes.Root', 'requirements': [{'run_time': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
{'micro.nodes.CircuitBreaker': {'derived_from': 'micro.nodes.CommunicationPattern'}},0
{'micro.nodes.APIGateway': {'derived_from': 'micro.nodes.MessageRouter'}},0
{'micro.nodes.MessageRouter': {'derived_from': 'micro.nodes.CommunicationPattern'}},0
{'micro.nodes.ServiceDiscovery': {'derived_from': 'micro.nodes.CommunicationPattern'}},0
"{'micro.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'capabilities': {'feature': {'type': 'micro.capabilities.Node', 'valid_source_types': ['micro.nodes.Root']}}}}",0
"{'micro.nodes.Service': {'derived_from': 'micro.nodes.Root', 'requirements': [{'interaction': {'capability': 'micro.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
"{'micro.nodes.DataStore': {'derived_from': 'micro.nodes.Root', 'capabilities': {'feature': {'type': 'micro.capabilities.Node', 'valid_source_types': ['micro.nodes.Service', 'micro.nodes.CommunicationPattern']}}}}",0
{'micro.nodes.AsynchronousMessageBroker': {'derived_from': 'micro.nodes.MessageBroker'}},0
{'micro.nodes.SynchronousMessageBroker': {'derived_from': 'micro.nodes.MessageBroker'}},0
"{'micro.nodes.MessageRouter': {'derived_from': 'micro.nodes.CommunicationPattern', 'requirements': [{'interaction': {'capability': 'micro.capabilities.Node', 'occurrences': [1, 'UNBOUNDED'], 'node': 'micro.nodes.Root', 'relationship': 'micro.relationships.InteractsWith'}}]}}",0
"{'otc.nodes.SoftwareComponent.Ansible.AnsibleTasks': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Ansible tasks', 'tags': {'icon': '/images/ansible.png'}, 'properties': {'ansible_become': {'type': 'boolean', 'description': 'Set to true to run the ansible with privilege escalation. Defaults to false.', 'default': False, 'required': False}, 'ignore_errors': {'type': 'boolean', 'description': 'Set to true to ignore any task errors. Defaults to false.', 'default': False, 'required': False}}, 'capabilities': {'data_endpoint': {'type': 'otc.capabilities.Endpoint'}, 'host_file': {'type': 'otc.capabilities.Container.File', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'connect_to_data_endpoint': {'capability': 'otc.capabilities.Endpoint', 'relationship': 'otc.relationships.AnsibleConnectToScriptComponent', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'configure': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}, 'ENV': {'get_property': ['SELF', 'data_endpoint', 'env']}, 'PROTOCOL': {'get_property': ['SELF', 'data_endpoint', 'protocol']}, 'PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'URL_PATH': {'get_property': ['SELF', 'data_endpoint', 'url_path']}, 'PORT_NAME': {'get_property': ['SELF', 'data_endpoint', 'port_name']}, 'ANSIBLE_BECOME': {'get_property': ['SELF', 'ansible_become']}, 'IGNORE_ERRORS': {'get_property': ['SELF', 'ignore_errors']}}, 'implementation': 'scripts/configure.yaml'}}}, 'artifacts': [{'ansible_variables': {'type': 'otc.artifacts.AnsibleVariablesYmlFile', 'file': 'default/empty_vars.yml', 'description': 'Specify ansible variables to use in all ansible tasks.'}}, {'configure': {'type': 'otc.artifacts.AnsibleTasksYmlFile', 'file': 'default/configure.yml', 'description': 'Specify ansible tasks (.yml) to configure the ansible component on the compute node.'}}, {'post_configure_source': {'type': 'otc.artifacts.AnsibleTasksYmlFile', 'description': 'Specify ansible tasks (.yml) to connect to a target node.', 'file': 'default/post_configure_source.yml'}}, {'add_source': {'type': 'otc.artifacts.AnsibleTasksYmlFile', 'description': 'Specify ansible tasks (.yml) to notify the target node that a source node is now available.', 'file': 'default/add_source.yml'}}]}}",0
"{'otc.nodes.WebApplication.NodejsApp': {'derived_from': 'tosca.nodes.WebApplication', 'metadata': {'icon': '/images/nodejs_app.png'}, 'properties': {'github_url': {'required': False, 'type': 'string', 'description': 'location of the application on the github.'}, 'deploy_path': {'required': False, 'type': 'string', 'default': 'app', 'description': 'location of the application to deploy on the VM.'}}, 'attributes': {'app_url': {'concat': [{'get_property': ['SELF', 'app_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'app_endpoint', 'port']}]}}, 'capabilities': {'app_endpoint': 'otc.capabilities.Endpoint.NodejsApp'}, 'requirements': [{'host': {'capability': 'otc.capabilities.NodeJSAppContainer', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'create': {'inputs': {'DEPLOY_PATH': {'get_property': ['SELF', 'deploy_path']}, 'GITHUB_URL': {'get_property': ['SELF', 'github_url']}}, 'implementation': 'scripts/create.sh'}, 'start': {'inputs': {'DEPLOY_PATH': {'get_property': ['SELF', 'deploy_path']}, 'PORT': {'get_property': ['SELF', 'app_endpoint', 'port']}, 'GITHUB_URL': {'get_property': ['SELF', 'github_url']}}, 'implementation': 'scripts/start.sh'}, 'stop': {'inputs': {'DEPLOY_PATH': {'get_property': ['SELF', 'deploy_path']}, 'GITHUB_URL': {'get_property': ['SELF', 'github_url']}}, 'implementation': 'scripts/stop.sh'}}}, 'artifacts': [{'js_script': {'type': 'tosca.artifacts.JsFile', 'description': 'input js script of nodejs application', 'file': 'scripts/helloworld.js'}}]}}",0
"{'otc.nodes.SoftwareComponent.Bash': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A bash script component with basic operations (i.e., create, configure, start, stop, delete) for users to specify and execute on a target node.\n', 'tags': {'icon': '/images/bash.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'Version of the software component', 'default': 1.0}}, 'attributes': {'app_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/', {'get_property': ['SELF', 'data_endpoint', 'url_path']}]}, 'local_app_url': {'concat': [{'get_property': ['SELF', 'data_endpoint', 'protocol']}, '://', {'get_attribute': ['HOST', 'private_address']}, ':', {'get_property': ['SELF', 'data_endpoint', 'port']}, '/', {'get_property': ['SELF', 'data_endpoint', 'url_path']}]}}, 'capabilities': {'data_endpoint': {'type': 'otc.capabilities.Endpoint'}, 'host_file': {'type': 'otc.capabilities.Container.File', 'occurrences': [0, 'unbounded']}}, 'requirements': [{'connect_to_data_endpoint': {'capability': 'otc.capabilities.Endpoint', 'relationship': 'otc.relationships.BashConnectToScriptComponent', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'configure': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}, 'ENV': {'get_property': ['SELF', 'data_endpoint', 'env']}, 'PROTOCOL': {'get_property': ['SELF', 'data_endpoint', 'protocol']}, 'PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'URL_PATH': {'get_property': ['SELF', 'data_endpoint', 'url_path']}, 'PORT_NAME': {'get_property': ['SELF', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/configure.sh'}, 'stop': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}, 'ENV': {'get_property': ['SELF', 'data_endpoint', 'env']}, 'PROTOCOL': {'get_property': ['SELF', 'data_endpoint', 'protocol']}, 'PORT': {'get_property': ['SELF', 'data_endpoint', 'port']}, 'URL_PATH': {'get_property': ['SELF', 'data_endpoint', 'url_path']}, 'PORT_NAME': {'get_property': ['SELF', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/stop.sh'}}}, 'artifacts': [{'configure': {'type': 'tosca.artifacts.File', 'description': 'Specify a bash script to execute when this node is configured.', 'file': 'examples/configure.sh'}}, {'post_configure_source': {'type': 'tosca.artifacts.File', 'description': 'Specify a bash script to configure the source node to connect to a target node.', 'file': 'examples/post_configure_source.sh'}}, {'add_source': {'type': 'tosca.artifacts.File', 'description': 'Specify a bash script to notify the target node that a source node is now available via a relationship.', 'file': 'examples/add_source.sh'}}, {'stop': {'type': 'tosca.artifacts.File', 'description': 'Specify a bash script to execute when this node stops.', 'file': 'examples/stop.sh'}}]}}",0
"{'tosca.nodes.WebServer.Nodejs': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Nodejs Node Type represents an Nodejs component that can be managed and run by a TOSCA Compute Node Type.\n', 'metadata': {'icon': '/images/nodejs.jpg'}, 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False, 'default': '10.x'}}, 'capabilities': {'host': 'otc.capabilities.NodeJSAppContainer'}, 'interfaces': {'Standard': {'create': {'inputs': {'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/nodejs_create.sh'}}}}}",0
"{'otc.nodes.SoftwareComponent.Ansible.GetUrl': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The component uses ansible get_url to download the files. The following properties are the same as the get_url builtin.', 'tags': {'icon': '/images/icon.png'}, 'properties': {'ansible_become': {'type': 'boolean', 'description': 'Set to true to run the ansible tasks given in the configure artifact with privilege escalation. Defaults to false.', 'default': False, 'required': False}, 'url': {'type': 'string', 'description': 'HTTP, HTTPS, or FTP URL in the form (http|https|ftp)://[user[:pass]]@host.domain[:port]/path\n', 'required': True}, 'dest': {'type': 'string', 'description': 'Absolute path of where to download the file to. If dest is a directory, either the server provided filename or, if none provided, the base name of the URL on the remote server will be used. If a directory, force has no effect.\n', 'required': True}, 'checksum': {'type': 'string', 'description': 'If a checksum is passed to this parameter, the digest of the destination file will be calculated after it is  downloaded to ensure its integrity and verify that the transfer completed successfully. Format: <algorithm>:<checksum|url>\n', 'default': '', 'required': False}, 'client_cert': {'type': 'string', 'description': 'Specify the path to the PEM formatted certificate chain file to be used for SSL client authentication.', 'required': False}, 'client_key': {'type': 'string', 'description': 'Specify the path to the PEM formatted file that contains your private key to be used for SSL client authentication.', 'required': False}, 'force': {'type': 'boolean', 'description': 'If true and dest is not a directory, will download the file every time and replace the file if the contents change.  Otherwise, the file will only be downloaded if the destination does not exist.\n', 'default': False, 'required': False}, 'group': {'type': 'string', 'description': 'Name of the group that should own the file/directory, as would be fed to chown.', 'required': False}, 'mode': {'type': 'string', 'description': 'The permissions the resulting file or directory should have (e.g., 644).', 'required': False}, 'owner': {'type': 'string', 'description': 'Name of the user that should own the file/directory, as would be fed to chown.', 'required': False}, 'timeout': {'type': 'integer', 'description': 'Timeout in seconds for URL request.', 'default': 10, 'required': False}, 'url_username': {'type': 'string', 'description': 'The username for use in HTTP basic authentication.', 'required': False}, 'url_password': {'type': 'string', 'description': 'The password for use in HTTP basic authentication.', 'required': False}, 'validate_certs': {'type': 'boolean', 'description': 'If no, SSL certificates will not be validated.', 'default': True, 'required': False}}, 'requirements': [{'host_on_script': {'capability': 'otc.capabilities.Container.File', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}, {'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'configure': {'inputs': {'CHECKSUM': {'get_property': ['SELF', 'checksum']}, 'CLIENT_CERT': {'get_property': ['SELF', 'client_cert']}, 'CLIENT_KEY': {'get_property': ['SELF', 'client_key']}, 'DEST': {'get_property': ['SELF', 'dest']}, 'FORCE': {'get_property': ['SELF', 'force']}, 'GROUP': {'get_property': ['SELF', 'group']}, 'MODE': {'get_property': ['SELF', 'mode']}, 'OWNER': {'get_property': ['SELF', 'owner']}, 'TIMEOUT': {'get_property': ['SELF', 'timeout']}, 'URL': {'get_property': ['SELF', 'url']}, 'URL_USERNAME': {'get_property': ['SELF', 'url_username']}, 'URL_PASSWORD': {'get_property': ['SELF', 'url_password']}, 'VALIDATE_CERTS': {'get_property': ['SELF', 'validate_certs']}, 'COMPONENT_VERSION': {'get_property': ['SELF', 'component_version']}, 'ANSIBLE_BECOME': {'get_property': ['SELF', 'ansible_become']}}, 'implementation': 'scripts/configure.yaml'}}}, 'artifacts': [{'configure': {'type': 'otc.artifacts.AnsibleTasksYmlFile', 'description': 'Specify additional ansible tasks (.yml) to execute after the file is downloaded.', 'file': 'default/configure.yml'}}]}}",0
{'cloudshell.nodes.AcmeSwitchInfinity': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco 5108': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco 5548': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco 6120': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco CRS1': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco IOS Router': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Cisco IOS Switch': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Ethernet Port': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic App Model': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Chassis': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Deployed App': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Docker Host': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Module': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Port': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Port Channel': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Power Port': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Generic Sub Module': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.George': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Ixia XG12': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.MX960': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Metaswitchb': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Myrouter': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Temp Command Connector Model': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Traffic Generator Blade': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.VMware vCenter': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.VNX 5600': {'derived_from': 'cloudshell.nodes.resource'}},0
{'cloudshell.nodes.Wwss': {'derived_from': 'cloudshell.nodes.resource'}},0
"{'cloudshell.nodes.resource': {'derived_from': 'root', 'properties': {'vendor': {'type': 'string'}}}}",0
{'cloudshell.nodes.vCenter': {'derived_from': 'cloudshell.nodes.resource'}},0
"{'cloudshell.nodes.switch': {'derived_from': 'Root', 'properties': {'vendor': {'type': 'string'}, 'model': {'type': 'string'}}}}",0
"{'cloudshell.nodes.router': {'derived_from': 'Root', 'properties': {'vendor': {'type': 'string'}, 'model': {'type': 'string'}}}}",0
"{'tosca.nodes.MiCADO.Compute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'cloud': {'type': 'tosca.datatypes.MiCADO.Occopus.Cloud'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.MiCADO.Occopus.Cloud'}}}}",0
"{'tosca.nodes.MiCADO.Occopus.CloudSigma.Compute': {'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'cloud': {'type': 'tosca.datatypes.MiCADO.Occopus.Cloud'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.MiCADO.Occopus.CloudSigma.Cloud'}}}}",0
"{'tosca.nodes.MiCADO.Occopus.EC2.Compute': {'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'cloud': {'type': 'tosca.datatypes.MiCADO.Occopus.Cloud'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.MiCADO.Occopus.EC2.Cloud'}}}}",0
"{'tosca.nodes.MiCADO.Occopus.CloudBroker.Compute': {'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'cloud': {'type': 'tosca.datatypes.MiCADO.Occopus.Cloud'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.MiCADO.Occopus.CloudBroker.Cloud'}}}}",0
"{'tosca.nodes.MiCADO.Occopus.Nova.Compute': {'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'cloud': {'type': 'tosca.datatypes.MiCADO.Occopus.Cloud'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.MiCADO.Occopus.Nova.Cloud'}}}}",0
"{'tosca.nodes.MiCADO.network.Network.Docker': {'derived_from': 'tosca.nodes.network.Network', 'description': 'description of a Docker network', 'properties': {'attachable': {'type': 'boolean', 'description': 'is attachable', 'required': False}, 'driver': {'type': 'string', 'description': 'network driver', 'required': False}, 'ip_version': {'type': 'integer', 'required': False, 'default': None}, 'dhcp_enabled': {'type': 'boolean', 'required': False, 'default': None}}}}",0
"{'tosca.nodes.MiCADO.Volume.Docker': {'derived_from': 'tosca.nodes.BlockStorage', 'description': 'description of a Docker volume', 'properties': {'name': {'type': 'string', 'description': 'name of the volume', 'required': False}, 'labels': {'type': 'map', 'description': 'map of metadata labels', 'required': False}, 'size': {'type': 'scalar.unit-size', 'description': 'overwrite size requirement', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'description': 'description of a Docker service', 'properties': {'command': {'type': 'string', 'description': 'command line to be executed by the container.', 'required': False}, 'configs': {'type': 'list', 'description': 'grant access to a docker config (define artifact first)', 'required': False}, 'deploy': {'type': 'deploy_type', 'description': 'swarm-specific configuration settings', 'required': False}, 'entrypoint': {'type': 'string', 'desciption': 'override the default entrypoint of container', 'required': False}, 'environment': {'type': 'map', 'description': 'map of all the environment variable required.', 'required': False, 'entry_schema': {'type': 'string'}}, 'expose': {'type': 'list', 'description': 'ports to expose internally', 'required': False}, 'image': {'type': 'string', 'description': 'docker image, prefixed by repository if private', 'required': False}, 'labels': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'logging': {'required': False, 'type': 'map'}, 'networks': {'required': False, 'type': 'list'}, 'volumes': {'required': False, 'type': 'list'}, 'ports': {'type': 'list', 'description': 'port exposed inside container', 'required': False}, 'secrets': {'type': 'list', 'required': False}}, 'attributes': {'ip_address': {'type': 'string'}, 'port': {'type': 'integer'}}, 'capabilities': {'service': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'volume': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.MiCADO.Volume.Docker', 'relationship': 'tosca.relationships.AttachesTo'}}]}}",0
"{'tosca.nodes.Root': {'description': 'The TOSCA root node all other TOSCA base node types derive from.', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'user': {'required': False, 'type': 'string', 'description': 'User account name for DB administration\n'}, 'password': {'required': False, 'type': 'string', 'description': 'The password for the DB user account\n'}, 'name': {'required': False, 'type': 'string', 'description': 'The name of the database.\n'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.network.Network': {'derived_from': 'tosca.nodes.Root', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'start_ip': {'type': 'string', 'required': False}, 'end_ip': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}, 'segmentation_id': {'type': 'string', 'required': False}, 'network_type': {'type': 'string', 'required': False}, 'physical_network': {'type': 'string', 'required': False}}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
{'org.onap.tosca.checker.service.Residence': {'properties': {'owner': {'type': 'org.onap.tosca.checker.service.Person'}}}},0
{'org.onap.tosca.checker.Appliance': None},0
{'derived_from': 'org.onap.tosca.checker.Object'},0
"{'org.onap.tosca.checker.Appliance': {'properties': {'brand': {'type': 'string', 'required': True}, 'color': {'type': 'string', 'required': True}, 'warrantyDuration': {'type': 'string', 'required': True}, 'price': {'type': 'float', 'required': True}, 'power_type': {'type': 'string', 'default': 'electric', 'constraints': [{'valid_values': ['electric', 'gas']}]}}}}",0
"{'org.onap.tosca.checker.Dishwasher': {'derived_from': 'org.onap.tosca.checker.Appliance', 'properties': {'waterFiltration': {'type': 'boolean', 'required': False, 'default': False}, 'numberOfCycles': {'type': 'integer', 'required': False}, 'rackMaterial': {'type': 'string', 'required': True}, 'energyStar': {'type': 'boolean', 'required': True}}}}",0
"{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': 'tosca.datatypes.network.NetworkInfo'}, 'ports': {'type': 'map', 'entry_schema': 'tosca.datatypes.network.PortInfo'}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.compute.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'type': 'version', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.compute.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.compute.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.compute.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.compute.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.compute.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}, 'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Container.Runtime': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.compute.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.compute.Container', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) clients on the public network can connect to'}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'org.onap.tosca.checker.SmartAppliance': {'derived_from': 'org.onap.tosca.checker.Appliance', 'properties': {'environmentSupport': {'type': 'org.onap.tosca.checker.SmartHouseSupport'}}}}",0
"{'node_type_1': {'properties': {'node_type_1_property_1': {'type': 'data_type_1'}}, 'capabilities': {'node_type_1_capability_1': {'type': 'capability_type_1'}}, 'requirements': [{'node_type_1_requirement_2': {'capability': 'capability_type_2', 'node': 'node_type_2', 'relationship': 'relationship_type_12'}}]}}",0
"{'node_type_2': {'properties': {'node_type_2_property_1': {'type': 'data_type_2'}}, 'capabilities': {'node_type_2_capability_2': {'type': 'capability_type_2'}}, 'artifacts': {'node_type_2_artifact_1': {'type': 'artifact_type_1'}}, 'interfaces': {'node_type_2_interface_1': {'type': 'interface_type_1'}}}}",0
"{'tosca.nodes.nfv.VNF': {'derived_from': 'tosca.nodes.Root', 'properties': {'id': {'type': 'string', 'description': 'ID of this VNF'}, 'vendor': {'type': 'string', 'description': 'name of the vendor who generate this VNF'}, 'version': {'type': 'version', 'description': 'version of the software for this VNF'}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable'}}]}}",0
"{'tosca.nodes.nfv.VDU': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'high_availability': {'type': 'tosca.capabilities.nfv.HA'}, 'Virtualbinding': {'type': 'tosca.capabilities.nfv.VirtualBindable'}, 'monitoring_parameter': {'type': 'tosca.capabilities.nfv.Metric'}}, 'requirements': [{'high_availability': {'capability': 'tosca.capabilities.nfv.HA', 'relationship': 'tosca.relationships.nfv.HA', 'occurrences': [0, 1]}}, {'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.nfv.CP': {'derived_from': 'tosca.nodes.Root', 'properties': {'type': {'type': 'string', 'required': False}}, 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable'}}, {'virtualbinding': {'capability': 'tosca.capabilities.nfv.VirtualBindable'}}], 'attributes': {'IP_address': {'type': 'string'}}}}",0
"{'tosca.nodes.nfv.VL': {'derived_from': 'tosca.nodes.Root', 'properties': {'vendor': {'type': 'string', 'required': True, 'description': 'name of the vendor who generate this VL'}}, 'capabilities': {'virtual_linkable': {'type': 'tosca.capabilities.nfv.VirtualLinkable'}}}}",0
{'tosca.nodes.nfv.VL.ELine': {'derived_from': 'tosca.nodes.nfv.VL'}},0
"{'rnc.nodes.VNF': {'derived_from': 'tosca.nodes.nfv.VNF', 'properties': {'vnftype': {'type': 'string', 'description': 'type of the RNC', 'default': 'UMTS', 'required': False, 'constraints': [{'valid_values': ['TDS-CDMA', 'UMTS', 'CDMA']}]}}, 'attributes': {'private_ip_of_MM': {'type': 'string', 'description': 'IP of master MM'}, 'private_ip_of_CM': {'type': 'string', 'description': 'IP of master CM'}, 'private_ip_of_DM': {'type': 'string', 'description': 'IP of master DM'}, 'private_ip_of_LB': {'type': 'string', 'description': 'IP of master LB'}}, 'requirements': [{'virtualLink_VNFM': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}, {'virtualLink_EMS': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}, {'virtualLink_TRAFFIC': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}]}}",0
"{'rnc.nodes.compute.MM': {'derived_from': 'tosca.nodes.nfv.VDU', 'properties': {'activestatus': {'type': 'integer', 'required': False, 'description': '1 for active or 0 for passive', 'constraints': [{'valid_values': [0, 1]}]}, 'id': {'type': 'string', 'defaule': 'MM', 'required': False, 'description': 'A identifier of this VDU within the scope of the VNFD, including version functional description and other identification information.\n'}}}}",0
"{'rnc.nodes.compute.CM': {'derived_from': 'tosca.nodes.nfv.VDU', 'properties': {'activestatus': {'type': 'integer', 'required': False, 'description': '1 for active or 0 for passive', 'constraints': [{'valid_values': [0, 1]}]}}}}",0
{'rnc.nodes.compute.DM': {'derived_from': 'tosca.nodes.nfv.VDU'}},0
{'rnc.nodes.compute.LB': {'derived_from': 'tosca.nodes.nfv.VDU'}},0
{'rnc.nodes.BlockStorage': {'derived_from': 'tosca.nodes.BlockStorage'}},0
{'rnc.nodes.VL': {'derived_from': 'tosca.nodes.nfv.VL'}},0
{'rnc.nodes.CP': {'derived_from': 'tosca.nodes.nfv.CP'}},0
{'rnc.nodes.CP.MM': {'derived_from': 'tosca.nodes.nfv.CP'}},0
"{'rnc.nodes.CP.CM': {'derived_from': 'tosca.nodes.nfv.CP', 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'rnc.nodes.compute.CM'}}]}}",0
"{'rnc.nodes.CP.DM': {'derived_from': 'tosca.nodes.nfv.CP', 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'rnc.nodes.compute.DM'}}]}}",0
"{'rnc.nodes.CP.LB': {'derived_from': 'tosca.nodes.nfv.CP', 'requirements': [{'virtualLink': {'capability': 'tosca.capabilities.nfv.VirtualLinkable', 'relationship': 'tosca.relationships.nfv.VirtualLinksTo', 'node': 'rnc.nodes.VL'}}, {'virtualBinding': {'capability': 'tosca.capabilities.nfv.VirtualBindable', 'relationship': 'tosca.relationships.nfv.VirtualBindsTo', 'node': 'rnc.nodes.compute.LB'}}]}}",0
"{'brooklyn.nodes.SoftwareProcess': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",0
"{'my.nodes.MockComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'path': {'type': 'string', 'description': 'Path on the host where this ""component"" resides'}}, 'attributes': {'id': {'type': 'string', 'description': 'Unique ID of the ""server""'}}}}",0
"{'my.nodes.MockServer': {'derived_from': 'my.nodes.MockComponent', 'capabilities': {'server': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['my.nodes.MockComponent']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'path': {'default': {'get_property': ['SELF', 'path']}}}, 'implementation': 'playbooks/mock-server/create.yml'}}}}}",0
"{'my.nodes.MockClient': {'derived_from': 'my.nodes.MockComponent', 'requirements': [{'server': {'capability': 'tosca.capabilities.Node', 'relationship': 'my.relationships.MockServerClient'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'path': {'default': {'get_property': ['SELF', 'path']}}}, 'create': {'implementation': 'playbooks/mock-client/create.yml'}, 'configure': {'inputs': {'server_id': {'default': {'get_attribute': ['SELF', 'server', 'id']}}}, 'implementation': 'playbooks/mock-client/configure.yml'}}}}}",0
"{'java_ee_server_match': {'derived_from': 'seaclouds.nodes.Platform', 'attributes': {'java_support': True, 'java_version': 1.7}}}",0
"{'db_match': {'derived_from': 'seaclouds.nodes.Compute', 'attributes': {'num_cpus': 6, 'disk_size': '1 TB', 'scaling_vertical': 'auto', 'availability': 99.8}}}",0
"{'java_ee_server_match2': {'derived_from': 'seaclouds.nodes.Platform', 'attributes': {'java_support': True, 'java_version': 1.7}}}",0
"{'db_match2': {'derived_from': 'seaclouds.nodes.Compute', 'attributes': {'num_cpus': 6, 'disk_size': '1 TB', 'scaling_vertical': 'auto', 'availability': 99.8}}}",0
"{'java_ee_server_match3': {'derived_from': 'seaclouds.nodes.Platform', 'attributes': {'java_support': True, 'java_version': 1.7}}}",0
"{'db_match3': {'derived_from': 'seaclouds.nodes.Compute', 'attributes': {'num_cpus': 6, 'disk_size': '1 TB', 'scaling_vertical': 'auto', 'availability': 99.8}}}",0
"{'seaclouds.nodes.deploy.MySQL': {'derived_from': 'tosca.nodes.deploy', 'properties': {'port': {'type': 'string'}, 'db_name': {'type': 'string'}, 'db_user': {'type': 'string'}, 'db_password': {'type': 'string'}, 'version': {'type': 'string'}}}}",0
"{'seaclouds.nodes.deploy.Tomcat': {'derived_from': 'tosca.nodes.deploy', 'properties': {'name': {'type': 'string'}, 'user': {'type': 'string'}, 'password': {'type': 'string'}}}}",0
"{'seaclouds.nodes.Compute.hp_cloud_services.2xl': {'derived_from': 'seaclouds.nodes.Compute', 'attributes': {'location': 'seaclouds.types.Locations.NV.US.LasVegas', 'load_balancing': False, 'scaling_horizontal': 'no', 'storage_file_system': 'ext4', 'disk_type': 'sata', 'local_storage': '470 GB', 'mem_size': '30 GB', 'num_cpus': 8, 'availability': 99.5}}}",0
"{'seaclouds.nodes.Compute.Amazon': {'derived_from': 'seaclouds.nodes.Compute', 'properties': {'operating_system': {'type': 'string'}}}}",0
"{'seaclouds.nodes.Compute.Amazon.c1.xlarge': {'derived_from': 'seaclouds.nodes.Compute.Amazon', 'attributes': {'location': 'seaclouds.types.Locations.AM.US.OR.Portland', 'num_cpus': 8, 'mem_size': '7 GB', 'disk_type': 'sata', 'local_storage': '2 TB'}}}",0
"{'NodeMongoApplication': {'derived_from': 'nodejs.Application', 'requirements': [{'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'mongodb.Database'}}]}}",0
"{'kubernetes.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'properties': {'apiVersion': {'type': 'string', 'default': 'v1', 'constraints': [{'valid_values': ['v1', 'v1alpha1', 'v2alpha1', 'v1beta1', 'v1beta2', 'v2beta1', 'v2beta2']}], 'required': True}, 'apiGroup': {'description': 'Along with the version is exposed in the ""apiVersion"" field as ""GROUP/VERSION"", e.g. ""policy.k8s.io/v1"".', 'type': 'string', 'default': 'core', 'required': True, 'constraints': [{'valid_values': ['core', 'apps', 'batch']}]}}}}",0
"{'kubernetes.nodes.Deployment': {'derived_from': 'kubernetes.nodes.Root', 'properties': {'apiGroup': {'type': 'string', 'default': 'apps', 'required': True}, 'metadata': {'description': ""Standard object's metadata."", 'type': 'kubernetes.datatypes.ObjectMeta.name', 'required': True}, 'spec': {'type': 'kubernetes.datatypes.DeploymentSpec', 'required': True}}}}",0
"{'kubernetes.nodes.Service': {'derived_from': 'kubernetes.nodes.Root', 'properties': {'metadata': {'description': ""Standard object's metadata."", 'type': 'kubernetes.datatypes.ObjectMeta', 'required': False}, 'spec': {'type': 'kubernetes.datatypes.ServiceSpec', 'required': True}}}}",0
"{'vRouterVNF': {'derived_from': 'tosca.nodes.nfv.VNF', 'capabilities': {'forwarder': {'type': 'tosca.capabilities.nfv.Forwarder'}}}}",0
{'additionalProperties': {'type': 'object'}},0
"{'aria.openstack.nodes.Server': {'derived_from': 'tosca.nodes.Compute', 'properties': {'server': {'default': {}, 'type': 'aria.openstack.datatypes.Server', 'required': False}, 'ip': {'default': None, 'type': 'string'}, 'os_family': {'description': 'Property specifying what type of operating system family this compute node will run.', 'default': 'linux', 'type': 'string'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'image': {'default': '', 'type': 'string', 'description': ""The image for the server. May receive either the ID or the name of the image. note: This property is currently optional for backwards compatibility, but will be modified to become a required property in future versions (Default: '').""}, 'flavor': {'default': '', 'type': 'string', 'description': ""The flavor for the server. May receive either the ID or the name of the flavor. note: This property is currently optional for backwards compatibility, but will be modified to become a required property in future versions (Default: '').""}, 'use_password': {'default': False, 'type': 'boolean', 'description': ""A boolean describing whether this server image supports user-password authentication. Images that do should post the administrator user's password to the Openstack metadata service (e.g. via cloudbase); The password would then be retrieved by the plugin, decrypted using the server's keypair and then saved in the server's runtime properties.""}, 'management_network_name': {'type': 'string', 'description': 'The current implementation of the openstack plugin requires this field. The value of this field should be set to the openstack name of a network this server is attached to.'}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False, 'description': 'see Openstack Configuraion'}}, 'attributes': {'ip': {'type': 'string'}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.create', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'aria.openstack.datatypes.Server'}}}, 'start': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.start', 'inputs': {'start_retry_interval': {'default': 30, 'type': 'integer'}, 'private_key_path': {'type': 'string', 'default': '', 'required': True}}}, 'stop': 'cloudify-openstack-plugin > nova_plugin.server.stop', 'delete': 'cloudify-openstack-plugin > nova_plugin.server.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.creation_validation', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'aria.openstack.datatypes.Server'}}}}}, 'requirements': [{'floating_ip': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.FloatingIP', 'relationship': 'aria.openstack.server_connected_to_floating_ip', 'occurrences': [0, 'UNBOUNDED']}}, {'security_group': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.SecurityGroup', 'relationship': 'aria.openstack.server_connected_to_security_group', 'occurrences': [0, 'UNBOUNDED']}}, {'port': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Port', 'relationship': 'aria.openstack.server_connected_to_port', 'occurrences': [0, 'UNBOUNDED']}}, {'key_pair': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.KeyPair', 'relationship': 'aria.openstack.server_connected_to_keypair', 'occurrences': [0, 'UNBOUNDED']}}, {'image': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Image', 'relationship': 'aria.openstack.server_depends_on_image', 'occurrences': [0, 1]}}], 'capabilities': {'openstack_container': {'type': 'Node'}}}}",0
"{'aria.openstack.nodes.WindowsServer': {'derived_from': 'aria.openstack.nodes.Server', 'properties': {'use_password': {'default': True, 'type': 'boolean', 'description': 'Default changed for derived type because Windows instances need a password for agent installation'}, 'os_family': {'default': 'windows', 'type': 'string', 'description': '(updates the os_family default as a convenience)'}}}}",0
"{'aria.openstack.nodes.KeyPair': {'derived_from': 'tosca.nodes.Root', 'properties': {'keypair': {'default': {}, 'type': 'aria.openstack.datatypes.Keypair', 'required': False, 'description': 'the path (on the machine the plugin is running on) to where the private key should be stored. If use_external_resource is set to ""true"", the existing private key is expected to be at this path.'}, 'private_key_path': {'description': 'the path (on the machine the plugin is running on) to where the private key should be stored. If use_external_resource is set to ""true"", the existing private key is expected to be at this path.\n', 'type': 'string'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean describing whether this resource should be created or rather that it already exists on Openstack and should be used as-is.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': 'the name that will be given to the resource on Openstack (excluding optional prefix). If not provided, a default name will be given instead. If use_external_resource is set to ""true"", this exact value (without any prefixes applied) will be looked for as either the name or id of an existing keypair to be used.'}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > nova_plugin.keypair.create', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'aria.openstack.datatypes.Keypair'}}}, 'delete': 'cloudify-openstack-plugin > nova_plugin.keypair.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > nova_plugin.keypair.creation_validation'}}, 'capabilities': {'keypair': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Subnet': {'derived_from': 'tosca.nodes.Root', 'properties': {'subnet': {'type': 'aria.openstack.datatypes.Subnet', 'required': False, 'default': {'cidr': '172.16.0.0/16'}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.subnet.create', 'inputs': {'args': {'required': False, 'type': 'aria.openstack.datatypes.Subnet', 'default': {'cidr': '172.16.0.0/16'}}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.subnet.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.subnet.creation_validation', 'inputs': {'args': {'type': 'aria.openstack.datatypes.Subnet', 'required': False, 'default': {'cidr': '172.16.0.0/16'}}}}}}, 'requirements': [{'router': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Router', 'relationship': 'aria.openstack.subnet_connected_to_router', 'occurrences': [0, 'UNBOUNDED']}}, {'network': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Network'}}], 'capabilities': {'subnet': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.SecurityGroup': {'derived_from': 'tosca.nodes.Root', 'properties': {'security_group': {'type': 'aria.openstack.datatypes.SecurityGroup', 'required': False, 'default': {}}, 'description': {'type': 'string', 'default': '', 'description': 'SecurityGroup description.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}, 'rules': {'default': [], 'type': 'list', 'entry_schema': 'aria.openstack.datatypes.Rules'}, 'disable_default_egress_rules': {'default': False, 'type': 'boolean', 'description': 'a flag for removing the default rules which https://wiki.openstack.org/wiki/Neutron/SecurityGroups#Behavior. If not set to `true`, these rules will remain, and exist alongside any additional rules passed using the `rules` property.'}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.security_group.create', 'inputs': {'args': {'type': 'aria.openstack.datatypes.SecurityGroup', 'required': False, 'default': {}}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.security_group.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > neutron_plugin.security_group.creation_validation'}}, 'capabilities': {'security': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Router': {'derived_from': 'tosca.nodes.Root', 'properties': {'router': {'type': 'aria.openstack.datatypes.Router', 'required': False, 'default': {}}, 'external_network': {'default': '', 'type': 'string', 'description': 'An external network name or ID. If given, the router will use this external network as a gateway.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string)."", 'type': 'string'}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.router.create', 'inputs': {'args': {'default': {}, 'type': 'aria.openstack.datatypes.Router', 'required': False}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.router.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > neutron_plugin.router.creation_validation'}}, 'capabilities': {'gateway': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Port': {'derived_from': 'tosca.nodes.Root', 'properties': {'port': {'type': 'aria.openstack.datatypes.Port', 'required': False, 'default': {}}, 'fixed_ip': {'default': '', 'type': 'string', 'description': 'may be used to request a specific fixed IP for the port. If the IP is unavailable (either already taken or does not belong to a subnet the port is on) an error will be raised.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.port.create', 'inputs': {'args': {'default': {}, 'type': 'aria.openstack.datatypes.Port', 'required': False}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.port.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > neutron_plugin.port.creation_validation'}}, 'requirements': [{'security_group': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.SecurityGroup', 'relationship': 'aria.openstack.port_connected_to_security_group', 'occurrences': [0, 'UNBOUNDED']}}, {'floating_ip': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.FloatingIP', 'relationship': 'aria.openstack.port_connected_to_floating_ip', 'occurrences': [0, 'UNBOUNDED']}}, {'subnet': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Subnet', 'relationship': 'aria.openstack.port_connected_to_subnet'}}, {'network': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Network', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'entry_point': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Network': {'derived_from': 'tosca.nodes.Root', 'properties': {'network': {'type': 'aria.openstack.datatypes.Network', 'required': False, 'default': {}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.network.create', 'inputs': {'args': {'default': {}, 'type': 'aria.openstack.datatypes.Network', 'required': False}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.network.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > neutron_plugin.network.creation_validation'}}, 'capabilities': {'address_space': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.FloatingIP': {'derived_from': 'tosca.nodes.Root', 'attributes': {'floating_ip_address': {'type': 'string'}}, 'properties': {'floatingip': {'type': 'aria.openstack.datatypes.FloatingIP', 'required': False, 'default': {}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string)."", 'default': '', 'type': 'string'}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > neutron_plugin.floatingip.create', 'inputs': {'args': {'default': {}, 'type': 'aria.openstack.datatypes.FloatingIP', 'required': False}}}, 'delete': 'cloudify-openstack-plugin > neutron_plugin.floatingip.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > neutron_plugin.floatingip.creation_validation'}}, 'capabilities': {'address': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Volume': {'derived_from': 'tosca.nodes.Root', 'properties': {'volume': {'default': {}, 'type': 'aria.openstack.datatypes.Volume', 'description': 'key-value volume configuration as described in http://developer.openstack.org/api-ref-blockstorage-v1.html#volumes-v1. (**DEPRECATED - Use the `args` input in create operation instead**)'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': None, 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'device_name': {'default': 'auto', 'type': 'string', 'description': 'The device name this volume will be attached to. Default value is *auto*, which means openstack will auto-assign a device. Note that if you do explicitly set a value, this value may not be the actual device name assigned. Sometimes the device requested will not be available and openstack will assign it to a different device, this is why we recommend using *auto*.'}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}, 'boot': {'type': 'boolean', 'default': False, 'description': 'If a Server instance is connected to this Volume by a relationship, this volume will be used as the boot volume for that Server.'}}, 'interfaces': {'Standard': {'create': {'implementation': 'cloudify-openstack-plugin > cinder_plugin.volume.create', 'inputs': {'args': {'default': {}, 'type': 'aria.openstack.datatypes.Volume', 'required': False}, 'status_attempts': {'description': ""Number of times to check for the creation's status before failing"", 'type': 'integer', 'default': 20}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the creation's status"", 'type': 'integer', 'default': 15}}}, 'delete': 'cloudify-openstack-plugin > cinder_plugin.volume.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > cinder_plugin.volume.creation_validation'}}, 'requirements': [{'server': {'capability': 'tosca.capabilities.Node', 'node': 'aria.openstack.nodes.Server', 'relationship': 'aria.openstack.volume_attached_to_server'}}]}}",0
"{'aria.openstack.nodes.Image': {'derived_from': 'tosca.nodes.Root', 'properties': {'image': {'description': 'Required parameters are (container_format, disk_format). Accepted types are available on http://docs.openstack.org/developer/glance/formats.html To create an image from the local file its path should be added in data parameter.', 'default': {}, 'type': 'map', 'entry_schema': 'string'}, 'image_url': {'default': '', 'type': 'string', 'description': 'The openstack resource URL for the image.'}, 'use_external_resource': {'default': False, 'type': 'boolean', 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': 'cloudify-openstack-plugin > glance_plugin.image.create', 'start': {'implementation': 'cloudify-openstack-plugin > glance_plugin.image.start', 'inputs': {'start_retry_interval': {'default': 30, 'type': 'integer'}}}, 'delete': 'cloudify-openstack-plugin > glance_plugin.image.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'cloudify-openstack-plugin > glance_plugin.image.creation_validation'}}, 'capabilities': {'image': {'type': 'tosca.capabilities.Node'}}}}",0
"{'aria.openstack.nodes.Project': {'derived_from': 'tosca.nodes.Root', 'properties': {'project': {'default': {}, 'type': 'aria.openstack.datatypes.Project', 'description': 'key-value project configuration.'}, 'users': {'default': [], 'type': 'list', 'entry_schema': 'string', 'description': 'List of users assigned to this project in the following format:\n  { name: string, roles: [string] }'}, 'quota': {'default': {}, 'type': 'map', 'entry_schema': 'string', 'description': 'A dictionary mapping service names to quota definitions for a proejct\n\ne.g::\n\n  quota:\n    neutron: <quota>\n    nova: <quota>\n'}, 'use_external_resource': {'default': False, 'type': 'boolean', 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'openstack_config': {'type': 'aria.openstack.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': 'openstack.keystone_plugin.project.create', 'start': 'openstack.keystone_plugin.project.start', 'delete': 'openstack.keystone_plugin.project.delete'}, 'Validation': {'type': 'aria.openstack.interfaces.validation', 'creation': 'openstack.keystone_plugin.project.creation_validation'}}}}",0
"{'radon.nodes.bucket_create': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'bucket_in_name': {'type': 'string', 'description': 'The name of incoming the bucket'}, 'bucket_out_name': {'type': 'string', 'description': 'The name of the bucket with results'}, 'minio_ip': {'type': 'string', 'description': 'IP address of the MiniIO object storage'}, 'credentials': {'type': 'string', 'description': 'MiniIO credentials'}}, 'attributes': {'bucket_in_name': {'type': 'string'}, 'bucket_out_name': {'type': 'string'}, 'minio_ip': {'type': 'string'}, 'credentials': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'bucket_in_name': {'default': {'get_property': ['SELF', 'bucket_in_name']}, 'type': 'string'}, 'bucket_out_name': {'default': {'get_property': ['SELF', 'bucket_out_name']}, 'type': 'string'}, 'minio_ip': {'default': {'get_property': ['SELF', 'minio_ip']}, 'type': 'string'}, 'credentials': {'default': {'get_property': ['SELF', 'credentials']}, 'type': 'string'}}, 'operations': {'create': {'implementation': 'playbooks/bucket-create/create.yml'}, 'delete': {'implementation': 'playbooks/bucket-create/remove.yml'}}}}}}",0
"{'radon.nodes.function_load': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'resize_image_name': {'type': 'string', 'description': 'Name of already existing image with image-resize functionality.'}, 'node_ip': {'type': 'string', 'description': 'IP of the VM running the OpenFaaS'}}, 'attributes': {'resize_image_name': {'type': 'string'}, 'node_ip': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'resize_image_name': {'default': {'get_property': ['SELF', 'resize_image_name']}, 'type': 'string'}, 'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/function-load/create.yml', 'dependencies': ['docker-image-templates/python-docker-function.tar']}}, 'delete': {'implementation': 'playbooks/function-load/remove.yml'}}}}}}",0
"{'radon.nodes.function_deploy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'resize_image_name': {'type': 'string', 'description': 'Name of already existing image with image-resize functionality.'}, 'resize_function_name': {'type': 'string', 'description': 'Name of the new OpenFaaS image-resize function.'}, 'node_ip': {'type': 'string', 'description': 'IP of the VM running the OpenFaaS'}}, 'attributes': {'resize_image_name': {'type': 'string'}, 'resize_function_name': {'type': 'string'}, 'node_ip': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'resize_image_name': {'default': {'get_property': ['SELF', 'resize_image_name']}, 'type': 'string'}, 'resize_function_name': {'default': {'get_property': ['SELF', 'resize_function_name']}, 'type': 'string'}, 'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}}, 'operations': {'create': {'implementation': 'playbooks/function-deploy/create.yml'}, 'delete': {'implementation': 'playbooks/function-deploy/remove.yml'}}}}}}",0
"{'radon.nodes.bucket_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'node_ip': {'type': 'string', 'description': 'IP of the VM running the OpenFaaS'}, 'function_name': {'type': 'string', 'description': 'The name of the deployed OpenFaaS function'}, 'credentials': {'type': 'string', 'description': 'MiniIO credentials'}, 'bucket_in_name': {'type': 'string', 'description': 'The name of incoming the bucket'}}, 'attributes': {'node_ip': {'type': 'string'}, 'function_name': {'type': 'string'}, 'credentials': {'type': 'string'}, 'bucket_in_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'credentials': {'default': {'get_property': ['SELF', 'credentials']}, 'type': 'string'}, 'bucket_in_name': {'default': {'get_property': ['SELF', 'bucket_in_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/bucket-notification/create.yml', 'dependencies': ['playbooks/bucket-notification/files/bucket-notification.py']}}, 'delete': {'implementation': 'playbooks/bucket-notification/remove.yml'}}}}}}",0
"{'radon.nodes.docker_setup': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'linux_distro': {'type': 'string', 'description': 'Name of linux distro'}, 'linux_release': {'type': 'string', 'description': 'Name of linux release'}}, 'attributes': {'linux_distro': {'type': 'string'}, 'linux_release': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'linux_distro': {'default': {'get_property': ['SELF', 'linux_distro']}, 'type': 'string'}, 'linux_release': {'default': {'get_property': ['SELF', 'linux_release']}, 'type': 'string'}}, 'operations': {'create': {'implementation': 'playbooks/docker/create.yml'}}}}}}",0
"{'radon.nodes.openfaas': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': 'playbooks/openfaas/create.yml'}}}}}}",0
"{'radon.nodes.minio': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'minio_ip': {'type': 'string', 'description': 'IP address of the MiniIO object storage'}, 'credentials': {'type': 'string', 'description': 'MiniIO credentials'}}, 'attributes': {'minio_ip': {'type': 'string'}, 'credentials': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'minio_ip': {'default': {'get_property': ['SELF', 'minio_ip']}, 'type': 'string'}, 'credentials': {'default': {'get_property': ['SELF', 'credentials']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/minio/create.yml', 'dependencies': ['playbooks/minio/templates/config.json']}}}}}}}",0
"{'org.tmforum.tr255c.nodes.firewall': {'description': 'A type definition of the top level firewall entity from TR255B for use in TR255C', 'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource', 'properties': {'operating_system': {'type': 'os_choice'}}, 'attributes': {'max_traffic_processed_GBs_per_sec': {'type': 'integer'}}, 'requirements': [{'core_software': {'capability': 'tosca.capabilities.Root', 'node': 'SWI1', 'relationship': 'DependsOn'}}], 'capabilities': {'CP1': 'Endpoint', 'CP14': 'Endpoint'}}}",0
"{'org.tmforum.tr255c.nodes.firewall.fg1': {'description': 'A type definition of firewall with FeatureGroup 1', 'derived_from': 'org.tmforum.tr255c.nodes.firewall', 'requirements': [{'filtering_software': {'capability': 'tosca.capabilities.Root', 'node': 'SWI2', 'relationship': 'DependsOn'}}, {'inspection_software': {'capability': 'tosca.capabilities.Root', 'node': 'SWI4', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.tr255c.nodes.firewall.fg2': {'description': 'A type definition of firewall with FeatureGroup 2', 'derived_from': 'org.tmforum.tr255c.nodes.firewall', 'requirements': [{'redirect_software': {'capability': 'tosca.capabilities.Root', 'node': 'SWI3', 'relationship': 'DependsOn'}}, {'inspection_software': {'capability': 'tosca.capabilities.Root', 'node': 'SWI4', 'relationship': 'DependsOn'}}]}}",0
"{'tosca.nodes.SoftwareComponent.networked': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A software component with ports', 'requirements': [{'port': {'capability': 'tosca.capabilities.network.Bindable', 'node': 'tosca.nodes.network.Port', 'relationship': 'tosca.relationships.network.BindsTo'}}]}}",0
"{'SWI1': {'derived_from': 'tosca.nodes.SoftwareComponent.networked', 'interfaces': {'Standard': {'operations': {'create': 'vm_image'}}}, 'requirements': [{'CP2': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}, {'CP14': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}]}}",0
"{'SWI1_linux': {'derived_from': 'SWI1', 'artifacts': {'vm_image': {'file': 'images/fw-core-fedora-18-x86_64.qcow2', 'type': 'tosca.artifacts.Deployment.Image.VM.QCOW2'}}}}",0
"{'SWI1_windows': {'derived_from': 'SWI1', 'artifacts': {'vm_image': {'file': 'images/fw-core-windows-10-x86_64.qcow2', 'type': 'tosca.artifacts.Deployment.Image.VM.QCOW2'}}}}",0
"{'SWI2': {'derived_from': 'tosca.nodes.SoftwareComponent.networked', 'interfaces': {'Standard': {'operations': {'create': 'patch'}}}, 'requirements': [{'CP2': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}, {'CP14': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}]}}",0
"{'SWI2_linux': {'derived_from': 'SWI2', 'artifacts': {'patch': {'file': 'images/fw-filter-fedora-18-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'SWI2_windows': {'derived_from': 'SWI2', 'artifacts': {'patch': {'file': 'images/fw-filter-windows-10-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'SWI3': {'derived_from': 'tosca.nodes.SoftwareComponent.networked', 'interfaces': {'Standard': {'operations': {'create': 'patch'}}}, 'requirements': [{'CP5': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}, {'CP6': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}, {'CP7': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}]}}",0
"{'SWI3_linux': {'derived_from': 'SWI3', 'artifacts': {'patch': {'file': 'images/fw-redirect-fedora-18-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'SWI3_windows': {'derived_from': 'SWI3', 'artifacts': {'patch': {'file': 'images/fw-redirect-windows-10-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'SWI4': {'derived_from': 'tosca.nodes.SoftwareComponent.networked', 'interfaces': {'Standard': {'operations': {'create': 'patch'}}}, 'requirements': [{'CP8': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}, {'CP9': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.network.Port', 'relationship': 'DependsOn'}}]}}",0
"{'SWI4_linux': {'derived_from': 'SWI4', 'artifacts': {'patch': {'file': 'images/fw-filter-fedora-18-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'SWI4_windows': {'derived_from': 'SWI4', 'artifacts': {'patch': {'file': 'images/fw-filter-windows-10-x86_64.diff', 'type': 'tosca.artifacts.Deployment'}}}}",0
"{'org.tmforum.igxxxx.nodes.ModularRouter': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource', 'properties': {'property1': {'type': 'string'}, 'property2': {'type': 'integer'}}, 'attributes': {'attribute1': {'type': 'float'}, 'attribute2': {'type': 'boolean'}}, 'requirements': [{'router_software': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.RouterSoftware', 'relationship': 'DependsOn'}}, {'chassis': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.chassis', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.igxxxx.nodes.RouterSoftware': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'org.tmforum.igxxxx.nodes.Compute.NetworkDevice'}}]}}",0
"{'org.tmforum.igxxxx.nodes.Compute.NetworkDevice': {'derived_from': 'tosca.nodes.Compute', 'description': 'provides level of indirection between SoftwareComponent and Processor-card', 'requirements': [{'processor_card': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.processor_card', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.igxxxx.nodes.processor_card': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card', 'requirements': [{'slot': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.slot', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.igxxxx.nodes.PhysicalPort.OnCard': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.PhysicalPort', 'requirements': [{'router_software': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.RouterSoftware', 'relationship': 'DependsOn'}}, {'port_card': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.port_card', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.igxxxx.nodes.port_card': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card', 'requirements': [{'slot': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.slot', 'relationship': 'DependsOn'}}]}}",0
"{'org.tmforum.igxxxx.nodes.slot': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.EquipmentHolder', 'requirements': [{'chassis': {'capability': 'tosca.capabilities.Root', 'node': 'org.tmforum.igxxxx.nodes.chassis', 'relationship': 'DependsOn'}}]}}",0
{'org.tmforum.igxxxx.nodes.chassis': {'derived_from': 'tosca.nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment'}},0
{'tosca.nodes.TMForum': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.TMForum.Models': {'derived_from': 'tosca.nodes.TMForum'}},0
"{'tosca.nodes.TMForum.Models.SIDModels': {'derived_from': 'tosca.nodes.TMForum.Models', 'properties': {'description': {'type': 'string', 'required': False, 'description': 'This is a string, and defines a textual identifier of an object'}, 'name': {'type': 'string', 'description': 'Represents a user-friendly identifier of an object...', 'required': False}}, 'attributes': None}}",0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE'}},0
"{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource': {'description': 'Equates to PhysicalResourceSpec in TM Forum Information Model (SID)', 'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE', 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'type': 'tosca.capabilities.PhysicalResourceSpecAttributes'}}}}",0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource'}},0
"{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.PhysicalPort': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware', 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment'}},0
{'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.EquipmentHolder': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer'}},0
"{'tosca.nodes.ModularRouter': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource', 'properties': {'property1': {'type': 'string'}, 'property2': {'type': 'integer'}}, 'attributes': {'attribute1': {'type': 'float'}, 'attribute2': {'type': 'boolean'}}, 'requirements': [{'router_software': {'node': 'tosca.nodes.RouterSoftware', 'relationship': 'dependancy'}}, {'chassis': {'node': 'tosca.nodes.chassis', 'relationship': 'dependancy'}}]}}",0
"{'tosca.nodes.RouterSoftware': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'tosca.nodes.Compute.NetworkDevice'}}]}}",0
"{'tosca.nodes.Compute.NetworkDevice': {'derived_from': 'tosca.nodes.Compute', 'description': 'provides level of indirection between SoftwareComponent and Processor-card', 'requirements': [{'processor_card': {'node': 'tosca.nodes.processor_card', 'relationship': 'dependancy'}}]}}",0
"{'tosca.nodes.processor_card': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card', 'requirements': [{'slot': {'node': 'tosca.nodes.slot', 'relationship': 'dependancy'}}]}}",0
"{'tosca.nodes.PhysicalPort.OnCard': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.PhysicalPort', 'requirements': [{'router_software': {'node': 'tosca.nodes.RouterSoftware', 'relationship': 'dependancy'}}, {'port_card': {'node': 'tosca.nodes.port_card', 'relationship': 'dependancy'}}]}}",0
"{'tosca.nodes.port_card': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card', 'requirements': [{'slot': {'node': 'tosca.nodes.slot', 'relationship': 'dependancy'}}]}}",0
"{'tosca.nodes.slot': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.EquipmentHolder', 'requirements': [{'chassis': {'node': 'tosca.nodes.chassis', 'relationship': 'dependancy'}}]}}",0
{'tosca.nodes.chassis': {'derived_from': 'tosca.nodes.TMForum.Models.SIDModels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment'}},0
"{'tosca.nodes.port_card.Acme.1111': {'derived_from': 'tosca.nodes.port_card', 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'properties': {'modelNumber': '1111', 'vendorName': 'Acme'}, 'attributes': None}}}}",0
"{'tosca.nodes.processor_card.Acme.2222': {'derived_from': 'tosca.nodes.processor_card', 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'properties': {'modelNumber': '2222', 'vendorName': 'Acme'}, 'attributes': None}}}}",0
"{'tosca.nodes.PhysicalPort.OnCard.Acme': {'derived_from': 'tosca.nodes.PhysicalPort.OnCard', 'requirements': [{'router_software': {'node': 'tosca.nodes.RouterSoftware.Acme'}}, {'port_card': {'node': 'tosca.nodes.port_card', 'node_filter': [{'port_card': None, 'properties': {'vendorName': {'equal': 'Acme'}}}], 'relationship': 'dependancy'}}]}}",0
{'tosca.nodes.RouterSoftware.Acme': {'derived_from': 'tosca.nodes.RouterSoftware'}},0
"{'tosca.nodes.PhysicalPort.OnCard.Acme.Advanced': {'derived_from': 'tosca.nodes.PhysicalPort.OnCard.Acme', 'capabilities': {'complexQoS': {'type': 'Acme.ComplexQosFeature'}}}}",0
"{'nodes.org.tmforum.models.sidmodels': {'metadata': {'sid_release': '19.0'}, 'properties': {'description': {'type': 'string', 'required': False, 'description': 'This is a string, and defines a textual identifier of an object'}, 'name': {'type': 'string', 'description': 'Represents a user-friendly identifier of an object...', 'required': False}, 'ID': {'type': 'string', 'description': 'Unambiguously distinguishes different object instances', 'required': False}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain': {'derived_from': 'nodes.org.tmforum.models.sidmodels', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE', 'metadata': {'sid_release': '19.0'}, 'attributes': {'status': {'type': 'integer', 'description': 'This is an enumerated integer whose value indicates the current status of the object. The following values are defined: 0: Unknown 1: OK 2: Initializing 3: Starting 4: Paused 5: Stopping 6: Stopped 7: Degraded 8: Stressed 9: Predicted Failure 10: Error - General 11: Error - Non Recoverable 12: Not Installed or Not Present 13: In Maintenance 14: Unable To Contact 15: Lost Communications\nStopped indicates that the CompoundResource is known to still exist, but it is no longer operational. However, it has not failed.\nStressed indicates that the LogicalResource is functioning, but needs attention (e.g., it may be overheating, or overloaded in some way). This is similar to Predicted Failure, which indicates that this CompoundResource is functioning properly, but is predicting a failure in the near future.\nIn Maintenance indicates that this LogicalResource is being configured, maintained, or otherwise administered and is NOT available for service'}}, 'interfaces': {'Standard': {'type': 'org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.CompoundResourceABE.CompoundResource.status'}}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE', 'metadata': {'sid_release': '19.0'}, 'attributes': {'lrStatus': {'type': 'integer', 'description': 'This is an enumerated integer whose value indicates the current status of the object. The following values are defined: 0: Unknown 1: OK 2: Initializing 3: Starting 4: Paused 5: Stopping 6: Stopped 7: Degraded 8: Stressed 9: Predicted Failure 10: Error - General 11: Error - Non Recoverable 12: Not Installed or Not Present 13: In Maintenance 14: Unable To Contact 15: Lost Communications\nStopped indicates that the LogicalResource is known to still exist, but it is no longer operational. However, it has not failed.\nStressed indicates that the LogicalResource is functioning, but needs attention (e.g., it may be overheating, or overloaded in some way). This is similar to Predicted Failure, which indicates that this LogicalResource is functioning properly, but is predicting a failure in the near future.\nIn Maintenance indicates that this LogicalResource is being configured, maintained, or otherwise administered and is NOT available for service.\nUnable To Contact indicates that the monitoring system has knowledge of this LogicalResource but has never been able to establish communications with it. In contrast, Lost Communications indicates that the LogicalResource has been contacted successfully in the past and is known to still exist; however, it is currently unreachable.'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.lrStatus'}}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ResourceFunction': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE', 'metadata': {'sid_release': '19.0'}, 'properties': {'keyWords': {'type': 'string', 'required': False, 'description': 'A list of key words that may help in searches to find an RF spec with desired capabilities'}}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.LogicalResource.ConnectionPoint': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource': {'description': 'Equates to PhysicalResourceSpec in TM Forum Information Model (SID)', 'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE', 'metadata': {'sid_release': '19.0'}, 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'type': 'tosca.capabilities.PhysicalResourceSpecAttributes'}}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.PhysicalPort': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware', 'metadata': {'sid_release': '19.0'}, 'capabilities': {'link': {'type': 'tosca.capabilities.network.Linkable'}}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment.Card': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.Equipment', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer.EquipmentHolder': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.PhysicalResource.Hardware.ManagedHardware.PhysicalContainer', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.ComputingandSoftwareABE': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.ComputingandSoftwareABE.SoftwareResourceandSoftwareABE': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.ComputingandSoftwareABE', 'metadata': {'sid_release': '19.0'}}}",0
"{'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.ComputingandSoftwareABE.SoftwareResourceandSoftwareABE.InstalledSoftware': {'derived_from': 'nodes.org.tmforum.models.sidmodels.ResourceDomain.ResourceABE.LogicalResourceABE.ComputingandSoftwareABE.SoftwareResourceandSoftwareABE', 'metadata': {'sid_release': '19.0'}, 'properties': {'pagingFileSizeCurrent': {'type': 'Quantity'}}}}",0
"{'Acme.1111': {'derived_from': 'org.tmforum.igxxxx.nodes.port_card', 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'properties': {'modelNumber': {'type': 'string', 'default': '1111'}, 'vendorName': {'type': 'string', 'default': 'Acme'}}}}}}",0
"{'Acme.2222': {'derived_from': 'org.tmforum.igxxxx.nodes.processor_card', 'capabilities': {'PhysicalResourceSpecFurtherExtendedBy': {'properties': {'modelNumber': {'type': 'string', 'default': '1111'}, 'vendorName': {'type': 'string', 'default': 'Acme'}}}}}}",0
{'org.tmforum.igxxxx.nodes.RouterSoftware.Acme': {'derived_from': 'org.tmforum.igxxxx.nodes.RouterSoftware'}},0
{'org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme': {'derived_from': 'org.tmforum.igxxxx.nodes.PhysicalPort.OnCard'}},0
{'RouterSoftware.Acme': {'derived_from': 'org.tmforum.igxxxx.nodes.RouterSoftware'}},0
"{'Acme.Router.1000Series': {'derived_from': 'org.tmforum.igxxxx.nodes.ModularRouter', 'interfaces': {'Standard': {'create': 'scripts/invoke_installation_job.sh', 'configure': 'scripts/apply_day0_config.sh', 'delete': 'scripts/invoke_recovery_job.sh'}}}}",0
"{'org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme.Advanced': {'derived_from': 'org.tmforum.igxxxx.nodes.PhysicalPort.OnCard.Acme', 'capabilities': {'complexQoS': {'type': 'Acme.ComplexQosFeature'}}}}",0
"{'example.node.for.enumeration': {'derived_from': 'tosca.nodes.Compute', 'properties': {'somereportperiod': {'type': 'string', 'constraints': [{'valid_values': [{'NA': None}, {'R_15MN': None}, {'R_1H': None}, {'R_1MN R_1MN': None}, {'R_24H R_24H': None}, {'R_30MN R_30MN': None}, {'R_5MN R_5MN': None}]}]}}}}",0
"{'tosca.nodes.samples.LogIp': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Simple linux cross platform create script.', 'attributes': {'log_attr': {'get_operation_output': ['SELF', 'Standard', 'create', 'LOG_OUT']}}, 'interfaces': {'Standard': {'create': {'inputs': {'SELF_IP': {'get_attribute': ['HOST', 'ip_address']}}, 'implementation': 'scripts/create.sh'}}}}}",0
"{'org.lexis.datatransfer.nodes.CopyToJobTask': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy files to a HEAppE Job task input directory\n', 'properties': {'task_name': {'description': 'Name of the task in the Job', 'type': 'string', 'required': True}, 'source_directory': {'description': 'Directory containing files to copy', 'type': 'string', 'required': True}}, 'requirements': [{'job': {'capability': 'org.heappe.capabilities.HeappeJob', 'node': 'org.heappe.nodes.Job', 'relationship': 'org.heappe.relationships.SendInputsToJob', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'user': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'user']}, 'private_key': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'key']}, 'server': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'server']}, 'job_directory': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'path']}, 'tasks_name_id': {'get_attribute': ['REQ_TARGET', 'job', 'tasks_name_id']}, 'task_name': {'get_property': ['SELF', 'task_name']}, 'source_directory': {'get_property': ['SELF', 'source_directory']}}, 'implementation': 'playbooks/copytojobtask.yaml'}, 'delete': {'implementation': 'playbooks/noop.yaml'}}}, 'tags': {'icon': 'images/copytojob.png'}}}",0
"{'org.lexis.datatransfer.nodes.CopySubDirToJobTask': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy files in a subdirectory of a parent directory to a HEAppE Job task input directory\n', 'properties': {'task_name': {'description': 'Name of the task in the Job', 'type': 'string', 'required': True}, 'parent_directory': {'description': 'Parent directory containing the subdirectory', 'type': 'string', 'required': True}, 'subdirectory_index': {'description': 'Index of the subdirectory for which to copy content (0 means first subdir)', 'type': 'integer', 'required': True}}, 'requirements': [{'job': {'capability': 'org.heappe.capabilities.HeappeJob', 'node': 'org.heappe.nodes.Job', 'relationship': 'org.heappe.relationships.SendInputsToJob', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'user': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'user']}, 'private_key': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'key']}, 'server': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'server']}, 'job_directory': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'path']}, 'tasks_name_id': {'get_attribute': ['REQ_TARGET', 'job', 'tasks_name_id']}, 'task_name': {'get_property': ['SELF', 'task_name']}, 'parent_directory': {'get_property': ['SELF', 'parent_directory']}, 'subdirectory_index': {'get_property': ['SELF', 'subdirectory_index']}}, 'implementation': 'playbooks/copysubdirtojobtask.yaml'}, 'delete': {'implementation': 'playbooks/noop.yaml'}}}, 'tags': {'icon': 'images/copytojob.png'}}}",0
"{'org.lexis.datatransfer.nodes.CopyFromJobTask': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy files from a HEAppE Job task output directory\n', 'properties': {'task_name': {'description': 'Name of the task in the Job', 'type': 'string', 'required': True}, 'source_files_patterns': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of file patterns to copy from job output directory\n', 'required': True}, 'destination_directory': {'description': 'Directory where to copy files', 'type': 'string', 'required': True}}, 'requirements': [{'job': {'capability': 'org.heappe.capabilities.HeappeJob', 'node': 'org.heappe.nodes.Job', 'relationship': 'org.heappe.relationships.GetResultsFromJob', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'user': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'user']}, 'private_key': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'key']}, 'server': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'server']}, 'source_files_patterns': {'get_property': ['SELF', 'source_files_patterns']}, 'job_directory': {'get_attribute': ['REQ_TARGET', 'job', 'file_transfer', 'path']}, 'tasks_name_id': {'get_attribute': ['REQ_TARGET', 'job', 'tasks_name_id']}, 'task_name': {'get_property': ['SELF', 'task_name']}, 'destination_directory': {'get_property': ['SELF', 'destination_directory']}}, 'implementation': 'playbooks/copyfromjobtask.yaml'}, 'delete': {'implementation': 'playbooks/noop.yaml'}}}, 'tags': {'icon': 'images/copyfromjob.png'}}}",0
"{'org.lexis.datatransfer.nodes.MoveFile': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Move or rename a file (directories in path must exist)\n', 'properties': {'source_file': {'description': 'Source file', 'type': 'string', 'required': True}, 'destination_file': {'description': 'Destination file', 'type': 'string', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'source_file': {'get_property': ['SELF', 'source_file']}, 'destination_file': {'get_property': ['SELF', 'destination_file']}}, 'implementation': 'playbooks/movefile.yaml'}, 'delete': {'implementation': 'playbooks/noop.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.FindArchiveInStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Find a docker image archive based on given patterns in a staging area directory\n', 'properties': {'patterns': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of file patterns to match\n', 'required': True}}, 'attributes': {'path': {'get_operation_output': ['SELF', 'Standard', 'start', 'PATH']}, 'user': {'get_operation_output': ['SELF', 'Standard', 'start', 'USER']}}, 'capabilities': {'archive_provider': {'type': 'org.ystia.docker.images.capabilities.ArchiveProvider'}}, 'requirements': [{'cloud_area_directory_provider': {'capability': 'org.ddi.capabilities.CloudAreaDirectoryProvider', 'relationship': 'org.ddi.relationships.CloudAreaDirectoryProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'patterns': {'get_property': ['SELF', 'patterns']}, 'directory': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'directory_absolute_path']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'user_name']}}, 'implementation': 'playbooks/find_file.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.FindFileInStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Find one file based on given patterns in a staging area directory\n', 'properties': {'patterns': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of file patterns to match\n', 'required': True}}, 'attributes': {'path': {'get_operation_output': ['SELF', 'Standard', 'start', 'PATH']}, 'user': {'get_operation_output': ['SELF', 'Standard', 'start', 'USER']}}, 'capabilities': {'file_provider': {'type': 'org.lexis.datatransfer.capabilities.FileProvider'}}, 'requirements': [{'cloud_area_directory_provider': {'capability': 'org.ddi.capabilities.CloudAreaDirectoryProvider', 'relationship': 'org.ddi.relationships.CloudAreaDirectoryProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'patterns': {'get_property': ['SELF', 'patterns']}, 'directory': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'directory_absolute_path']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'user_name']}}, 'implementation': 'playbooks/find_file.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.FindFilesInStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Find all files based on given patterns in a staging area directory\n', 'properties': {'patterns': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of file patterns to match\n', 'required': True}}, 'attributes': {'paths': {'get_operation_output': ['SELF', 'Standard', 'start', 'FILES']}, 'user': {'get_operation_output': ['SELF', 'Standard', 'start', 'USER']}}, 'capabilities': {'files_provider': {'type': 'org.lexis.datatransfer.capabilities.FilesProvider'}}, 'requirements': [{'cloud_area_directory_provider': {'capability': 'org.ddi.capabilities.CloudAreaDirectoryProvider', 'relationship': 'org.ddi.relationships.CloudAreaDirectoryProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'start': {'inputs': {'patterns': {'get_property': ['SELF', 'patterns']}, 'directory': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'directory_absolute_path']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'user_name']}}, 'implementation': 'playbooks/find_file.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CreateDirectories': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Create directories on a target', 'properties': {'directories': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of directory to create', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'dirs_to_create': {'get_property': ['SELF', 'directories']}}, 'implementation': 'playbooks/createdirs.yaml'}}}, 'tags': {'icon': 'images/createDirs.png'}}}",0
"{'org.lexis.datatransfer.nodes.DeleteDirectories': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Delete directories on a target', 'properties': {'directories': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of directory to delete', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'dirs_to_delete': {'get_property': ['SELF', 'directories']}}, 'implementation': 'playbooks/deletedirs.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.MountStagingArea': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Mount the Cloud Staging Area on host and create a user with write permission\n', 'properties': {'mount_point': {'description': 'Directory where to mount the cloud staging area file system', 'type': 'string', 'required': True}, 'user_name': {'description': 'name of the user allowed to write in this staging area', 'type': 'string', 'default': 'lexisclouduser'}, 'group_name': {'description': 'name of the group allowed to write in this staging area', 'type': 'string', 'default': 'lexiscloudgroup'}}, 'capabilities': {'mounted_staging_area': {'type': 'org.lexis.datatransfer.capabilities.MountedStagingAreaAccess'}}, 'requirements': [{'cloud_staging_area_access': {'capability': 'org.ddi.capabilities.CloudStagingAreaAccess', 'relationship': 'org.lexis.datatransfer.relationships.MountCloudStagingArea', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'remote_file_system': {'get_attribute': ['REQ_TARGET', 'cloud_staging_area_access', 'remote_file_system']}, 'mount_type': {'get_attribute': ['REQ_TARGET', 'cloud_staging_area_access', 'mount_type']}, 'mount_options': {'get_attribute': ['REQ_TARGET', 'cloud_staging_area_access', 'mount_options']}, 'mount_point': {'get_property': ['SELF', 'mount_point']}, 'user_name': {'get_property': ['SELF', 'user_name']}, 'group_name': {'get_property': ['SELF', 'group_name']}, 'user_id': {'get_attribute': ['REQ_TARGET', 'cloud_staging_area_access', 'user_id']}, 'group_id': {'get_attribute': ['REQ_TARGET', 'cloud_staging_area_access', 'group_id']}}, 'implementation': 'playbooks/setup_cloud_staging_area.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CreateStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Create a directory in the staging area, possibly using a timestamp useful to store results of a workflow run\n', 'properties': {'directory': {'description': 'directory to create in staging area (relative path, will be created if it does not exist)', 'type': 'string', 'required': True}, 'create_timestamp_destination_subdirectory': {'description': 'If true, a subdirectory with the current timestamp will be created under the destination directory', 'type': 'boolean', 'default': False}}, 'attributes': {'staging_area_directory_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'STAGING_AREA_DIRECTORY']}, 'directory_absolute_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'DIRECTORY_ABSOLUTE_PATH']}, 'user_name': {'get_operation_output': ['SELF', 'Standard', 'start', 'USER_NAME']}}, 'capabilities': {'cloud_area_directory_provider': {'type': 'org.ddi.capabilities.CloudAreaDirectoryProvider'}}, 'requirements': [{'mounted_staging_area': {'capability': 'org.lexis.datatransfer.capabilities.MountedStagingAreaAccess', 'relationship': 'org.lexis.datatransfer.relationships.MountedCloudStagingArea', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'directory': {'get_property': ['SELF', 'directory']}, 'create_timestamp_destination_subdirectory': {'get_property': ['SELF', 'create_timestamp_destination_subdirectory']}, 'mount_point': {'get_property': ['REQ_TARGET', 'mounted_staging_area', 'mount_point']}, 'user_name': {'get_property': ['REQ_TARGET', 'mounted_staging_area', 'user_name']}}, 'implementation': 'playbooks/create_staging_area_directory.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CopyFilesToStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy files from a source directory to a staging area directory\n', 'properties': {'source_directory': {'description': 'Source directory', 'type': 'string', 'required': True}, 'source_files_patterns': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of file patterns to copy from source directory\n', 'required': True}, 'destination_subdirectory': {'description': 'Subdirectory in staging area where to store the source directory content', 'type': 'string', 'required': False}}, 'attributes': {'directory_absolute_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'DIRECTORY_ABSOLUTE_PATH']}}, 'capabilities': {'cloud_area_directory_provider': {'type': 'org.ddi.capabilities.CloudAreaDirectoryProvider'}}, 'requirements': [{'cloud_area_directory_provider': {'capability': 'org.ddi.capabilities.CloudAreaDirectoryProvider', 'relationship': 'org.ddi.relationships.CloudAreaDirectoryProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'source_directory': {'get_property': ['SELF', 'source_directory']}, 'destination_subdirectory': {'get_property': ['SELF', 'destination_subdirectory']}, 'destination_directory': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'directory_absolute_path']}, 'source_files_patterns': {'get_property': ['SELF', 'source_files_patterns']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'user_name']}}, 'implementation': 'playbooks/copy_to_staging_area_directory.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CopyToStagingAreaDirectory': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy a source directory to a staging area directory\n', 'properties': {'source_directory': {'description': 'Source directory', 'type': 'string', 'required': True}, 'destination_subdirectory': {'description': 'Subdirectory in staging area where to store the source directory content', 'type': 'string', 'required': False}}, 'attributes': {'directory_absolute_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'DIRECTORY_ABSOLUTE_PATH']}}, 'capabilities': {'cloud_area_directory_provider': {'type': 'org.ddi.capabilities.CloudAreaDirectoryProvider'}}, 'requirements': [{'cloud_area_directory_provider': {'capability': 'org.ddi.capabilities.CloudAreaDirectoryProvider', 'relationship': 'org.ddi.relationships.CloudAreaDirectoryProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'source_directory': {'get_property': ['SELF', 'source_directory']}, 'source_files_patterns': [], 'destination_subdirectory': {'get_property': ['SELF', 'destination_subdirectory']}, 'destination_directory': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'directory_absolute_path']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'cloud_area_directory_provider', 'user_name']}}, 'implementation': 'playbooks/copy_to_staging_area_directory.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CopyToStagingArea': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy a source directory to the staging area\n', 'properties': {'source_directory': {'description': 'Source directory to copy', 'type': 'string', 'required': True}, 'destination_directory': {'description': 'destination directory in staging area (relative path, will be created if it does not exist)', 'type': 'string', 'required': True}, 'create_timestamp_destination_subdirectory': {'description': 'If true, a subdirectory will be created under the destination directory', 'type': 'boolean', 'default': False}}, 'attributes': {'staging_area_directory_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'STAGING_AREA_DIRECTORY']}, 'directory_absolute_path': {'get_operation_output': ['SELF', 'Standard', 'start', 'DIRECTORY_ABSOLUTE_PATH']}}, 'capabilities': {'cloud_area_directory_provider': {'type': 'org.ddi.capabilities.CloudAreaDirectoryProvider'}}, 'requirements': [{'mounted_staging_area': {'capability': 'org.lexis.datatransfer.capabilities.MountedStagingAreaAccess', 'relationship': 'org.lexis.datatransfer.relationships.MountedCloudStagingArea', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'source_directory': {'get_property': ['SELF', 'source_directory']}, 'destination_directory': {'get_property': ['SELF', 'destination_directory']}, 'create_timestamp_destination_subdirectory': {'get_property': ['SELF', 'create_timestamp_destination_subdirectory']}, 'mount_point': {'get_property': ['REQ_TARGET', 'mounted_staging_area', 'mount_point']}, 'user_name': {'get_property': ['REQ_TARGET', 'mounted_staging_area', 'user_name']}}, 'implementation': 'playbooks/copy_to_staging_area.yaml'}}}}}",0
"{'org.lexis.datatransfer.nodes.CopyFromStagingArea': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Copy a file from the staging area (provided by the file provider in this component requirements)\n', 'properties': {'destination_directory': {'description': 'destination directory (will be created if it does not exist)', 'type': 'string', 'required': True}}, 'requirements': [{'file_provider': {'capability': 'org.lexis.datatransfer.capabilities.FileProvider', 'relationship': 'org.lexis.datatransfer.relationships.FileProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'source_path': {'get_attribute': ['REQ_TARGET', 'file_provider', 'path']}, 'user_name': {'get_attribute': ['REQ_TARGET', 'file_provider', 'user']}, 'destination_directory': {'get_property': ['SELF', 'destination_directory']}}, 'implementation': 'playbooks/copy_from_staging_area.yaml'}}}}}",0
"{'org.lexis.examples.events.WaitForEventJob': {'derived_from': 'org.lexis.noscheduler.Job', 'description': 'Waits for a file at a given URL to be non empty and returns its content in the attribute stdout declared in parent type org.lexis.noscheduler.Job\n', 'properties': {'file_url': {'description': 'URL of the file', 'type': 'string', 'required': True}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'submit': {'inputs': {'FILE_URL': {'get_property': ['SELF', 'file_url']}, 'STDOUT_FILE': {'get_property': ['SELF', 'stdout_file_path']}, 'STDERR_FILE': {'get_property': ['SELF', 'stderr_file_path']}}, 'implementation': 'scripts/submit_job.sh'}}}, 'artifacts': [{'script_to_execute': {'type': 'tosca.artifacts.File', 'file': 'scripts/wait_and_get_file_content.sh'}}]}}",0
"{'org.lexis.noscheduler.Job': {'derived_from': 'tosca.nodes.SoftwareComponent', 'abstract': True, 'properties': {'walltime_seconds': {'type': 'integer', 'description': 'Maximum duration in seconds of the job execution (0 means no timeout)', 'default': 0, 'required': False}, 'fail_after_walltime': {'type': 'boolean', 'description': 'Should this job end on failure if not finished after wall time (else ends on success)', 'default': True, 'required': False}, 'stdout_file_path': {'type': 'string', 'description': 'Path to the stdout file produced by the job', 'required': False}, 'stderr_file_path': {'type': 'string', 'description': 'Path to the stderr file produced by the job', 'required': False}}, 'attributes': {'stdout': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'run', 'STDOUT']}, 'stderr': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'run', 'STDERR']}, 'submit_date_epoch': {'get_operation_output': ['SELF', 'tosca.interfaces.node.lifecycle.Runnable', 'submit', 'SUBMIT_DATE_EPOCH']}}, 'interfaces': {'tosca.interfaces.node.lifecycle.Runnable': {'run': {'inputs': {'SUBMIT_DATE_EPOCH': {'get_attribute': ['SELF', 'submit_date_epoch']}, 'WALLTIME': {'get_property': ['SELF', 'walltime_seconds']}, 'FAIL_AFTER_WALLTIME': {'get_property': ['SELF', 'fail_after_walltime']}, 'STDOUT_FILE_PATH': {'get_attribute': ['SELF', 'stdout_file_path']}, 'STDERR_FILE_PATH': {'get_attribute': ['SELF', 'stderr_file_path']}}, 'implementation': 'playbooks/get_job_status.yaml'}, 'cancel': {'implementation': 'playbooks/cancel_job.yaml'}}}}}",0
"{'org.lexis.examples.pi.ComputePI': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Compute PI to a given decimal\n', 'properties': {'decimalsNumber': {'description': 'Number of decimals to compute', 'type': 'integer', 'required': True}}, 'attributes': {'result': {'get_operation_output': ['SELF', 'Standard', 'start', 'pi_value']}}, 'interfaces': {'Standard': {'start': {'inputs': {'number_of_decimals': {'get_property': ['SELF', 'decimalsNumber']}}, 'implementation': 'scripts/compute_pi.py'}}}}}",0
"{'org.lexis.nodes.ContinuumStaticData': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'url': {'type': 'string', 'description': 'URL where to find datasets', 'required': True}, 'dataset': {'type': 'string', 'description': 'zip file containing test data', 'required': True}, 'destination': {'type': 'string', 'description': 'Destination directory where to unzip test data', 'required': True}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'URL': {'get_property': ['SELF', 'url']}, 'DATASET': {'get_property': ['SELF', 'dataset']}, 'DESTINATION': {'get_property': ['SELF', 'destination']}}, 'implementation': 'playbooks/download_testdata.yaml'}}}, 'tags': {'icon': 'images/testsData.png'}}}",0
"{'org.lexis.nodes.Webdrops': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'start_date': {'type': 'string', 'description': 'Download GFS files from this date, format YYYYMMDDHH', 'required': True}, 'download_type': {'type': 'string', 'description': 'Type of download data (RISICO, CONTINUUM or WRFDA)', 'required': True}, 'destination': {'type': 'string', 'description': 'Destination directory where to download data', 'required': True}, 'auth_url': {'type': 'string', 'description': 'Authentication URL', 'default': 'https://testauth.cimafoundation.org/auth/realms/webdrops/protocol/openid-connect/token', 'required': False}, 'url': {'type': 'string', 'description': 'webdrops base URL', 'default': 'http://webdrops.cimafoundation.org/app/', 'required': False}}, 'artifacts': [{'lexisdn': {'type': 'tosca.artifacts.File', 'file': 'bin/lexisdn'}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'START_DATE': {'get_property': ['SELF', 'start_date']}, 'DOWNLOAD_TYPE': {'get_property': ['SELF', 'download_type']}, 'USER': {'get_secret': ['/secret/wp7/webdrops/creds', 'data=user']}, 'PASSWORD': {'get_secret': ['/secret/wp7/webdrops/creds', 'data=password']}, 'DESTINATION_DIRECTORY': {'get_property': ['SELF', 'destination']}, 'AUTH_URL': {'get_property': ['SELF', 'auth_url']}, 'URL': {'get_property': ['SELF', 'url']}}, 'implementation': 'playbooks/download_webdrops_data.yaml'}}}}}",0
"{'org.lexis.nodes.GFSData': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'start_date': {'type': 'string', 'description': 'Download GFS files from this date, format YYYYMMDDHH', 'required': True}, 'end_date': {'type': 'string', 'description': 'Download GFS files up to this date, format YYYYMMDDHH', 'required': True}, 'number_of_past_days': {'type': 'string', 'description': 'Download additional warmup data for this given number of days before the start date', 'required': True}, 'with_data_assimilation': {'type': 'boolean', 'default': False, 'required': False}, 'left_longitude': {'type': 'string', 'description': 'Left longitude'}, 'right_longitude': {'type': 'string', 'description': 'Right longitude'}, 'top_latitude': {'type': 'string', 'description': 'Top latitude'}, 'bottom_latitude': {'type': 'string', 'description': 'Bottom latitude'}, 'output_directory': {'type': 'string', 'description': 'Absolute path to directory where to store donwloaded data'}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}}, 'custom': {'download': {'inputs': {'START_DATE': {'get_property': ['SELF', 'start_date']}, 'END_DATE': {'get_property': ['SELF', 'end_date']}, 'NUMBER_OF_PAST_DAYS': {'get_property': ['SELF', 'number_of_past_days']}, 'WITH_DATA_ASSIMILATION': {'get_property': ['SELF', 'with_data_assimilation']}, 'LEFT_LONGITUDE': {'get_property': ['SELF', 'left_longitude']}, 'RIGHT_LONGITUDE': {'get_property': ['SELF', 'right_longitude']}, 'TOP_LATITUDE': {'get_property': ['SELF', 'top_latitude']}, 'BOTTOM_LATITUDE': {'get_property': ['SELF', 'bottom_latitude']}, 'OUTPUT_DIRECTORY': {'get_property': ['SELF', 'output_directory']}}, 'implementation': 'playbooks/download_gfs.yaml'}}}, 'tags': {'icon': '/images/GFS.png'}}}",0
"{'org.lexis.nodes.GetGEOGDataFromFiles': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Get geographical data from zipped archive files', 'properties': {'output_directory': {'type': 'string', 'description': 'Absolute path to directory where to store geographical data'}}, 'requirements': [{'files_provider': {'capability': 'org.lexis.datatransfer.capabilities.FilesProvider', 'relationship': 'org.lexis.datatransfer.relationships.FilesProvider', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}, 'start': {'inputs': {'FILES': {'get_attribute': ['REQ_TARGET', 'files_provider', 'paths']}, 'USER': {'get_attribute': ['REQ_TARGET', 'files_provider', 'user']}, 'OUTPUT_DIRECTORY': {'get_property': ['SELF', 'output_directory']}}, 'implementation': 'playbooks/get_geog_data_from_files.yaml'}}}, 'tags': {'icon': '/images/GEOG.png'}}}",0
"{'org.lexis.nodes.DownloadGEOGData': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'output_directory': {'type': 'string', 'description': 'Absolute path to directory where to store donwloaded data'}}, 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/noop.yaml'}}, 'custom': {'download': {'inputs': {'OUTPUT_DIRECTORY': {'get_property': ['SELF', 'output_directory']}}, 'implementation': 'playbooks/download_geog.yaml'}}}, 'tags': {'icon': '/images/GEOG.png'}}}",0
"{'org.lexis.nodes.PWSData': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Get data from Personal Weather Stations', 'interfaces': {'Standard': {'create': {'implementation': 'playbooks/install_drops2.yaml'}}}}}",0
"{'org.alien4cloud.nodes.MesosMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Mesos master agent.\n', 'tags': {'icon': '/images/mesos_icon.png'}, 'properties': {'firewall_rules': {'type': 'string', 'required': False}, 'hooks': {'type': 'string', 'required': False, 'description': 'A comma-separated list of hook modules to be installed inside master/slave.\n'}, 'modules': {'type': 'string', 'required': False, 'description': 'List of modules in a JSON-format to be loaded and be available to the internal subsystems.\n'}, 'work_dir': {'type': 'string', 'default': '/var/lib/mesos'}, 'log_dir': {'type': 'string', 'default': '/var/log/mesos', 'required': False}, 'port': {'type': 'integer', 'default': 5050}, 'cluster_name': {'type': 'string', 'default': 'Mesos cluster', 'required': False}}, 'artifacts': [{'zoo_config': {'file': 'artifacts/zoo.cfg', 'type': 'tosca.artifacts.File'}}], 'attributes': {'external_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':', {'get_property': ['SELF', 'port']}]}, 'master_url': {'concat': ['zk://', {'get_operation_output': ['SELF', 'Standard', 'configure', 'zk_endpoints']}, '/mesos']}, 'zk_endpoints': {'get_operation_output': ['SELF', 'Standard', 'configure', 'zk_endpoints']}}, 'capabilities': {'master': 'org.alien4cloud.capabilities.MesosMaster', 'host': 'org.alien4cloud.capabilities.MesosMasterHost'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'rhel', 'ubuntu', 'centos']}}]}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'OS_DISTR': {'get_property': ['HOST', 'os', 'distribution']}, 'OS_VERS': {'get_property': ['HOST', 'os', 'version']}, 'IP': {'get_attribute': ['HOST', 'ip_address']}, 'MESOS_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/install_mesos.sh'}, 'configure': {'inputs': {'MESOS_CLUSTER': {'get_property': ['SELF', 'cluster_name']}, 'MESOS_IP': {'get_attribute': ['HOST', 'ip_address']}, 'MESOS_PORT': {'get_property': ['SELF', 'port']}, 'MESOS_HOSTNAME': {'get_attribute': ['HOST', 'public_ip_address']}, 'MESOS_WORK_DIR': {'get_property': ['SELF', 'work_dir']}, 'MESOS_LOG_DIR': {'get_property': ['SELF', 'log_dir']}}, 'implementation': 'scripts/master/configure.sh'}, 'start': {'implementation': 'scripts/master/start.sh'}, 'stop': {'implementation': 'scripts/master/stop.sh'}}}}}",unknown
"{'org.alien4cloud.nodes.MesosSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'A Mesos slave agent.\n', 'tags': {'icon': '/images/mesos_icon.png'}, 'properties': {'firewall_rules': {'type': 'string', 'required': False}, 'hooks': {'type': 'string', 'required': False, 'description': 'A comma-separated list of hook modules to be installed inside master/slave.\n'}, 'modules': {'type': 'string', 'required': False, 'description': 'List of modules in a JSON-format to be loaded and be available to the internal subsystems.\n'}, 'log_dir': {'type': 'string', 'default': '/var/log/mesos', 'required': False}, 'port': {'type': 'integer', 'default': 5051}, 'attributes': {'type': 'string', 'description': 'Attributes of the slave machine, in the form: rack:2 or rack:2;u:1\n', 'required': False}, 'isolation': {'type': 'string', 'required': True, 'default': 'posix/cpu,posix/mem', 'constraints': [{'valid_values': ['posix/cpu,posix/mem', 'cgroups/cpu,cgroups/mem']}]}, 'work_dir': {'type': 'string', 'required': False, 'default': '/var/lib/mesos'}}, 'interfaces': {'Standard': {'create': {'inputs': {'OS_DISTR': {'get_property': ['HOST', 'os', 'distribution']}, 'OS_VERS': {'get_property': ['HOST', 'os', 'version']}, 'IP': {'get_attribute': ['HOST', 'ip_address']}, 'MESOS_VERSION': {'get_property': ['SELF', 'component_version']}}, 'implementation': 'scripts/install_mesos.sh'}, 'configure': {'inputs': {'MESOS_IP': {'get_attribute': ['HOST', 'ip_address']}, 'MESOS_PORT': {'get_property': ['SELF', 'port']}, 'MESOS_HOSTNAME': {'get_attribute': ['HOST', 'public_ip_address']}, 'MESOS_LOG_DIR': {'get_property': ['SELF', 'log_dir']}, 'MESOS_WORK_DIR': {'get_property': ['SELF', 'work_dir']}, 'MESOS_ISOLATION': {'get_property': ['SELF', 'isolation']}}, 'implementation': 'scripts/slave/configure.sh'}, 'start': {'implementation': 'scripts/slave/start.sh'}, 'stop': {'implementation': 'scripts/slave/stop.sh'}}}, 'capabilities': {'host': 'org.alien4cloud.capabilities.MesosSlaveHost'}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1], 'node_filter': {'capabilities': [{'tosca.capabilities.OperatingSystem': {'properties': [{'type': {'equal': 'linux'}}, {'architecture': {'equal': 'x86_64'}}, {'distribution': {'valid_values': ['debian', 'rhel', 'ubuntu', 'centos']}}]}}]}}}, {'master': {'capability': 'org.alien4cloud.capabilities.MesosMaster', 'relationship': 'org.alien4cloud.relationships.MesosSlaveConnectsToMaster', 'occurrences': [1, 1]}}, {'docker_cli': {'capability': 'org.alien4cloud.capabilities.DockerCLI', 'relationship': 'org.alien4cloud.relationships.MesosSlaveDependsOnDocker', 'occurrences': [0, 1]}}, {'dns_server': {'capability': 'org.alien4cloud.capabilities.MesosDNS', 'relationship': 'org.alien4cloud.relationships.MesosSlaveConnectsToDNS', 'occurrences': [0, 'unbounded']}}]}}",unknown
"{'org.alien4cloud.nodes.Marathon': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': ""Marathon scheduler. NB: This component requires Oracle's Java 8. The Oracle licence is therefore implicitly accepted. The licence can be found here: http://www.oracle.com/technetwork/java/javase/downloads/thirdpartylicensereadme-java8-2168078.txt.\n"", 'tags': {'icon': 'images/marathon_icon.png'}, 'properties': {'version': {'type': 'string', 'required': True, 'default': '1.3.10-1.0.627'}}, 'attributes': {'external_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8080/ui']}, 'api_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8080/v2']}}, 'capabilities': {'marathon': 'org.alien4cloud.capabilities.MarathonMaster', 'host': 'org.alien4cloud.capabilities.MarathonHost'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.MesosMasterHost', 'relationship': 'org.alien4cloud.relationships.MarathonHostedOnMaster', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'create': {'inputs': {'OS': {'get_property': ['HOST', 'os', 'distribution']}, 'OS_VERS': {'get_property': ['HOST', 'os', 'version']}, 'MARATHON_VERSION': {'get_property': ['SELF', 'version']}}, 'implementation': 'scripts/marathon/install.sh'}, 'start': {'inputs': {'MARATHON_MASTER': {'get_attribute': ['HOST', 'master_url']}, 'MARATHON_HOSTNAME': {'get_attribute': ['HOST', 'public_ip_address']}, 'MARATHON_ZK': {'concat': ['zk://', {'get_attribute': ['HOST', 'zk_endpoints']}, '/marathon']}}, 'implementation': 'scripts/marathon/start.sh'}, 'stop': 'scripts/marathon/stop.sh'}}}}",0
"{'org.alien4cloud.nodes.MesosDNS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'DNS service for Mesos clusters.', 'properties': {'cpu_alloc': {'type': 'float', 'required': True, 'default': 1.0}, 'mem_alloc': {'type': 'integer', 'required': True, 'default': 512}}, 'capabilities': {'dns_server': 'org.alien4cloud.capabilities.MesosDNS'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.MesosSlaveHost', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'marathon': {'capability': 'org.alien4cloud.capabilities.MarathonMaster', 'relationship': 'org.alien4cloud.relationships.MesosDNSConnectsToMaster', 'occurrences': [1, 1]}}], 'artifacts': [{'dns_config': {'file': 'artifacts/mesos-dns-config.json', 'type': 'tosca.artifacts.File'}}, {'marathon_template': {'file': 'artifacts/mesos-dns-template.json', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'create': 'scripts/service-discovery/install-mesosdns.sh', 'configure': {'inputs': {'SLAVE_LOCAL_IP': {'get_attribute': ['HOST', 'ip_address']}, 'SLAVE_IP': {'get_attribute': ['HOST', 'public_ip_address']}, 'CPU_ALLOC': {'get_property': ['SELF', 'cpu_alloc']}, 'MEM_ALLOC': {'get_property': ['SELF', 'mem_alloc']}}, 'implementation': 'scripts/service-discovery/configure-mesosdns.sh'}, 'start': 'scripts/service-discovery/start-mesosdns.sh'}}}}",0
"{'org.alien4cloud.nodes.MarathonLB': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Marathon load-balancer for Mesos clusters.', 'properties': {'instances': {'type': 'integer', 'required': True, 'default': 1}, 'cpu_alloc': {'type': 'float', 'required': True, 'default': 1.0}, 'mem_alloc': {'type': 'integer', 'required': True, 'default': 512}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.MarathonHost', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'artifacts': [{'marathon_template': {'file': 'artifacts/marathon-lb-template.json', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'configure': {'inputs': {'NB_INST': {'get_property': ['SELF', 'instances']}, 'CPU_ALLOC': {'get_property': ['SELF', 'cpu_alloc']}, 'MEM_ALLOC': {'get_property': ['SELF', 'mem_alloc']}, 'MARATHON_API': {'get_attribute': ['HOST', 'api_url']}}, 'implementation': 'scripts/service-discovery/configure-marathonlb.sh'}, 'start': 'scripts/service-discovery/start-marathonlb.sh'}}}}",0
"{'org.alien4cloud.nodes.RexrayClient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Docker volume driver plugin for external storage management.', 'properties': {'storage_service': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.DockerHost', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'libstorage_server': {'capability': 'org.alien4cloud.capabilities.LibStorageServer', 'relationship': 'org.alien4cloud.relationships.RexrayConnectsToLibStorage'}}], 'artifacts': [{'rexray_config': {'file': 'artifacts/rexray_config.yml', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'create': 'scripts/rexray/create.sh', 'configure': {'inputs': {'STORAGE_SERVICE': {'get_property': ['SELF', 'storage_service']}}, 'implementation': 'scripts/rexray/configure_client.sh'}, 'start': 'scripts/rexray/start.sh'}}}}",0
"{'org.alien4cloud.nodes.RexrayServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Serves as a centralized libStorage server for Rexray clients', 'capabilities': [{'libstorage_server': 'org.alien4cloud.capabilities.LibStorageServer'}], 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}], 'artifacts': [{'rexray_config': {'type': 'tosca.artifacts.File'}}], 'interfaces': {'Standard': {'create': 'scripts/rexray/create.sh', 'start': 'scripts/rexray/start.sh'}}}}",0
"{'org.alien4cloud.nodes.AuroraScheduler': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Aurora Scheduler\n', 'tags': {'icon': 'images/aurora_icon.png'}, 'properties': {'cluster_name': {'type': 'string', 'required': True, 'default': 'devcluster'}}, 'attributes': {'external_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_ip_address']}, ':8081/scheduler']}}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.MesosMaster', 'relationship': 'org.alien4cloud.relationships.AuroraSchedulerHostedOnMaster', 'occurrences': [1, 1], 'node_filter': {'properties': [{'component_version': {'equal': '0.25.0-0.2.70'}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'OS': {'get_property': ['HOST', 'os', 'distribution']}}, 'implementation': 'scripts/install_scheduler.sh'}, 'configure': {'inputs': {'AURORA_ZK_ENDPOINTS': {'get_attribute': ['HOST', 'zk_endpoints']}, 'AURORA_MESOS_MASTER': {'get_attribute': ['HOST', 'master_url']}, 'AURORA_CLUSTER_NAME': {'get_property': ['SELF', 'cluster_name']}, 'HOSTNAME': {'get_attribute': ['HOST', 'public_ip_address']}}, 'implementation': 'scripts/configure_scheduler.sh'}, 'start': {'inputs': {'OS': {'get_property': ['HOST', 'os', 'distribution']}}, 'implementation': 'scripts/start_scheduler.sh'}, 'stop': {'inputs': {'OS': {'get_property': ['HOST', 'os', 'distribution']}}, 'implementation': 'scripts/stop_scheduler.sh'}}}}}",0
"{'org.alien4cloud.nodes.AuroraExecutor': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Aurora Executor\n', 'tags': {'icon': 'images/aurora_icon.png'}, 'requirements': [{'host': {'capability': 'org.alien4cloud.capabilities.MesosSlaveHost', 'relationship': 'org.alien4cloud.relationships.AuroraExecutorHostedOnSlave', 'occurrences': [1, 1], 'node_filter': {'properties': [{'component_version': {'equal': '0.25.0-0.2.70'}}]}}}], 'interfaces': {'Standard': {'create': {'inputs': {'OS': {'get_property': ['HOST', 'os', 'distribution']}}, 'implementation': 'scripts/install_executor.sh'}, 'configure': {'inputs': {'MESOS_WORK_DIR': {'get_property': ['HOST', 'work_dir']}}, 'implementation': 'scripts/configure_executor.sh'}}}}}",0
"{'aspide.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'description': 'The ASPIDE Root Type', 'tags': {'icon': 'images/aspide.png'}}}",0
"{'aspide.nodes.Cnode': {'derived_from': 'tosca.nodes.Compute', 'description': 'Abstract ASPDIE single compute type', 'tags': {'icon': 'images/cnode.png'}, 'capabilities': [{'host': 'aspide.capabilities.Cnode'}, {'attach': 'aspide.capabilities.Attachment'}]}}",0
"{'aspide.nodes.Carea': {'derived_from': 'aspide.nodes.Cnode', 'description': 'Abstract ASPDIE compute area type', 'tags': {'icon': 'images/carea.png'}, 'properties': {'numNodes': {'type': 'integer', 'default': 2, 'required': True}}, 'capabilities': [{'host': 'aspide.capabilities.Carea'}]}}",0
"{'aspide.nodes.Task': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'Abstract ASPIDE Task', 'abstract': True, 'tags': {'icon': 'images/task.png'}, 'requirements': [{'host': {'capability': 'aspide.capabilities.Cnode', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}, {'input': {'capability': 'aspide.capabilities.DataInput', 'relationship': 'aspide.relationships.InputFrom', 'occurrences': [0, 1]}}, {'output': {'capability': 'aspide.capabilities.DataOutput', 'relationship': 'aspide.relationships.OutputTo', 'occurrences': [0, 1]}}], 'interfaces': {'DCEX': {'execute': 'scripts/main.dcx'}}}}",0
"{'aspide.nodes.DemoTask': {'derived_from': 'aspide.nodes.Task', 'description': 'Demo ASPIDE Task', 'tags': {'icon': 'images/task.png'}}}",0
"{'aspide.nodes.TaskPool': {'derived_from': 'aspide.nodes.Task', 'description': 'Abstract ASPIDE Task Pool', 'abstract': True, 'tags': {'icon': 'images/taskpool.png'}, 'requirements': [{'host': {'capability': 'aspide.capabilities.Carea', 'relationship': 'tosca.relationships.HostedOn', 'occurrences': [1, 1]}}]}}",0
"{'aspide.nodes.DemoTaskPool': {'derived_from': 'aspide.nodes.TaskPool', 'description': 'Demo ASPIDE Task Pool', 'tags': {'icon': 'images/taskpool.png'}}}",0
"{'aspide.nodes.Data': {'derived_from': 'aspide.nodes.Root', 'description': 'The base Data type', 'tags': {'icon': '/images/data.png'}, 'properties': {'id': {'type': 'string', 'default': '/home/data', 'required': True}}, 'capabilities': {'input': 'aspide.capabilities.DataInput', 'output': 'aspide.capabilities.DataOutput'}, 'requirements': [{'attachment': {'capability': 'aspide.capabilities.Attachment', 'relationship': 'aspide.relationships.AttachData'}}]}}",0
"{'tosca.nodes.Root': {'abstract': True, 'description': 'This is the default (root) TOSCA Node Type that all other TOSCA nodes should extends. This allows all TOSCA nodes to have a consistent set of features for modeling and management (e.g, consistent definitions for requirements, capabilities, and lifecycle interfaces).\n', 'tags': {'icon': '/images/root.png'}, 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Node Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Node Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the node instance. See section “Node States” for allowed values.', 'default': 'initial'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}], 'interfaces': {'tosca.interfaces.node.lifecycle.Standard': {'description': 'This lifecycle interface defines the essential, normative operations that TOSCA nodes may support.\n', 'create': {'description': 'Standard lifecycle create operation.'}, 'configure': {'description': 'Standard lifecycle configure operation.'}, 'start': {'description': 'Standard lifecycle start operation.'}, 'stop': {'description': 'Standard lifecycle stop operation.'}, 'delete': {'description': 'Standard lifecycle delete operation.'}}}}}",0
"{'tosca.nodes.Compute': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Compute node represents one or more real or virtual processors of software applications or services along with other essential local resources. Collectively, the resources the compute node represents can logically be viewed as a (real or virtual) “server”.\n', 'tags': {'icon': '/images/compute.png'}, 'attributes': {'ip_address': {'type': 'string', 'description': 'The primary private IP address assigned by the cloud provider that applications may use to access the Compute node.'}, 'public_ip_address': {'type': 'string', 'description': 'The primary public IP address assigned by the cloud provider that applications may use to access the Compute node.'}}, 'requirements': [{'network': 'tosca.capabilities.Connectivity', 'occurrences': [0, 'UNBOUNDED']}], 'capabilities': {'attach': 'tosca.capabilities.Attachment', 'host': {'type': 'tosca.capabilities.Container'}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Network': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Network node represents a simple, logical network service.\n', 'properties': {'ip_version': {'type': 'integer', 'required': False, 'default': 4, 'constraints': [{'valid_values': [4, 6]}]}, 'cidr': {'type': 'string', 'required': False}, 'gateway_ip': {'type': 'string', 'required': False}, 'network_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': False}}, 'capabilities': {'connection': {'type': 'tosca.capabilities.Connectivity'}}, 'tags': {'icon': '/images/network.png'}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA SoftwareComponent node represents a generic software component that can be managed and run by a TOSCA Compute Node Type.', 'tags': {'icon': '/images/software.png'}, 'properties': {'component_version': {'type': 'version', 'description': 'The optional software component’s version.', 'required': False}}, 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'This TOSCA WebServer Node Type represents an abstract software component or service that is capable of hosting and providing management operations for one or more WebApplication nodes.\n', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/network.png'}, 'description': 'The TOSCA WebApplication node represents a software application that can be managed and run by a TOSCA WebServer node. Specific types of web applications such as Java, etc. could be derived from this type.\n', 'properties': {'context_root': {'type': 'string', 'description': 'The web application’s context root which designates the application’s URL path within the web server it is hosted on.'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'The TOSCA DBMS node represents a typical relational, SQL Database Management System software component or service.', 'tags': {'icon': '/images/relational_db.png'}, 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'tags': {'icon': '/images/relational_db.png'}, 'description': 'The TOSCA Database node represents a logical database that can be managed and hosted by a TOSCA DBMS node.', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.BlockStorage': {'abstract': True, 'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA BlockStorage node currently represents a server-local block storage device (i.e., not shared) offering evenly sized blocks of data from which raw storage volumes can be created.\n', 'tags': {'icon': '/images/volume.png'}, 'properties': {'size': {'type': 'scalar-unit.size', 'description': 'The requested storage size (default unit is MB). Note: - Required when an existing volume (i.e., volume_id) is not available. - If volume_id is provided, size is ignored.  Resize of existing volumes is not considered at this time.\n', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'description': 'ID of an existing volume (that is in the accessible scope of the requesting application).', 'required': False}, 'snapshot_id': {'type': 'string', 'description': 'Some identifier that represents an existing snapshot that should be used when creating the block storage (volume).', 'required': False}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’ Note: this property will be moved in next releases to the AttachTo relationship as it is specified by TOSCA spec.\n', 'required': False}}, 'requirements': [{'attachment': 'tosca.capabilities.Attachment'}]}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Container Application node represents an application that requires Container-level virtualization technology.\n', 'requirements': [{'host': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn'}]}}",0
"{'tosca.nodes.LoadBalancer': {'derived_from': 'tosca.nodes.Root', 'description': 'The TOSCA Load Balancer node represents logical function that be used in conjunction with a Floating Address to distribute an application’s traffic (load) across a number of instances of the application (e.g., for a clustered or scaled application).\n', 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED'], 'description': 'the Floating (IP) client’s on the public network can connect to'}}, 'requirements': [{'application': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED'], 'description': 'Connection to one or more load balanced applications'}]}}",0
"{'my_node_type': {'attributes': {'open_api_response_code': {'type': 'open_api_response_code_type'}, 'open_api_response_description': {'type': 'string'}, 'pet': {'type': 'Pet'}}, 'interfaces': {'management': {'type': 'pet_store', 'operations': {'addPet': {'description': 'Add a new pet to the store Add a new pet to the store', 'outputs': {'open_api_responses_value': ['SELF', 'open_api_response_code'], 'open_api_responses_description': ['SELF', 'open_api_response_description'], 'open_api_responses.200.content.application.json': ['SELF', 'pet']}}, 'updatePet': {'description': 'Update an existing pet Update an existing pet by Id'}, 'findPetsByStatus': {'description': 'Finds Pets by status Multiple status values can be provided with comma separated strings'}}}}, 'artifacts': {'oda_definition': {'description': 'ODA component definition file for my_node_type', 'type': 'tmforum.oda.definition', 'file': 'my_node_type_oda_file.yaml'}}}}",0
"{'tosca.nodes.containers.docker.app': {'derived_from': 'tosca.nodes.Root', 'properties': {'docker_daemon_url': {'type': 'string', 'required': True}, 'name': {'type': 'string'}, 'image': {'type': 'string'}, 'port_binding': {'type': 'map'}, 'environment': {'type': 'map'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'docker_plugin.tasks.create'}, 'start': {'implementation': 'docker_plugin.tasks.start', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}, 'stop': {'implementation': 'docker_plugin.tasks.stop', 'inputs': {'task_retries': 30, 'task_retry_interval': 10}}, 'delete': {'implementation': 'docker_plugin.tasks.delete'}}}}}",0
"{'tosca.nodes.Container.Application.AFA': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'proxy': 'tosca.capabilities.Endpoint'}, {'boxoffice-database': 'tosca.capabilities.Endpoint'}, {'wordpress-database': 'tosca.capabilities.Endpoint'}, {'wordpress': None, 'node': 'tosca.nodes.Container.Application.WordPress', 'relationships': 'HostedOn'}]}}",0
"{'tosca.nodes.Container.Application.CachingService': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'wordpress-database': 'tosca.capabilities.Endpoint'}, {'boxoffice-database': 'tosca.capabilities.Endpoint'}, {'external-database': 'tosca.capabilities.Endpoint'}, {'gmail-api-url': 'tosca.capabilities.Endpoint'}, {'wordpress': None, 'node': 'tosca.nodes.Container.Application.WordPress', 'relationships': 'HostedOn'}]}}",0
"{'tosca.nodes.Container.Application.WordPress': {'derived_from': 'tosca.nodes.Container.Application', 'requirements': [{'container': None, 'capability': 'tosca.capabilities.Endpoint', 'node': 'tosca.nodes.Container.Application.Docker.Container', 'relationships': 'HostedOn'}], 'capabilities': {'wordpress': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Container.Application.Docker.Container': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'capabilities': {'container': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Container.Application.Docker.AFA': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'requirements': [{'proxy': 'tosca.capabilities.Endpoint'}, {'boxoffice-database': 'tosca.capabilities.Endpoint'}, {'wordpress-database': 'tosca.capabilities.Endpoint'}]}}",0
"{'tosca.nodes.Container.Application.Docker.CachingService': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'requirements': [{'wordpress-database': 'tosca.capabilities.Endpoint'}, {'boxoffice-database': 'tosca.capabilities.Endpoint'}, {'external-database': 'tosca.capabilities.Endpoint'}, {'gmail-api-url': 'tosca.capabilities.Endpoint'}]}}",0
"{'tosca.nodes.Root': {'metadata': {'shorthand_name': 'Root', 'type_qualified_name': 'tosca:Root', 'type_uri': 'tosca.nodes.Root'}, 'derived_from': 'tosca.entity.Root', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}}}",0
"{'tosca.nodes.Compute': {'metadata': {'shorthand_name': 'Compute', 'type_qualified_name': 'tosca:Compute', 'type_uri': 'tosca.nodes.Compute'}, 'derived_from': 'tosca.nodes.Root', 'attributes': {'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'networks': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.NetworkInfo'}}, 'ports': {'type': 'map', 'entry_schema': {'type': 'tosca.datatypes.network.PortInfo'}}}, 'requirements': [{'local_storage': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.BlockStorage', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.SoftwareComponent']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint.Admin'}, 'os': {'type': 'tosca.capabilities.OperatingSystem'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}, 'binding': {'type': 'tosca.capabilities.network.Bindable'}}}}",0
"{'tosca.nodes.SoftwareComponent': {'metadata': {'shorthand_name': 'SoftwareComponent', 'type_qualified_name': 'tosca:SoftwareComponent', 'type_uri': 'tosca.nodes.SoftwareComponent'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'type': 'version', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'metadata': {'shorthand_name': 'WebServer', 'type_qualified_name': 'tosca:WebServer', 'type_uri': 'tosca.nodes.WebServer'}, 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'metadata': {'shorthand_name': 'WebApplication', 'type_qualified_name': 'tosca:WebApplication', 'type_uri': 'tosca.nodes.WebApplication'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'type': 'string', 'required': False}, 'port': {'type': 'integer', 'required': False}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'metadata': {'shorthand_name': 'Database', 'type_qualified_name': 'tosca:Database', 'type_uri': 'tosca.nodes.Database'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'port': {'type': 'integer'}, 'user': {'type': 'string', 'required': False}, 'password': {'type': 'string', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'metadata': {'shorthand_name': 'ObjectStorage', 'type_qualified_name': 'tosca:ObjectStorage', 'type_uri': 'tosca.nodes.ObjectStorage'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}, 'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Storage.BlockStorage': {'metadata': {'shorthand_name': 'BlockStorage', 'type_qualified_name': 'tosca:BlockStorage', 'type_uri': 'tosca.nodes.BlockStorage'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Runtime': {'metadata': {'shorthand_name': 'Container.Runtime', 'type_qualified_name': 'tosca:Container.Runtime', 'type_uri': 'tosca.nodes.Container.Runtime'}, 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}}}",0
"{'tosca.nodes.Container.Application': {'metadata': {'shorthand_name': 'Container.Application', 'type_qualified_name': 'tosca:Container.Application', 'type_uri': 'tosca.nodes.Container.Application'}, 'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.EndPoint'}}]}}",0
"{'tosca.nodes.LoadBalancer': {'metadata': {'shorthand_name': 'LoadBalancer', 'type_qualified_name': 'tosca:LoadBalancer', 'type_uri': 'tosca.nodes.LoadBalancer'}, 'derived_from': 'tosca.nodes.Root', 'properties': {'algorithm': {'type': 'string', 'required': False, 'status': 'experimental'}}, 'capabilities': {'client': {'type': 'tosca.capabilities.Endpoint.Public', 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'application': {'capability': 'tosca.capabilities.Endpoint', 'relationship': 'tosca.relationships.RoutesTo', 'occurrences': [0, 'UNBOUNDED']}}]}}",0
"{'my.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}, 'public_address': {'type': 'string', 'description': 'OpenStack ip of the VM'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}, 'image': {'default': {'get_property': ['SELF', 'image']}}, 'flavor': {'default': {'get_property': ['SELF', 'flavor']}}, 'network': {'default': {'get_property': ['SELF', 'network']}}, 'key_name': {'default': {'get_property': ['SELF', 'key_name']}}}, 'implementation': 'nodetypes/vm/create.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'nodetypes/vm/delete.yml'}}}}}",0
{'radon.nodes.abstract.DataPipeline': {'derived_from': 'tosca.nodes.Root'}},0
"{'radon.nodes.nifi.Nifi': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'component_version': {'description': 'The version of Apache Nifi', 'required': True}, 'port': {'description': 'The port exposed by Apache Nifi', 'required': True, 'default': 8080}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPlatform/files/create.yml'}, 'start': {'implementation': 'nodetypes/radon/nodes/nifi/NiFiPlatform/files/start.yml'}, 'stop': {'implementation': 'nodetypes/radon/nodes/nifi/NiFiPlatform/files/stop.yml'}, 'delete': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPlatform/files/delete.yml'}, 'configure': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPlatform/files/configure.yml'}}}}}",0
"{'radon.nodes.nifi.NiFiPipeline': {'derived_from': 'radon.nodes.abstract.DataPipeline', 'properties': {'template_file': {'type': 'string', 'description': 'XML implementation of the pipeline'}, 'template_name': {'type': 'string', 'description': 'name of the pipeline'}, 'cred_file_path': {'type': 'string', 'description': 'credential file for access and secret key'}, 'object_name': {'type': 'string', 'description': 'object name in the process group'}}, 'artifacts': {'pipeline_template': {'description': 'The pipeline template XML file', 'type': 'tosca.artifacts.File'}}, 'attributes': {'id': {'type': 'string', 'description': 'Unique ID of the pipeline'}, 'ids_file': {'type': 'string', 'description': 'This is a file containing a list of ids in JSON format. This file will be used to start each processor'}, 'pipeline_type': {'type': 'string', 'description': 'type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.nifi.Nifi', 'relationship': 'tosca.relationships.HostedOn'}}, {'connect': {'capability': 'tosca.capabilities.Endpoint', 'node': 'radon.nodes.nifi.NifiPipeline', 'relationship': 'tosca.relationships.ConnectsTo'}}], 'capabilities': {'connect': {'type': 'tosca.capabilities.Endpoint', 'description': 'Capability to receive data from other pipeline nodes', 'valid_source_type': ['radon.nodes.nifi.NifiPipeline']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'template_file': {'default': {'get_property': ['SELF', 'template_file']}}, 'template_name': {'default': {'get_property': ['SELF', 'template_name']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPipeline/files/create.yml'}, 'start': {'inputs': {'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPipeline/files/start.yml'}, 'stop': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPipeline/files/stop.yml'}, 'configure': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}, 'cred_file_path': {'default': {'get_property': ['SELF', 'cred_file_path']}}, 'object_name': {'default': {'get_property': ['SELF', 'object_name']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPipeline/files/configure.yml'}, 'delete': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/NiFiPipeline/files/delete.yml'}}}}}",0
"{'radon.nodes.abstract.DataPipeline': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}}, 'artifacts': {'deployment_package': {'description': 'The deployment package for the pipeline', 'type': 'radon.artifacts.archive.Zip'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'radon.nodes.abstract.CloudPlatform'}}]}}",0
"{'radon.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}, 'public_address': {'type': 'string', 'description': 'OpenStack ip of the VM'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}, 'image': {'default': {'get_property': ['SELF', 'image']}}, 'flavor': {'default': {'get_property': ['SELF', 'flavor']}}, 'network': {'default': {'get_property': ['SELF', 'network']}}, 'key_name': {'default': {'get_property': ['SELF', 'key_name']}}}, 'implementation': 'nodetypes/vm/create.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'nodetypes/vm/delete.yml'}}}}}}",0
"{'radon.nodes.nifi.Nifi': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'component_version': {'description': 'The version of Apache Nifi', 'type': 'string', 'required': True}, 'port': {'description': 'The port exposed by Apache Nifi', 'required': True, 'type': 'string', 'default': 8080}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/create.yml'}, 'start': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/start.yml'}, 'stop': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/stop.yml'}, 'delete': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/delete.yml'}, 'configure': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/configure.yml'}}}}}}",0
"{'radon.nodes.nifi.nifipipeline': {'derived_from': 'radon.nodes.abstract.DataPipeline', 'properties': {'template_file': {'type': 'string', 'description': 'XML implementation of the pipeline'}, 'template_name': {'type': 'string', 'description': 'name of the pipeline'}, 'cred_file_path': {'type': 'string', 'description': 'credential file for access and secret key'}, 'object_name': {'type': 'string', 'description': 'object name in the process group'}}, 'attributes': {'id': {'type': 'string', 'description': 'Unique ID of the pipeline'}, 'pipeline_type': {'type': 'string', 'description': 'type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.nifi.Nifi', 'relationship': 'tosca.relationships.HostedOn'}}, {'connectToPipeline': {'capability': 'tosca.capabilities.Endpoint', 'node': 'radon.nodes.nifi.nifipipeline', 'relationship': 'radon.relationships.datapipelines.ConnectNiFi', 'occurrences': [0, 1]}}], 'capabilities': {'connectToPipeline': {'type': 'tosca.capabilities.Endpoint', 'description': 'Capability to receive data from other pipeline nodes', 'valid_source_types': ['radon.nodes.nifi.nifipipeline'], 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'template_file': {'default': {'get_property': ['SELF', 'template_file']}}, 'template_name': {'default': {'get_property': ['SELF', 'template_name']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/create.yml'}, 'start': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/start.yml'}, 'stop': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/stop.yml'}, 'configure': {'inputs': {'cred_file_path': {'default': {'get_property': ['SELF', 'cred_file_path']}}, 'object_name': {'default': {'get_property': ['SELF', 'object_name']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/configure.yml'}, 'delete': {'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}, 'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/delete.yml'}}}}}}",0
"{'radon.nodes.nifi.NifiPlatform': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'version': {'type': 'string', 'description': 'the version of Nifi to be'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'version']}}}, 'implementation': 'files/create.yml'}, 'start': {'implementation': 'files/start.yml'}, 'stop': {'implementation': 'files/stop.yml'}, 'configure': {'implementation': 'files/configure.yml'}, 'delete': {'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'version']}}}, 'implementation': 'files/delete.yml'}}}}}",0
"{'radon.nodes.nifi.NiFiPipeline': {'derived_from': 'radon.nodes.abstract.DataPipeline', 'properties': {'template_file': {'type': 'string', 'description': 'XML implementation of the pipeline'}, 'template_name': {'type': 'string', 'description': 'name of the pipeline'}}, 'attributes': {'id': {'type': 'string', 'description': 'unique id of the pipeline'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.Nifi', 'relationship': 'tosca.relationships.HostedOn'}}, {'connect': {'relationship': 'tosca.relationships.ConnectsTo', 'capability': 'tosca.capabilities.Endpoint'}}], 'capabilities': {'connect': {'type': 'tosca.capabilities.Endpoint', 'description': 'has the capability fo receiving data from other pipelines. The number of pipelines ranges from 0 to infinite'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'template_file': {'default': {'get_property': ['SELF', 'template_file']}}, 'template_name': {'default': {'get_property': ['SELF', 'template_name']}}}, 'implementation': 'files/create.yml'}, 'start': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'files/start.yml'}, 'stop': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'files/stop.yml'}, 'configure': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'files/configure.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'files/delete.yml'}}}}}",0
"{'radon.nodes.function_deploy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'function_app_name': {'type': 'string', 'description': 'Name of the existing function application'}, 'node_ip': {'type': 'string', 'description': 'IP of the target node'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group'}, 'function_name': {'type': 'string', 'description': 'Name of the brand new Azure function'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}, 'location': {'type': 'string', 'description': 'Resurce location'}}, 'attributes': {'function_app_name': {'type': 'string'}, 'node_ip': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}, 'location': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}, 'location': {'default': {'get_property': ['SELF', 'location']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['functions']}}}}}}}",0
"{'radon.nodes.container_create': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'container_in_name': {'type': 'string', 'description': 'The name of the incoming Azure container'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group to use'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account to use'}, 'location': {'type': 'string', 'description': 'Resurce location'}}, 'attributes': {'container_in_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'location': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'container_in_name': {'default': {'get_property': ['SELF', 'container_in_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'location': {'default': {'get_property': ['SELF', 'location']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",0
"{'radon.nodes.container_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'node_ip': {'type': 'string', 'description': 'IP of the VM running the OpenFaaS'}, 'container_in_name': {'type': 'string', 'description': 'The name container with incoming blobs'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group'}, 'function_app_name': {'type': 'string', 'description': 'Name of the existing function app'}, 'event_subscription_name': {'type': 'string', 'description': 'Name of event subscription trigger that will be created'}, 'function_name': {'type': 'string', 'description': 'Name of the brand new Azure function'}}, 'attributes': {'node_ip': {'type': 'string'}, 'container_in_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'event_subscription_name': {'type': 'string'}, 'function_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}, 'container_in_name': {'default': {'get_property': ['SELF', 'container_in_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'event_subscription_name': {'default': {'get_property': ['SELF', 'event_subscription_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",0
"{'tosca.nodes.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA Node Type all other TOSCA base Node Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'state': {'type': 'string'}}, 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'requirements': [{'dependency': {'capability': 'tosca.capabilities.Node', 'node': 'tosca.nodes.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 'UNBOUNDED']}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'workflows': {'install': {'steps': {'install_sequence': {'activities': [{'set_state': 'creating'}, {'call_operation': 'tosca.interfaces.node.lifecycle.Standard.create'}, {'set_state': 'created'}, {'set_state': 'configuring'}, {'call_operation': 'tosca.interfaces.node.lifecycle.Standard.configure'}, {'set_state': 'configured'}, {'set_state': 'starting'}, {'call_operation': 'tosca.interfaces.node.lifecycle.Standard.start'}, {'set_state': 'started'}]}}}, 'uninstall': {'steps': {'uninstall_sequence': {'activities': [{'set_state': 'stopping'}, {'call_operation': 'tosca.interfaces.node.lifecycle.Standard.stop'}, {'set_state': 'stopped'}, {'set_state': 'deleting'}, {'call_operation': 'tosca.interfaces.node.lifecycle.Standard.delete'}, {'set_state': 'deleted'}]}}}}}}",0
"{'tosca.nodes.SoftwareComponent': {'derived_from': 'tosca.nodes.Root', 'properties': {'component_version': {'type': 'version', 'required': False}, 'admin_credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.WebServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'data_endpoint': 'tosca.capabilities.Endpoint', 'admin_endpoint': 'tosca.capabilities.Endpoint.Admin', 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.WebApplication']}}}}",0
"{'tosca.nodes.WebApplication': {'derived_from': 'tosca.nodes.Root', 'properties': {'context_root': {'type': 'string'}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.DBMS': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'root_password': {'type': 'string', 'required': False, 'description': 'the optional root password for the DBMS service'}, 'port': {'type': 'integer', 'required': False, 'description': 'the port the DBMS service will listen to for data and requests'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database']}}}}",0
"{'tosca.nodes.Database': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string', 'description': 'the logical name of the database'}, 'port': {'type': 'integer', 'description': 'the port the underlying database service will listen to for data'}, 'user': {'type': 'string', 'description': 'the optional user account name for DB administration', 'required': False}, 'password': {'type': 'string', 'description': 'the optional password for the DB user account', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.DBMS', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.Storage.ObjectStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'type': 'string'}, 'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}, 'maxsize': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '0 GB'}]}}, 'capabilities': {'storage_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Storage.BlockStorage': {'derived_from': 'tosca.nodes.Root', 'properties': {'size': {'type': 'scalar-unit.size', 'constraints': [{'greater_or_equal': '1 MB'}]}, 'volume_id': {'type': 'string', 'required': False}, 'snapshot_id': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment'}}}}",0
"{'tosca.nodes.Container.Application': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Container.Runtime', 'relationship': 'tosca.relationships.HostedOn'}}, {'storage': {'capability': 'tosca.capabilities.Storage'}}, {'network': {'capability': 'tosca.capabilities.EndPoint'}}]}}",0
"{'my.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}, 'image': {'default': {'get_property': ['SELF', 'image']}}, 'flavor': {'default': {'get_property': ['SELF', 'flavor']}}, 'network': {'default': {'get_property': ['SELF', 'network']}}, 'key_name': {'default': {'get_property': ['SELF', 'key_name']}}}, 'implementation': 'playbooks/vm/create.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'playbooks/vm/delete.yml'}}}}}}",0
"{'my.nodes.database': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'db_name': {'type': 'string', 'description': 'name of the database'}, 'db_user': {'type': 'string', 'description': 'User name of the database'}, 'db_password': {'type': 'string', 'description': 'password of the database'}, 'host_ip_prop': {'type': 'string', 'description': 'ip of the host machine'}}, 'attributes': {'host_ip_attr': {'type': 'string', 'description': 'ip of the host where database is deployed'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'db_name': {'default': {'get_property': ['SELF', 'db_name']}}, 'db_user': {'default': {'get_property': ['SELF', 'db_user']}}, 'db_password': {'default': {'get_property': ['SELF', 'db_password']}}}, 'implementation': 'playbooks/db/installdbServr.yml'}}}}}}",0
"{'my.nodes.Nginx': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'site_config_dir': {'type': 'string', 'description': 'Location of nginx site configs'}, 'remote_host_ip': {'type': 'string', 'description': 'Location of nginx site configs'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['my.nodes.Nginx.Site']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/nginx/install.yml'}}, 'delete': {'implementation': {'primary': 'playbooks/nginx/uninstall.yml'}}}}}}}",0
"{'my.nodes.Nginx.loadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'server1': {'type': 'string', 'description': 'hostname to balance the load'}, 'server2': {'type': 'string', 'description': 'hostname to balance the load'}}, 'attributes': {'site_config_dir': {'type': 'string', 'description': 'Location of nginx site configs'}, 'remote_host_ip': {'type': 'string', 'description': 'Location of nginx site configs'}}, 'requirements': [{'connectToLB': {'capability': 'tosca.capabilities.Endpoint', 'node': 'my.nodes.Nginx.Site', 'relationship': 'radon.relationships.LB_WebApp', 'occurrences': [0, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'server1': {'default': {'get_property': ['SELF', 'server1']}}, 'server2': {'default': {'get_property': ['SELF', 'server2']}}}, 'implementation': {'primary': 'playbooks/lb/install.yml'}}, 'delete': {'implementation': {'primary': 'playbooks/lb/uninstall.yml'}}}}}}}",0
"{'my.nodes.Nginx.Site': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'hostname': {'type': 'string', 'description': 'IP of the remote database'}, 'database_port': {'type': 'string', 'description': 'port of the remote database'}, 'database_name': {'type': 'string', 'description': 'name of the remote database'}, 'database_username': {'type': 'string', 'description': 'username to login'}, 'database_password': {'type': 'string', 'description': 'password to login remote database'}, 'database_table': {'type': 'string', 'description': 'table name to access'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'my.relationships.NginxSiteHosting'}}], 'capabilities': {'connectToLB': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['my.nodes.Nginx.loadBalancer'], 'occurrences': [0, 'UNBOUNDED']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'hostname': {'default': {'get_property': ['SELF', 'hostname']}}, 'database_port': {'default': {'get_property': ['SELF', 'database_port']}}, 'database_name': {'default': {'get_property': ['SELF', 'database_name']}}, 'database_username': {'default': {'get_property': ['SELF', 'database_username']}}, 'database_password': {'default': {'get_property': ['SELF', 'database_password']}}, 'database_table': {'default': {'get_property': ['SELF', 'database_table']}}}, 'implementation': 'playbooks/site/create.yml'}, 'delete': 'playbooks/site/delete.yml'}}}}}",0
"{'my.nodes.Nginx': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'site_config_dir': {'type': 'string', 'description': 'Location of nginx site configs'}, 'remote_host_ip': {'type': 'string', 'description': 'Location of nginx site configs'}}, 'requirements': [{'connectToLB': {'capability': 'tosca.capabilities.Endpoint', 'node': 'my.nodes.Nginx.loadBalancer', 'relationship': 'radon.relationships.LB_WebApp'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['my.nodes.Nginx.Site']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/nginx/install.yml'}}, 'delete': {'implementation': {'primary': 'playbooks/nginx/uninstall.yml'}}}}}}}",0
"{'my.nodes.Nginx.loadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'site_config_dir': {'type': 'string', 'description': 'Location of nginx site configs'}, 'remote_host_ip': {'type': 'string', 'description': 'Location of nginx site configs'}}, 'capabilities': {'connectToLB': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['my.nodes.Nginx']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/lb/install.yml'}}, 'delete': {'implementation': {'primary': 'playbooks/lb/uninstall.yml'}}}}}}}",0
"{'my.nodes.Nginx.Site': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'hostname': {'type': 'string', 'description': 'IP of the remote database'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'my.relationships.NginxSiteHosting'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'hostname': {'default': {'get_property': ['SELF', 'hostname']}}}, 'implementation': 'playbooks/site/create.yml'}, 'delete': 'playbooks/site/delete.yml'}}}}}",0
"{'my.nodes.NodeExporter': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': 'playbooks/node_exporter/node_exporter.yml'}}}}}",0
"{'scale_example_node': {'derived_from': 'cloudify.nodes.Root', 'properties': {'predefined': {'description': 'Value have used with install workflow\n', 'default': ''}, 'resource_name': {'description': 'Value have used with install workflow\n', 'default': ''}, '_transaction_id': {'description': 'Used for remove instances precreted on install\n', 'default': ''}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'scripts/create.py', 'executor': 'central_deployment_agent', 'inputs': {'defined_in_inputs': {'description': 'Value have used in any of workflows\n', 'default': ''}}}, 'update': {'implementation': 'scripts/update.py', 'executor': 'central_deployment_agent', 'inputs': {}}, 'delete': {'implementation': 'scripts/delete.py', 'executor': 'central_deployment_agent', 'inputs': {'defined_in_inputs': {'description': 'Value have used in any of workflows\n', 'default': ''}}}}}}}",0
"{'scale_example_compute': {'derived_from': 'cloudify.nodes.Compute', 'properties': {'predefined': {'description': 'Value have used with install workflow\n', 'default': ''}, 'agent_config': {'default': {'install_method': 'none'}}, 'resource_name': {'description': 'Value have used with install workflow\n', 'default': ''}, '_transaction_id': {'description': 'Used for remove instances precreted on install\n', 'default': ''}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'scripts/create.py', 'executor': 'central_deployment_agent', 'inputs': {'defined_in_inputs': {'description': 'Value have used in any of workflows\n', 'default': ''}}}, 'update': {'implementation': 'scripts/update.py', 'executor': 'central_deployment_agent', 'inputs': {}}, 'delete': {'implementation': 'scripts/delete.py', 'executor': 'central_deployment_agent', 'inputs': {'defined_in_inputs': {'description': 'Value have used in any of workflows\n', 'default': ''}}}}}}}",0
"{'sodalite.nodes.remote.client': {'description': 'Some remote node\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}, 'ssh-key': {'type': 'string'}}}}",0
"{'sodalite.data.textFile': {'derived_from': 'tosca.nodes.Root', 'properties': {'location': {'type': 'string'}, 'content': {'type': 'string'}}, 'requirements': [{'host': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'remote_host_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'remote_host_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'remote_host_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'location': {'default': {'get_property': ['SELF', 'location']}}, 'content': {'default': {'get_property': ['SELF', 'content']}}}, 'implementation': {'primary': 'playbooks/create-text-file.yml'}}}}}}}",0
"{'sodalite.data.mover': {'description': 'Moves data from ""src"" node to ""dst"" node\n', 'derived_from': 'tosca.nodes.Root'}}",0
"{'sodalite.data.mover.url': {'description': 'Moves data from ""src"" url to ""dst"" location on the ""host"". ""dst"" can be either absolute path or relative. ""dst"" is relative to $HOME directory\n', 'derived_from': 'sodalite.data.mover', 'properties': {'src': {'type': 'string', 'required': True}, 'dst': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'remote_host_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'remote_host_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'remote_host_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'src': {'default': {'get_property': ['SELF', 'src']}}, 'dst': {'default': {'get_property': ['SELF', 'dst']}}}, 'implementation': {'primary': 'playbooks/create-url.yml'}}}}}}}",0
"{'sodalite.data.mover.gridftp-client': {'description': 'GridFTP client\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'capabilities': {'client': {'type': 'tosca.capabilities.Root', 'valid_source_types': ['sodalite.data.mover.gridftp']}}, 'properties': {'cert_path': {'type': 'string', 'required': False, 'default': None, 'description': 'Location of certificates, where certificate artifacts (artifacts/certs) will be copied to\n'}, 'cert': {'type': 'string', 'required': False, 'default': 'usercert.pem'}, 'key': {'type': 'string', 'required': False, 'default': 'userkey.pem'}, 'certdir': {'type': 'string', 'required': False, 'default': 'certificates'}, 'initial_data_path': {'type': 'string', 'required': False, 'default': None, 'description': 'Location of initial data, where data artifacts (artifacts/data) will be copied to\n'}, 'hostnames': {'type': 'map', 'required': False, 'default': {}}, 'env': {'type': 'map', 'required': False, 'default': {}}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'inputs': {'cert_path': {'default': {'get_property': ['SELF', 'cert_path']}}, 'cert': {'default': {'get_property': ['SELF', 'cert']}}, 'key': {'default': {'get_property': ['SELF', 'key']}}, 'certdir': {'default': {'get_property': ['SELF', 'certdir']}}, 'initial_data_path': {'default': {'get_property': ['SELF', 'initial_data_path']}}, 'hostnames': {'default': {'get_property': ['SELF', 'hostnames']}}, 'env': {'default': {'get_property': ['SELF', 'env']}}, 'ansible_user': {'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/configure-gridftp-client.yml', 'dependencies': ['artifacts/certs', 'artifacts/data']}}}}}}}",0
"{'sodalite.data.mover.gridftp': {'description': 'Moves data from ""src"" location to ""dst"" location. ""src"" and ""dst"" must be absolute path\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'name': {'type': 'string', 'required': False, 'default': 'Sample gridftp transfer'}, 'parallel_streams': {'type': 'integer', 'required': False, 'default': 1, 'constraints': [{'greater_than': 0}]}, 'src_protocol': {'type': 'string', 'constraints': [{'valid_values': ['ftp', 'sshftp', 'gsiftp', 'file']}]}, 'src_address': {'type': 'string'}, 'src_port': {'type': 'tosca.datatypes.network.PortDef', 'required': False, 'default': None}, 'src_path': {'type': 'string'}, 'dst_protocol': {'type': 'string', 'constraints': [{'valid_values': ['ftp', 'sshftp', 'gsiftp', 'file']}]}, 'dst_address': {'type': 'string'}, 'dst_port': {'type': 'tosca.datatypes.network.PortDef', 'required': False, 'default': None}, 'dst_path': {'type': 'string'}}, 'requirements': [{'client': {'node': 'sodalite.data.mover.gridftp-client', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'inputs': {'cert_path': {'default': {'get_property': ['SELF', 'client', 'cert_path']}}, 'cert': {'default': {'get_property': ['SELF', 'client', 'cert']}}, 'key': {'default': {'get_property': ['SELF', 'client', 'key']}}, 'certdir': {'default': {'get_property': ['SELF', 'client', 'certdir']}}, 'ansible_user': {'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/configure-gridftp-proxy.yml'}}, 'start': {'inputs': {'src_protocol': {'default': {'get_property': ['SELF', 'src_protocol']}}, 'src_address': {'default': {'get_property': ['SELF', 'src_address']}}, 'src_port': {'default': {'get_property': ['SELF', 'src_port']}}, 'src_path': {'default': {'get_property': ['SELF', 'src_path']}}, 'dst_protocol': {'default': {'get_property': ['SELF', 'dst_protocol']}}, 'dst_address': {'default': {'get_property': ['SELF', 'dst_address']}}, 'dst_port': {'default': {'get_property': ['SELF', 'dst_port']}}, 'dst_path': {'default': {'get_property': ['SELF', 'dst_path']}}, 'parallel_streams': {'default': {'get_property': ['SELF', 'parallel_streams']}}, 'cert_path': {'default': {'get_property': ['SELF', 'client', 'cert_path']}}, 'certdir': {'default': {'get_property': ['SELF', 'client', 'certdir']}}, 'ansible_user': {'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/start-gridftp-transfer.yml'}}}}}}}",unknown
"{'sodalite.image_puller.singularity': {'derived_from': 'tosca.nodes.Root', 'properties': {'output': {'type': 'string', 'required': False, 'default': '', 'description': 'Output name of SIF file. Must be specified when registry is private'}, 'image': {'type': 'string'}, 'registry': {'type': 'string', 'constraints': [{'valid_values': ['library', 'docker', 'shub', 'private']}]}, 'images_location': {'type': 'string', 'default': 'images'}, 'certs_location': {'type': 'string', 'required': False, 'default': 'certs'}, 'puller_image': {'type': 'string', 'default': 'puller.sif'}, 'puller_image_remote': {'type': 'string', 'default': 'modakopt/modak:puller'}}, 'requirements': [{'host': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'inputs': {'remote_host_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'remote_host_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'remote_host_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'output': {'default': {'get_property': ['SELF', 'output']}}, 'registry': {'default': {'get_property': ['SELF', 'registry']}}, 'certs_location': {'default': {'get_property': ['SELF', 'certs_location']}}, 'images_location': {'default': {'get_property': ['SELF', 'images_location']}}, 'puller_image': {'default': {'get_property': ['SELF', 'puller_image']}}, 'puller_image_remote': {'default': {'get_property': ['SELF', 'puller_image_remote']}}}, 'implementation': {'primary': 'playbooks/configure-puller.yml'}}, 'start': {'inputs': {'remote_host_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'remote_host_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'remote_host_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'image': {'default': {'get_property': ['SELF', 'image']}}, 'output': {'default': {'get_property': ['SELF', 'output']}}, 'registry': {'default': {'get_property': ['SELF', 'registry']}}, 'certs_location': {'default': {'get_property': ['SELF', 'certs_location']}}, 'images_location': {'default': {'get_property': ['SELF', 'images_location']}}, 'puller_image': {'default': {'get_property': ['SELF', 'puller_image']}}}, 'implementation': {'primary': 'playbooks/start-puller.yml'}}}}}}}",unknown
"{'sodalite.nodes.ConfigureKeys': {'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'public_ipv4_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'ansible_user': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/create.yml'}}, 'delete': {'inputs': {'ansible_user': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/delete.yml'}}}}}}}",0
"{'sodalite.nodes.DockerVolume': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'name': {'type': 'string', 'description': 'The name of the volume', 'required': True}, 'recreate': {'type': 'string', 'description': 'Controls when a volume will be recreated', 'required': False, 'default': 'never'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'volume_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}, 'recreate': {'type': 'string', 'default': {'get_property': ['SELF', 'recreate']}}}, 'implementation': {'primary': 'playbooks/add_volume.yml'}}, 'delete': {'inputs': {'volume_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/remove_volume.yml'}}}}}}}",0
"{'sodalite.nodes.AWS.SecurityRules': {'derived_from': 'tosca.nodes.Root', 'properties': {'group_name': {'description': 'Name of the security group in AWS.', 'required': True, 'type': 'string'}, 'rules': {'required': False, 'constraints': [{'min_length': 1}], 'type': 'list', 'entry_schema': {'type': 'sodalite.datatypes.AWS.SecurityRule'}}, 'group_description': {'description': 'Description of the security group in AWS.', 'required': True, 'type': 'string'}, 'vpc_id': {'description': 'ID of the VPC to create the group in.', 'required': True, 'type': 'string'}, 'region': {'description': 'The AWS region to use.', 'required': False, 'type': 'string'}, 'aws_access_key': {'description': 'The AWS region to use.', 'required': False, 'type': 'string'}, 'aws_secret_key': {'description': 'The AWS region to use.', 'required': False, 'type': 'string'}}, 'attributes': {'group_id': {'description': 'ID of the security group in AWS.', 'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/security_rule_create.yml'}, 'inputs': {'rules': {'type': 'string', 'default': {'get_property': ['SELF', 'rules']}}, 'vpc_id': {'type': 'string', 'default': {'get_property': ['SELF', 'vpc_id']}}, 'region': {'type': 'string', 'default': {'get_property': ['SELF', 'region']}}, 'aws_access_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_access_key']}}, 'aws_secret_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_secret_key']}}, 'group_name': {'type': 'string', 'default': {'get_property': ['SELF', 'group_name']}}, 'group_description': {'type': 'string', 'default': {'get_property': ['SELF', 'group_description']}}}}, 'delete': {'implementation': {'primary': 'playbooks/security_rule_delete.yml'}, 'inputs': {'group_id': {'type': 'string', 'default': {'get_attribute': ['SELF', 'group_id']}}, 'aws_access_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_access_key']}}, 'aws_secret_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_secret_key']}}, 'vpc_id': {'type': 'string', 'default': {'get_property': ['SELF', 'vpc_id']}}, 'region': {'type': 'string', 'default': {'get_property': ['SELF', 'region']}}}}}}}}}",unknown
"{'sodalite.nodes.hpc.wm.slurm': {'description': 'slurm wm, here we can define properties/attributes applicable for slurm WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}, 'ssh-key': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.hpc.job.slurm']}, 'job_node': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.hpc.job.slurm']}}}}",0
"{'sodalite.nodes.hpc.job.slurm.configuration': {'description': 'slurm job configuration\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.slurm', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'name': {'type': 'string', 'description': 'Name of the job', 'required': True}, 'script': {'type': 'string', 'description': 'Job script that will be wrapped with j2 template to provide a PBS job script,  Ansible can process it with the template module\n', 'required': True}, 'workspace': {'type': 'string', 'description': 'Location of the sources and the job script', 'default': '~/'}, 'email': {'type': 'string', 'description': 'Job status will be notified to this email\n', 'default': ''}, 'nb_nodes': {'type': 'integer', 'description': 'Number of requested nodes if node name is not specified\n', 'default': 1, 'required': False}, 'ppn': {'type': 'integer', 'description': 'Number of processes per node\n', 'default': 1}, 'gpus': {'type': 'integer', 'description': 'Number of requested GPUs\n', 'default': 0}, 'walltime': {'type': 'string', 'description': 'Expected time of execution FORMAT: HH:MM:SS\n', 'required': True}, 'enable_audit': {'type': 'boolean', 'default': False}}, 'attributes': {'job_id': {'type': 'string', 'default': ''}, 'audit': {'type': 'string', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script': {'default': {'get_property': ['SELF', 'script']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_email': {'default': {'get_property': ['SELF', 'email']}}, 'job_nb_nodes': {'default': {'get_property': ['SELF', 'nb_nodes']}}, 'job_ppn': {'default': {'get_property': ['SELF', 'ppn']}}, 'job_gpus': {'default': {'get_property': ['SELF', 'gpus']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'walltime']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'enable_audit']}}}, 'implementation': {'primary': 'slurm-job/playbooks/create.yml', 'dependencies': ['slurm-job/artifacts/job.sh', 'slurm-job/templates/job.slurm.j2']}}}}}, 'capabilities': {'configured_job': {'type': 'sodalite.capabilities.hpc.ConfiguredJob', 'valid_source_types': ['sodalite.nodes.hpc.job.slurm']}}}}",unknown
"{'sodalite.nodes.hpc.job.slurm.configuration.node': {'description': 'slurm job configuration\n', 'derived_from': 'sodalite.nodes.hpc.job.slurm.configuration', 'requirements': [{'job_node': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script': {'default': {'get_property': ['SELF', 'script']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_email': {'default': {'get_property': ['SELF', 'email']}}, 'job_node_name': {'default': {'get_property': ['SELF', 'job_node', 'name']}}, 'job_ppn': {'default': {'get_property': ['SELF', 'ppn']}}, 'job_gpus': {'default': {'get_property': ['SELF', 'gpus']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'walltime']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'enable_audit']}}}, 'implementation': {'primary': 'slurm-job/playbooks/create.yml', 'dependencies': ['slurm-job/artifacts/job.sh', 'slurm-job/templates/job.slurm.j2']}}}}}}}",0
"{'sodalite.nodes.hpc.job.slurm': {'description': 'slurm job \n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.slurm', 'capability': 'tosca.capabilities.Compute', 'relationship': 'sodalite.relationships.jobHostedOn'}}, {'configured_job': {'node': 'sodalite.nodes.hpc.job.slurm.configuration', 'capability': 'sodalite.capabilities.hpc.ConfiguredJob', 'relationship': 'tosca.relationships.DependsOn'}}], 'attributes': {'job_id': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'configured_job', 'workspace']}}}, 'implementation': 'slurm-job/playbooks/configure.yml'}, 'start': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'configured_job', 'name']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'configured_job', 'workspace']}}}, 'implementation': 'slurm-job/playbooks/start.yml'}}}}, 'capabilities': {'job': {'type': 'sodalite.capabilities.hpc.StartedJob', 'valid_source_types': ['sodalite.nodes.hpc.job.slurm.result']}}}}",0
"{'sodalite.nodes.hpc.job.slurm.result': {'description': 'slurm job result\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.slurm', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'job': {'node': 'sodalite.nodes.hpc.job.slurm', 'capability': 'sodalite.capabilities.hpc.StartedJob', 'relationship': 'tosca.relationships.DependsOn'}}], 'properties': {'monitor_period': {'type': 'integer', 'default': 10}, 'monitor_retries_headroom': {'type': 'integer', 'default': 2}, 'enable_audit': {'type': 'boolean', 'default': False}}, 'attributes': {'job_id': {'type': 'string', 'default': ''}, 'audit': {'type': 'string', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'start': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_id': {'type': 'string', 'default': {'get_attribute': ['SELF', 'job', 'job_id']}}, 'job_name': {'default': {'get_property': ['SELF', 'job', 'configured_job', 'name']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'job', 'configured_job', 'workspace']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'job', 'configured_job', 'walltime']}}, 'job_monitor_period': {'default': {'get_property': ['SELF', 'monitor_period']}}, 'job_monitor_retries_headroom': {'default': {'get_property': ['SELF', 'monitor_retries_headroom']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'job', 'configured_job', 'enable_audit']}}}, 'implementation': 'slurm-job/playbooks/check.yml'}}}}, 'capabilities': {'job': {'type': 'sodalite.capabilities.hpc.CompleteJob'}}}}",0
"{'sodalite.nodes.OpenStack.Keypair': {'derived_from': 'tosca.nodes.Root', 'properties': {'name': {'description': 'Name of the keypair', 'required': True, 'type': 'string'}, 'public_key': {'description': 'Public key for keypair', 'required': True, 'type': 'string'}, 'env': {'description': 'Optional OpenStack environment', 'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.OpenStack.env'}, 'required': False, 'default': None}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/keypair_create.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}, 'inputs': {'name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'public_key': {'type': 'string', 'default': {'get_property': ['SELF', 'public_key']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}}, 'delete': {'implementation': {'primary': 'playbooks/keypair_delete.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}, 'inputs': {'name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}}}}}}}",0
"{'sodalite.nodes.Tests': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'status': {'type': 'string', 'description': 'Serves as a return value of the test'}, 'checked_against': {'type': 'string', 'description': 'Serves as a return value of the data that the test is testing'}}}}",0
"{'sodalite.nodes.Tests.Text': {'derived_from': 'sodalite.nodes.Tests', 'properties': {'comparable_string': {'type': 'string', 'description': ""String to compare to the file's contents. This parameter usage depends on the regex property."", 'required': True}, 'regex': {'type': 'boolean', 'description': 'If true, comparable string is used as regex pattern to search the string against. Otherwise a direct comparison is made.', 'default': False, 'required': True}}}}",0
"{'sodalite.nodes.Tests.Text.File': {'derived_from': 'sodalite.nodes.Tests.Text', 'properties': {'file_location': {'type': 'string', 'description': 'Path to the file to be tested', 'required': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}}, 'implementation': {'primary': 'file/text_contents.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.Text.URI': {'derived_from': 'sodalite.nodes.Tests.Text', 'description': 'Base node for all URI based tests. URI test node that checks whether the response content equals to the provided string or matches it against a regex pattern if regex property is true. All parameter descriptions can be found at https://docs.ansible.com/ansible/latest/modules/uri_module.html', 'properties': {'url': {'type': 'string', 'description': 'HTTP or HTTPS URL in the form (http|https)://host.domain[:port]/path'}, 'attributes': {'type': 'string', 'default': None, 'required': False}, 'body': {'type': 'string', 'default': None, 'required': False}, 'body_format': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['form-urlencoded', 'json', 'raw']}], 'default': 'raw'}, 'method': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'TRACE', 'PATCH']}], 'default': 'GET'}, 'client_cert': {'type': 'string', 'default': None, 'required': False}, 'client_key': {'type': 'string', 'default': None, 'required': False}, 'follow_redirects': {'type': 'string', 'required': False, 'constraints': [{'valid_values': ['all', False, 'none', 'safe', 'urllib2', True]}], 'default': 'safe'}, 'force': {'type': 'string', 'required': False, 'constraints': [{'valid_values': [True, False]}], 'default': False}, 'force_basic_auth': {'type': 'string', 'required': False, 'constraints': [{'valid_values': [True, False]}], 'default': False}, 'group': {'type': 'string', 'default': None, 'required': False}, 'headers': {'type': 'map', 'default': None, 'required': False, 'entry_schema': {'type': 'string'}}, 'http_agent': {'type': 'string', 'default': None, 'required': False}, 'mode': {'type': 'string', 'default': None, 'required': False}, 'owner': {'type': 'string', 'default': None, 'required': False}, 'remote_src': {'type': 'string', 'required': False, 'constraints': [{'valid_values': [True, False]}], 'default': False}, 'removes': {'type': 'string', 'default': None, 'required': False}, 'src': {'type': 'string', 'default': None, 'required': False}, 'status_code': {'type': 'string', 'default': None, 'required': False}, 'timeout': {'type': 'string', 'default': None, 'required': False}}, 'attributes': {'response_status': {'type': 'string', 'description': ""Server's response status""}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'url': {'type': 'string', 'default': {'get_property': ['SELF', 'url']}}, 'attributes': {'type': 'string', 'default': {'get_property': ['SELF', 'attributes']}}, 'body': {'type': 'string', 'default': {'get_property': ['SELF', 'body']}}, 'body_format': {'type': 'string', 'default': {'get_property': ['SELF', 'body_format']}}, 'method': {'type': 'string', 'default': {'get_property': ['SELF', 'method']}}, 'client_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'client_cert']}}, 'client_key': {'type': 'string', 'default': {'get_property': ['SELF', 'client_key']}}, 'follow_redirects': {'type': 'string', 'default': {'get_property': ['SELF', 'follow_redirects']}}, 'force': {'type': 'string', 'default': {'get_property': ['SELF', 'force']}}, 'force_basic_auth': {'type': 'string', 'default': {'get_property': ['SELF', 'force_basic_auth']}}, 'group': {'type': 'string', 'default': {'get_property': ['SELF', 'group']}}, 'headers': {'type': 'map', 'default': {'get_property': ['SELF', 'headers']}}, 'http_agent': {'type': 'string', 'default': {'get_property': ['SELF', 'http_agent']}}, 'mode': {'type': 'string', 'default': {'get_property': ['SELF', 'mode']}}, 'owner': {'type': 'string', 'default': {'get_property': ['SELF', 'owner']}}, 'remote_src': {'type': 'string', 'default': {'get_property': ['SELF', 'remote_src']}}, 'removes': {'type': 'string', 'default': {'get_property': ['SELF', 'removes']}}, 'src': {'type': 'string', 'default': {'get_property': ['SELF', 'src']}}, 'creates': {'type': 'string', 'default': None}, 'dest': {'type': 'string', 'default': None}, 'status_code': {'type': 'string', 'default': {'get_property': ['SELF', 'status_code']}}, 'timeout': {'type': 'string', 'default': {'get_property': ['SELF', 'timeout']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}}, 'implementation': {'primary': 'uri/response_body.yaml'}}}}}}}",unknown
"{'sodalite.nodes.Tests.Text.URI.Download': {'derived_from': 'sodalite.nodes.Tests.Text.URI', 'description': 'URI test node that checks whether the response content equals/matches regex of the provided string. All parameter descriptions can be found at https://docs.ansible.com/ansible/latest/modules/uri_module.html', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'url': {'type': 'string', 'default': {'get_property': ['SELF', 'url']}}, 'attributes': {'type': 'string', 'default': {'get_property': ['SELF', 'attributes']}}, 'body': {'type': 'string', 'default': {'get_property': ['SELF', 'body']}}, 'body_format': {'type': 'string', 'default': {'get_property': ['SELF', 'body_format']}}, 'method': {'type': 'string', 'default': {'get_property': ['SELF', 'method']}}, 'client_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'client_cert']}}, 'client_key': {'type': 'string', 'default': {'get_property': ['SELF', 'client_key']}}, 'follow_redirects': {'type': 'string', 'default': {'get_property': ['SELF', 'follow_redirects']}}, 'force': {'type': 'string', 'default': {'get_property': ['SELF', 'force']}}, 'force_basic_auth': {'type': 'string', 'default': {'get_property': ['SELF', 'force_basic_auth']}}, 'group': {'type': 'string', 'default': {'get_property': ['SELF', 'group']}}, 'headers': {'type': 'map', 'default': {'get_property': ['SELF', 'headers']}}, 'http_agent': {'type': 'string', 'default': {'get_property': ['SELF', 'http_agent']}}, 'mode': {'type': 'string', 'default': {'get_property': ['SELF', 'mode']}}, 'owner': {'type': 'string', 'default': {'get_property': ['SELF', 'owner']}}, 'remote_src': {'type': 'string', 'default': {'get_property': ['SELF', 'remote_src']}}, 'removes': {'type': 'string', 'default': {'get_property': ['SELF', 'removes']}}, 'src': {'type': 'string', 'default': {'get_property': ['SELF', 'src']}}, 'creates': {'type': 'string', 'default': None}, 'dest': {'type': 'string', 'default': None}, 'status_code': {'type': 'string', 'default': {'get_property': ['SELF', 'status_code']}}, 'timeout': {'type': 'string', 'default': {'get_property': ['SELF', 'timeout']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}}, 'implementation': {'primary': 'uri/download_body.yaml'}}}}}}}",unknown
"{'sodalite.nodes.Tests.Text.URI.Redirect': {'derived_from': 'sodalite.nodes.Tests.Text.URI', 'description': 'URI test node that checks whether the redirect URL equals/matches regex of the provided string. All parameter descriptions can be found at https://docs.ansible.com/ansible/latest/modules/uri_module.html', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'url': {'type': 'string', 'default': {'get_property': ['SELF', 'url']}}, 'attributes': {'type': 'string', 'default': {'get_property': ['SELF', 'attributes']}}, 'body': {'type': 'string', 'default': {'get_property': ['SELF', 'body']}}, 'body_format': {'type': 'string', 'default': {'get_property': ['SELF', 'body_format']}}, 'method': {'type': 'string', 'default': {'get_property': ['SELF', 'method']}}, 'client_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'client_cert']}}, 'client_key': {'type': 'string', 'default': {'get_property': ['SELF', 'client_key']}}, 'follow_redirects': {'type': 'string', 'default': {'get_property': ['SELF', 'follow_redirects']}}, 'force': {'type': 'string', 'default': {'get_property': ['SELF', 'force']}}, 'force_basic_auth': {'type': 'string', 'default': {'get_property': ['SELF', 'force_basic_auth']}}, 'group': {'type': 'string', 'default': {'get_property': ['SELF', 'group']}}, 'headers': {'type': 'map', 'default': {'get_property': ['SELF', 'headers']}}, 'http_agent': {'type': 'string', 'default': {'get_property': ['SELF', 'http_agent']}}, 'mode': {'type': 'string', 'default': {'get_property': ['SELF', 'mode']}}, 'owner': {'type': 'string', 'default': {'get_property': ['SELF', 'owner']}}, 'remote_src': {'type': 'string', 'default': {'get_property': ['SELF', 'remote_src']}}, 'removes': {'type': 'string', 'default': {'get_property': ['SELF', 'removes']}}, 'src': {'type': 'string', 'default': {'get_property': ['SELF', 'src']}}, 'creates': {'type': 'string', 'default': None}, 'dest': {'type': 'string', 'default': None}, 'status_code': {'type': 'string', 'default': {'get_property': ['SELF', 'status_code']}}, 'timeout': {'type': 'string', 'default': {'get_property': ['SELF', 'timeout']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}}, 'implementation': {'primary': 'uri/redirect.yaml'}}}}}}}",unknown
"{'sodalite.nodes.Tests.Text.URI.Response': {'derived_from': 'sodalite.nodes.Tests.Text.URI', 'description': 'URI test node that checks whether the redirect URL equals/matches regex of the provided string. All parameter descriptions can be found at https://docs.ansible.com/ansible/latest/modules/uri_module.html', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'url': {'type': 'string', 'default': {'get_property': ['SELF', 'url']}}, 'attributes': {'type': 'string', 'default': {'get_property': ['SELF', 'attributes']}}, 'body': {'type': 'string', 'default': {'get_property': ['SELF', 'body']}}, 'body_format': {'type': 'string', 'default': {'get_property': ['SELF', 'body_format']}}, 'method': {'type': 'string', 'default': {'get_property': ['SELF', 'method']}}, 'client_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'client_cert']}}, 'client_key': {'type': 'string', 'default': {'get_property': ['SELF', 'client_key']}}, 'follow_redirects': {'type': 'string', 'default': {'get_property': ['SELF', 'follow_redirects']}}, 'force': {'type': 'string', 'default': {'get_property': ['SELF', 'force']}}, 'force_basic_auth': {'type': 'string', 'default': {'get_property': ['SELF', 'force_basic_auth']}}, 'group': {'type': 'string', 'default': {'get_property': ['SELF', 'group']}}, 'headers': {'type': 'map', 'default': {'get_property': ['SELF', 'headers']}}, 'http_agent': {'type': 'string', 'default': {'get_property': ['SELF', 'http_agent']}}, 'mode': {'type': 'string', 'default': {'get_property': ['SELF', 'mode']}}, 'owner': {'type': 'string', 'default': {'get_property': ['SELF', 'owner']}}, 'remote_src': {'type': 'string', 'default': {'get_property': ['SELF', 'remote_src']}}, 'removes': {'type': 'string', 'default': {'get_property': ['SELF', 'removes']}}, 'src': {'type': 'string', 'default': {'get_property': ['SELF', 'src']}}, 'creates': {'type': 'string', 'default': None}, 'dest': {'type': 'string', 'default': None}, 'status_code': {'type': 'string', 'default': {'get_property': ['SELF', 'status_code']}}, 'timeout': {'type': 'string', 'default': {'get_property': ['SELF', 'timeout']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}}, 'implementation': {'primary': 'uri/response_code.yaml'}}}}}}}",unknown
"{'sodalite.nodes.Tests.Text.Command': {'derived_from': 'sodalite.nodes.Tests.Text', 'properties': {'command': {'type': 'string', 'description': 'Command for execution'}, 'dir': {'type': 'string', 'description': 'Command execution home (leave empty to leave it current)', 'default': ''}, 'executable': {'type': 'string', 'description': 'Shell used to execute the command (leave empty to leave it current)', 'default': ''}, 'compare_to': {'type': 'string', 'description': 'Use stdout/stderr to compare to the comparable string.', 'constraints': [{'valid_values': ['stdout', 'stderr']}], 'default': 'stdout'}, 'host_os': {'type': 'string', 'description': 'Selects which command execution module is used depending on the os', 'constraints': [{'valid_values': ['linux', 'windows']}], 'default': 'linux'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'command': {'type': 'string', 'default': {'get_property': ['SELF', 'command']}}, 'dir': {'type': 'string', 'default': {'get_property': ['SELF', 'dir']}}, 'executable': {'type': 'string', 'default': {'get_property': ['SELF', 'executable']}}, 'comparable_string': {'type': 'string', 'default': {'get_property': ['SELF', 'comparable_string']}}, 'regex': {'type': 'boolean', 'default': {'get_property': ['SELF', 'regex']}}, 'compare_to': {'type': 'string', 'default': {'get_property': ['SELF', 'compare_to']}}, 'host_os': {'type': 'string', 'default': {'get_property': ['SELF', 'host_os']}}}, 'implementation': {'primary': 'command/response_body.yaml'}}}}}}}",unknown
"{'sodalite.nodes.Tests.File': {'derived_from': 'sodalite.nodes.Tests', 'properties': {'file_location': {'type': 'string', 'description': 'Path to the file to be tested', 'required': True}, 'follow': {'type': 'string', 'description': 'Whether the test follows symlinks (if applicable)', 'constraints': [{'valid_values': [True, False]}], 'default': False, 'required': True}}}}",0
"{'sodalite.nodes.Tests.File.Exist': {'derived_from': 'sodalite.nodes.Tests.File', 'properties': {'exists': {'type': 'boolean', 'description': 'Toggles between checking for its existance and lack of existance', 'default': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'follow': {'type': 'string', 'default': {'get_property': ['SELF', 'follow']}}, 'exists': {'type': 'boolean', 'default': {'get_property': ['SELF', 'exists']}}}, 'implementation': {'primary': 'file/exist.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.File.Mode': {'derived_from': 'sodalite.nodes.Tests.File', 'properties': {'mode': {'type': 'string', 'description': ""File's mode""}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'follow': {'type': 'string', 'default': {'get_property': ['SELF', 'follow']}}, 'mode': {'type': 'string', 'default': {'get_property': ['SELF', 'mode']}}}, 'implementation': {'primary': 'file/mode.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.File.Checksum': {'derived_from': 'sodalite.nodes.Tests.File', 'properties': {'checksum': {'type': 'string', 'description': ""File's supposed checksum""}, 'checksum_algorithm': {'type': 'string', 'description': ""Algorithm used to calculate the file's checksum"", 'default': 'sha1', 'constraints': [{'valid_values': ['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512']}]}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'follow': {'type': 'string', 'default': {'get_property': ['SELF', 'follow']}}, 'checksum': {'type': 'string', 'default': {'get_property': ['SELF', 'checksum']}}, 'checksum_algorithm': {'type': 'string', 'default': {'get_property': ['SELF', 'checksum_algorithm']}}}, 'implementation': {'primary': 'file/checksum.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.File.Owner': {'derived_from': 'sodalite.nodes.Tests.File', 'properties': {'owner': {'type': 'string', 'description': ""File's supposed owner""}, 'check_group': {'type': 'boolean', 'description': 'Determines whether the node checks for the user or the group', 'default': False}, 'check_id': {'type': 'boolean', 'description': 'Determines whether the node checks for the name or ID', 'default': False}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'follow': {'type': 'string', 'default': {'get_property': ['SELF', 'follow']}}, 'owner': {'type': 'string', 'default': {'get_property': ['SELF', 'owner']}}, 'check_group': {'type': 'boolean', 'default': {'get_property': ['SELF', 'check_group']}}, 'check_id': {'type': 'boolean', 'default': {'get_property': ['SELF', 'check_id']}}}, 'implementation': {'primary': 'file/owner.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.File.Size': {'derived_from': 'sodalite.nodes.Tests.File', 'properties': {'size': {'type': 'integer', 'description': ""File's supposed/comparable size""}, 'comparator': {'type': 'string', 'description': 'The comparator used to test the supposed file size with', 'default': 'eq', 'constraints': [{'valid_values': ['eq', 'lt', 'gt', 'le', 'ge']}]}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'file_location': {'type': 'string', 'default': {'get_property': ['SELF', 'file_location']}}, 'follow': {'type': 'string', 'default': {'get_property': ['SELF', 'follow']}}, 'size': {'type': 'integer', 'default': {'get_property': ['SELF', 'size']}}, 'comparator': {'type': 'string', 'default': {'get_property': ['SELF', 'comparator']}}}, 'implementation': {'primary': 'file/size.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.Command': {'derived_from': 'sodalite.nodes.Tests', 'properties': {'command': {'type': 'string', 'description': 'Command for execution'}, 'dir': {'type': 'string', 'description': 'Command execution home (leave empty to leave it current)', 'default': ''}, 'executable': {'type': 'string', 'description': 'Shell used to execute the command (leave empty to leave it current)', 'default': ''}, 'host_os': {'type': 'string', 'description': 'Selects which command execution module is used depending on the os', 'constraints': [{'valid_values': ['linux', 'windows']}], 'default': 'linux'}}}}",0
"{'sodalite.nodes.Tests.Command.Return': {'derived_from': 'sodalite.nodes.Tests.Command', 'properties': {'response_code': {'type': 'integer', 'description': 'Comparable response code', 'default': 0}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'command': {'type': 'string', 'default': {'get_property': ['SELF', 'command']}}, 'dir': {'type': 'string', 'default': {'get_property': ['SELF', 'dir']}}, 'executable': {'type': 'string', 'default': {'get_property': ['SELF', 'executable']}}, 'response_code': {'type': 'integer', 'default': {'get_property': ['SELF', 'response_code']}}, 'host_os': {'type': 'string', 'default': {'get_property': ['SELF', 'host_os']}}}, 'implementation': {'primary': 'command/response_code.yaml'}}}}}}}",0
"{'sodalite.nodes.Tests.Command.Time': {'derived_from': 'sodalite.nodes.Tests.Command', 'properties': {'time': {'type': 'float', 'description': ""Command's supposed/comparable duration""}, 'comparator': {'type': 'string', 'description': 'The comparator used to test the supposed command execution duration with', 'default': 'lt', 'constraints': [{'valid_values': ['eq', 'lt', 'gt', 'le', 'ge']}]}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'command': {'type': 'string', 'default': {'get_property': ['SELF', 'command']}}, 'dir': {'type': 'string', 'default': {'get_property': ['SELF', 'dir']}}, 'executable': {'type': 'string', 'default': {'get_property': ['SELF', 'executable']}}, 'time': {'type': 'float', 'default': {'get_property': ['SELF', 'time']}}, 'comparator': {'type': 'string', 'default': {'get_property': ['SELF', 'comparator']}}, 'host_os': {'type': 'string', 'default': {'get_property': ['SELF', 'host_os']}}}, 'implementation': {'primary': 'command/time.yaml'}}}}}}}",0
"{'sodalite.nodes.DockerHost': {'derived_from': 'tosca.nodes.SoftwareComponent', 'attributes': {'public_address': {'description': ""Host's IP"", 'type': 'string'}, 'username': {'description': ""Host's username"", 'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.DockerizedComponent']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'host_public_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/create_docker_host.yml'}}, 'delete': {'inputs': {'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/delete_docker_host.yml'}}}}}}}",0
"{'sodalite.nodes.DockerizedComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'command': {'description': 'Commands list for starting the container', 'default': '', 'type': 'list', 'required': False}, 'volumes': {'description': 'A list of mounted volumes for the docker container ""host_path:container_path"" like ""/tmp/docker:/tmp""', 'type': 'list', 'default': [], 'required': False}, 'ports': {'type': 'list', 'description': 'Port binding for the docker container ""exposed:internal"" like ""8081:8080""', 'default': [], 'required': False}, 'exposed_ports': {'description': 'Exposed ports of the container like ""8081""', 'type': 'string', 'default': [], 'required': False}, 'restart_policy': {'description': 'Restart policy [no, on-failure, always, unless-stopped]', 'default': 'always', 'type': 'string', 'required': False}, 'env': {'description': 'Map for docker environment variables key-value dictionary', 'required': False, 'type': 'map', 'default': {}}, 'env_file': {'description': 'Path to file on remote with env vars', 'required': False, 'type': 'string', 'default': ''}, 'capabilities': {'description': 'List of capabilities to add to the container.', 'required': False, 'type': 'list', 'default': []}, 'labels': {'description': 'Dictionary of key value pairs.', 'required': False, 'type': 'map', 'default': {}}, 'image_name': {'description': 'The name of the image on the host', 'required': True, 'type': 'string'}, 'hostname': {'description': ""The container's hostname."", 'type': 'string', 'required': False}, 'alias': {'description': 'Alias name for docker container', 'type': 'string', 'required': True}, 'sleep': {'type': 'integer', 'description': 'Sleep after image is deployed', 'default': 0, 'required': False}, 'docker_network_name': {'description': 'Alias name for docker container', 'type': 'string', 'required': False, 'default': None}, 'ca_cert': {'description': 'Use a CA certificate when performing server verification by providing the path to a CA certificate file.', 'type': 'string', 'required': False, 'default': None}, 'client_cert': {'description': ""Path to the client's TLS certificate file."", 'type': 'string', 'required': False, 'default': None}, 'client_key': {'description': ""Path to the client's TLS key file."", 'type': 'string', 'required': False, 'default': None}, 'etc_hosts': {'description': 'Host-to-IP mappings', 'required': False, 'type': 'map', 'default': {}}}, 'attributes': {'ip_address': {'description': 'IP address of dockerized component', 'type': 'string'}}, 'requirements': [{'network': {'capability': 'tosca.capabilities.Network', 'node': 'sodalite.nodes.DockerNetwork', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}, {'registry': {'capability': 'tosca.capabilities.Node', 'node': 'sodalite.nodes.DockerRegistry', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}, 'env_file': {'type': 'string', 'default': {'get_property': ['SELF', 'env_file']}}, 'ports': {'type': 'list', 'default': {'get_property': ['SELF', 'ports']}}, 'capabilities': {'type': 'list', 'default': {'get_property': ['SELF', 'capabilities']}}, 'labels': {'type': 'map', 'default': {'get_property': ['SELF', 'labels']}}, 'restart_policy': {'type': 'string', 'default': {'get_property': ['SELF', 'restart_policy']}}, 'image_name': {'type': 'string', 'default': {'get_property': ['SELF', 'image_name']}}, 'alias': {'type': 'string', 'default': {'get_property': ['SELF', 'alias']}}, 'exposed_ports': {'type': 'string', 'default': {'get_property': ['SELF', 'exposed_ports']}}, 'registry_url': {'type': 'string', 'default': {'get_property': ['SELF', 'registry', 'docker_registry_url']}}, 'volumes': {'type': 'list', 'default': {'get_property': ['SELF', 'volumes']}}, 'command': {'type': 'list', 'default': {'get_property': ['SELF', 'command']}}, 'docker_network_name': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_network_name']}}, 'ca_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'ca_cert']}}, 'client_cert': {'type': 'string', 'default': {'get_property': ['SELF', 'client_cert']}}, 'client_key': {'type': 'string', 'default': {'get_property': ['SELF', 'client_key']}}, 'etc_hosts': {'type': 'map', 'default': {'get_property': ['SELF', 'etc_hosts']}}, 'sleep': {'type': 'integer', 'default': {'get_property': ['SELF', 'sleep']}}, 'public_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'ansible_user': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/add_container.yml'}}, 'delete': {'inputs': {'alias': {'type': 'string', 'default': {'get_property': ['SELF', 'alias']}}, 'ansible_user': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/remove_container.yml'}}}}}}}",unknown
"{'sodalite.nodes.TestComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'test_delay': {'type': 'integer', 'description': 'Delay for waiting container to come up', 'required': False}, 'test_port': {'type': 'integer', 'description': 'Port for testing availability of the container', 'required': False}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'component_name': {'type': 'string', 'default': {'get_attribute': ['SELF', 'tested_component', 'tosca_name']}}, 'test_delay': {'type': 'string', 'default': {'get_property': ['SELF', 'test_delay']}}, 'test_port': {'type': 'string', 'default': {'get_property': ['SELF', 'test_port']}}}, 'implementation': {'primary': 'playbooks/test_container.yml'}}}}}, 'requirements': [{'tested_component': {'node': 'tosca.nodes.SoftwareComponent', 'relationship': 'tosca.relationships.DependsOn', 'capability': 'tosca.capabilities.Node'}}]}}",0
"{'sodalite.nodes.RegistryCertificate': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'TLS certificates, that enable docker client to connect with Docker Registry', 'properties': {'registry_ip': {'type': 'string', 'description': 'IP of the SODALITE docker registry', 'required': True, 'default': 'localhost'}, 'country_name': {'type': 'string', 'description': 'Country name field of the certificate signing request subject.', 'required': True}, 'organization_name': {'type': 'string', 'description': 'The organizationName field of the certificate signing request subject.', 'required': True}, 'email_address': {'type': 'string', 'description': 'The emailAddress field of the certificate signing request subject.', 'required': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'registry_ip': {'type': 'string', 'default': {'get_property': ['SELF', 'registry_ip']}}, 'country_name': {'type': 'string', 'default': {'get_property': ['SELF', 'country_name']}}, 'organization_name': {'type': 'string', 'default': {'get_property': ['SELF', 'organization_name']}}, 'email_address': {'type': 'string', 'default': {'get_property': ['SELF', 'email_address']}}, 'public_ipv4_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'common_name': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'name']}}}, 'implementation': {'primary': 'playbooks/add_cert.yml', 'dependencies': ['artifacts/ca.crt', 'artifacts/ca.key']}}, 'delete': {'inputs': {'registry_ip': {'type': 'string', 'default': {'get_property': ['SELF', 'registry_ip']}}}, 'implementation': {'primary': 'playbooks/remove_cert.yml'}}}}}}}",0
"{'sodalite.nodes.RegistryServerCertificate': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'TLS certificates for Docker Registry server.', 'properties': {'country_name': {'type': 'string', 'description': 'Country name field of the certificate signing request subject.', 'required': True}, 'organization_name': {'type': 'string', 'description': 'The organizationName field of the certificate signing request subject.', 'required': True}, 'email_address': {'type': 'string', 'description': 'The emailAddress field of the certificate signing request subject.', 'required': True}, 'cert_ipv4_address': {'type': 'string', 'description': ""IP to be written to Subject Alternative Name (SAN). If missing, SAN will be set to host's public_address"", 'required': False, 'default': ''}, 'cert_path': {'type': 'string', 'description': 'Path where required files are stored.', 'required': True}, 'cert_files_prefix': {'type': 'string', 'description': 'Filename of certs. If missing, it will be set to common_name.', 'required': False, 'default': ''}, 'domain_name': {'type': 'string', 'description': ""Domain name of server. If missing, it will be set to IP. This will be mapped to 'Common name'."", 'required': False, 'default': ''}}, 'attributes': {'cert_files_prefix': {'type': 'string', 'description': 'Certificate filename prefix. Full cert path is [cert_path]/[cert_files_prefix].crt'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'country_name': {'type': 'string', 'default': {'get_property': ['SELF', 'country_name']}}, 'organization_name': {'type': 'string', 'default': {'get_property': ['SELF', 'organization_name']}}, 'email_address': {'type': 'string', 'default': {'get_property': ['SELF', 'email_address']}}, 'cert_ipv4_address': {'type': 'string', 'default': {'get_property': ['SELF', 'cert_ipv4_address']}}, 'public_ipv4_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'cert_path': {'type': 'string', 'default': {'get_property': ['SELF', 'cert_path']}}, 'cert_files_prefix': {'type': 'string', 'default': {'get_property': ['SELF', 'cert_files_prefix']}}, 'domain_name': {'type': 'string', 'default': {'get_property': ['SELF', 'domain_name']}}}, 'implementation': {'primary': 'playbooks/add_registry_server_cert.yml', 'dependencies': ['artifacts/ca.crt', 'artifacts/ca.key']}}, 'delete': {'inputs': {'cert_path': {'type': 'string', 'default': {'get_attribute': ['SELF', 'cert_path']}}}, 'implementation': {'primary': 'playbooks/remove_registry_server_cert.yml'}}}}}}}",0
"{'sodalite.nodes.DockerNetwork': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'name': {'type': 'string', 'description': 'The name of the network', 'required': True}}, 'capabilities': {'network': {'type': 'tosca.capabilities.Network', 'valid_source_types': ['sodalite.nodes.DockerizedComponent']}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'docker_network_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/add_network.yml'}}, 'delete': {'inputs': {'docker_network_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/remove_network.yml'}}}}}}}",0
"{'sodalite.nodes.modak': {'derived_from': 'tosca.nodes.Root', 'properties': {'endpoint': {'type': 'string'}}, 'capabilities': {'modak_endpoint': {'type': 'tosca.capabilities.Root', 'valid_source_types': ['sodalite.nodes.modak.job']}}}}",0
"{'sodalite.nodes.modak.job': {'derived_from': 'tosca.nodes.Root', 'properties': {'job_script': {'type': 'string'}, 'job_options': {'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.modak.job_options'}}, 'application': {'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.modak.application'}}, 'target': {'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.modak.target'}}, 'optimisation': {'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.modak.optimisation'}}}, 'attributes': {'artifact_url': {'type': 'string'}, 'container_runtime': {'type': 'string'}}, 'requirements': [{'modak_endpoint': {'node': 'sodalite.nodes.modak', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'job_script': {'default': {'get_property': ['SELF', 'job_script']}}, 'modak_endpoint': {'default': {'get_property': ['SELF', 'modak_endpoint', 'endpoint']}}, 'job_options': {'default': {'get_property': ['SELF', 'job_options']}}, 'application': {'default': {'get_property': ['SELF', 'application']}}, 'target': {'default': {'get_property': ['SELF', 'target']}}, 'optimisation': {'default': {'get_property': ['SELF', 'optimisation']}}}, 'implementation': {'primary': 'playbooks/create-modak-job.yml'}}}}}}}",0
"{'sodalite.nodes.nginx.Site': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'destination': {'type': 'string', 'default': '/usr/share/nginx/html/index.html'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'inputs': {'destination': {'default': {'get_property': ['SELF', 'destination']}, 'type': 'string'}, 'ansible_user': {'default': {'get_property': ['SELF', 'host', 'username']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yaml', 'dependencies': ['artifacts/site.html']}}, 'delete': 'playbooks/delete.yaml'}}}}}",0
"{'sodalite.nodes.DockerRegistry': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'docker_registry_url': {'type': 'string', 'description': 'Docker Hub login'}, 'docker_user': {'type': 'string', 'description': 'Docker Hub login', 'default': ''}, 'docker_pass': {'type': 'string', 'description': 'Docker Hub password', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'docker_registry_url': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_registry_url']}}, 'docker_user': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_user']}}, 'docker_pass': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_pass']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/login_user.yml'}}, 'delete': {'inputs': {'docker_registry_url': {'type': 'string', 'default': {'get_property': ['SELF', 'docker_registry_url']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/logout_user.yml'}}}}}}}",0
"{'sodalite.nodes.Configuration': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'dir': {'description': 'Dir with config file', 'type': 'string', 'required': True}, 'filename': {'description': 'Filename of target configuration', 'required': True, 'type': 'string'}, 'template_name': {'description': 'Filename of configuration template', 'required': True, 'type': 'string'}, 'permissions': {'description': 'File permissions', 'required': True, 'type': 'string', 'default': '0777'}}, 'attributes': {'config_file_path': {'description': 'Path to conf file on target VM', 'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'dir': {'type': 'string', 'default': {'get_property': ['SELF', 'dir']}}, 'filename': {'type': 'string', 'default': {'get_property': ['SELF', 'filename']}}, 'template_name': {'type': 'string', 'default': {'get_property': ['SELF', 'template_name']}}, 'permissions': {'type': 'string', 'default': {'get_property': ['SELF', 'permissions']}}}, 'implementation': {'primary': 'playbooks/create_conf.yml'}}, 'delete': {'inputs': {'dir': {'type': 'string', 'default': {'get_property': ['SELF', 'dir']}}, 'filename': {'type': 'string', 'default': {'get_property': ['SELF', 'filename']}}}, 'implementation': {'primary': 'playbooks/remove_conf.yml'}}}}}}}",0
"{'sodalite.nodes.TLS.Certificate': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'country_name': {'type': 'string', 'description': 'Country name field of the certificate signing request subject.', 'required': True}, 'organization_name': {'type': 'string', 'description': 'The organizationName field of the certificate signing request subject.', 'required': True}, 'email_address': {'type': 'string', 'description': 'The emailAddress field of the certificate signing request subject.', 'required': True}, 'cert_path': {'type': 'string', 'description': 'Path where required files are stored.', 'required': True}, 'domain_name': {'type': 'string', 'description': ""Domain name of server. If missing, it will be set to IP. This will be mapped to 'Common name'."", 'required': False, 'default': ''}}, 'attributes': {'cert_files_prefix': {'type': 'string', 'description': 'Certificate filename prefix. Full cert path is [cert_path]/[cert_files_prefix].crt'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'country_name': {'type': 'string', 'default': {'get_property': ['SELF', 'country_name']}}, 'organization_name': {'type': 'string', 'default': {'get_property': ['SELF', 'organization_name']}}, 'email_address': {'type': 'string', 'default': {'get_property': ['SELF', 'email_address']}}, 'public_ipv4_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'cert_path': {'type': 'string', 'default': {'get_property': ['SELF', 'cert_path']}}, 'domain_name': {'type': 'string', 'default': {'get_property': ['SELF', 'domain_name']}}}, 'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['artifacts/ca.crt', 'artifacts/ca.key']}}, 'delete': {'inputs': {'cert_path': {'type': 'string', 'default': {'get_attribute': ['SELF', 'cert_path']}}}, 'implementation': {'primary': 'playbooks/delete.yml'}}}}}}}",0
"{'sodalite.nodes.OpenStack.SecurityRules': {'derived_from': 'tosca.nodes.Root', 'properties': {'group_name': {'type': 'string', 'description': 'Name of the security group in openstack.', 'required': True}, 'ports': {'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.OpenStack.SecurityRule'}, 'description': 'A map of security rules definition defining protocol, porte-ranges, remoteIPs, direction.', 'required': True, 'constraints': [{'min_length': 1}]}, 'group_description': {'description': 'Description of the security group in openstack.', 'required': True, 'type': 'string'}, 'env': {'description': 'Optional OpenStack environment', 'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.OpenStack.env'}, 'required': False, 'default': None}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'implementation': {'primary': 'playbooks/security_rule_create.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}, 'inputs': {'ports': {'type': 'map', 'default': {'get_property': ['SELF', 'ports']}}, 'group_name': {'type': 'string', 'default': {'get_property': ['SELF', 'group_name']}}, 'group_description': {'type': 'string', 'default': {'get_property': ['SELF', 'group_description']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}}, 'delete': {'implementation': {'primary': 'playbooks/security_rule_delete.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}, 'inputs': {'group_name': {'type': 'string', 'default': {'get_property': ['SELF', 'group_name']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}}}}}}}",0
"{'sodalite.nodes.hpc.job.torque.configuration.base': {'description': 'torque job configuration\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'name': {'type': 'string', 'description': 'Name of the job', 'required': True}, 'script': {'type': 'string', 'description': 'Job script that will be wrapped with j2 template to provide a PBS job script,  Ansible can process it with the template module\n', 'required': True}, 'workspace': {'type': 'string', 'description': 'Location of the sources and the job script', 'default': '~/'}, 'enable_audit': {'type': 'boolean', 'default': False}, 'env': {'type': 'map', 'required': False, 'default': None}}, 'attributes': {'job_id': {'type': 'string'}}, 'capabilities': {'configured_job': {'type': 'tosca.capabilities.Root', 'valid_source_types': ['sodalite.nodes.hpc.job.torque']}}}}",0
"{'sodalite.nodes.hpc.job.torque.configuration': {'description': 'torque job configuration\n', 'derived_from': 'sodalite.nodes.hpc.job.torque.configuration.base', 'properties': {'name': {'type': 'string', 'description': 'Name of the job', 'required': True}, 'script': {'type': 'string', 'description': 'Job script that will be wrapped with j2 template to provide a PBS job script,  Ansible can process it with the template module\n', 'required': True}, 'queue': {'type': 'string', 'description': 'Select queue for the job. Infrastructure specific - default and constraints values MUST be provided by Resource Expert\n', 'required': False, 'default': '', 'constraints': [{'valid_values': ['batch', 'ssd', 'gpu', 'cpu']}]}, 'scratch': {'type': 'string', 'description': 'Select scratch (temporary, fast storage) path for the job, if available. Infrastructure specific - default value MUST be provided by Resource Expert\n', 'required': False, 'default': '/workspace'}, 'workspace': {'type': 'string', 'description': 'Location of the sources and the job script', 'default': '~/'}, 'email': {'type': 'string', 'description': 'Job status will be notified to this email\n', 'default': ''}, 'nb_nodes': {'type': 'integer', 'description': 'Number of requested nodes if node name is not specified\n', 'default': 1, 'required': False}, 'ppn': {'type': 'integer', 'description': 'Number of processes per node\n', 'default': 1}, 'gpus': {'type': 'integer', 'description': 'Number of requested GPUs\n', 'default': 0}, 'walltime': {'type': 'string', 'description': 'Expected time of execution FORMAT: HH:MM:SS\n', 'required': True}, 'enable_audit': {'type': 'boolean', 'default': False}, 'env': {'type': 'map', 'required': False, 'default': None}}, 'attributes': {'job_id': {'type': 'string'}, 'audit': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script': {'default': {'get_property': ['SELF', 'script']}}, 'job_queue': {'default': {'get_property': ['SELF', 'queue']}}, 'job_scratch': {'default': {'get_property': ['SELF', 'scratch']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_email': {'default': {'get_property': ['SELF', 'email']}}, 'job_nb_nodes': {'default': {'get_property': ['SELF', 'nb_nodes']}}, 'job_ppn': {'default': {'get_property': ['SELF', 'ppn']}}, 'job_gpus': {'default': {'get_property': ['SELF', 'gpus']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'walltime']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'enable_audit']}}}, 'implementation': {'primary': 'torque-job/playbooks/create.yml', 'dependencies': ['torque-job/templates/audit.sh.j2', 'torque-job/templates/job.pbs.j2', 'torque-job/artifacts/jobs']}}}}}}}",unknown
"{'sodalite.nodes.hpc.job.torque.configuration.node': {'description': 'torque job configuration\n', 'derived_from': 'sodalite.nodes.hpc.job.torque.configuration', 'requirements': [{'job_node': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [1, 1]}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script': {'default': {'get_property': ['SELF', 'script']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_email': {'default': {'get_property': ['SELF', 'email']}}, 'job_node_name': {'default': {'get_property': ['SELF', 'job_node', 'name']}}, 'job_ppn': {'default': {'get_property': ['SELF', 'ppn']}}, 'job_gpus': {'default': {'get_property': ['SELF', 'gpus']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'walltime']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'enable_audit']}}}, 'implementation': {'primary': 'torque-job/playbooks/create.yml', 'dependencies': ['torque-job/templates/audit.sh.j2', 'torque-job/templates/job.pbs.j2', 'torque-job/artifacts/jobs']}}}}}}}",0
"{'sodalite.nodes.hpc.job.torque.preconfigured': {'description': 'torque job configuration\n', 'derived_from': 'sodalite.nodes.hpc.job.torque.configuration.base', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script': {'default': {'get_property': ['SELF', 'script']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'enable_audit']}}}, 'implementation': {'primary': 'torque-job/playbooks/create-preconfigured.yml', 'dependencies': ['torque-job/templates/audit.sh.j2', 'torque-job/templates/preconfigured-job.pbs.j2', 'torque-job/artifacts/jobs']}}}}}}}",0
"{'sodalite.nodes.hpc.job.torque': {'description': 'torque job \n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'configured_job': {'node': 'sodalite.nodes.hpc.job.torque.configuration.base', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'attributes': {'job_id': {'type': 'string'}, 'job_walltime': {'type': 'string'}, 'job_name': {'type': 'string'}, 'job_workspace': {'type': 'string'}, 'job_enable_audit': {'type': 'boolean'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'configure': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'configured_job', 'workspace']}}}, 'implementation': 'torque-job/playbooks/configure.yml'}, 'start': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'configured_job', 'name']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'configured_job', 'workspace']}}, 'job_env': {'default': {'get_property': ['SELF', 'configured_job', 'env']}}, 'job_enable_audit': {'default': {'get_property': ['SELF', 'configured_job', 'enable_audit']}}}, 'implementation': 'torque-job/playbooks/start.yml'}}}}, 'capabilities': {'job': {'type': 'tosca.capabilities.Root', 'valid_source_types': ['sodalite.nodes.hpc.job.torque.result']}}}}",0
"{'sodalite.nodes.hpc.job.torque.result': {'description': 'torque job result\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'job': {'node': 'sodalite.nodes.hpc.job.torque', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'properties': {'monitor_period': {'type': 'integer', 'default': 10}, 'monitor_retries_headroom': {'type': 'integer', 'default': 2}, 'enable_audit': {'type': 'boolean', 'default': False}}, 'attributes': {'job_id': {'type': 'string', 'default': ''}, 'audit': {'type': 'string', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'start': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_id': {'default': {'get_attribute': ['SELF', 'job', 'job_id']}}, 'job_name': {'default': {'get_attribute': ['SELF', 'job', 'job_name']}}, 'job_workspace': {'default': {'get_attribute': ['SELF', 'job', 'job_workspace']}}, 'job_walltime': {'default': {'get_attribute': ['SELF', 'job', 'job_walltime']}}, 'job_monitor_period': {'default': {'get_property': ['SELF', 'monitor_period']}}, 'job_monitor_retries_headroom': {'default': {'get_property': ['SELF', 'monitor_retries_headroom']}}, 'job_enable_audit': {'default': {'get_attribute': ['SELF', 'job', 'job_enable_audit']}}}, 'implementation': 'torque-job/playbooks/check.yml'}}}}}}",0
"{'sodalite.nodes.hpc.resources.node-1.novalocal': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'node-1.novalocal'}, 'gpus': {'type': 'integer', 'required': True, 'default': 1}, 'total_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'total_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'total_cores': {'type': 'integer', 'required': True, 'default': 40}, 'available_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'available_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'available_cores': {'type': 'integer', 'required': True, 'default': 40}, 'operating_system': {'type': 'string', 'required': False, 'default': 'linux'}, 'available_memory_kb': {'type': 'integer', 'required': False, 'default': 126693628}}}}",0
"{'sodalite.nodes.hpc.resources.node-2.novalocal': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'node-2.novalocal'}, 'gpus': {'type': 'integer', 'required': True, 'default': 1}, 'total_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'total_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'total_cores': {'type': 'integer', 'required': True, 'default': 40}, 'available_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'available_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'available_cores': {'type': 'integer', 'required': True, 'default': 40}, 'operating_system': {'type': 'string', 'required': False, 'default': 'linux'}, 'available_memory_kb': {'type': 'integer', 'required': False, 'default': 126754384}}}}",0
"{'sodalite.nodes.hpc.resources.cloud7': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'cloud7'}, 'gpus': {'type': 'integer', 'required': True, 'default': 1}, 'total_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'total_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'total_cores': {'type': 'integer', 'required': True, 'default': 40}, 'available_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'available_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'available_cores': {'type': 'integer', 'required': True, 'default': 40}, 'operating_system': {'type': 'string', 'required': False, 'default': 'linux'}, 'available_memory_kb': {'type': 'integer', 'required': False, 'default': 130850912}}}}",0
"{'sodalite.nodes.hpc.resources.cloud8': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'cloud8'}, 'gpus': {'type': 'integer', 'required': True, 'default': 1}, 'total_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'total_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'total_cores': {'type': 'integer', 'required': True, 'default': 40}, 'available_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'available_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'available_cores': {'type': 'integer', 'required': True, 'default': 40}, 'operating_system': {'type': 'string', 'required': False, 'default': 'linux'}, 'available_memory_kb': {'type': 'integer', 'required': False, 'default': 132583840}}}}",0
"{'sodalite.nodes.hpc.resources.node-6.novalocal': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'required': True, 'default': 'node-6.novalocal'}, 'gpus': {'type': 'integer', 'required': True, 'default': 1}, 'total_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'total_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'total_cores': {'type': 'integer', 'required': True, 'default': 40}, 'available_sockets': {'type': 'integer', 'required': True, 'default': 2}, 'available_numa_nodes': {'type': 'integer', 'required': True, 'default': 2}, 'available_cores': {'type': 'integer', 'required': True, 'default': 40}, 'operating_system': {'type': 'string', 'required': False, 'default': 'linux'}, 'available_memory_kb': {'type': 'integer', 'required': False, 'default': 128471284}}}}",0
"{'sodalite.nodes.hpc.wm.torque': {'description': 'torque wm, here we can define properties/attributes applicable for torque WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}, 'ssh-key': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.hpc.job.torque']}, 'job_node': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.hpc.job.torque']}}}}",0
"{'sodalite.nodes.AWS.VM': {'derived_from': 'tosca.nodes.Compute', 'properties': {'network': {'description': 'AWS subnet ID in which to launch the instance (VPC)', 'type': 'string'}, 'name': {'description': 'Name that should be given to the VM in OpenStack', 'type': 'string'}, 'security_groups': {'description': 'AWS names of the security groups to which the instance should be added.', 'type': 'list'}, 'flavor': {'description': 'AWS flavor', 'type': 'string'}, 'image': {'description': 'AWS image', 'type': 'string'}, 'key_name': {'description': 'AWS SSH key name that should be placed on the VM', 'type': 'string'}, 'username': {'description': 'Username for SSH connection', 'type': 'string'}, 'region': {'description': 'The AWS region to use.', 'required': False, 'type': 'string'}, 'aws_access_key': {'description': 'The AWS access key.', 'required': False, 'type': 'string'}, 'aws_secret_key': {'description': 'The AWS secret key.', 'required': False, 'type': 'string'}}, 'attributes': {'id': {'description': 'OpenStack id of the VM', 'type': 'string'}, 'ansible_ip': {'description': 'ansible ipv4', 'type': 'string'}}, 'requirements': [{'protected_by': {'relationship': 'tosca.relationships.DependsOn', 'node': 'sodalite.nodes.AWS.SecurityRules', 'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'network': {'type': 'string', 'default': {'get_property': ['SELF', 'network']}}, 'flavor': {'type': 'string', 'default': {'get_property': ['SELF', 'flavor']}}, 'key_name': {'type': 'string', 'default': {'get_property': ['SELF', 'key_name']}}, 'image': {'type': 'string', 'default': {'get_property': ['SELF', 'image']}}, 'security_groups': {'type': 'string', 'default': {'get_property': ['SELF', 'security_groups']}}, 'vm_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'region': {'type': 'string', 'default': {'get_property': ['SELF', 'region']}}, 'aws_access_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_access_key']}}, 'aws_secret_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_secret_key']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'username']}}}, 'implementation': {'primary': 'playbooks/vm_create.yml'}}, 'delete': {'inputs': {'id': {'type': 'string', 'default': {'get_attribute': ['SELF', 'id']}}, 'region': {'type': 'string', 'default': {'get_property': ['SELF', 'region']}}, 'aws_access_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_access_key']}}, 'aws_secret_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_secret_key']}}}, 'implementation': {'primary': 'playbooks/vm_delete.yml'}}}}}}}",unknown
"{'sodalite.nodes.OpenStack.VM': {'derived_from': 'tosca.nodes.Compute', 'properties': {'network': {'description': 'OpenStack network id (network names are not accepted)', 'type': 'string'}, 'name': {'description': 'Name that should be given to the VM in OpenStack', 'type': 'string'}, 'security_groups': {'description': 'OpenStack names of the security groups to which the instance should be added.Comma separated string.', 'type': 'string'}, 'flavor': {'description': 'OpenStack flavor id (flavor names are not accepted)', 'type': 'string'}, 'image': {'description': 'OpenStack image id (image names are not accepted)', 'type': 'string'}, 'key_name': {'description': 'OpenStack SSH key name that should be placed on the VM', 'type': 'string'}, 'username': {'description': 'Username for SSH connection', 'type': 'string'}, 'ssh_config': {'description': 'Additional ssh config, to be added to default ansible_ssh_common_args', 'type': 'map', 'required': False, 'default': {}}, 'include_exporter': {'description': 'Flag to include exporter', 'type': 'boolean', 'default': True, 'required': False}, 'timeout': {'description': 'Timeout to instantiate the VM', 'type': 'integer', 'default': 600, 'required': False}, 'floating_ip_pools': {'description': 'Name of floating IP pool from which to choose a floating IP', 'type': 'list', 'default': None, 'required': False}, 'userdata': {'description': 'Additional userdata applied to configure the VM', 'type': 'string', 'default': '', 'required': False}, 'env': {'description': 'Optional OpenStack environment', 'type': 'map', 'entry_schema': {'type': 'sodalite.datatypes.OpenStack.env'}, 'required': False, 'default': None}}, 'attributes': {'id': {'description': 'OpenStack id of the VM', 'type': 'string'}, 'ansible_ip': {'description': 'ansible ipv4', 'type': 'string'}}, 'requirements': [{'protected_by': {'relationship': 'tosca.relationships.DependsOn', 'node': 'sodalite.nodes.OpenStack.SecurityRules', 'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'feature': {'type': 'tosca.capabilities.Node'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'network': {'type': 'string', 'default': {'get_property': ['SELF', 'network']}}, 'flavor': {'type': 'string', 'default': {'get_property': ['SELF', 'flavor']}}, 'key_name': {'type': 'string', 'default': {'get_property': ['SELF', 'key_name']}}, 'image': {'type': 'string', 'default': {'get_property': ['SELF', 'image']}}, 'security_groups': {'type': 'string', 'default': {'get_property': ['SELF', 'security_groups']}}, 'vm_name': {'type': 'string', 'default': {'get_property': ['SELF', 'name']}}, 'ansible_user': {'type': 'string', 'default': {'get_property': ['SELF', 'username']}}, 'ssh_config': {'type': 'string', 'default': {'get_property': ['SELF', 'ssh_config']}}, 'include_exporter': {'type': 'boolean', 'default': {'get_property': ['SELF', 'include_exporter']}}, 'timeout': {'type': 'integer', 'default': {'get_property': ['SELF', 'timeout']}}, 'floating_ip_pools': {'type': 'list', 'default': {'get_property': ['SELF', 'floating_ip_pools']}}, 'userdata': {'type': 'string', 'default': {'get_property': ['SELF', 'userdata']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}, 'implementation': {'primary': 'playbooks/vm_create.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}}, 'delete': {'inputs': {'id': {'type': 'string', 'default': {'get_attribute': ['SELF', 'id']}}, 'env': {'type': 'map', 'default': {'get_property': ['SELF', 'env']}}}, 'implementation': {'primary': 'playbooks/vm_delete.yml', 'dependencies': ['playbooks/egi_refresh_token.yml']}}}}}}}",unknown
"{'radon.policies.createRole': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string', 'description': 'AWS region'}, 'role_name': {'type': 'string', 'description': 'Name of the AWS role'}, 'role_description': {'type': 'string', 'description': 'Description for created role'}}, 'attributes': {'role_arn': {'type': 'string', 'description': 'AWS role arn identifier'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'role_name': {'default': {'get_property': ['SELF', 'role_name']}, 'type': 'string'}, 'role_description': {'default': {'get_property': ['SELF', 'role_description']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/policy.json']}}}}}, 'capabilities': {'requires_role': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.function.aws_lambda']}}}}",0
"{'radon.nodes.aws_lambda_transfer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'transfer_function_name': {'type': 'string', 'description': 'Name of AWS transfer image function.'}, 'aws_region': {'type': 'string', 'description': 'AWS region.'}, 'role_name': {'type': 'string', 'description': 'AWS role.'}, 'function_alias': {'type': 'string', 'description': 'Alias for function.'}, 'permission_id': {'type': 'string', 'description': 'Id of permission.'}, 'lambda_runtime': {'type': 'string', 'description': 'Runtime for lambda (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'}, 'lambda_transfer_handler': {'type': 'string', 'description': 'Handler for transfer lambda function.'}, 'lambda_timeout': {'type': 'string', 'description': 'Function timeout in seconds.'}, 'lambda_memory': {'type': 'string', 'description': 'Function memory in MB.'}, 'bucket_dest_name': {'type': 'string', 'description': 'Name of the destination bucket.'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}, 'transfer_function_name': {'type': 'string'}, 'aws_region': {'type': 'string'}, 'role_name': {'type': 'string'}, 'function_alias': {'type': 'string'}, 'permission_id': {'type': 'string'}, 'lambda_runtime': {'type': 'string'}, 'lambda_transfer_handler': {'type': 'string'}, 'lambda_timeout': {'type': 'string'}, 'lambda_memory': {'type': 'string'}, 'bucket_dest_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'transfer_function_name': {'default': {'get_property': ['SELF', 'transfer_function_name']}, 'type': 'string'}, 'lambda_runtime': {'default': {'get_property': ['SELF', 'lambda_runtime']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'role_name': {'default': {'get_property': ['SELF', 'role_name']}, 'type': 'string'}, 'lambda_transfer_handler': {'default': {'get_property': ['SELF', 'lambda_transfer_handler']}, 'type': 'string'}, 'lambda_timeout': {'default': {'get_property': ['SELF', 'lambda_timeout']}, 'type': 'string'}, 'lambda_memory': {'default': {'get_property': ['SELF', 'lambda_memory']}, 'type': 'string'}, 'bucket_dest_name': {'default': {'get_property': ['SELF', 'bucket_dest_name']}, 'type': 'string'}, 'connection_string': {'default': {'get_attribute': ['SELF', 'connection_str', 'azure_connection_string']}, 'type': 'string'}, 'function_alias': {'default': {'get_property': ['SELF', 'function_alias']}, 'type': 'string'}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/function']}}}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.aws_transfer_notification']}}, 'requirements': [{'connection_str': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",unknown
"{'radon.nodes.container_create': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'container_in_name': {'type': 'string', 'description': 'The name of the incoming Azure container'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group to use.'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account to use.'}, 'location': {'type': 'string', 'description': 'Resource location'}}, 'attributes': {'container_in_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'location': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'container_in_name': {'default': {'get_property': ['SELF', 'container_in_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'location': {'default': {'get_property': ['SELF', 'location']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",unknown
"{'radon.nodes.transfer_function_deploy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'location': {'type': 'string', 'description': 'Resource location'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account.'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group.'}, 'function_app_name': {'type': 'string', 'description': 'Name of the the new transfer function application.'}, 'function_name': {'type': 'string', 'description': 'Name of the transfer Azure function'}, 'aws_credentials': {'type': 'string', 'description': 'AWS credentials lookup to json file with access_key_id and secret_access_key'}, 'aws_bucket_name': {'type': 'string', 'description': 'The name of the AWS bucket - transfer destination'}}, 'attributes': {'location': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'aws_credentials': {'type': 'string', 'description': 'AWS credentials lookup to json file with access_key_id and secret_access_key'}, 'aws_bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'location': {'default': {'get_property': ['SELF', 'location']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'aws_credentials': {'default': {'get_property': ['SELF', 'aws_credentials']}, 'type': 'string'}, 'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'aws_bucket_name': {'default': {'get_property': ['SELF', 'aws_bucket_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/functions']}}}}}}}",unknown
"{'radon.nodes.function_deploy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'function_app_name': {'type': 'string', 'description': 'Name of the existing function application.'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account.'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group.'}, 'function_name': {'type': 'string', 'description': 'Name of the brand new Azure function'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}, 'location': {'type': 'string', 'description': 'Resource location'}}, 'attributes': {'azure_connection_string': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}, 'location': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}, 'location': {'default': {'get_property': ['SELF', 'location']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/functions']}}}}}}}",unknown
"{'radon.nodes.s3_bucket': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'bucket_name': {'type': 'string', 'description': 'The name of the bucket'}, 'aws_region': {'type': 'string', 'description': 'AWS region'}}, 'attributes': {'bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'bucket_name': {'default': {'get_property': ['SELF', 'bucket_name']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",0
"{'radon.nodes.function.aws_lambda': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string', 'description': 'AWS region'}, 'lambda_name': {'type': 'string', 'description': 'Name of the function'}, 'function_alias': {'type': 'string', 'description': 'Alias for function'}, 'permission_id': {'type': 'string', 'description': 'Id of permission'}, 'lambda_runtime': {'type': 'string', 'description': 'Runtime for lambda (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'}, 'lambda_handler': {'type': 'string', 'description': 'Handler for lambda function'}, 'lambda_timeout': {'type': 'string', 'description': 'Function timeout in seconds'}, 'lambda_memory': {'type': 'string', 'description': 'Function memory in MB'}, 'bucket_out_name': {'type': 'string', 'description': 'Name of the bucket with results'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'lambda_name': {'default': {'get_property': ['SELF', 'lambda_name']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}, 'type': 'string'}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}, 'type': 'string'}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}, 'type': 'string'}, 'lambda_runtime': {'default': {'get_property': ['SELF', 'lambda_runtime']}, 'type': 'string'}, 'lambda_handler': {'default': {'get_property': ['SELF', 'lambda_handler']}, 'type': 'string'}, 'lambda_timeout': {'default': {'get_property': ['SELF', 'lambda_timeout']}, 'type': 'string'}, 'lambda_memory': {'default': {'get_property': ['SELF', 'lambda_memory']}, 'type': 'string'}, 'bucket_out_name': {'default': {'get_property': ['SELF', 'bucket_out_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/function']}}}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}, 'requirements': [{'bucket': {'capability': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn'}}, {'requires_role': {'capability': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.aws_transfer_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string', 'description': 'AWS region.'}, 'bucket_source_name': {'type': 'string', 'description': 'The name of the AWS bucket - transfer source'}}, 'attributes': {'aws_region': {'type': 'string'}, 'bucket_source_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'suffix': {'default': '.jpg', 'type': 'string'}, 'events': {'default': 's3:ObjectCreated:*', 'type': 'string'}, 'lambda_function_arn': {'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}, 'type': 'string'}, 'bucket_source_name': {'default': {'get_property': ['SELF', 'bucket_source_name']}, 'type': 'string'}, 'event_name': {'default': 'radon_on_jpg_transfer', 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml'}}}}}, 'requirements': [{'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.function.aws_lambda': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string', 'description': 'AWS region'}, 'function_name': {'type': 'string', 'description': 'Name of the function'}, 'function_alias': {'type': 'string', 'description': 'Alias for function'}, 'permission_id': {'type': 'string', 'description': 'Id of permission'}, 'lambda_runtime': {'type': 'string', 'description': 'Runtime for lambda (List of possible values - https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'}, 'lambda_handler': {'type': 'string', 'description': 'Handler for lambda function'}, 'lambda_timeout': {'type': 'string', 'description': 'Function timeout in seconds'}, 'lambda_memory': {'type': 'string', 'description': 'Function memory in MB'}, 'bucket_out_name': {'type': 'string', 'description': 'Name of the bucket with results'}}, 'attributes': {'function_arn': {'type': 'string', 'description': 'AWS function arn'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'aws_region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}, 'aws_role': {'default': {'get_attribute': ['SELF', 'requires_role', 'role_arn']}, 'type': 'string'}, 'func_alias': {'default': {'get_property': ['SELF', 'function_alias']}, 'type': 'string'}, 'permission_id': {'default': {'get_property': ['SELF', 'permission_id']}, 'type': 'string'}, 'lambda_runtime': {'default': {'get_property': ['SELF', 'lambda_runtime']}, 'type': 'string'}, 'lambda_handler': {'default': {'get_property': ['SELF', 'lambda_handler']}, 'type': 'string'}, 'lambda_timeout': {'default': {'get_property': ['SELF', 'lambda_timeout']}, 'type': 'string'}, 'lambda_memory': {'default': {'get_property': ['SELF', 'lambda_memory']}, 'type': 'string'}, 'bucket_out_name': {'default': {'get_property': ['SELF', 'bucket_out_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/function']}}}}}, 'capabilities': {'receives_notification': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.triggers.bucket_notification']}}, 'requirements': [{'bucket': {'capability': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn'}}, {'requires_role': {'capability': 'tosca.capabilities.Node', 'relationship': 'tosca.relationships.DependsOn'}}]}}",unknown
"{'radon.nodes.triggers.bucket_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'aws_region': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'event_name': {'default': 'radon_on_jpg_add', 'type': 'string'}, 'bucket_name': {'default': {'get_property': ['SELF', 'bucket', 'bucket_name']}, 'type': 'string'}, 'lambda_function_arn': {'default': {'get_attribute': ['SELF', 'receives_notification', 'function_arn']}, 'type': 'string'}, 'events': {'default': 's3:ObjectCreated:*', 'type': 'string'}, 'suffix': {'default': '.jpg', 'type': 'string'}, 'region': {'default': {'get_property': ['SELF', 'aws_region']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}, 'requirements': [{'receives_notification': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}, {'bucket': {'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.DependsOn'}}]}}",0
"{'radon.nodes.container_create': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'container_in_name': {'type': 'string', 'description': 'The name of the incoming Azure container'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group to use.'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account to use.'}}, 'attributes': {'container_in_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'container_in_name': {'default': {'get_property': ['SELF', 'container_in_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",0
"{'radon.nodes.container_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'container_in_name': {'type': 'string', 'description': 'The name container with incoming blobs'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group'}, 'function_app_name': {'type': 'string', 'description': 'Name of the existing function app'}, 'event_subscription_name': {'type': 'string', 'description': 'Name of event subscription trigger that will be created'}, 'function_name': {'type': 'string', 'description': 'Name of the brand new Azure function'}}, 'attributes': {'container_in_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'event_subscription_name': {'type': 'string'}, 'function_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'container_in_name': {'default': {'get_property': ['SELF', 'container_in_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'event_subscription_name': {'default': {'get_property': ['SELF', 'event_subscription_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}}, 'operations': {'create': 'playbooks/create.yml'}}}}}",0
"{'radon.nodes.function_deploy': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'function_app_name': {'type': 'string', 'description': 'Name of the existing function application.'}, 'node_ip': {'type': 'string', 'description': 'IP of the target node'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the storage account.'}, 'resource_group_name': {'type': 'string', 'description': 'Name of the resource group.'}, 'function_name': {'type': 'string', 'description': 'Name of the brand new Azure function'}, 'container_out_name': {'type': 'string', 'description': 'The name of the Azure container with results'}}, 'attributes': {'azure_connection_string': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'node_ip': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'resource_group_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'container_out_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'node_ip': {'default': {'get_property': ['SELF', 'node_ip']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'container_out_name': {'default': {'get_property': ['SELF', 'container_out_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml', 'dependencies': ['playbooks/functions']}}}}}, 'capabilities': {'connection_str': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['radon.nodes.aws_lambda_transfer']}}}}",0
"{'radon.nodes.transfer_container_notification': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'resource_group_name': {'type': 'string', 'description': 'Name of the Azure resource group to use.'}, 'storage_account_name': {'type': 'string', 'description': 'Name of the Azure storage account to use.'}, 'function_app_name': {'type': 'string', 'description': 'Name of the the new transfer function application.'}, 'function_name': {'type': 'string', 'description': 'Name of the transfer Azure function'}, 'event_subscription_name': {'type': 'string', 'description': 'Name of event subscription trigger that will be created'}, 'aws_credentials': {'type': 'string', 'description': 'AWS credentials lookup to json file with access_key_id and secret_access_key'}, 'azure_container_name': {'type': 'string', 'description': 'The name of the Azure container - transfer source'}, 'aws_bucket_name': {'type': 'string', 'description': 'The name of the AWS bucket - transfer destination'}}, 'attributes': {'resource_group_name': {'type': 'string'}, 'storage_account_name': {'type': 'string'}, 'function_app_name': {'type': 'string'}, 'function_name': {'type': 'string'}, 'event_subscription_name': {'type': 'string'}, 'aws_credentials': {'type': 'string'}, 'azure_container_name': {'type': 'string'}, 'aws_bucket_name': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'resource_group_name': {'default': {'get_property': ['SELF', 'resource_group_name']}, 'type': 'string'}, 'storage_account_name': {'default': {'get_property': ['SELF', 'storage_account_name']}, 'type': 'string'}, 'function_app_name': {'default': {'get_property': ['SELF', 'function_app_name']}, 'type': 'string'}, 'function_name': {'default': {'get_property': ['SELF', 'function_name']}, 'type': 'string'}, 'event_subscription_name': {'default': {'get_property': ['SELF', 'event_subscription_name']}, 'type': 'string'}, 'aws_credentials': {'default': {'get_property': ['SELF', 'aws_credentials']}, 'type': 'string'}, 'azure_container_name': {'default': {'get_property': ['SELF', 'azure_container_name']}, 'type': 'string'}, 'aws_bucket_name': {'default': {'get_property': ['SELF', 'aws_bucket_name']}, 'type': 'string'}}, 'operations': {'create': {'implementation': {'primary': 'playbooks/create.yml'}}}}}}}",0
{'tosca.dcae.nodes.Root': {'derived_from': 'tosca.nodes.Root'}},0
"{'tosca.dcae.nodes.dockerApp': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'cpu_period': {'type': 'integer', 'required': True, 'default': 10000}, 'cpu_quota': {'type': 'integer', 'required': True, 'default': 30000}, 'cpu_shares': {'type': 'integer', 'required': True, 'default': 256}, 'mem_limit': {'type': 'string', 'required': True, 'default': '500m'}, 'restart_policy.max_retry_counts': {'type': 'integer', 'required': True, 'default': 3}, 'restart_policy.Name': {'type': 'string', 'required': True, 'default': 'on-failure'}, 'service_component_type': {'type': 'string', 'required': True}, 'location_id': {'type': 'string', 'required': True}, 'image': {'type': 'string', 'required': True}}, 'attributes': {'service_component_name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'dcae.capabilities.dockerHost', 'relationship': 'dcae.relationships.component_contained_in'}}, {'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'tosca.dcae.nodes.cdapApp': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'connected_broker_dns_name': {'type': 'string', 'required': True, 'default': 'cdap_broker'}, 'service_component_type': {'type': 'string', 'required': True}, 'jar_url': {'type': 'string', 'required': True}}, 'attributes': {'service_component_name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'dcae.capabilities.cdapHost', 'relationship': 'dcae.relationships.component_contained_in'}}]}}",0
"{'tosca.dcae.nodes.dmaap.topic': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'aaf_username': {'type': 'string'}, 'aaf_password': {'type': 'string'}, 'location': {'type': 'string'}, 'client_role': {'type': 'string'}, 'node_name': {'type': 'string'}, 'topic_name': {'type': 'string'}}, 'capabilities': {'topic': {'type': 'dcae.capabilities.dmmap.topic'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'tosca.dcae.nodes.dmaap.existingTopic': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'aaf_username': {'type': 'string'}, 'aaf_password': {'type': 'string'}, 'location': {'type': 'string'}, 'client_role': {'type': 'string'}, 'node_name': {'type': 'string'}, 'fqtn': {'type': 'string'}}, 'capabilities': {'topic': {'type': 'dcae.capabilities.dmmap.topic'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'tosca.dcae.nodes.dmaap.feed': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'location': {'type': 'string'}, 'node_name': {'type': 'string'}, 'feed_name': {'type': 'string'}}, 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
{'cloudify.dcae.nodes.Root': {'derived_from': 'tosca.nodes.Root'}},0
"{'tosca.dcae.nodes.dmaap.existingFeed': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'location': {'type': 'string'}, 'node_name': {'type': 'string'}, 'feed_id': {'type': 'string'}}, 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'tosca.dcae.nodes.dmaap.externalTargetFeed': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'location': {'type': 'string'}, 'node_name': {'type': 'string'}, 'url': {'type': 'string'}, 'username': {'type': 'string'}, 'userpw': {'type': 'string'}}, 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'dcae.nodes.Feed': {'derived_from': 'cloudify.dcae.nodes.Root', 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'properties': {'feed_name': {'type': 'string'}}}}",0
"{'dcae.nodes.ExistingFeed': {'derived_from': 'cloudify.dcae.nodes.Root', 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'properties': {'feed_id': {'type': 'string'}}}}",0
"{'dcae.nodes.ExternalTargetFeed': {'derived_from': 'cloudify.dcae.nodes.Root', 'capabilities': {'feed': {'type': 'dcae.capabilities.dmmap.feed'}}, 'properties': {'url': {'type': 'string'}, 'username': {'type': 'string'}, 'userpw': {'type': 'string'}}}}",0
"{'dcae.nodes.Topic': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'topic_name': {'type': 'string'}}, 'capabilities': {'topic': {'type': 'dcae.capabilities.dmmap.topic'}}}}",0
"{'dcae.nodes.ExistingTopic': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'fqtn': {'type': 'string'}}, 'capabilities': {'topic': {'type': 'dcae.capabilities.dmmap.topic'}}}}",0
"{'dcae.nodes.DockerContainerForComponents': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'service_component_type': {'type': 'string', 'required': True}, 'location_id': {'type': 'string', 'required': True}, 'image': {'type': 'string', 'required': True}, 'application_config': {'type': 'map', 'required': True}, 'docker_config': {'type': 'map'}}, 'attributes': {'service_component_name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'dcae.capabilities.dockerHost', 'relationship': 'dcae.relationships.component_contained_in'}}], 'interfaces': {'cloudify.interfaces.lifecycle': {'type': 'tosca.interfaces.Root', 'start': {'inputs': {'host_config': {'type': 'map'}}}, 'stop': {'inputs': {'cleanup_image': {'type': 'boolean'}}}}}}}",0
"{'dcae.nodes.DockerContainerForComponentsUsingDmaap': {'derived_from': 'dcae.nodes.DockerContainerForComponents', 'properties': {'streams_publishes': {'type': 'list'}, 'streams_subscribes': {'type': 'list'}}}}",0
"{'dcae.nodes.ContainerizedComponent': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'image': {'type': 'string', 'required': True}, 'application_config': {'type': 'map', 'required': True}, 'docker_config': {'type': 'map'}}}}",0
"{'dcae.nodes.ContainerizedServiceComponent': {'derived_from': 'dcae.nodes.ContainerizedComponent', 'properties': {'service_component_type': {'type': 'string', 'required': True}, 'location_id': {'type': 'string', 'required': True}}, 'attributes': {'service_component_name': {'type': 'string'}}}}",0
"{'dcae.nodes.ContainerizedServiceComponentUsingDmaap': {'derived_from': 'dcae.nodes.ContainerizedServiceComponent', 'properties': {'streams_publishes': {'type': 'list'}, 'streams_subscribes': {'type': 'list'}}}}",0
"{'dcae.nodes.MicroService.cdap': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'service_component_type': {'type': 'string'}, 'jar_url': {'type': 'string'}, 'artifact_name': {'type': 'string', 'required': False}, 'artifact_version': {'type': 'string', 'required': False}, 'app_config': {'type': 'map', 'required': False}, 'app_preferences': {'type': 'map', 'required': False}, 'program_preferences': {'type': 'list', 'required': False}, 'programs': {'type': 'list', 'required': False}, 'streamname': {'type': 'string', 'required': False}, 'namespace': {'type': 'string', 'required': False}, 'service_endpoints': {'type': 'list', 'required': False}, 'connections': {'type': 'map', 'required': False}}, 'attributes': {'service_component_name': {'type': 'string'}}, 'requirements': [{'host': {'capability': 'dcae.capabilities.cdapHost', 'relationship': 'dcae.relationships.component_contained_in'}}], 'interfaces': {'cloudify.interfaces.lifecycle': {'type': 'tosca.interfaces.Root', 'create': {'inputs': {'connected_broker_dns_name': {'type': 'string'}}}}}}}",0
"{'dcae.nodes.composition.virtual': {'derived_from': 'tosca.nodes.Root', 'properties': {'service_id': {'type': 'string', 'required': True}, 'location_id': {'type': 'string', 'required': True}}, 'capabilities': {'host': {'type': 'dcae.capabilities.composition.host'}}}}",0
"{'tosca.dcae.nodes.dockerHost': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'location_id': {'type': 'string', 'required': True}, 'docker_host_override': {'type': 'string'}}, 'capabilities': {'host': {'type': 'dcae.capabilities.dockerHost'}}, 'requirements': [{'composition': {'capability': 'dcae.capabilities.composition.host'}}]}}",0
"{'dcae.nodes.SelectedDockerHost': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'location_id': {'type': 'string', 'required': True}, 'docker_host_override': {'type': 'string'}}, 'capabilities': {'host': {'type': 'dcae.capabilities.dockerHost'}}}}",0
"{'dcae.nodes.policy': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'policy_id': {'type': 'string', 'required': True}}, 'capabilities': {'policy': {'type': 'dcae.capabilities.policy'}}}}",0
"{'tosca.dcae.nodes.policy': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'policy_name': {'type': 'string'}, 'policy_id': {'type': 'string', 'required': True}}, 'capabilities': {'policy': {'type': 'dcae.capabilities.policy'}}}}",0
"{'tosca.dcae.nodes.policies': {'derived_from': 'tosca.dcae.nodes.Root', 'properties': {'policyName': {'type': 'string'}, 'configName': {'type': 'string'}, 'onapName': {'type': 'string'}, 'configAttributes': {'type': 'string'}, 'unique': {'type': 'boolean'}}, 'capabilities': {'policy': {'type': 'dcae.capabilities.policy'}}}}",0
"{'dcae.nodes.policies': {'derived_from': 'cloudify.dcae.nodes.Root', 'properties': {'policy_filter': {'type': 'map'}}, 'capabilities': {'policy': {'type': 'dcae.capabilities.policy'}}}}",0
"{'policy.nodes.Root': {'derived_from': 'tosca.nodes.Root', 'properties': {'policyName': {'type': 'string', 'required': True}, 'policyVersion': {'type': 'string', 'required': True}, 'policyScope': {'type': 'string', 'required': True}, 'policyDescription': {'type': 'string', 'required': False}}}}",0
"{'tosca.nodes.Container.Database.MySQL': {'description': 'MySQL container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.Database', 'requirements': [{'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo'}}]}}",0
"{'tosca.nodes.Container.WebApplication.Wordpress': {'description': 'Wordpress container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.WebApplication', 'requirements': [{'wordpress_db_host': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo'}}]}}",0
"{'tosca.nodes.WebServer.Apache': {'derived_from': 'tosca.nodes.WebServer', 'description': 'The TOSCA Apache Node Type represents an apache component that can be managed and run by a TOSCA Compute Node Type.\n', 'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'port': {'type': 'integer', 'description': 'Port for the Apache server', 'default': 80, 'constraints': [{'greater_or_equal': 1}]}, 'document_root': {'type': 'string', 'default': '/var/www'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'ip': 'string', 'port': 'integer', 'doc_root': 'string'}, 'implementation': 'string'}, 'start': 'string'}}}}",0
"{'tosca.nodes.Database.WordpressDB': {'derived_from': 'tosca.nodes.Database', 'description': 'Database for Wordpress Web App', 'requirements': [{'connect': {'capability': 'tosca.capabilities.Root', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.Root'}}]}}",0
"{'tosca.nodes.SoftwareComponent.PHP': {'derived_from': 'tosca.nodes.SoftwareComponent', 'description': 'PHP install through apt-get.', 'capabilities': {'attachWebsite': {'type': 'tosca.capabilities.Root'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'ip': 'string'}, 'implementation': 'string'}}}}}",0
"{'tosca.nodes.WebApplication.WordPress': {'derived_from': 'tosca.nodes.WebApplication', 'description': 'The TOSCA Wordpress Node Type represents a Wordpress CMS.', 'properties': {'zip_url': {'type': 'string', 'default': 'https://wordpress.org/latest.zip'}, 'context_root': {'type': 'string', 'default': '/'}}, 'attributes': {'max_user_number': {'type': 'integer', 'default': 10, 'description': 'Max user number'}, 'wordpress_url': {'concat': ['http://', {'get_attribute': ['HOST', 'public_address']}, ':', {'get_property': ['HOST', 'port']}, {'get_property': ['SELF', 'context_root']}]}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.WebServer', 'relationship': 'tosca.relationships.WordpressHostedOnApache'}}, {'database': {'capability': 'tosca.capabilities.Endpoint.Database', 'node': 'tosca.nodes.Database', 'relationship': 'tosca.relationships.WordpressConnectToMysql', 'lower_bound': 1, 'upper_bound': 1}}, {'php': {'capability': 'tosca.capabilities.Root', 'node': 'tosca.nodes.SoftwareComponent', 'relationship': 'tosca.relationships.WordpressConnectToPHP', 'lower_bound': 1, 'upper_bound': 1}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'webfile_url': 'string'}, 'implementation': 'string'}}}}}",0
"{'tosca.nodes.Container.Database.MySQL': {'description': 'MySQL container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.Database', 'requirements': [{'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.Container.WebApplication.Wordpress': {'description': 'Wordpress container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.WebApplication', 'requirements': [{'wordpress_db_host': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.Container.WebApplication.UserApp': {'description': 'Wordpress container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.WebApplication', 'requirements': [{'MONGO_HOST': {'capability': 'tosca.capabilities.Endpoint.Database', 'relationship': 'tosca.relationships.ConnectsTo'}}]}}",0
"{'tosca.nodes.Container.Database.MongoDB': {'description': 'MongoDB container from the Docker Hub repository\n', 'derived_from': 'tosca.nodes.Container.Database', 'requirements': [{'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.Container.Application.RabbitMQ': {'derived_from': 'tosca.nodes.Container.Application', 'description': 'TOSCA Container for RabbitMQ\n', 'capabilities': {'queue_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'tosca.nodes.Container.WebApplication.AppWithVolume': {'derived_from': 'tosca.nodes.Container.WebApplication', 'requirements': [{'volume': {'capability': 'tosca.capabilities.Attachment', 'relationship': 'tosca.relationships.AttachesTo', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.Container.Database': {'derived_from': 'tosca.nodes.Container.Application', 'description': 'TOSCA Container for Databases which employs the same capabilities and properties of the tosca.nodes.Database but which extends from the Container.Application node_type\n', 'properties': {'user': {'required': False, 'type': 'string', 'description': 'User account name for DB administration\n'}, 'port': {'required': False, 'type': 'integer', 'description': 'The port the database service will use to listen for incoming data and requests.\n'}, 'name': {'required': False, 'type': 'string', 'description': 'The name of the database.\n'}, 'password': {'required': False, 'type': 'string', 'description': 'The password for the DB user account\n'}}, 'capabilities': {'database_endpoint': {'type': 'tosca.capabilities.Endpoint.Database'}}}}",0
"{'tosca.nodes.Container.WebApplication': {'derived_from': 'tosca.nodes.Container.Application', 'description': 'TOSCA Container for WebApplication which employs the same capabilities and properties of the tosca.nodes.WebApplication but which extends from the Container.Application node_type\n', 'properties': {'context_root': {'type': 'string', 'required': False}}, 'capabilities': {'app_endpoint': {'type': 'tosca.capabilities.Endpoint'}}}}",0
"{'draco.nodes.IaaS': {'derived_from': 'tosca.nodes.Compute', 'version': 1.0, 'description': 'This node type extends the normative node type ""Compute"", and  permits detailing the features of an IaaS offering.\n', 'properties': {'service_name': {'type': 'string', 'required': False}}, 'capabilities': {'host': {'type': 'draco.capabilities.Container'}}}}",0
"{'draco.nodes.PaaS': {'derived_from': 'tosca.nodes.Compute', 'version': 1.0, 'description': 'This node type extends the normative node type ""Compute"", and  permits detailing the features of a PaaS offering.\n', 'capabilities': {'host': {'type': 'draco.capabilities.Hosting'}, 'scalable': {'type': 'draco.capabilities.Scalable'}}}}",0
"{'tosker.nodes.Container': {'derived_from': 'tosca.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'ports': {'type': 'map'}, 'env_variable': {'type': 'map'}, 'command': {'type': 'string'}}, 'properties': {'ports': {'type': 'map', 'required': False}, 'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}}, 'requirements': [{'storage': {'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}, {'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Volume': {'derived_from': 'tosker.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'size': {'type': 'string'}}, 'properties': {'size': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Container': {'derived_from': 'tosker.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'ports': {'type': 'map'}}, 'properties': {'ports': {'type': 'map', 'required': False}}, 'requirements': [{'storage': {'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Container.Executable': {'derived_from': 'tosker.nodes.Container', 'attributes': {'env_variable': {'type': 'map'}, 'command': {'type': 'string'}}, 'properties': {'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}}, 'requirements': [{'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container.Executable'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container.Executable'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Volume': {'derived_from': 'tosker.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'size': {'type': 'string'}}, 'properties': {'size': {'type': 'string', 'required': False}}, 'capabilities': {'attachment': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.nodes.Container', 'tosker.nodes.Container.Executable'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Software': {'derived_from': 'tosker.nodes.Root', 'requirements': [{'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}, {'host': {'capability': 'tosca.capabilities.Container', 'occurrences': 1, 'node': 'tosker.nodes.Container', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container.Executable'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container.Executable'], 'occurrences': [0, 'UNBOUNDED']}, 'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.nodes.Container': {'derived_from': 'tosca.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'ports': {'type': 'map'}, 'env_variable': {'type': 'map'}, 'command': {'type': 'string'}, 'supported_sw': {'type': 'map', 'required': False}, 'os_distribution': {'type': 'string', 'required': False}}, 'properties': {'ports': {'type': 'map', 'required': False}, 'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}, 'supported_sw': {'type': 'map', 'required': False}, 'os_distribution': {'type': 'string', 'required': False}}, 'requirements': [{'storage': {'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}, {'connection': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'dependency': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.nodes.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.nodes.Software'], 'occurrences': [0, 'UNBOUNDED']}, 'endpoint': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}, 'feature': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.nodes.Software', 'tosker.nodes.Container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.docker.volume': {'derived_from': 'tosca.nodes.Root', 'attributes': {'id': {'type': 'string'}}, 'properties': {'driver': {'type': 'string', 'required': False}, 'device': {'type': 'string', 'required': False}, 'type': {'type': 'string', 'required': False}, 'driver_opt': {'type': 'map', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.container']}}}}",0
"{'tosker.docker.container': {'derived_from': 'tosca.nodes.Root', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'env_variable': {'type': 'map', 'required': False}, 'cmd': {'type': 'string', 'required': False}, 'ports': {'type': 'map', 'required': False}}, 'properties': {'env_variable': {'type': 'map', 'required': False}, 'cmd': {'type': 'string', 'required': False}, 'ports': {'type': 'map', 'required': False}}, 'requirements': [{'link': {'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.ConnectsTo', 'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED']}}, {'volume': {'node': 'tosker.docker.volume', 'relationship': 'tosca.relationships.AttachesTo', 'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.software']}, 'link': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.software', 'tosker.docker.container']}}}}",0
"{'tosker.software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'link': {'node': 'tosker.software', 'relationship': 'tosca.relationships.ConnectsTo', 'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED']}}, {'host': {'node': 'tosker.software', 'relationship': 'tosca.relationships.ConnectsTo', 'capability': 'tosca.capabilities.Attachment', 'occurrences': 1}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.software']}, 'link': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.software', 'tosker.docker.container']}}}}",0
"{'tosker.docker.container': {'derived_from': 'tosca.nodes.Container.Runtime', 'attributes': {'id': {'type': 'string'}, 'private_address': {'type': 'string'}, 'public_address': {'type': 'string'}, 'ports': {'type': 'map', 'required': False}}, 'properties': {'ports': {'type': 'map', 'required': False}}, 'requirements': [{'attach': {'capability': 'tosca.capabilities.Attachment', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.docker.volume', 'relationship': 'tosca.relationships.AttachesTo'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.software'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.docker.container.persistent': {'derived_from': 'tosker.docker.container', 'attributes': {'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}}, 'properties': {'env_variable': {'type': 'map', 'required': False}, 'command': {'type': 'string', 'required': False}}, 'requirements': [{'connect': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'depend': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.DependsOn'}}], 'capabilities': {'connect': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.software', 'tosker.docker.container.persistent'], 'occurrences': [0, 'UNBOUNDED']}, 'depend': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.software', 'tosker.docker.container.persistent'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.docker.volume': {'derived_from': 'tosca.nodes.BlockStorage', 'attributes': {'id': {'type': 'string'}, 'driver': {'type': 'string', 'required': False}, 'device': {'type': 'string', 'required': False}, 'type': {'type': 'string', 'required': False}, 'size': {'type': 'string', 'required': False}, 'driver_opt': {'type': 'map', 'required': False}}, 'properties': {'driver': {'type': 'string', 'required': False}, 'device': {'type': 'string', 'required': False}, 'type': {'type': 'string', 'required': False}, 'size': {'type': 'string', 'required': False}, 'driver_opt': {'type': 'map', 'required': False}}, 'capabilities': {'attach': {'type': 'tosca.capabilities.Attachment', 'valid_source_types': ['tosker.docker.container.persistent', 'tosker.docker.container'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosker.software': {'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'connect': {'capability': 'tosca.capabilities.Endpoint', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.ConnectsTo'}}, {'depend': {'capability': 'tosca.capabilities.Node', 'occurrences': [0, 'UNBOUNDED'], 'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.DependsOn'}}, {'host': {'capability': 'tosca.capabilities.Container', 'occurrences': 1, 'node': 'tosker.docker.container', 'relationship': 'tosca.relationships.HostedOn'}}], 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosker.software'], 'occurrences': [0, 'UNBOUNDED']}, 'connect': {'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['tosker.software', 'tosker.docker.container.persistent'], 'occurrences': [0, 'UNBOUNDED']}, 'depend': {'type': 'tosca.capabilities.Node', 'valid_source_types': ['tosker.software', 'tosker.docker.container.persistent'], 'occurrences': [0, 'UNBOUNDED']}}}}",0
"{'tosca.nodes.chain.function': {'derived_from': 'tosca.nodes.Root', 'attributes': {'outputs': {'type': 'map'}, 'persisted_context': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'implementation': 'chains.tasks:create'}, 'start': {'implementation': 'chains.tasks:start'}, 'stop': {'implementation': 'chains.tasks:stop'}, 'delete': {'implementation': 'chains.tasks:delete'}}}}}",0
"{'tosca.artifacts.chain.persisted_context': {'derived_from': 'tosca.artifacts.File', 'file': {'type': 'string', 'required': True}}}",0
"{'tosca.artifacts.chain.deployment_template': {'derived_from': 'tosca.artifacts.File', 'file': {'type': 'string', 'required': True}}}",0
"{'tosca.artifacts.chain.deployment_inputs': {'derived_from': 'tosca.artifacts.File', 'file': {'type': 'string', 'required': True}}}",0
"{'sodalite.nodes.cloud.aws.info': {'derived_from': 'tosca.nodes.Root', 'properties': {'region_name': {'type': 'string'}, 'aws_access_key': {'type': 'string'}, 'aws_secret_key': {'type': 'string'}, 'ami_filter': {'type': 'string'}}, 'attributes': {'region_info': {'type': 'string', 'default': ''}, 'vpc_info': {'type': 'string', 'default': ''}, 'vpc_subnet_info': {'type': 'string', 'default': ''}, 'ami_info': {'type': 'string', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'region_name': {'type': 'string', 'default': {'get_property': ['SELF', 'region_name']}}, 'aws_access_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_access_key']}}, 'aws_secret_key': {'type': 'string', 'default': {'get_property': ['SELF', 'aws_secret_key']}}, 'ami_filter': {'type': 'string', 'default': {'get_property': ['SELF', 'ami_filter']}}}, 'implementation': {'primary': 'playbooks/aws_get_region_info.yml'}}}}}}}",0
"{'sodalite.nodes.cloud.aws.transform': {'derived_from': 'tosca.nodes.Root', 'properties': {'namespace': {'type': 'string'}}, 'attributes': {'transformation_result': {'type': 'string'}}, 'requirements': [{'info': {'node': 'sodalite.nodes.cloud.aws.info', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'namespace': {'type': 'string', 'default': {'get_property': ['SELF', 'namespace']}}, 'region_name': {'type': 'string', 'default': {'get_property': ['SELF', 'info', 'region_name']}}, 'region_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'region_info']}}, 'vpc_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'vpc_info']}}, 'vpc_subnet_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'vpc_subnet_info']}}, 'ami_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'ami_info']}}}, 'implementation': {'primary': 'playbooks/aws_transform_info.yml', 'dependencies': ['artifacts/aws.j2.yaml']}}}}}}}",0
"{'sodalite.nodes.hpc.wm.slurm': {'description': 'slurm wm, here we can define properties/attributes applicable for slurm WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}}}}",0
"{'sodalite.nodes.hpc.wm.slurm.info': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.slurm', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'attributes': {'node_info': {'type': 'string'}, 'partition_info': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/slurm_get_info.yml'}}}}}}}",0
"{'sodalite.nodes.hpc.wm.slurm.transform': {'derived_from': 'tosca.nodes.Root', 'properties': {'namespace': {'type': 'string'}}, 'attributes': {'transformation_result': {'type': 'string'}}, 'requirements': [{'wm': {'node': 'sodalite.nodes.hpc.wm.slurm', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}, {'info': {'node': 'sodalite.nodes.hpc.wm.slurm.info', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'frontend_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'wm', 'public_address']}}, 'namespace': {'type': 'string', 'default': {'get_property': ['SELF', 'namespace']}}, 'node_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'node_info']}}, 'partition_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'partition_info']}}}, 'implementation': {'primary': 'playbooks/slurm_transform_info.yml', 'dependencies': ['artifacts/slurm.j2.yaml']}}}}}}}",0
"{'sodalite.nodes.cloud.openstack.info': {'derived_from': 'tosca.nodes.Root', 'properties': {'os_env': {'type': 'map'}}, 'attributes': {'os_image_info': {'type': 'string', 'default': ''}, 'os_flavor_info': {'type': 'string', 'default': ''}, 'os_networks': {'type': 'string', 'default': ''}, 'os_security_groups': {'type': 'string', 'default': ''}, 'os_key_pairs': {'type': 'string', 'default': ''}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'os_env': {'type': 'string', 'default': {'get_property': ['SELF', 'os_env']}}}, 'implementation': {'primary': 'playbooks/openstack_get_info.yml'}}}}}}}",0
"{'sodalite.nodes.cloud.openstack.transform': {'derived_from': 'tosca.nodes.Root', 'properties': {'namespace': {'type': 'string'}}, 'attributes': {'transformation_result': {'type': 'string'}}, 'requirements': [{'info': {'node': 'sodalite.nodes.cloud.openstack.info', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'namespace': {'type': 'string', 'default': {'get_property': ['SELF', 'namespace']}}, 'os_image_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'os_image_info']}}, 'os_flavor_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'os_flavor_info']}}, 'os_networks': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'os_networks']}}, 'os_security_groups': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'os_security_groups']}}, 'os_key_pairs': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'os_key_pairs']}}}, 'implementation': {'primary': 'playbooks/openstack_transform_info.yml', 'dependencies': ['artifacts/openstack.j2.yaml']}}}}}}}",0
"{'sodalite.nodes.ssh.key': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'node': 'tosca.nodes.Compute', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'properties': {'ssh_key': {'type': 'string'}, 'ssh_key_password': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'ssh_key': {'type': 'string', 'default': {'get_property': ['SELF', 'ssh_key']}}, 'ssh_key_password': {'type': 'string', 'default': {'get_property': ['SELF', 'ssh_key_password']}}}, 'implementation': {'primary': 'playbooks/add_key.yml'}}, 'delete': {'implementation': {'primary': 'playbooks/remove_key.yml'}}}}}}}",0
"{'sodalite.nodes.hpc.wm.torque': {'description': 'torque wm, here we can define properties/attributes applicable for torque WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}}}}",0
"{'sodalite.nodes.hpc.wm.torque.info': {'derived_from': 'tosca.nodes.Root', 'requirements': [{'host': {'node': 'sodalite.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'attributes': {'node_info': {'type': 'string'}, 'queue_info': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'wm_public_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'type': 'string', 'default': {'get_attribute': ['SELF', 'host', 'username']}}}, 'implementation': {'primary': 'playbooks/torque_get_info.yml'}}}}}}}",0
"{'sodalite.nodes.hpc.wm.torque.transform': {'derived_from': 'tosca.nodes.Root', 'properties': {'namespace': {'type': 'string'}}, 'attributes': {'transformation_result': {'type': 'string'}}, 'requirements': [{'wm': {'node': 'sodalite.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}, {'info': {'node': 'sodalite.nodes.hpc.wm.torque.info', 'capability': 'tosca.capabilities.Root', 'relationship': 'tosca.relationships.DependsOn'}}], 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'frontend_address': {'type': 'string', 'default': {'get_attribute': ['SELF', 'wm', 'public_address']}}, 'namespace': {'type': 'string', 'default': {'get_property': ['SELF', 'namespace']}}, 'node_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'node_info']}}, 'queue_info': {'type': 'string', 'default': {'get_attribute': ['SELF', 'info', 'queue_info']}}}, 'implementation': {'primary': 'playbooks/torque_transform_info.yml', 'dependencies': ['artifacts/torque.j2.yaml']}}}}}}}",0
"{'test_type': {'derived_from': 'cloudify.nodes.Root', 'properties': {'test_property': {'default': 'test_property_default_value'}}}}",0
"{'dice.components.dds.DeploymentService': {'derived_from': 'dice.chef.SoftwareComponent', 'properties': {'manager': {'default': {'get_input': 'cfy_manager'}}, 'manager_user': {'default': {'get_input': 'cfy_manager_username'}}, 'manager_pass': {'default': {'get_input': 'cfy_manager_password'}}, 'manager_cacert': {'default': {'get_input': 'cfy_manager_cacert'}}, 'manager_protocol': {'default': {'get_input': 'cfy_manager_protocol'}}, 'superuser_username': {'default': {'get_input': 'superuser_username'}}, 'superuser_password': {'default': {'get_input': 'superuser_password'}}, 'superuser_email': {'default': {'get_input': 'superuser_email'}}, 'sources': {'default': {'get_input': 'sources'}}, 'debug_mode': {'default': {'get_input': 'enable_debug'}}, 'ssh_key': {'default': {'get_input': 'ssh_key'}}, 'no_celery_workers': {'default': {'get_input': 'no_celery_workers'}}, 'configure_runlist': {'default': ['recipe[apt::default]', 'recipe[dice_common::host]', 'recipe[dice_deployment_service::default]', 'recipe[dice_common::consul_common]', 'recipe[dice_common::consul_server]']}}, 'interfaces': {'cloudify.interfaces.lifecycle': {'create': {'implementation': 'dice.dice_plugin.tasks.base.download_resources', 'inputs': {'resource_pairs': {'description': 'DO NOT CHANGE THIS DEFAULT MAPPING WITHOUT CHANGING CHEF RECIPE FOR DICE DEPLOYMENT SERVICE. You have been warned.\n', 'default': [['dds_tarball', {'get_property': ['SELF', 'sources']}], ['cfy_crt', {'get_property': ['SELF', 'manager_cacert']}]]}}}}}}}",0
"{'dice.firewall_rules.dds.DeploymentService': {'derived_from': 'dice.firewall_rules.Base', 'properties': {'rules': {'default': [{'ip_prefix': '0.0.0.0/0', 'port': 22, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'port': 53, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'port': 53, 'protocol': 'udp'}, {'ip_prefix': '0.0.0.0/0', 'port': 80, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'port': 443, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'port': 5555, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'from_port': 8300, 'to_port': 8302, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'from_port': 8300, 'to_port': 8302, 'protocol': 'udp'}, {'ip_prefix': '0.0.0.0/0', 'port': 8500, 'protocol': 'tcp'}, {'ip_prefix': '0.0.0.0/0', 'port': 15672, 'protocol': 'tcp'}]}}}}",0
"{'radon.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string'}, 'image': {'type': 'string'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}}, 'implementation': 'nodetypes/vm/create.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'nodetypes/vm/delete.yml'}}}}}}",0
"{'radon.nodes.VM.OpenStack': {'attributes': {'id': {'description': 'OpenStack id of the VM', 'type': 'string'}}, 'derived_from': 'tosca.nodes.Compute', 'interfaces': {'Standard': {'operations': {'create': {'implementation': 'nodetypes/vm/create.yml', 'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}}}, 'delete': {'implementation': 'nodetypes/vm/delete.yml', 'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}}}, 'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'properties': {'flavor': {'description': 'OpenStack flavor id (flavor names are not accepted)', 'type': 'string'}, 'image': {'type': 'string'}, 'key_name': {'description': 'OpenStack SSH key name that should be placed on the VM', 'type': 'string'}, 'name': {'type': 'string'}, 'network': {'description': 'OpenStack network id (network names are not accepted)', 'type': 'string'}}}}",0
"{'radon.nodes.nifi.Nifi': {'capabilities': {'host': {'type': 'tosca.capabilities.Container'}}, 'derived_from': 'tosca.nodes.SoftwareComponent', 'interfaces': {'Standard': {'operations': {'configure': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/configure.yml', 'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}}, 'create': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/create.yml', 'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}}, 'delete': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/delete.yml', 'inputs': {'tarball_version': {'default': {'get_property': ['SELF', 'component_version']}}}}, 'start': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/start.yml'}, 'stop': {'implementation': 'nodetypes/radon/nodes/nifi/nifiplatform/files/stop.yml'}}, 'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'properties': {'component_version': {'description': 'The version of Apache Nifi', 'required': True, 'type': 'string'}, 'port': {'default': 8080, 'description': 'The port exposed by Apache Nifi', 'required': True, 'type': 'string'}}}}",0
"{'radon.nodes.nifi.nifipipeline': {'attributes': {'id': {'description': 'Unique ID of the pipeline', 'type': 'string'}, 'pipeline_type': {'description': 'type of the pipeline. e.g. processor, process-groups, inputPorts, RPG etc', 'type': 'string'}}, 'capabilities': {'connectToPipeline': {'description': 'Capability to receive data from other pipeline nodes', 'occurrences': [0, 'UNBOUNDED'], 'type': 'tosca.capabilities.Endpoint', 'valid_source_types': ['radon.nodes.nifi.nifipipeline']}}, 'derived_from': 'radon.nodes.abstract.DataPipeline', 'interfaces': {'Standard': {'operations': {'configure': {'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/configure.yml', 'inputs': {'cred_file_path': {'default': {'get_property': ['SELF', 'cred_file_path']}}, 'object_name': {'default': {'get_property': ['SELF', 'object_name']}}}}, 'create': {'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/create.yml', 'inputs': {'template_file': {'default': {'get_property': ['SELF', 'template_file']}}, 'template_name': {'default': {'get_property': ['SELF', 'template_name']}}}}, 'delete': {'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/delete.yml', 'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}}, 'start': {'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/start.yml', 'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}}, 'stop': {'implementation': 'nodetypes/radon/nodes/nifi/nifipipeline/files/stop.yml', 'inputs': {'pipeline_id': {'default': {'get_attribute': ['SELF', 'id']}}, 'pipeline_type': {'default': {'get_attribute': ['SELF', 'pipeline_type']}}}}}, 'type': 'tosca.interfaces.node.lifecycle.Standard'}}, 'properties': {'cred_file_path': {'description': 'credential file for access and secret key', 'type': 'string'}, 'object_name': {'description': 'object name in the process group', 'type': 'string'}, 'template_file': {'description': 'XML implementation of the pipeline', 'type': 'string'}, 'template_name': {'description': 'name of the pipeline', 'type': 'string'}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'radon.nodes.nifi.Nifi', 'relationship': 'tosca.relationships.HostedOn'}}, {'connectToPipeline': {'capability': 'tosca.capabilities.Endpoint', 'node': 'radon.nodes.nifi.nifipipeline', 'occurrences': [0, 1], 'relationship': 'radon.relationships.datapipelines.ConnectNiFi'}}]}}",unknown
"{'onap.multivim.nodes.Server': {'derived_from': 'tosca.nodes.Compute', 'properties': {'server': {'default': {}, 'type': 'onap.multivim.datatypes.Server', 'required': False}, 'ip': {'default': None, 'type': 'string'}, 'os_family': {'description': 'Property specifying what type of operating system family this compute node will run.', 'default': 'linux', 'type': 'string'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'image': {'default': '', 'type': 'string', 'description': ""The image for the server. May receive either the ID or the name of the image. note: This property is currently optional for backwards compatibility, but will be modified to become a required property in future versions (Default: '').""}, 'flavor': {'default': '', 'type': 'string', 'description': ""The flavor for the server. May receive either the ID or the name of the flavor. note: This property is currently optional for backwards compatibility, but will be modified to become a required property in future versions (Default: '').""}, 'use_password': {'default': False, 'type': 'boolean', 'description': ""A boolean describing whether this server image supports user-password authentication. Images that do should post the administrator user's password to the Openstack metadata service (e.g. via cloudbase); The password would then be retrieved by the plugin, decrypted using the server's keypair and then saved in the server's runtime properties.""}, 'management_network_name': {'type': 'string', 'description': 'The current implementation of the multivim plugin requires this field. The value of this field should be set to the multivim name of a network this server is attached to.'}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False, 'description': 'see Openstack Configuraion'}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > nova_plugin.server.create', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'onap.multivim.datatypes.Server'}}}, 'start': {'implementation': 'onap-multivim-plugin > nova_plugin.server.start', 'inputs': {'start_retry_interval': {'default': 30, 'type': 'integer'}, 'private_key_path': {'type': 'string', 'default': '', 'required': True}}}, 'stop': 'onap-multivim-plugin > nova_plugin.server.stop', 'delete': 'onap-multivim-plugin > nova_plugin.server.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': {'implementation': 'onap-multivim-plugin > nova_plugin.server.creation_validation', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'onap.multivim.datatypes.Server'}}}}}, 'requirements': [{'floating_ip': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.FloatingIP', 'relationship': 'onap.multivim.server_connected_to_floating_ip', 'occurrences': [0, 'UNBOUNDED']}}, {'security_group': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.SecurityGroup', 'relationship': 'onap.multivim.server_connected_to_security_group', 'occurrences': [0, 'UNBOUNDED']}}, {'port': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Port', 'relationship': 'onap.multivim.server_connected_to_port', 'occurrences': [0, 'UNBOUNDED']}}, {'key_pair': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.KeyPair', 'relationship': 'onap.multivim.server_connected_to_keypair', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'multivim_container': {'type': 'Node'}}}}",unknown
"{'onap.multivim.nodes.WindowsServer': {'derived_from': 'onap.multivim.nodes.Server', 'properties': {'use_password': {'default': True, 'type': 'boolean', 'description': 'Default changed for derived type because Windows instances need a password for agent installation'}, 'os_family': {'default': 'windows', 'type': 'string', 'description': '(updates the os_family default as a convenience)'}}}}",0
"{'onap.multivim.nodes.KeyPair': {'derived_from': 'tosca.nodes.Root', 'properties': {'keypair': {'default': {}, 'type': 'onap.multivim.datatypes.Keypair', 'required': False, 'description': 'the path (on the machine the plugin is running on) to where the private key should be stored. If use_external_resource is set to ""true"", the existing private key is expected to be at this path.'}, 'private_key_path': {'description': 'the path (on the machine the plugin is running on) to where the private key should be stored. If use_external_resource is set to ""true"", the existing private key is expected to be at this path.\n', 'type': 'string'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean describing whether this resource should be created or rather that it already exists on Openstack and should be used as-is.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': 'the name that will be given to the resource on Openstack (excluding optional prefix). If not provided, a default name will be given instead. If use_external_resource is set to ""true"", this exact value (without any prefixes applied) will be looked for as either the name or id of an existing keypair to be used.'}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > nova_plugin.keypair.create', 'inputs': {'args': {'required': False, 'default': {}, 'type': 'onap.multivim.datatypes.Keypair'}}}, 'delete': 'onap-multivim-plugin > nova_plugin.keypair.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > nova_plugin.keypair.creation_validation'}}, 'capabilities': {'keypair': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.Subnet': {'derived_from': 'tosca.nodes.Root', 'properties': {'subnet': {'type': 'onap.multivim.datatypes.Subnet', 'required': False, 'default': {'cidr': '172.16.0.0/16'}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.subnet.create', 'inputs': {'args': {'required': False, 'type': 'onap.multivim.datatypes.Subnet', 'default': {'cidr': '172.16.0.0/16'}}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.subnet.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': {'implementation': 'onap-multivim-plugin > neutron_plugin.subnet.creation_validation', 'inputs': {'args': {'type': 'onap.multivim.datatypes.Subnet', 'required': False, 'default': {'cidr': '172.16.0.0/16'}}}}}}, 'requirements': [{'router': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Router', 'relationship': 'onap.multivim.subnet_connected_to_router', 'occurrences': [0, 'UNBOUNDED']}}, {'network': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Network'}}], 'capabilities': {'subnet': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.SecurityGroup': {'derived_from': 'tosca.nodes.Root', 'properties': {'security_group': {'type': 'onap.multivim.datatypes.SecurityGroup', 'required': False, 'default': {}}, 'description': {'type': 'string', 'default': '', 'description': 'SecurityGroup description.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}, 'rules': {'default': [], 'type': 'list', 'entry_schema': 'onap.multivim.datatypes.Rules'}, 'disable_default_egress_rules': {'default': False, 'type': 'boolean', 'description': 'a flag for removing the default rules which https://wiki.multivim.org/wiki/Neutron/SecurityGroups#Behavior. If not set to `true`, these rules will remain, and exist alongside any additional rules passed using the `rules` property.'}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.security_group.create', 'inputs': {'args': {'type': 'onap.multivim.datatypes.SecurityGroup', 'required': False, 'default': {}}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.security_group.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > neutron_plugin.security_group.creation_validation'}}, 'capabilities': {'security': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.Router': {'derived_from': 'tosca.nodes.Root', 'properties': {'router': {'type': 'onap.multivim.datatypes.Router', 'required': False, 'default': {}}, 'external_network': {'default': '', 'type': 'string', 'description': 'An external network name or ID. If given, the router will use this external network as a gateway.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string)."", 'type': 'string'}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.router.create', 'inputs': {'args': {'default': {}, 'type': 'onap.multivim.datatypes.Router', 'required': False}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.router.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > neutron_plugin.router.creation_validation'}}, 'capabilities': {'gateway': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.Port': {'derived_from': 'tosca.nodes.Root', 'properties': {'port': {'type': 'onap.multivim.datatypes.Port', 'required': False, 'default': {}}, 'fixed_ip': {'default': '', 'type': 'string', 'description': 'may be used to request a specific fixed IP for the port. If the IP is unavailable (either already taken or does not belong to a subnet the port is on) an error will be raised.'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.port.create', 'inputs': {'args': {'default': {}, 'type': 'onap.multivim.datatypes.Port', 'required': False}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.port.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > neutron_plugin.port.creation_validation'}}, 'requirements': [{'security_group': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.SecurityGroup', 'relationship': 'onap.multivim.port_connected_to_security_group', 'occurrences': [0, 'UNBOUNDED']}}, {'floating_ip': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.FloatingIP', 'relationship': 'onap.multivim.port_connected_to_floating_ip', 'occurrences': [0, 'UNBOUNDED']}}, {'subnet': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Subnet', 'relationship': 'onap.multivim.port_connected_to_subnet'}}, {'network': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Network', 'occurrences': [0, 'UNBOUNDED']}}], 'capabilities': {'entry_point': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.Network': {'derived_from': 'tosca.nodes.Root', 'properties': {'network': {'type': 'onap.multivim.datatypes.Network', 'required': False, 'default': {}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.network.create', 'inputs': {'args': {'default': {}, 'type': 'onap.multivim.datatypes.Network', 'required': False}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.network.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > neutron_plugin.network.creation_validation'}}, 'capabilities': {'address_space': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.FloatingIP': {'derived_from': 'tosca.nodes.Root', 'attributes': {'floating_ip_address': {'type': 'string'}}, 'properties': {'floatingip': {'type': 'onap.multivim.datatypes.FloatingIP', 'required': False, 'default': {}}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string)."", 'default': '', 'type': 'string'}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > neutron_plugin.floatingip.create', 'inputs': {'args': {'default': {}, 'type': 'onap.multivim.datatypes.FloatingIP', 'required': False}}}, 'delete': 'onap-multivim-plugin > neutron_plugin.floatingip.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > neutron_plugin.floatingip.creation_validation'}}, 'capabilities': {'address': {'type': 'tosca.capabilities.Node'}}}}",0
"{'onap.multivim.nodes.Volume': {'derived_from': 'tosca.nodes.Root', 'properties': {'volume': {'default': {}, 'type': 'onap.multivim.datatypes.Volume', 'description': 'key-value volume configuration as described in http://developer.multivim.org/api-ref-blockstorage-v1.html#volumes-v1. (**DEPRECATED - Use the `args` input in create operation instead**)'}, 'use_external_resource': {'type': 'boolean', 'default': False, 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': None, 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'device_name': {'default': 'auto', 'type': 'string', 'description': 'The device name this volume will be attached to. Default value is *auto*, which means multivim will auto-assign a device. Note that if you do explicitly set a value, this value may not be the actual device name assigned. Sometimes the device requested will not be available and multivim will assign it to a different device, this is why we recommend using *auto*.'}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}, 'boot': {'type': 'boolean', 'default': False, 'description': 'If a Server instance is connected to this Volume by a relationship, this volume will be used as the boot volume for that Server.'}}, 'interfaces': {'Standard': {'create': {'implementation': 'onap-multivim-plugin > cinder_plugin.volume.create', 'inputs': {'args': {'default': {}, 'type': 'onap.multivim.datatypes.Volume', 'required': False}, 'status_attempts': {'description': ""Number of times to check for the creation's status before failing"", 'type': 'integer', 'default': 20}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the creation's status"", 'type': 'integer', 'default': 15}}}, 'delete': 'onap-multivim-plugin > cinder_plugin.volume.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > cinder_plugin.volume.creation_validation'}}, 'requirements': [{'server': {'capability': 'tosca.capabilities.Node', 'node': 'onap.multivim.nodes.Server', 'relationship': 'onap.multivim.volume_attached_to_server'}}]}}",0
"{'onap.multivim.nodes.Image': {'derived_from': 'tosca.nodes.Root', 'properties': {'image': {'description': 'Required parameters are (container_format, disk_format). Accepted types are available on http://docs.multivim.org/developer/glance/formats.html To create an image from the local file its path should be added in data parameter.', 'default': {}, 'type': 'map', 'entry_schema': 'string'}, 'image_url': {'default': '', 'type': 'string', 'description': 'The multivim resource URL for the image.'}, 'use_external_resource': {'default': False, 'type': 'boolean', 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': 'onap-multivim-plugin > glance_plugin.image.create', 'start': {'implementation': 'onap-multivim-plugin > glance_plugin.image.start', 'inputs': {'start_retry_interval': {'default': 30, 'type': 'integer'}}}, 'delete': 'onap-multivim-plugin > glance_plugin.image.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'onap-multivim-plugin > glance_plugin.image.creation_validation'}}}}",0
"{'onap.multivim.nodes.Project': {'derived_from': 'tosca.nodes.Root', 'properties': {'project': {'default': {}, 'type': 'onap.multivim.datatypes.Project', 'description': 'key-value project configuration.'}, 'users': {'default': [], 'type': 'list', 'entry_schema': 'string', 'description': 'List of users assigned to this project in the following format:\n  { name: string, roles: [string] }'}, 'quota': {'default': {}, 'type': 'map', 'entry_schema': 'string', 'description': 'A dictionary mapping service names to quota definitions for a proejct\n\ne.g::\n\n  quota:\n    neutron: <quota>\n    nova: <quota>\n'}, 'use_external_resource': {'default': False, 'type': 'boolean', 'description': 'a boolean for setting whether to create the resource or use an existing one. See the using existing resources section.'}, 'create_if_missing': {'default': False, 'type': 'boolean', 'description': 'If use_external_resource is ``true`` and the resource is missing, create it instead of failing.'}, 'resource_id': {'default': '', 'type': 'string', 'description': ""name to give to the new resource or the name or ID of an existing resource when the ``use_external_resource`` property is set to ``true`` (see the using existing resources section). Defaults to '' (empty string).""}, 'multivim_config': {'type': 'onap.multivim.datatypes.Config', 'required': False}}, 'interfaces': {'Standard': {'create': 'multivim.keystone_plugin.project.create', 'start': 'multivim.keystone_plugin.project.start', 'delete': 'multivim.keystone_plugin.project.delete'}, 'Validation': {'type': 'onap.multivim.interfaces.validation', 'creation': 'multivim.keystone_plugin.project.creation_validation'}}}}",0
"{'sodalite.nodes.DockerHost': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'registry_ip': {'type': 'string', 'description': 'IP of the SODALITE docker registry', 'required': True, 'default': 'localhost'}}, 'attributes': {'registry_ip': {'type': 'string', 'description': 'IP of the SODALITE docker registry'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'registry_ip': {'default': {'get_property': ['SELF', 'registry_ip']}}, 'public_ipv4_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}}, 'implementation': {'primary': 'playbooks/docker/create_docker_host.yml'}}, 'delete': {'inputs': {'registry_ip': {'default': {'get_property': ['SELF', 'registry_ip']}}}, 'implementation': {'primary': 'playbooks/docker/destroy_docker_host.yml'}}}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['sodalite.nodes.DockerizedComponent']}}}}",0
"{'sodalite.nodes.DockerizedComponent': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'image_name': {'type': 'string', 'description': 'The name of the image on the host', 'required': True}, 'ports': {'type': 'string', 'description': 'Port binding for the docker container ""exposed:internal"" like ""8081:8080""', 'required': True}, 'exposed_ports': {'type': 'string', 'description': 'Exposed ports of the container like ""8081""', 'required': True}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'registry_ip': {'default': {'get_attribute': ['SELF', 'host', 'registry_ip']}}, 'image_name': {'default': {'get_property': ['SELF', 'image_name']}}, 'ports': {'default': {'get_property': ['SELF', 'ports']}}, 'exposed_ports': {'default': {'get_property': ['SELF', 'exposed_ports']}}}, 'implementation': {'primary': 'playbooks/docker/dockerized_component_deploy.yml'}}, 'delete': {'inputs': {'image_name': {'default': {'get_property': ['SELF', 'image_name']}}, 'registry_ip': {'default': {'get_attribute': ['SELF', 'host', 'registry_ip']}}}, 'implementation': {'primary': 'playbooks/docker/dockerized_component_undeploy.yml'}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Compute', 'node': 'sodalite.nodes.DockerHost', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'sodalite.nodes.VM.OpenStack': {'derived_from': 'tosca.nodes.Compute', 'properties': {'name': {'type': 'string', 'description': 'Name that should be given to the VM in OpenStack'}, 'image': {'type': 'string', 'description': 'OpenStack image id (image names are not accepted)'}, 'flavor': {'type': 'string', 'description': 'OpenStack flavor id (flavor names are not accepted)'}, 'network': {'type': 'string', 'description': 'OpenStack network id (network names are not accepted)'}, 'security_groups': {'type': 'string', 'description': 'OpenStack names of the security groups to which the instance should be added.Comma separated string.'}, 'key_name': {'type': 'string', 'description': 'OpenStack SSH key name that should be placed on the VM'}}, 'attributes': {'id': {'type': 'string', 'description': 'OpenStack id of the VM'}, 'private_address': {'type': 'string', 'description': 'Private ipv4'}, 'public_address': {'type': 'string', 'description': 'Public ipv4'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'create': {'inputs': {'vm_name': {'default': {'get_property': ['SELF', 'name']}}, 'image': {'default': {'get_property': ['SELF', 'image']}}, 'flavor': {'default': {'get_property': ['SELF', 'flavor']}}, 'network': {'default': {'get_property': ['SELF', 'network']}}, 'security_groups': {'default': {'get_property': ['SELF', 'security_groups']}}, 'key_name': {'default': {'get_property': ['SELF', 'key_name']}}}, 'implementation': 'playbooks/vm/create.yml'}, 'delete': {'inputs': {'id': {'default': {'get_attribute': ['SELF', 'id']}}}, 'implementation': 'playbooks/vm/delete.yml'}}}}}",0
"{'tosca.nodes.Database.MySQL': {'derived_from': 'tosca.nodes.Database', 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': '', 'db_access_host': '%'}}}}}}",0
"{'tosca.nodes.DBMS.MySQL': {'derived_from': 'tosca.nodes.DBMS', 'properties': {'port': {'type': 'integer', 'description': 'reflect the default MySQL server port', 'default': 3306}, 'root_password': {'type': 'string', 'required': True}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Container', 'valid_source_types': ['tosca.nodes.Database.MySQL']}}, 'interfaces': {'Standard': {'create': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mysql/mysql_install.yml', 'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mysql/mysql_configure.yml', 'inputs': {'root_password': {'get_property': ['SELF', 'root_password']}, 'port': {'get_property': ['SELF', 'port']}}}}}}}",0
"{'tosca.nodes.WebServer.Apache': {'derived_from': 'tosca.nodes.WebServer', 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/apache/apache_install.yml'}, 'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/apache/apache_start.yml'}}}}}",0
"{'tosca.nodes.indigo.Database.MySQL': {'derived_from': 'tosca.nodes.Database.MySQL', 'properties': {'access_host': {'type': 'string', 'required': False, 'default': '%'}, 'root_password': {'type': 'string', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.DBMS.MySQL'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mysql/mysql_db_configure.yml', 'inputs': {'db_password': {'get_property': ['SELF', 'password']}, 'db_name': {'get_property': ['SELF', 'name']}, 'db_user': {'get_property': ['SELF', 'user']}, 'db_root_password': {'get_property': ['SELF', 'root_password']}, 'db_access_host': {'get_property': ['SELF', 'access_host']}}}}}}}",0
"{'tosca.nodes.indigo.MonitoredCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'zabbix_server': {'type': 'string', 'required': False, 'default': 'orchestrator.cloud.cnaf.infn.it'}, 'zabbix_server_port': {'type': 'tosca.datatypes.network.PortDef', 'required': False, 'default': 10051}, 'zabbix_server_metadata': {'type': 'string', 'required': False, 'default': 'Linux      668c875e-9a39-4dc0-a710-17c41376c1e0'}}, 'artifacts': {'zabbix_agent_role': {'file': 'indigo-dc.zabbix-agent', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/zabbix/zabbix_agent_install.yml', 'inputs': {'zabbix_server': {'get_property': ['SELF', 'zabbix_server']}, 'zabbix_server_port': {'get_property': ['SELF', 'zabbix_server_port']}, 'zabbix_server_metadata': {'get_property': ['SELF', 'zabbix_server_metadata']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyPortal': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'admin_email': {'type': 'string', 'description': 'email of the admin user', 'default': 'admin@admin.com', 'required': False}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'user': {'type': 'string', 'description': 'username to launch the galaxy daemon', 'default': 'galaxy', 'required': False}, 'install_path': {'type': 'string', 'description': 'path to install the galaxy tool', 'default': '/home/galaxy/galaxy', 'required': False}, 'export_dir': {'type': 'string', 'description': 'path to store galaxy data', 'default': '/export', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version to install', 'default': 'master', 'required': False}, 'instance_description': {'type': 'string', 'description': 'galaxy instance description', 'default': 'INDIGO Galaxy tests'}, 'instance_key_pub': {'type': 'string', 'description': 'galaxy instance ssh public key', 'default': 'your_ssh_public_key'}, 'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': False, 'default': 'galaxy-no-tools'}, 'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': False}}, 'requirements': [{'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_install.yml', 'inputs': {'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyPortalAndStorage': {'derived_from': 'tosca.nodes.indigo.GalaxyPortal', 'properties': {'os_storage': {'type': 'string', 'description': 'Storage type (Iaas Block Storage (default), Onedata, Filesystem encryption)', 'default': 'IaaS', 'required': True}, 'token': {'type': 'string', 'description': 'Access token for onedata space', 'default': 'not_a_token', 'required': False}, 'provider': {'type': 'string', 'description': 'default OneProvider', 'default': 'not_a_provider_url', 'required': False}, 'space': {'type': 'string', 'description': 'Onedata space', 'default': 'galaxy', 'required': False}}, 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'indigorepo_role': {'file': 'indigo-dc.galaxycloud-indigorepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_os_install.yml', 'inputs': {'os_storage': {'get_property': ['SELF', 'os_storage']}, 'userdata_token': {'get_property': ['SELF', 'token']}, 'userdata_oneprovider': {'get_property': ['SELF', 'provider']}, 'userdata_space': {'get_property': ['SELF', 'space']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyPortalFastConfig': {'derived_from': 'tosca.nodes.indigo.GalaxyPortalAndStorage', 'artifacts': {'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'indigorepo_role': {'file': 'indigo-dc.galaxycloud-indigorepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_os_role': {'file': 'indigo-dc.galaxycloud-os', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role-fastconfig': {'file': 'indigo-dc.galaxycloud-fastconfig', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_fastconfig.yml', 'inputs': {'os_storage': {'get_property': ['SELF', 'os_storage']}, 'userdata_token': {'get_property': ['SELF', 'token']}, 'userdata_oneprovider': {'get_property': ['SELF', 'provider']}, 'userdata_space': {'get_property': ['SELF', 'space']}, 'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",unknown
"{'tosca.nodes.indigo.GalaxyWN': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'front_end_ip': {'type': 'string', 'description': 'IP of the Front-End node', 'required': True}, 'export_dir': {'type': 'string', 'description': 'path to store galaxy data', 'default': '/export', 'required': True}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_wn_configure.yml', 'inputs': {'galaxy_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyWnToolDeps': {'derived_from': 'tosca.nodes.indigo.GalaxyWN', 'properties': {'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'version': {'type': 'string', 'description': 'galaxy version installed', 'default': 'master', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_wn_configure_tooldeps.yml', 'inputs': {'galaxy_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_version': {'get_property': ['SELF', 'version']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyWnCvmfsReferenceData': {'derived_from': 'tosca.nodes.indigo.GalaxyWnToolDeps', 'properties': {'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': True}, 'refdata_provider_type': {'type': 'string', 'description': 'Select Reference data provider type (Onedata, CernVM-FS or download)', 'default': 'cvmfs', 'required': False}, 'refdata_cvmfs_server_url': {'type': 'string', 'description': 'CernVM-FS server, replica or stratum-zero', 'default': 'server_url', 'required': False}, 'refdata_cvmfs_repository_name': {'type': 'string', 'description': 'Reference data CernVM-FS repository name', 'default': 'not_a_cvmfs_repository_name', 'required': False}, 'refdata_cvmfs_key_file': {'type': 'string', 'description': 'CernVM-FS public key', 'default': 'not_a_key', 'required': False}, 'refdata_cvmfs_proxy_url': {'type': 'string', 'description': 'CernVM-FS proxy url', 'default': 'DIRECT', 'required': False}, 'refdata_cvmfs_proxy_port': {'type': 'integer', 'description': 'CernVM-FS proxy port', 'default': 80, 'required': False}, 'refdata_dir': {'type': 'string', 'description': 'path to store galaxy reference data', 'default': '/refdata', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.Compute', 'relationship': 'tosca.relationships.HostedOn'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_wn_configure_cvmfs.yml', 'inputs': {'galaxy_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'export_dir': {'get_property': ['SELF', 'export_dir']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}, 'refdata_provider_type': {'get_property': ['SELF', 'refdata_provider_type']}, 'refdata_cvmfs_server_url': {'get_property': ['SELF', 'refdata_cvmfs_server_url']}, 'refdata_cvmfs_repository_name': {'get_property': ['SELF', 'refdata_cvmfs_repository_name']}, 'refdata_cvmfs_key_file': {'get_property': ['SELF', 'refdata_cvmfs_key_file']}, 'refdata_cvmfs_proxy_url': {'get_property': ['SELF', 'refdata_cvmfs_proxy_url']}, 'refdata_cvmfs_proxy_port': {'get_property': ['SELF', 'refdata_cvmfs_proxy_port']}, 'refdata_dir': {'get_property': ['SELF', 'refdata_dir']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyShedTool': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version installed', 'default': 'master', 'required': False}, 'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxycloud-tools', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'tooldeps_role': {'file': 'indigo-dc.galaxycloud-tooldeps', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_tools_configure.yml', 'inputs': {'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_admin_api_key': {'get_property': ['HOST', 'admin_api_key']}, 'instance_public_ip': {'get_attribute': ['HOST', 'public_address', 0]}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'get_refdata': {'get_property': ['SELF', 'reference_data']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyReferenceData': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'reference_data': {'type': 'boolean', 'description': 'Install Reference data', 'default': True, 'required': True}, 'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'refdata_repository_name': {'type': 'string', 'description': 'Onedata space name, CernVM-FS repository name or subdirectory downaload name', 'default': 'elixir-italy.galaxy.refdata', 'required': False}, 'refdata_provider_type': {'type': 'string', 'description': 'Select Reference data provider type (Onedata, CernVM-FS or download)', 'default': 'cvmfs', 'required': False}, 'refdata_provider': {'type': 'string', 'description': 'Oneprovider for reference data', 'default': 'not_a_provider', 'required': False}, 'refdata_token': {'type': 'string', 'description': 'Access token for reference data', 'default': 'not_a_token', 'required': False}, 'refdata_cvmfs_server_url': {'type': 'string', 'description': 'CernVM-FS server, replica or stratum-zero', 'default': 'server_url', 'required': False}, 'refdata_cvmfs_repository_name': {'type': 'string', 'description': 'Reference data CernVM-FS repository name', 'default': 'not_a_cvmfs_repository_name', 'required': False}, 'refdata_cvmfs_key_file': {'type': 'string', 'description': 'CernVM-FS public key', 'default': 'not_a_key', 'required': False}, 'refdata_cvmfs_proxy_url': {'type': 'string', 'description': 'CernVM-FS proxy url', 'default': 'DIRECT', 'required': False}, 'refdata_cvmfs_proxy_port': {'type': 'integer', 'description': 'CernVM-FS proxy port', 'default': 80, 'required': False}, 'refdata_dir': {'type': 'string', 'description': 'path to store galaxy reference data', 'default': '/refdata', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'cvmfs_role': {'file': 'indigo-dc.cvmfs-client', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'galaxy_role': {'file': 'indigo-dc.galaxycloud-refdata', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/galaxy/galaxy_redfata_configure.yml', 'inputs': {'get_refdata': {'get_property': ['SELF', 'reference_data']}, 'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'refdata_repository_name': {'get_property': ['SELF', 'refdata_repository_name']}, 'refdata_provider_type': {'get_property': ['SELF', 'refdata_provider_type']}, 'refdata_provider': {'get_property': ['SELF', 'refdata_provider']}, 'refdata_token': {'get_property': ['SELF', 'refdata_token']}, 'refdata_cvmfs_server_url': {'get_property': ['SELF', 'refdata_cvmfs_server_url']}, 'refdata_cvmfs_repository_name': {'get_property': ['SELF', 'refdata_cvmfs_repository_name']}, 'refdata_cvmfs_key_file': {'get_property': ['SELF', 'refdata_cvmfs_key_file']}, 'refdata_cvmfs_proxy_url': {'get_property': ['SELF', 'refdata_cvmfs_proxy_url']}, 'refdata_cvmfs_proxy_port': {'get_property': ['SELF', 'refdata_cvmfs_proxy_port']}, 'refdata_dir': {'get_property': ['SELF', 'refdata_dir']}}}}}}}",unknown
"{'tosca.nodes.indigo.ElasticCluster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'secret_token': {'type': 'string', 'description': 'Token to access CLUES web interface', 'default': 'not_very_secret_token', 'required': False}, 'deployment_id': {'type': 'string', 'description': 'ID of the deployment of this elastic cluster in the orchestrator', 'required': False}, 'orchestrator_url': {'type': 'string', 'description': 'URL of the orchestrator', 'required': False, 'default': 'http://orchestrator01-indigo.cloud.ba.infn.it:8080/orchestrator'}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': False, 'default': 'iam_access_token'}, 'iam_clues_client_id': {'type': 'string', 'description': 'INDIGO IAM client id to be used by CLUES', 'required': False, 'default': 'iam_clues_client_id'}, 'iam_clues_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret to be used by CLUES', 'required': False, 'default': 'iam_clues_client_secret'}, 'marathon_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the marathon endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}, 'chronos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the chronos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}, 'mesos_credentials': {'type': 'tosca.datatypes.Credential', 'description': 'Credentials to access the mesos endpoint from CLUES plugin', 'default': {'protocol': 'http', 'user': 'admin', 'token': 'password'}, 'required': False}, 'hybrid': {'type': 'boolean', 'description': 'Flag to specify that this ElasticCluster will work in a hybrid environment', 'default': False, 'required': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.clues', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/ec3/ec3_install.yml', 'inputs': {'clues_secret_token': {'get_property': ['SELF', 'secret_token']}, 'clues_queue_system': {'get_property': ['SELF', 'lrms', 'type']}, 'ec3_max_instances': {'get_property': ['SELF', 'wn', 'max_instances']}, 'ec3_deployment_id': {'get_property': ['SELF', 'deployment_id']}, 'orchestrator_url': {'get_property': ['SELF', 'orchestrator_url']}, 'ec3_iam_access_token': {'get_property': ['SELF', 'iam_access_token']}, 'ec3_iam_clues_client_id': {'get_property': ['SELF', 'iam_clues_client_id']}, 'ec3_iam_clues_client_secret': {'get_property': ['SELF', 'iam_clues_client_secret']}, 'clues_marathon_credentials': {'get_property': ['SELF', 'marathon_credentials']}, 'clues_chronos_credentials': {'get_property': ['SELF', 'chronos_credentials']}, 'clues_mesos_credentials': {'get_property': ['SELF', 'mesos_credentials']}}}}}, 'requirements': [{'wn': {'capability': 'tosca.capabilities.Scalable', 'node': 'tosca.nodes.indigo.LRMS.WorkerNode', 'relationship': 'tosca.relationships.indigo.Manages'}}, {'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.WorkerNode.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/lrms/torque/torque_wn_install.yml', 'inputs': {'torque_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'openvpn_role': {'file': 'indigo-dc.openvpn', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/lrms/slurm/slurm_wn_install.yml', 'inputs': {'slurm_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'slurm_public_front_end_ip': {'get_property': ['SELF', 'public_front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Torque': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Torque'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/lrms/torque/torque_fe_install.yml', 'inputs': {'torque_wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Slurm': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'artifacts': {'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'openvpn_role': {'file': 'indigo-dc.openvpn', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Slurm'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/lrms/slurm/slurm_fe_install.yml', 'inputs': {'wn_ips': {'get_property': ['SELF', 'wn_ips']}, 'front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker': {'derived_from': 'tosca.nodes.Container.Application.Docker', 'properties': {'command': {'required': False, 'type': 'string'}, 'uris': {'required': False, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'environment_variables': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'constraints': {'required': False, 'type': 'list', 'entry_schema': {'type': 'list', 'entry_schema': {'type': 'string'}}}, 'labels': {'required': False, 'type': 'map', 'entry_schema': {'type': 'string'}}, 'priviliged': {'required': False, 'type': 'boolean', 'default': False}, 'force_pull_image': {'required': False, 'type': 'boolean', 'default': False}}}}",0
"{'tosca.nodes.indigo.Container.Application.Docker.Chronos': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'properties': {'schedule': {'required': False, 'type': 'string'}, 'command': {'required': True, 'type': 'string'}, 'description': {'required': False, 'type': 'string'}, 'retries': {'required': False, 'type': 'integer'}, 'epsilon': {'required': False, 'type': 'string', 'default': 'PT10S'}, 'priviliged': {'required': False, 'type': 'boolean', 'default': True}, 'force_pull_image': {'required': False, 'type': 'boolean', 'default': True}}, 'capabilities': {'parent_job': {'type': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'valid_source_types': ['tosca.nodes.indigo.Container.Application.Docker.Chronos'], 'occurrences': [0, 'UNBOUNDED']}}, 'requirements': [{'parent_job': {'capability': 'tosca.capabilities.indigo.Container.Application.Docker.Chronos', 'node': 'tosca.nodes.indigo.Container.Application.Docker.Chronos', 'relationship': 'tosca.relationships.DependsOn', 'occurrences': [0, 1]}}]}}",0
"{'tosca.nodes.indigo.DariahRepository': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'cache_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'cache_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'cache_image': {'type': 'string', 'required': False, 'default': 'redis'}, 'db_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'db_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'db_image': {'type': 'string', 'required': False, 'default': 'postgres'}, 'es_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'es_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'es_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:elasticsearch'}, 'mq_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'mq_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'mq_image': {'type': 'string', 'required': False, 'default': 'rabbitmq:3-management'}, 'statsd_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'statsd_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'statsd_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:statsd'}, 'web_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'web_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'web_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}, 'worker_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'worker_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'worker_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}}, 'artifacts': {'dariahrepo_role': {'file': 'indigo-dc.dariahrepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/dariahrepo-setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'dariahrepo_app_cache_cpus': {'get_property': ['SELF', 'cache_cpus']}, 'dariahrepo_app_cache_mem': {'get_property': ['SELF', 'cache_mem']}, 'dariahrepo_app_cache_image': {'get_property': ['SELF', 'cache_image']}, 'dariahrepo_app_db_cpus': {'get_property': ['SELF', 'db_cpus']}, 'dariahrepo_app_db_mem': {'get_property': ['SELF', 'db_mem']}, 'dariahrepo_app_db_image': {'get_property': ['SELF', 'db_image']}, 'dariahrepo_app_es_cpus': {'get_property': ['SELF', 'es_cpus']}, 'dariahrepo_app_es_mem': {'get_property': ['SELF', 'es_mem']}, 'dariahrepo_app_es_image': {'get_property': ['SELF', 'es_image']}, 'dariahrepo_app_mq_cpus': {'get_property': ['SELF', 'mq_cpus']}, 'dariahrepo_app_mq_mem': {'get_property': ['SELF', 'mq_mem']}, 'dariahrepo_app_mq_image': {'get_property': ['SELF', 'mq_image']}, 'dariahrepo_app_statsd_cpus': {'get_property': ['SELF', 'statsd_cpus']}, 'dariahrepo_app_statsd_mem': {'get_property': ['SELF', 'statsd_mem']}, 'dariahrepo_app_statsd_image': {'get_property': ['SELF', 'statsd_image']}, 'dariahrepo_app_web_cpus': {'get_property': ['SELF', 'web_cpus']}, 'dariahrepo_app_web_mem': {'get_property': ['SELF', 'web_mem']}, 'dariahrepo_app_web_image': {'get_property': ['SELF', 'web_image']}, 'dariahrepo_app_worker_cpus': {'get_property': ['SELF', 'worker_cpus']}, 'dariahrepo_app_worker_mem': {'get_property': ['SELF', 'worker_mem']}, 'dariahrepo_app_worker_image': {'get_property': ['SELF', 'worker_image']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.Container.Application.Docker.Marathon': {'derived_from': 'tosca.nodes.indigo.Container.Application.Docker', 'attributes': {'load_balancer_ips': {'type': 'list', 'entry_schema': 'string'}}, 'properties': {'force_pull_image': {'required': False, 'type': 'boolean', 'default': True}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Mesos'}, 'host': {'type': 'tosca.capabilities.indigo.MesosMaster'}}, 'properties': {'mesos_masters_list': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False, 'default': ['127.0.0.1']}, 'mesos_authenticate_http': {'type': 'boolean', 'required': False, 'default': True}, 'mesos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'mesos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'enable_chronos': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos,v1.0.1-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'mesos_authenticate_http': {'get_property': ['SELF', 'mesos_authenticate_http']}, 'mesos_username': {'get_property': ['SELF', 'mesos_username']}, 'mesos_password': {'get_property': ['SELF', 'mesos_password']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'enable_chronos': {'get_property': ['SELF', 'enable_chronos']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}}}}}}}",unknown
"{'tosca.nodes.indigo.XCache': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ip': {'type': 'string', 'required': True}, 'orchestrator': {'type': 'string', 'required': True}, 'redirector_ip': {'type': 'string', 'required': False, 'default': 'ONLY NEEDED FOR MARATHON'}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'Marathon-user'}, 'marathon_password': {'type': 'string', 'required': False, 'default': 'Marathon-passwd'}, 'marathon_protocol': {'type': 'string', 'required': False, 'default': 'http'}, 'marathon_port': {'type': 'integer', 'required': False, 'default': 8080}, 'server_image': {'type': 'string', 'required': False, 'default': 'cloudpg/xrootd-proxy:cms'}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.xcache', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/XCache/XCache.yml', 'inputs': {'master_ip': {'get_property': ['SELF', 'master_ip']}, 'orchestrator': {'get_property': ['SELF', 'orchestrator']}, 'redirector_ip': {'get_property': ['SELF', 'redirector_ip']}, 'marathon_protocol': {'get_property': ['SELF', 'marathon_protocol']}, 'marathon_port': {'get_property': ['SELF', 'marathon_port']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'server_image': {'get_property': ['SELF', 'server_image']}}}}}}}",unknown
"{'tosca.nodes.indigo.CmsServices': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_squid_image': {'type': 'string', 'required': False, 'default': 'spiga/frontiersquidv1'}, 'cms_wn_image': {'type': 'string', 'default': 'dodasts/cms', 'required': False}, 'cms_proxycache_image': {'type': 'string', 'required': False, 'default': 'dodasts/ttscache'}, 'cms_input_protocol': {'type': 'string', 'required': False, 'default': 'xrootd'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}, 'iam_client_id': {'type': 'string', 'description': 'INDIGO IAM client id', 'required': True}, 'iam_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret', 'required': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'cms_proxycache_token_manager': {'type': 'string', 'required': False, 'default': 'ZOOKEEPER'}, 'watts_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'iam_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-iam.cloud.cnaf.infn.it/'}, 'iam_credential_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it/api/v2/iam/credential'}, 'audience': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'oneclient_token': {'type': 'string', 'required': False, 'default': 'dummy'}, 'oneprovider_name': {'type': 'string', 'required': False, 'default': 'dummy'}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'cms_orchestrator': {'type': 'string', 'required': False, 'default': 'marathon'}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config,v1.0.1-dodas-rc3', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/mesos/cms_services_start.yml', 'inputs': {'cms_orchestrator': {'get_property': ['SELF', 'cms_orchestrator']}, 'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_iam_token': {'get_property': ['SELF', 'iam_access_token']}, 'cms_config_iam_client_id': {'get_property': ['SELF', 'iam_client_id']}, 'cms_config_iam_client_secret': {'get_property': ['SELF', 'iam_client_secret']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_squid_image': {'get_property': ['SELF', 'cms_squid_image']}, 'cms_config_wn_image': {'get_property': ['SELF', 'cms_wn_image']}, 'cms_config_proxycache_image': {'get_property': ['SELF', 'cms_proxycache_image']}, 'cms_input_protocol': {'get_property': ['SELF', 'cms_input_protocol']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'proxy_cache_manager': {'get_property': ['SELF', 'cms_proxycache_token_manager']}, 'proxy_tts': {'get_property': ['SELF', 'watts_endpoint']}, 'proxy_iam_endpoint': {'get_property': ['SELF', 'iam_endpoint']}, 'proxy_credential_endpoint': {'get_property': ['SELF', 'iam_credential_endpoint']}, 'proxy_audience': {'get_property': ['SELF', 'audience']}, 'oneclient_token': {'get_property': ['SELF', 'oneclient_token']}, 'oneprovider_name': {'get_property': ['SELF', 'oneprovider_name']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.HTCondorServices': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'htcondor_config_condor_image': {'type': 'string', 'required': False}, 'config_mode': {'type': 'string', 'required': True}, 'htcondor_config_condor_host': {'type': 'string', 'required': False}, 'htcondor_config_schedd_ip_pub': {'type': 'string', 'required': True}, 'htcondor_config_schedd_ip': {'type': 'string', 'required': True}, 'htcondor_config_ccb_ip': {'type': 'string', 'required': True}, 'htcondor_config_ccb_address': {'type': 'string', 'required': False}, 'htcondor_config_high_port': {'type': 'string', 'required': False}, 'htcondor_config_low_port': {'type': 'string', 'required': False}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'lb_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}, 'iam_client_id': {'type': 'string', 'description': 'INDIGO IAM client id', 'required': True}, 'iam_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret', 'required': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'proxycache_token_manager': {'type': 'string', 'required': False, 'default': 'ZOOKEEPER'}, 'watts_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'iam_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-iam.cloud.cnaf.infn.it/'}, 'iam_credential_endpoint': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it/api/v2/iam/credential'}, 'audience': {'type': 'string', 'required': False, 'default': 'https://dodas-tts.cloud.cnaf.infn.it'}, 'proxycache_image': {'type': 'string', 'required': False, 'default': 'dodasts/ttscache'}}, 'artifacts': {'htcondor_config_role': {'file': 'indigo-dc.htcondor_config,v1.0.0-dodas-pre1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/htcondor_master_config.yml', 'inputs': {'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'condor_host': {'get_property': ['SELF', 'htcondor_config_condor_host']}, 'zookeeper_peers': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'lb_peers': {'get_property': ['SELF', 'lb_ips']}, 'htcondor_config_schedd_ip_pub': {'get_property': ['SELF', 'htcondor_config_schedd_ip_pub']}, 'htcondor_config_schedd_ip': {'get_property': ['SELF', 'htcondor_config_schedd_ip']}, 'ccb_address': {'get_property': ['SELF', 'htcondor_config_ccb_address']}, 'high_port': {'get_property': ['SELF', 'htcondor_config_high_port']}, 'low_port': {'get_property': ['SELF', 'htcondor_config_low_port']}, 'config_mode': {'get_property': ['SELF', 'config_mode']}, 'htcondor_config_condor_image': {'get_property': ['SELF', 'htcondor_config_condor_image']}, 'htcondor_config_ccb_ip': {'get_property': ['SELF', 'htcondor_config_ccb_ip']}, 'proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'proxy_cache_manager': {'get_property': ['SELF', 'proxycache_token_manager']}, 'proxy_tts': {'get_property': ['SELF', 'watts_endpoint']}, 'proxy_iam_endpoint': {'get_property': ['SELF', 'iam_endpoint']}, 'proxy_credential_endpoint': {'get_property': ['SELF', 'iam_credential_endpoint']}, 'proxy_audience': {'get_property': ['SELF', 'audience']}, 'config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'config_iam_token': {'get_property': ['SELF', 'iam_access_token']}, 'config_iam_client_id': {'get_property': ['SELF', 'iam_client_id']}, 'config_iam_client_secret': {'get_property': ['SELF', 'iam_client_secret']}, 'config_proxycache_image': {'get_property': ['SELF', 'proxycache_image']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.AmsCondorMasterConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_username': {'type': 'string', 'required': True}, 'marathon_password': {'type': 'string', 'required': True}, 'ams_default_squid': {'type': 'string', 'required': True}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'ams_config_role': {'file': 'indigo-dc.ams_config,v1.0.0-dodas-pre1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/ams_master_config.yml', 'inputs': {'mesos_masters_list': {'get_property': ['SELF', 'master_ips']}, 'consul_servers': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_peers': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'ams_default_squid': {'get_property': ['SELF', 'ams_default_squid']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",0
"{'tosca.nodes.indigo.AmsCondorExecuteConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_username': {'type': 'string', 'required': True}, 'marathon_password': {'type': 'string', 'required': True}, 'htcondor_config_ccb_ip': {'type': 'string', 'required': True}, 'htcondor_config_schedd_ip': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'config_proxycache_serviceport': {'type': 'string', 'required': True, 'default': '8080'}, 'htcondor_config_ccb_address': {'type': 'string', 'required': False}, 'htcondor_config_condor_host': {'type': 'string', 'required': False}, 'htcondor_config_condor_image': {'type': 'string', 'required': False}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'ams_config_role': {'file': 'indigo-dc.ams_config,v1.0.0-dodas-pre1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/ams_execute_config.yaml', 'inputs': {'mesos_masters_list': {'get_property': ['SELF', 'master_ips']}, 'consul_servers': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_peers': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'htcondor_config_ccb_ip': {'get_property': ['SELF', 'htcondor_config_ccb_ip']}, 'htcondor_config_schedd_ip': {'get_property': ['SELF', 'htcondor_config_schedd_ip']}, 'proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'config_proxycache_serviceport': {'get_property': ['SELF', 'config_proxycache_serviceport']}, 'ccb_address': {'get_property': ['SELF', 'htcondor_config_ccb_address']}, 'condor_host': {'get_property': ['SELF', 'htcondor_config_condor_host']}, 'htcondor_config_condor_image': {'get_property': ['SELF', 'htcondor_config_condor_image']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.AmsCondorWnConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_username': {'type': 'string', 'required': True}, 'marathon_password': {'type': 'string', 'required': True}, 'ams_default_squid': {'type': 'string', 'required': True}, 'number_of_wn_instances': {'type': 'integer', 'required': True}, 'number_of_slaves': {'type': 'integer', 'required': True}, 'cpu_x_wn': {'type': 'float', 'required': True}, 'ram_x_wn': {'type': 'float', 'required': True}, 'docker_cpu_x_wn': {'type': 'float', 'required': True}, 'docker_ram_x_wn': {'type': 'float', 'required': True}, 'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'ams_repo_server_url': {'type': 'string'}, 'ams_repo_public_key_path': {'type': 'string'}, 'ams_repo_repository_name': {'type': 'string'}, 'ams_repo_public_key': {'type': 'string'}, 'ams_repo_public_key_url': {'type': 'string'}}, 'artifacts': {'ams_config_role': {'file': 'indigo-dc.ams_config,v1.0.0-dodas-pre1', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/ams_wn_config.yml', 'inputs': {'mesos_masters_list': {'get_property': ['SELF', 'master_ips']}, 'consul_servers': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'zookeeper_peers': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'ams_default_squid': {'get_property': ['SELF', 'ams_default_squid']}, 'ams_number_of_wn_instances': {'get_property': ['SELF', 'number_of_wn_instances']}, 'ams_number_of_slaves': {'get_property': ['SELF', 'number_of_slaves']}, 'ams_cpu_x_wn': {'get_property': ['SELF', 'cpu_x_wn']}, 'ams_ram_x_wn': {'get_property': ['SELF', 'ram_x_wn']}, 'ams_docker_cpu_x_wn': {'get_property': ['SELF', 'docker_cpu_x_wn']}, 'ams_docker_ram_x_wn': {'get_property': ['SELF', 'docker_ram_x_wn']}, 'ams_repo_server_url': {'get_property': ['SELF', 'ams_repo_server_url']}, 'ams_repo_public_key_path': {'get_property': ['SELF', 'ams_repo_public_key_path']}, 'ams_repo_repository_name': {'get_property': ['SELF', 'ams_repo_repository_name']}, 'ams_repo_public_key': {'get_property': ['SELF', 'ams_repo_public_key']}, 'ams_repo_public_key_url': {'get_property': ['SELF', 'ams_repo_public_key_url']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosSlave', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.WorkerNode.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.MesosSlave'}}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos,v1.0.1-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'front_end_ip': {'get_property': ['SELF', 'front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.CmsOneclient': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'oneclient_pkg': {'type': 'string', 'required': True}}, 'artifacts': {'oneclient_role': {'file': 'indigo-dc.oneclient', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/oneclient/artifacts/onedata/cms_oneclient.yml', 'inputs': {'oneclient_pkg': {'get_property': ['SELF', 'oneclient_pkg']}}}}}}}",0
"{'tosca.nodes.indigo.CmsWnConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_stageoutsite': {'type': 'string', 'required': True}, 'cms_stageoutprotocol': {'type': 'string', 'required': True}, 'cms_phedexnode': {'type': 'string', 'required': True}, 'cms_stageoutcommand': {'type': 'string', 'required': True}, 'cms_fallback_phedexnode': {'type': 'string', 'required': False, 'default': 'T2_IT_myt2'}, 'cms_fallback_lfn_prefix': {'type': 'string', 'required': False, 'default': 'srm://t2-srm-02.lnl.infn.it:8443/srm/managerv2?SFN=xxxxxxx'}, 'cms_fallback_command': {'type': 'string', 'required': False, 'default': 'gfal2'}, 'cms_xrd_readserver': {'type': 'string', 'required': False, 'default': 'xrootd.ba.infn.it'}, 'cms_input_path': {'type': 'string', 'required': False, 'default': 'my/oneclient/path'}, 'cms_input_protocol': {'type': 'string', 'required': False, 'default': 'xrootd'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'monitordb_ip': {'type': 'string', 'required': False}, 'elasticsearch_secret': {'type': 'string', 'required': False}, 'cms_orchestrator': {'type': 'string', 'required': False, 'default': 'marathon'}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config,v1.0.1-dodas-rc3', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/mesos/cms_wn_configure.yml', 'inputs': {'cms_orchestrator': {'get_property': ['SELF', 'cms_orchestrator']}, 'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_stageoutsite': {'get_property': ['SELF', 'cms_stageoutsite']}, 'cms_config_stageoutprotocol': {'get_property': ['SELF', 'cms_stageoutprotocol']}, 'cms_config_stageoutcommand': {'get_property': ['SELF', 'cms_stageoutcommand']}, 'cms_config_phedexnode': {'get_property': ['SELF', 'cms_phedexnode']}, 'cms_config_fallback_phedexnode': {'get_property': ['SELF', 'cms_fallback_phedexnode']}, 'cms_config_fallback_lfn_prefix': {'get_property': ['SELF', 'cms_fallback_lfn_prefix']}, 'cms_config_fallback_command': {'get_property': ['SELF', 'cms_fallback_command']}, 'cms_xrd_readserver': {'get_property': ['SELF', 'cms_xrd_readserver']}, 'cms_input_path': {'get_property': ['SELF', 'cms_input_path']}, 'cms_input_protocol': {'get_property': ['SELF', 'cms_input_protocol']}, 'cms_config_elastic_secret': {'get_property': ['SELF', 'elasticsearch_secret']}, 'monitordb_ip': {'get_property': ['SELF', 'monitordb_ip']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosSlave', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.MesosLoadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_lb_role': {'file': 'indigo-dc.marathon-lb,v1.0.0-dodas', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/mesos_lb_install.yml', 'inputs': {'consul_server_ips': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.SparkMesos': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'zookeeper_peers': {'type': 'string', 'required': True}, 'spark_mesos_deploy_app': {'type': 'string', 'constraints': [{'valid_values': ['apache-zeppelin', 'spark-dispatcher']}], 'required': False}, 'spark_hdfs_uri': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_auth_url': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_http_port': {'type': 'string', 'required': False, 'default': '8080'}, 'spark_swift_region': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_tenant': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_username': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_password': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_provider': {'type': 'string', 'required': False, 'default': 'Test'}, 'spark_cores_max': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_cores': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_cores': {'type': 'integer', 'required': False, 'default': '-1'}}, 'artifacts': {'spark_mesos_role': {'file': 'indigo-dc.spark-mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/mesos/spark_mesos_setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_peers': {'get_property': ['SELF', 'zookeeper_peers']}, 'spark_mesos_deploy_app': {'get_property': ['SELF', 'spark_mesos_deploy_app']}, 'spark_hdfs_uri': {'get_property': ['SELF', 'spark_hdfs_uri']}, 'spark_swift_auth_url': {'get_property': ['SELF', 'spark_swift_auth_url']}, 'spark_mesos_swift_http_port': {'get_property': ['SELF', 'spark_swift_http_port']}, 'spark_mesos_swift_region': {'get_property': ['SELF', 'spark_swift_region']}, 'spark_mesos_swift_tenant': {'get_property': ['SELF', 'spark_swift_tenant']}, 'spark_mesos_swift_username': {'get_property': ['SELF', 'spark_swift_username']}, 'spark_mesos_swift_password': {'get_property': ['SELF', 'spark_swift_password']}, 'spark_mesos_swift_provider': {'get_property': ['SELF', 'spark_swift_provider']}, 'spark_mesos_cores_max': {'get_property': ['SELF', 'spark_cores_max']}, 'spark_mesos_executor_cores': {'get_property': ['SELF', 'spark_executor_cores']}, 'spark_mesos_executor_mem': {'get_property': ['SELF', 'spark_executor_mem']}, 'spark_mesos_driver_mem': {'get_property': ['SELF', 'spark_driver_mem']}, 'spark_mesos_driver_cores': {'get_property': ['SELF', 'spark_driver_cores']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.HadoopMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/hadoop/hadoop_master_install.yml', 'inputs': {'hadoop_master_ip': {'get_attribute': ['HOST', 'private_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.HadoopSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ip': {'required': True, 'type': 'string'}}, 'artifacts': {'hadoop_role': {'file': 'indigo-dc.hadoop', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/hadoop/hadoop_wn_install.yml', 'inputs': {'hadoop_master_ip': {'get_property': ['SELF', 'master_ip']}}}}}}}",0
"{'tosca.nodes.indigo.HaddockApp': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'haddock_app_name': {'type': 'string', 'description': 'Haddocking application', 'required': True, 'constraints': [{'valid_values': ['disvis', 'powerfit']}]}}, 'artifacts': {'galaxy_role': {'file': 'indigo-dc.disvis-powerfit', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/haddock/haddock_install.yml', 'inputs': {'haddock_app_name': {'get_property': ['SELF', 'haddock_app_name']}}}}}}}",0
"{'tosca.nodes.indigo.Eubiosteo': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.eubiosteo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/eubiosteo/eubiosteo_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Ambertools': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.ambertools', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/ambertools/ambertools_install.yml'}}}}}",0
"{'tosca.nodes.indigo.Kepler': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'galaxy_role': {'file': 'indigo-dc.kepler', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/kepler/kepler_install.yml'}}}}}",0
"{'tosca.nodes.indigo.OphidiaServer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'io_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'description': 'List of IPs of the Ophidia IO nodes', 'required': False, 'default': []}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/ophidia/ophidia_server_install.yml', 'inputs': {'ophidia_io_ips': {'get_property': ['SELF', 'io_ips']}}}}}}}",0
"{'tosca.nodes.indigo.OphidiaIO': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'server_ip': {'type': 'string', 'description': 'IP of the OphidiaServer node', 'required': True}}, 'artifacts': {'ophidia_role': {'file': 'indigo-dc.ophidia-cluster', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'slurm_role': {'file': 'indigo-dc.slurm', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/ophidia/ophidia_io_install.yml', 'inputs': {'ophidia_server_ip': {'get_property': ['SELF', 'server_ip']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'artifacts': {'kube_role': {'file': 'indigo-dc.kubernetes', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'openvpn_role': {'file': 'indigo-dc.openvpn', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/lrms/kubernetes/kube_wn_install.yml', 'inputs': {'kube_front_end_ip': {'get_property': ['SELF', 'front_end_ip']}, 'wn_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'properties': {'admin_username': {'required': False, 'type': 'string', 'default': 'kubeuser'}, 'admin_token': {'required': False, 'type': 'string', 'value': 'some_insecure_token'}}, 'artifacts': {'kube_role': {'file': 'indigo-dc.kubernetes', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'openvpn_role': {'file': 'indigo-dc.openvpn', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Kubernetes'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/k8s/artifacts/lrms/kubernetes/kube_fe_install.yml', 'inputs': {'kube_front_end_ip': {'get_attribute': ['HOST', 'private_address', 0]}, 'fe_hybrid_cluster': {'get_property': ['SELF', 'hybrid']}, 'kube_admin_username': {'get_property': ['SELF', 'admin_username']}, 'kube_admin_token': {'get_property': ['SELF', 'admin_token']}}}}}}}",0
"{'tosca.nodes.indigo.JupyterHub': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'spawner': {'required': False, 'type': 'string', 'default': 'local', 'constraints': [{'valid_values': ['local', 'kubernetes']}]}, 'authenticator': {'required': False, 'type': 'string', 'default': 'local', 'constraints': [{'valid_values': ['local', 'dummy']}]}}, 'artifacts': {'kube_role': {'file': 'indigo-dc.jupyterhub', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/dodas_roll/artifacts/jupyter/jupyterhub_install.yml', 'inputs': {'jupyterhub_spawner': {'get_property': ['SELF', 'spawner']}, 'jupyterhub_authenticator': {'get_property': ['SELF', 'spawner']}}}}}}}",0
"{'my.nodes.hpc.wm.torque': {'description': 'torque wm, here we can define properties/attributes applicable for torque WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string'}, 'ssh-key': {'type': 'string'}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['my.nodes.hpc.job.torque']}}}}",0
"{'my.nodes.hpc.job.torque': {'description': 'torque job type, here we can define properties/attributes applicable for torque WM,  e.g. execution environment, etc.\n', 'derived_from': 'tosca.nodes.SoftwareComponent', 'requirements': [{'host': {'node': 'my.nodes.hpc.wm.torque', 'capability': 'tosca.capabilities.Compute', 'relationship': 'my.relationships.jobHostedOn'}}], 'properties': {'name': {'type': 'string', 'description': 'Name of the job'}, 'script_template': {'type': 'string', 'description': 'Job script template with j2 extension,  such that Ansible can process it with the template module\n'}, 'workspace': {'type': 'string', 'description': 'Location of the sources and the job script'}, 'email': {'type': 'string', 'description': 'Job status will be notified to this email\n'}, 'nb_nodes': {'type': 'integer', 'description': 'Number of requested nodes\n'}, 'ppn': {'type': 'integer', 'description': 'Number of processes per node\n'}, 'gpus': {'type': 'integer', 'description': 'Number of requested GPUs\n'}, 'walltime': {'type': 'string', 'description': 'Expected time of execution FORMAT: HH:MM:SS\n'}, 'monitor_period': {'type': 'integer', 'default': 10}, 'monitor_retries_headroom': {'type': 'integer', 'default': 2}}, 'attributes': {'job_id': {'type': 'string'}}, 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}, 'job_script_template': {'default': {'get_property': ['SELF', 'script_template']}}, 'job_workspace': {'default': {'get_property': ['SELF', 'workspace']}}, 'job_email': {'default': {'get_property': ['SELF', 'email']}}, 'job_nb_nodes': {'default': {'get_property': ['SELF', 'nb_nodes']}}, 'job_ppn': {'default': {'get_property': ['SELF', 'ppn']}}, 'job_gpus': {'default': {'get_property': ['SELF', 'gpus']}}, 'job_walltime': {'default': {'get_property': ['SELF', 'walltime']}}, 'job_monitor_period': {'default': {'get_property': ['SELF', 'monitor_period']}}, 'job_monitor_retries_headroom': {'default': {'get_property': ['SELF', 'monitor_retries_headroom']}}}, 'create': {'implementation': 'playbooks/torque-job/create.yml'}, 'configure': {'implementation': 'playbooks/torque-job/configure.yml'}, 'start': {'implementation': 'playbooks/torque-job/start.yml'}}}}}",unknown
"{'tosca.nodes.indigo.Saxs': {'derived_from': 'tosca.nodes.SoftwareComponent', 'artifacts': {'docker_agent_role': {'file': 'alpegon.saxs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/alpegon/tosca-types/master/artifacts/saxs/sax-basic-install.yml'}}}, 'requirements': [{'host': {'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.Compute': {'derived_from': 'tosca.nodes.indigo.MonitoredCompute', 'attributes': {'private_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'public_address': {'type': 'list', 'entry_schema': {'type': 'string'}}, 'ctxt_log': {'type': 'string'}}, 'capabilities': {'scalable': {'type': 'tosca.capabilities.indigo.Scalable'}, 'os': {'type': 'tosca.capabilities.indigo.OperatingSystem'}, 'endpoint': {'type': 'tosca.capabilities.indigo.Endpoint'}}}}",0
"{'tosca.nodes.indigo.MonitoredCompute': {'derived_from': 'tosca.nodes.Compute', 'properties': {'zabbix_server': {'type': 'string', 'required': False, 'default': 'indigo-paas.cloud.ba.infn.it'}, 'zabbix_server_port': {'type': 'PortDef', 'required': False, 'default': 10051}, 'zabbix_server_metadata': {'type': 'string', 'required': False, 'default': 'Linux      668c875e-9a39-4dc0-a710-17c41376c1e0'}}, 'artifacts': {'zabbix_agent_role': {'file': 'indigo-dc.zabbix-agent', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/zabbix/zabbix_agent_install.yml', 'inputs': {'zabbix_server': {'get_property': ['SELF', 'zabbix_server']}, 'zabbix_server_port': {'get_property': ['SELF', 'zabbix_server_port']}, 'zabbix_server_metadata': {'get_property': ['SELF', 'zabbix_server_metadata']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyPortal': {'derived_from': 'tosca.nodes.WebServer', 'properties': {'admin_email': {'type': 'string', 'description': 'email of the admin user', 'default': 'admin@admin.com', 'required': False}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}, 'user': {'type': 'string', 'description': 'username to launch the galaxy daemon', 'default': 'galaxy', 'required': False}, 'install_path': {'type': 'string', 'description': 'path to install the galaxy tool', 'default': '/home/galaxy/galaxy', 'required': False}, 'version': {'type': 'string', 'description': 'galaxy version to install', 'default': 'master', 'required': False}, 'instance_description': {'type': 'string', 'description': 'galaxy instance description', 'default': 'INDIGO Galaxy tests'}, 'instance_key_pub': {'type': 'string', 'description': 'galaxy instance ssh public key', 'default': 'your_ssh_public_key'}}, 'requirements': [{'lrms': {'capability': 'tosca.capabilities.indigo.LRMS', 'node': 'tosca.nodes.indigo.LRMS.FrontEnd', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxycloud', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_install.yml', 'inputs': {'galaxy_install_path': {'get_property': ['SELF', 'install_path']}, 'galaxy_user': {'get_property': ['SELF', 'user']}, 'galaxy_admin': {'get_property': ['SELF', 'admin_email']}, 'galaxy_admin_api_key': {'get_property': ['SELF', 'admin_api_key']}, 'galaxy_lrms': {'get_property': ['SELF', 'lrms', 'type']}, 'galaxy_version': {'get_property': ['SELF', 'version']}, 'galaxy_instance_description': {'get_property': ['SELF', 'instance_description']}, 'galaxy_instance_key_pub': {'get_property': ['SELF', 'instance_key_pub']}}}}}}}",0
"{'tosca.nodes.indigo.GalaxyShedTool': {'derived_from': 'tosca.nodes.WebApplication', 'properties': {'flavor': {'type': 'string', 'description': 'name of the Galaxy flavor', 'required': True, 'default': 'galaxy-no-tools'}, 'admin_api_key': {'type': 'string', 'description': 'key to access the API with admin role', 'default': 'not_very_secret_api_key', 'required': False}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.GalaxyPortal', 'relationship': 'tosca.relationships.HostedOn'}}], 'artifacts': {'galaxy_role': {'file': 'indigo-dc.galaxy-tools', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/galaxy/galaxy_tools_configure.yml', 'inputs': {'galaxy_flavor': {'get_property': ['SELF', 'flavor']}, 'galaxy_admin_api_key': {'get_property': ['HOST', 'admin_api_key']}, 'instance_public_ip': {'get_attribute': ['HOST', 'public_address', 0]}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.FrontEnd.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Mesos'}}, 'properties': {'mesos_masters_list': {'type': 'string', 'required': False, 'default': 'localhost'}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_attribute': ['HOST', 'public_address']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}}}}}}}",0
"{'tosca.nodes.indigo.MesosMaster': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'mesos_masters_list': {'type': 'string', 'required': False, 'default': {'get_attribute': ['HOST', 'public_address']}}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': False}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': False}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': True}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'marathon_agent_role': {'file': 'indigo-dc.marathon', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'chronos_agent_role': {'file': 'indigo-dc.chronos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.MesosMasterCms': {'derived_from': 'tosca.nodes.indigo.MesosMaster', 'properties': {'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_mesos_master_install.yml', 'inputs': {'consul_server_ips': {'get_attribute': ['HOST', 'public_address']}, 'zookeeper_host_list_ips': {'get_attribute': ['HOST', 'public_address']}, 'zookeeper_peers_ips': {'get_attribute': ['HOST', 'public_address']}, 'mesos_masters_list_ips': {'get_attribute': ['HOST', 'public_address']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'mysquid_ip': {'get_property': ['SELF', 'mysquid_host']}, 'proxycache_ip': {'get_property': ['SELF', 'proxycache_host']}, 'iam_token': {'get_property': ['SELF', 'iam_access_token']}}}}}}}",0
"{'tosca.nodes.indigo.LRMS.WorkerNode.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}}}}}}}",0
"{'tosca.nodes.indigo.MesosSlave': {'derived_from': 'tosca.nodes.SoftwareComponent', 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}}, 'artifacts': {'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}, 'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.MesosSlaveCms': {'derived_from': 'tosca.nodes.indigo.MesosSlave', 'properties': {'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}}, 'artifacts': {'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_mesos_slave_install.yml', 'inputs': {'mesos_master_ips': {'get_property': ['SELF', 'master_ips']}, 'consul_server_ips': {'get_property': ['SELF', 'master_ips']}, 'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}, 'mysquid_ip': {'get_property': ['SELF', 'mysquid_host']}, 'proxycache_ip': {'get_property': ['SELF', 'proxycache_host']}}}}}}}",0
"{'tosca.nodes.indigo.DariahRepository': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/dariah.png'}, 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'cache_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'cache_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'cache_image': {'type': 'string', 'required': False, 'default': 'redis'}, 'db_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'db_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'db_image': {'type': 'string', 'required': False, 'default': 'postgres'}, 'es_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'es_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'es_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:elasticsearch'}, 'mq_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'mq_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'mq_image': {'type': 'string', 'required': False, 'default': 'rabbitmq:3-management'}, 'statsd_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'statsd_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'statsd_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:statsd'}, 'web_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'web_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'web_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}, 'worker_cpus': {'type': 'float', 'required': False, 'default': 1.0}, 'worker_mem': {'type': 'integer', 'required': False, 'default': 1024}, 'worker_image': {'type': 'string', 'required': False, 'default': 'indigodatacloudapps/dariah-repository:web'}}, 'artifacts': [{'dariahrepo_role': {'file': 'indigo-dc.dariahrepo', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/dariahrepo-setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'dariahrepo_app_cache_cpus': {'get_property': ['SELF', 'cache_cpus']}, 'dariahrepo_app_cache_mem': {'get_property': ['SELF', 'cache_mem']}, 'dariahrepo_app_cache_image': {'get_property': ['SELF', 'cache_image']}, 'dariahrepo_app_db_cpus': {'get_property': ['SELF', 'db_cpus']}, 'dariahrepo_app_db_mem': {'get_property': ['SELF', 'db_mem']}, 'dariahrepo_app_db_image': {'get_property': ['SELF', 'db_image']}, 'dariahrepo_app_es_cpus': {'get_property': ['SELF', 'es_cpus']}, 'dariahrepo_app_es_mem': {'get_property': ['SELF', 'es_mem']}, 'dariahrepo_app_es_image': {'get_property': ['SELF', 'es_image']}, 'dariahrepo_app_mq_cpus': {'get_property': ['SELF', 'mq_cpus']}, 'dariahrepo_app_mq_mem': {'get_property': ['SELF', 'mq_mem']}, 'dariahrepo_app_mq_image': {'get_property': ['SELF', 'mq_image']}, 'dariahrepo_app_statsd_cpus': {'get_property': ['SELF', 'statsd_cpus']}, 'dariahrepo_app_statsd_mem': {'get_property': ['SELF', 'statsd_mem']}, 'dariahrepo_app_statsd_image': {'get_property': ['SELF', 'statsd_image']}, 'dariahrepo_app_web_cpus': {'get_property': ['SELF', 'web_cpus']}, 'dariahrepo_app_web_mem': {'get_property': ['SELF', 'web_mem']}, 'dariahrepo_app_web_image': {'get_property': ['SELF', 'web_image']}, 'dariahrepo_app_worker_cpus': {'get_property': ['SELF', 'worker_cpus']}, 'dariahrepo_app_worker_mem': {'get_property': ['SELF', 'worker_mem']}, 'dariahrepo_app_worker_image': {'get_property': ['SELF', 'worker_image']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.FrontEnd.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd', 'metadata': {'icon': '/images/mesos.png'}, 'capabilities': {'lrms': {'type': 'tosca.capabilities.indigo.LRMS.Mesos'}, 'host': {'type': 'tosca.capabilities.indigo.MesosMaster'}}, 'properties': {'mesos_masters_list': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': False}, 'mesos_authenticate_http': {'type': 'boolean', 'required': False, 'default': True}, 'mesos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'mesos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'enable_chronos': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_enable_ssl': {'type': 'boolean', 'required': False, 'default': True}, 'chronos_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'chronos_password': {'type': 'string', 'required': False, 'default': 'admin'}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': [{'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'zookeeper_agent_role': {'file': 'indigo-dc.zookeeper', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'marathon_agent_role': {'file': 'indigo-dc.marathon', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'chronos_agent_role': {'file': 'indigo-dc.chronos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_master_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'mesos_masters_list']}, 'mesos_authenticate_http': {'get_property': ['SELF', 'mesos_authenticate_http']}, 'mesos_username': {'get_property': ['SELF', 'mesos_username']}, 'mesos_password': {'get_property': ['SELF', 'mesos_password']}, 'marathon_enable_ssl': {'get_property': ['SELF', 'marathon_enable_ssl']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'enable_chronos': {'get_property': ['SELF', 'enable_chronos']}, 'chronos_enable_ssl': {'get_property': ['SELF', 'chronos_enable_ssl']}, 'chronos_user': {'get_property': ['SELF', 'chronos_username']}, 'chronos_pass': {'get_property': ['SELF', 'chronos_password']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'wn_ips': {'get_property': ['SELF', 'wn_ips']}}}}}}}",unknown
"{'tosca.nodes.indigo.MesosMaster': {'derived_from': 'tosca.nodes.indigo.LRMS.FrontEnd.Mesos', 'metadata': {'icon': '/images/mesos.png'}}}",0
"{'tosca.nodes.indigo.CmsServices': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/cms.png'}, 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_squid_image': {'type': 'string', 'required': False, 'default': 'spiga/frontiersquidv1'}, 'cms_wn_image': {'type': 'string', 'default': 'spiga/cmswn', 'required': False}, 'cms_proxycache_image': {'type': 'string', 'required': False, 'default': 'spiga/ttscache'}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'iam_access_token': {'type': 'string', 'description': 'INDIGO IAM access token', 'required': True}, 'iam_client_id': {'type': 'string', 'description': 'INDIGO IAM client id', 'required': True}, 'iam_client_secret': {'type': 'string', 'description': 'INDIGO IAM client secret', 'required': True}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}, 'cms_proxycache_token_manager': {'type': 'string', 'required': True}, 'master_ips': {'type': 'list', 'entry_schema': {'type': 'string'}, 'required': True}, 'onedatatoken': {'type': 'string', 'required': False}, 'onedatacache': {'type': 'string', 'required': False}}, 'artifacts': [{'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'start': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_services_start.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_iam_token': {'get_property': ['SELF', 'iam_access_token']}, 'cms_config_iam_client_id': {'get_property': ['SELF', 'iam_client_id']}, 'cms_config_iam_client_secret': {'get_property': ['SELF', 'iam_client_secret']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_squid_image': {'get_property': ['SELF', 'cms_squid_image']}, 'cms_config_wn_image': {'get_property': ['SELF', 'cms_wn_image']}, 'cms_config_proxycache_image': {'get_property': ['SELF', 'cms_proxycache_image']}, 'cms_config_onedatacache': {'get_property': ['SELF', 'onedatacache']}, 'cms_config_onedatatoken': {'get_property': ['SELF', 'onedatatoken']}, 'marathon_user': {'get_property': ['SELF', 'marathon_username']}, 'marathon_pass': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_host_list': {'get_property': ['SELF', 'master_ips']}, 'proxy_cache_manager': {'get_property': ['SELF', 'cms_proxycache_token_manager']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.LRMS.WorkerNode.Mesos': {'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode', 'metadata': {'icon': '/images/mesos.png'}, 'capabilities': {'host': {'type': 'tosca.capabilities.indigo.MesosSlave'}}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'enable_nfs_share': {'type': 'boolean', 'required': False, 'default': False}}, 'artifacts': [{'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'mesos_agent_role': {'file': 'indigo-dc.mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'nfs_role': {'file': 'indigo-dc.nfs', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_slave_install.yml', 'inputs': {'mesos_masters_list_ips': {'get_property': ['SELF', 'master_ips']}, 'enable_nfs_share': {'get_property': ['SELF', 'enable_nfs_share']}, 'front_end_ip': {'get_property': ['SELF', 'front_end_ip']}}}}}}}",0
"{'tosca.nodes.indigo.MesosSlave': {'metadata': {'icon': '/images/mesos.png'}, 'derived_from': 'tosca.nodes.indigo.LRMS.WorkerNode.Mesos'}}",0
"{'tosca.nodes.indigo.CmsWnConfig': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/cms.png'}, 'properties': {'cms_local_site': {'type': 'string', 'required': True}, 'cms_stageoutsite': {'type': 'string', 'required': True}, 'cms_stageoutserver': {'type': 'string', 'required': True}, 'cms_stageoutprefix': {'type': 'string', 'required': True}, 'cms_stageoutsite_fallback': {'type': 'string', 'required': True}, 'cms_stageoutserver_fallback': {'type': 'string', 'required': True}, 'cms_stageoutprefix_fallback': {'type': 'string', 'required': True}, 'cms_input_path': {'type': 'string', 'required': True}, 'cms_input_protocol': {'type': 'string', 'required': True}, 'mysquid_host': {'type': 'string', 'required': True}, 'proxycache_host': {'type': 'string', 'required': True}, 'monitordb_ip': {'type': 'string', 'required': False}, 'elasticsearch_secret': {'type': 'string', 'required': False}}, 'artifacts': [{'cms_config_role': {'file': 'indigo-dc.cms_config', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'configure': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/cms_wn_configure.yml', 'inputs': {'cms_config_mysquid_host': {'get_property': ['SELF', 'mysquid_host']}, 'cms_config_proxycache_host': {'get_property': ['SELF', 'proxycache_host']}, 'cms_config_cms_local_site': {'get_property': ['SELF', 'cms_local_site']}, 'cms_config_stageoutsite': {'get_property': ['SELF', 'cms_stageoutsite']}, 'cms_config_stageoutserver': {'get_property': ['SELF', 'cms_stageoutserver']}, 'cms_config_stageoutprefix': {'get_property': ['SELF', 'cms_stageoutprefix']}, 'cms_config_stageoutsite_fallback': {'get_property': ['SELF', 'cms_stageoutsite_fallback']}, 'cms_config_stageoutserver_fallback': {'get_property': ['SELF', 'cms_stageoutserver_fallback']}, 'cms_config_stageoutprefix_fallback': {'get_property': ['SELF', 'cms_stageoutprefix_fallback']}, 'cms_input_path': {'get_property': ['SELF', 'cms_input_path']}, 'cms_input_protocol': {'get_property': ['SELF', 'cms_input_protocol']}, 'cms_config_elastic_secret': {'get_property': ['SELF', 'elasticsearch_secret']}, 'monitordb_ip': {'get_property': ['SELF', 'monitordb_ip']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosSlave', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'tosca.nodes.indigo.MesosLoadBalancer': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/mesos.png'}, 'properties': {'master_ips': {'required': True, 'type': 'list', 'entry_schema': {'type': 'string'}}, 'marathon_username': {'type': 'string', 'required': False, 'default': 'admin'}, 'marathon_password': {'type': 'string', 'required': True}}, 'artifacts': [{'docker_agent_role': {'file': 'indigo-dc.docker', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'consul_agent_role': {'file': 'indigo-dc.consul', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}, {'marathon_lb_role': {'file': 'indigo-dc.marathon-lb', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/mesos_lb_install.yml', 'inputs': {'consul_server_ips': {'get_property': ['SELF', 'master_ips']}, 'marathon_username': {'get_property': ['SELF', 'marathon_username']}, 'marathon_password': {'get_property': ['SELF', 'marathon_password']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.Container', 'node': 'tosca.nodes.indigo.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.indigo.SparkMesos': {'derived_from': 'tosca.nodes.SoftwareComponent', 'metadata': {'icon': '/images/spark-mesos.png'}, 'properties': {'marathon_password': {'type': 'string', 'required': True}, 'zookeeper_peers': {'type': 'string', 'required': True}, 'spark_mesos_deploy_app': {'type': 'string', 'constraints': [{'valid_values': ['apache-zeppelin', 'spark-dispatcher']}], 'required': False}, 'spark_hdfs_uri': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_auth_url': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_http_port': {'type': 'string', 'required': False, 'default': '8080'}, 'spark_swift_region': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_tenant': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_username': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_password': {'type': 'string', 'required': False, 'default': ''}, 'spark_swift_provider': {'type': 'string', 'required': False, 'default': 'Test'}, 'spark_cores_max': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_cores': {'type': 'integer', 'required': False, 'default': '-1'}, 'spark_executor_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_mem': {'type': 'scalar-unit.size', 'required': False, 'default': '0 GB'}, 'spark_driver_cores': {'type': 'integer', 'required': False, 'default': '-1'}}, 'artifacts': [{'spark_mesos_role': {'file': 'indigo-dc.spark-mesos', 'type': 'tosca.artifacts.AnsibleGalaxy.role'}}], 'interfaces': {'Standard': {'create': {'implementation': 'https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mesos/spark_mesos_setup.yml', 'inputs': {'marathon_password': {'get_property': ['SELF', 'marathon_password']}, 'zookeeper_peers': {'get_property': ['SELF', 'zookeeper_peers']}, 'spark_hdfs_uri': {'get_property': ['SELF', 'spark_hdfs_uri']}, 'spark_swift_auth_url': {'get_property': ['SELF', 'spark_swift_auth_url']}, 'spark_mesos_swift_http_port': {'get_property': ['SELF', 'spark_swift_http_port']}, 'spark_mesos_swift_region': {'get_property': ['SELF', 'spark_swift_region']}, 'spark_mesos_swift_tenant': {'get_property': ['SELF', 'spark_swift_tenant']}, 'spark_mesos_swift_username': {'get_property': ['SELF', 'spark_swift_username']}, 'spark_mesos_swift_password': {'get_property': ['SELF', 'spark_swift_password']}, 'spark_mesos_swift_provider': {'get_property': ['SELF', 'spark_swift_provider']}, 'spark_mesos_cores_max': {'get_property': ['SELF', 'spark_cores_max']}, 'spark_mesos_executor_cores': {'get_property': ['SELF', 'spark_executor_cores']}, 'spark_mesos_executor_mem': {'get_property': ['SELF', 'spark_executor_mem']}, 'spark_mesos_driver_mem': {'get_property': ['SELF', 'spark_driver_mem']}, 'spark_mesos_driver_cores': {'get_property': ['SELF', 'spark_driver_cores']}}}}}, 'requirements': [{'host': {'capability': 'tosca.capabilities.indigo.MesosMaster', 'relationship': 'tosca.relationships.HostedOn', 'node': 'tosca.nodes.SoftwareComponent', 'occurrences': [1, 1]}}]}}",unknown
"{'vendor.Cumulus Linux Switch 2G': {'derived_from': 'cloudshell.nodes.Switch', 'capabilities': {'concurrent_execution': {'type': 'cloudshell.capabilities.SupportConcurrentCommands'}, 'auto_discovery_capability': {'type': 'cloudshell.capabilities.AutoDiscovery', 'properties': {'enable_auto_discovery': {'type': 'boolean', 'default': True}, 'auto_discovery_description': {'type': 'string', 'default': 'Describe the auto discovery'}, 'inventory_description': {'type': 'string', 'default': 'Describe the resource shell template'}, 'User': {'description': 'User with administrative privileges', 'type': 'string'}, 'Password': {'description': 'The password is required by some CLI protocols such as Telnet and is required according to the device configuration.', 'type': 'cloudshell.datatypes.Password'}, 'Enable Password': {'description': 'UNIX root password.', 'type': 'cloudshell.datatypes.Password'}, 'Sessions Concurrency Limit': {'description': 'The maximum number of concurrent sessions that the driver will open to the device. Default is 1 (no concurrency).', 'type': 'integer', 'default': 1}, 'SNMP Read Community': {'description': 'The SNMP Read-Only Community String is like a password. It is sent along with each SNMP Get-Request and allows (or denies) access to device.', 'type': 'string'}, 'SNMP Write Community': {'description': 'The SNMP Write Community String is like a password. It is sent along with each SNMP Set-Request and allows (or denies) chaning MIBs values.', 'type': 'string'}, 'SNMP V3 User': {'description': 'Relevant only in case SNMP V3 is in use.', 'type': 'string'}, 'SNMP V3 Password': {'description': 'Relevant only in case SNMP V3 is in use.', 'type': 'cloudshell.datatypes.Password'}, 'SNMP V3 Private Key': {'description': 'Relevant only in case SNMP V3 is in use.', 'type': 'string'}, 'SNMP V3 Authentication Protocol': {'description': 'Relevant only in case SNMP V3 is in use.', 'type': 'string', 'default': 'No Authentication Protocol', 'constraints': [{'valid_values': ['No Authentication Protocol', 'MD5', 'SHA']}]}, 'SNMP V3 Privacy Protocol': {'description': 'Relevant only in case SNMP V3 is in use.', 'type': 'string', 'default': 'No Privacy Protocol', 'constraints': [{'valid_values': ['No Privacy Protocol', 'DES', '3DES-EDE', 'AES-128', 'AES-192', 'AES-256']}]}, 'SNMP Version': {'type': 'string', 'default': '', 'description': 'The version of SNMP to use. Possible values are v1, v2c and v3.', 'constraints': [{'valid_values': ['v1', 'v2c', 'v3']}]}, 'Enable SNMP': {'description': 'If set to True and SNMP isn’t enabled yet in the device the Shell will automatically enable SNMP in the device when Autoload command is called. SNMP must be enabled on the device for the Autoload command to run successfully. True by default.', 'type': 'boolean', 'default': True}, 'Disable SNMP': {'description': 'If set to True SNMP will be disabled automatically by the Shell after the Autoload command execution is completed. False by default.', 'type': 'boolean', 'default': False}, 'Backup Location': {'description': 'Used by the save/restore orchestration to determine where backups should be saved.', 'type': 'string'}, 'Backup Type': {'description': ""Supported protocols for saving and restoring of configuration and firmware files. Possible values are 'File System' 'FTP' and 'TFTP'. Default value is 'File System'."", 'type': 'string', 'default': 'File System'}, 'Backup User': {'description': 'Username for the storage server used for saving and restoring of configuration and firmware files.', 'type': 'string'}, 'Backup Password': {'description': 'Password for the storage server used for saving and restoring of configuration and firmware files.', 'type': 'cloudshell.datatypes.Password'}, 'Power Management': {'type': 'boolean', 'default': True, 'description': 'Used by the power management orchestration, if enabled, to determine whether to automatically manage the device power status. Enabled by default.'}, 'VRF Management Name': {'description': 'The default VRF Management to use if configured in the network and no such input was passed to the Save or Restore command.', 'type': 'string'}, 'Console Server IP Address': {'description': 'The IP address of the console server, in IPv4 format.', 'type': 'string'}, 'Console User': {'type': 'string'}, 'Console Port': {'description': 'The port on the console server, usually TCP port, which the device is associated with.', 'type': 'integer', 'default': 0}, 'Console Password': {'type': 'cloudshell.datatypes.Password'}, 'CLI Connection Type': {'type': 'string', 'description': 'The CLI connection type that will be used by the driver. Possible values are Auto, Console, SSH, Telnet and TCP. If Auto is selected the driver will choose the available connection type automatically. Default value is Auto.', 'default': 'Auto'}, 'CLI TCP Port': {'description': 'TCP Port to user for CLI connection. If kept empty a default CLI port will be used based on the chosen protocol, for example Telnet will use port 23.', 'type': 'Numeric', 'default': 0}}}}, 'artifacts': {'icon': {'file': 'shell-icon.png', 'type': 'tosca.artifacts.File'}, 'driver': {'file': 'CumulusLinuxSwitchShell2GDriver.zip', 'type': 'tosca.artifacts.File'}}}}",unknown
"{'tosca.nodes.MiCADO.CloudSigma.Compute': {'description': 'CloudSigma compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'num_cpus': {'type': 'integer', 'required': True, 'constraints': [{'greater_or_equal': 250}, {'less_or_equal': 100000}]}, 'mem_size': {'type': 'integer', 'required': True, 'constraints': [{'greater_or_equal': 268435456}, {'less_or_equal': 137438953472}]}, 'libdrive_id': {'type': 'string', 'required': True}, 'vnc_password': {'type': 'string', 'required': True}, 'public_key_id': {'type': 'string', 'required': True}, 'host_name': {'type': 'string', 'required': False}, 'hv_relaxed': {'type': 'boolean', 'required': False}, 'hv_tsc': {'type': 'boolean', 'required': False}, 'nics': {'type': 'list', 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo': {'description': 'Basic CloudSigma VM for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute', 'properties': {'endpoint': {'type': 'string', 'default': 'https://zrh.cloudsigma.com/api/2.0', 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'interface_cloud': 'cloudsigma', 'endpoint_cloud': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small': {'description': 'Basic CloudSigma VM (2GHz/2GB) for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo', 'properties': {'num_cpus': {'type': 'integer', 'default': 2000, 'required': True}, 'mem_size': {'type': 'integer', 'default': 2147483648, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'interface_cloud': 'cloudsigma', 'endpoint_cloud': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.big': {'description': 'Bigger CloudSigma VM (4GHz/4GB) for MiCADO, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo', 'properties': {'num_cpus': {'type': 'integer', 'default': 4000, 'required': True}, 'mem_size': {'type': 'integer', 'default': 4294967296, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'interface_cloud': 'cloudsigma', 'endpoint_cloud': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudSigma.Occo.small.NFS': {'description': 'CloudSigma VM (2GHz/2GB) with NFS dependencies, by Occopus', 'derived_from': 'tosca.nodes.MiCADO.CloudSigma.Compute.Occo.small', 'properties': {'context': {'type': 'map', 'default': {'append': True, 'cloud_config': 'runcmd:\n- apt-get install -y nfs-kernel-server nfs-common\n'}, 'required': True}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus', 'create': {'inputs': {'interface_cloud': 'cloudsigma', 'endpoint_cloud': {'get_property': ['SELF', 'endpoint']}}}}}}}",0
"{'tosca.nodes.MiCADO.CloudBroker.Compute': {'description': 'CloudBroker compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'deployment_id': {'type': 'string', 'required': True}, 'instance_type_id': {'type': 'string', 'required': True}, 'key_pair_id': {'type': 'string', 'required': False}, 'opened_port': {'type': 'string', 'required': False}, 'infrastructure_component_id': {'type': 'string', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Nova.Compute': {'description': 'Openstack Nova Compute node', 'derived_from': 'tosca.nodes.MiCADO.Compute', 'properties': {'image_id': {'type': 'string', 'required': True}, 'flavor_name': {'type': 'string', 'required': True}, 'tenant_name': {'type': 'string', 'required': False}, 'project_id': {'type': 'string', 'required': True}, 'user_domain_name': {'type': 'string', 'required': False}, 'network_id': {'type': 'string', 'required': True}, 'server_name': {'type': 'string', 'required': False}, 'availability_zone': {'type': 'string', 'required': False}, 'key_name': {'type': 'string', 'required': False}, 'security_groups': {'type': 'list', 'required': False}, 'floating_ip': {'type': 'string', 'required': False}, 'floating_ip_pool': {'type': 'string', 'required': False}}, 'interfaces': {'Occopus': {'type': 'tosca.interfaces.MiCADO.Occopus'}, 'Terraform': {'type': 'tosca.interfaces.MiCADO.Terraform'}}}}",0
"{'tosca.nodes.MiCADO.Container.Application.Docker': {'description': 'description of a Docker container in the style of a Kubernetes \nContainerSpec or Docker Compose long syntax\n', 'derived_from': 'tosca.nodes.Container.Application.Docker', 'properties': {'args': {'description': 'arguments to pass to entrypoint', 'type': 'list', 'required': False}, 'command': {'description': 'command run by container (Kubernetes-style & Docker-list-style)', 'type': 'list', 'required': False}, 'env': {'description': 'environment variables to pass to the container', 'type': 'list', 'required': False}, 'envFrom': {'description': 'environment variables from a source', 'type': 'list', 'required': False}, 'image': {'description': 'container image', 'type': 'string', 'required': False}, 'imagePullPolicy': {'description': 'Force pull an image', 'type': 'string', 'required': False, 'constraints': [{'valid_values': ['Always', 'IfNotPresent']}]}, 'lifecycle': {'description': 'Kubernetes hooks for lifecycle management', 'type': 'map', 'required': False}, 'livenessProbe': {'description': 'Kubernetes-style healthcheck', 'type': 'map', 'required': False}, 'name': {'description': 'define the container name', 'type': 'string', 'required': False}, 'ports': {'description': 'ports to be forwarded (long-syntax Compose or flat Kubernetes ServiceSpec)', 'type': 'list', 'required': False, 'entry_schema': {'type': 'ports_type'}}, 'readinessProbe': {'description': 'Kubernetes-style ready-check', 'type': 'map', 'required': False}, 'resources': {'description': 'resource requirements for the container (Kubernetes-style)', 'type': 'map', 'required': False}, 'securityContext': {'description': 'specify security options (Kubernetes-style)', 'type': 'map', 'required': False}, 'stdin': {'description': 'allocate a buffer for stdin for this container (Kubernetes-style)', 'type': 'boolean', 'required': False}, 'stdinOnce': {'description': 'close the stdin channel after one attach', 'type': 'boolean', 'required': False}, 'terminationMessagePath': {'description': 'Kubernetes container path to write termination message', 'type': 'string', 'required': False}, 'terminationMessagePolicy': {'description': 'Kubernetes container termination message', 'type': 'string', 'required': False}, 'tty': {'description': 'allocate a TTY for the container (requires stdin set to true)', 'type': 'boolean', 'required': False}, 'volumeDevices': {'description': 'block volume devices to be used by the container', 'type': 'list', 'required': False}, 'volumeMounts': {'description': 'pod volumes to mount inside container filesystems', 'type': 'list', 'required': False}, 'workingDir': {'description': 'Kubernetes container working directory', 'type': 'string', 'required': False}, 'configs': {'description': 'point to created configs', 'type': 'list', 'required': False}, 'container_name': {'description': 'the container name *translates to Kubernetes name*', 'type': 'string', 'required': False}, 'deploy': {'description': 'supports Swarm-only options of a Compose file', 'type': 'deploy_type', 'required': False}, 'dns': {'description': 'custom DNS servers *translates to Kubernetes PodSpec dnsConfig*', 'type': 'list', 'required': False}, 'dns_search': {'description': 'custom DNS searches *translates to Kubernetes PodSpec dnsConfig*', 'type': 'list', 'required': False}, 'entrypoint': {'description': 'command run by container (string) *translates to Kubernetes command*', 'type': 'string', 'required': False}, 'env_file': {'description': 'load environment vars from a file', 'type': 'list', 'required': False}, 'environment': {'description': 'environment variables (map-style) *translates to Kubernetes env*', 'type': 'map', 'required': False}, 'expose': {'description': 'ports to expose to other linked services', 'type': 'list', 'required': False}, 'extra_hosts': {'description': 'host aliases to add to /etc/hosts', 'type': 'list', 'required': False}, 'healthcheck': {'description': 'Docker-style healthcheck', 'type': 'map', 'required': False}, 'init': {'description': 'run an init to forward signals, reap processes', 'type': 'boolean', 'required': False}, 'labels': {'description': 'Labels *translates to Kubernetes PodSpec labels*', 'type': 'map', 'required': False}, 'logging': {'description': 'logging configuration', 'type': 'map', 'required': False}, 'networks': {'description': 'network configuration', 'type': 'map', 'required': False}, 'pid': {'description': 'option for using host PID *translates to Kubernetes hostPID*', 'type': 'string', 'required': False}, 'privileged': {'description': 'run with root equivalency *translates to Kubernetes SecurityContext*', 'type': 'boolean', 'required': False}, 'secrets': {'description': 'passing secrets', 'type': 'list', 'required': False}, 'stdin_open': {'description': 'allocate a buffer for stdin *translates to Kubernetes stdin*', 'type': 'boolean', 'required': False}, 'stop_grace_period': {'description': 'when container is killed after shutdown *translates to Kubernetes grace...*', 'type': 'string', 'required': False}, 'stop_signal': {'description': 'signal to stop the container', 'type': 'string', 'required': False}, 'ulimits': {'description': 'override default ulimits of container', 'type': 'map', 'required': False}, 'volumes': {'description': 'volumes to mount', 'type': 'list', 'required': False}, 'working_dir': {'description': 'working directory *translates to Kubernetes workingDir*', 'type': 'string', 'required': False}}, 'artifacts': {'image': {'type': 'tosca.artifacts.Deployment.Image.Container.Docker', 'file': {'get_property': ['SELF', 'image']}, 'repository': 'docker_hub'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}, 'attributes': {'port': {'type': 'integer'}}, 'capabilities': {'service': {'type': 'tosca.capabilities.Container.Docker'}, 'container': {'type': 'tosca.capabilities.Container.Docker'}, 'scalable': {'type': 'tosca.capabilities.Scalable'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'container': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.HostedOn'}}, {'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}, {'volume': {'capability': 'tosca.capabilities.Attachment', 'node': 'tosca.nodes.MiCADO.Container.Volume', 'relationship': 'tosca.relationships.AttachesTo'}}]}}",unknown
"{'tosca.nodes.MiCADO.Container.Pod.Kubernetes': {'description': 'A bare Kubernetes Pod, which supports hosting containers', 'derived_from': 'tosca.nodes.Container.Runtime', 'properties': None, 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}, 'requirements': [{'service': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.MiCADO.ConnectsTo'}}, {'container': {'capability': 'tosca.capabilities.Container.Docker', 'node': 'tosca.nodes.MiCADO.Container.Application.Docker', 'relationship': 'tosca.relationships.HostedOn'}}, {'host': {'capability': 'tosca.capabilities.Compute', 'node': 'tosca.nodes.MiCADO.Compute', 'relationship': 'tosca.relationships.HostedOn'}}]}}",0
"{'tosca.nodes.MiCADO.Container.Pod.Kubernetes.Deployment': {'description': 'An abstraction of the above, creates a Deployment', 'derived_from': 'tosca.nodes.MiCADO.Container.Pod.Kubernetes', 'interfaces': {'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes', 'create': {'inputs': {'kind': 'Deployment', 'spec': {'strategy': {'type': 'Recreate'}}}}}}}}",0
"{'tosca.nodes.MiCADO.Container.Config': {'description': 'base type for Config files', 'derived_from': 'tosca.nodes.Root', 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}}}",0
"{'tosca.nodes.MiCADO.Container.Volume': {'description': 'description of a container volume', 'derived_from': 'tosca.nodes.BlockStorage', 'properties': {'name': {'type': 'string', 'description': 'name of the volume', 'required': False}, 'labels': {'type': 'map', 'description': 'map of metadata labels', 'required': False}, 'size': {'type': 'string', 'description': 'overwrite size requirement', 'required': False}}, 'capabilities': {'volume': {'type': 'tosca.capabilities.Attachment'}}, 'interfaces': {'Swarm': {'type': 'tosca.interfaces.MiCADO.Swarm'}, 'Kubernetes': {'type': 'tosca.interfaces.MiCADO.Kubernetes'}}}}",0
"{'my.nodes.hpc.wm.torque': {'description': 'torque wm, here we can define properties/attributes applicable for torque WM\n', 'derived_from': 'tosca.nodes.Compute', 'attributes': {'username': {'type': 'string', 'default': 'admin'}, 'ssh-key': {'type': 'string'}, 'ssh-key-hashalgo': {'type': 'string', 'default': 'sh1'}, 'ssh-key-size': {'type': 'integer', 'default': 1024}}, 'capabilities': {'host': {'type': 'tosca.capabilities.Compute', 'valid_source_types': ['my.nodes.hpc.job.torque']}}}}",0
"{'tosca.nodes.SFlowService': {'derived_from': 'tosca.nodes.Root', 'description': 'XOS SFlow Collection Service\n', 'capabilities': {'scalable': {'type': 'tosca.capabilities.Scalable'}, 'service': {'type': 'tosca.capabilities.xos.Service'}}, 'properties': {'no-delete': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to delete this object'}, 'no-create': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to create this object'}, 'no-update': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to update this object'}, 'kind': {'type': 'string', 'default': 'generic', 'description': 'Type of service.'}, 'view_url': {'type': 'string', 'required': False, 'description': 'URL to follow when icon is clicked in the Service Directory.'}, 'icon_url': {'type': 'string', 'required': False, 'description': 'ICON to display in the Service Directory.'}, 'enabled': {'type': 'boolean', 'default': True}, 'published': {'type': 'boolean', 'default': True, 'description': 'If True then display this Service in the Service Directory.'}, 'public_key': {'type': 'string', 'required': False, 'description': 'Public key to install into Instances to allows Services to SSH into them.'}, 'private_key_fn': {'type': 'string', 'required': False, 'description': 'Location of private key file'}, 'versionNumber': {'type': 'string', 'required': False, 'description': 'Version number of Service.'}, 'sflow_port': {'type': 'integer', 'required': False, 'default': 6343, 'description': 'sFlow listening port'}, 'sflow_api_port': {'type': 'integer', 'required': False, 'default': 33333, 'description': 'sFlow publish subscribe api listening port'}}}}",0
"{'tosca.nodes.CeilometerService': {'derived_from': 'tosca.nodes.Root', 'description': 'XOS Ceilometer Service\n', 'capabilities': {'scalable': {'type': 'tosca.capabilities.Scalable'}, 'service': {'type': 'tosca.capabilities.xos.Service'}}, 'properties': {'no-delete': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to delete this object'}, 'no-create': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to create this object'}, 'no-update': {'type': 'boolean', 'default': False, 'description': 'Do not allow Tosca to update this object'}, 'kind': {'type': 'string', 'default': 'generic', 'description': 'Type of service.'}, 'view_url': {'type': 'string', 'required': False, 'description': 'URL to follow when icon is clicked in the Service Directory.'}, 'icon_url': {'type': 'string', 'required': False, 'description': 'ICON to display in the Service Directory.'}, 'enabled': {'type': 'boolean', 'default': True}, 'published': {'type': 'boolean', 'default': True, 'description': 'If True then display this Service in the Service Directory.'}, 'public_key': {'type': 'string', 'required': False, 'description': 'Public key to install into Instances to allows Services to SSH into them.'}, 'private_key_fn': {'type': 'string', 'required': False, 'description': 'Location of private key file'}, 'versionNumber': {'type': 'string', 'required': False, 'description': 'Version number of Service.'}, 'ceilometer_pub_sub_url': {'type': 'string', 'required': False, 'description': 'REST URL of ceilometer PUB/SUB component'}}}}",0
"{'tosca.nodes.CeilometerTenant': {'derived_from': 'tosca.nodes.Root', 'description': 'CORD: A Tenant of the Ceilometer Service.\n', 'properties': {'kind': {'type': 'string', 'default': 'generic', 'description': 'Kind of tenant'}}}}",0
{'tosca.nodes.Compute': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.Compute.Cloud': {'derived_from': 'tosca.nodes.Compute'}},0
{'tosca.nodes.Compute.Cloud.Openstack': {'derived_from': 'tosca.nodes.Compute.Cloud'}},0
{'tosca.nodes.Compute.Cloud.Docker': {'derived_from': 'tosca.nodes.Compute.Cloud'}},0
"{'tosca.nodes.Compute.Local': {'derived_from': 'tosca.nodes.Compute', 'attributes': {'hosts': {'type': 'list'}, 'user': {'type': 'string'}, 'password': {'type': 'string'}}}}",0
{'tosca.nodes.deploy': {'derived_from': 'tosca.nodes.Root'}},0
{'tosca.nodes.deploy.Tomcat': {'derived_from': 'tosca.nodes.deploy'}},0
{'tosca.nodes.deploy.MySQL': {'derived_from': 'tosca.nodes.deploy'}},0
"{'docker_container': {'derived_from': 'cloudify.nodes.Root', 'properties': {'image_name': {'type': 'string', 'default': {'get_input': 'docker-image'}}, 'container_ID': {'type': 'string', 'default': 'container1'}}}}",0
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",1
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",1
"{'tosca.relationships.nfv.HA': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.nfv.HA']}}",1
"{'tosca.relationships.nfv.Monitor': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.Metric']}}",1
"{'tosca.relationships.nfv.ForwardsTo': {'derived_from': 'tosca.relationships.root', 'valid_target_types': ['tosca.capabilities.nfv.Forwarder']}}",1
"{'MyAttachesTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'location': {'type': 'string', 'default': '/default_location'}}}}",1
"{'tosca.relationships.mec.VirtualLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.mec.VirtualLinkable']}}",1
"{'tosca.relationships.mec.VirtualBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.mec.VirtualBindable']}}",1
"{'tosca.relationships.mec.HA': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.mec.HA']}}",1
"{'tosca.relationships.mec.Monitor': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.mec.Metric']}}",1
"{'tosca.relationships.mec.ForwardsTo': {'derived_from': 'tosca.relationships.root', 'valid_target_types': ['tosca.capabilities.mec.Forwarder']}}",1
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from.\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root'}},1
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",1
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}",0
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'required': True, 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'required': False, 'type': 'string'}}}}",0
"{'tosca.relationships.RoutesTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.network.LinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
{'test.relation.connects': {'derived_from4': 'tosca.relationships.ConnectsTo'}},1
"{'MyAttachesTo': {'derived_from': 'AttachesTo', 'properties': {'location': '/default_location'}, 'interfaces': {'Configure': {'post_configure_target': {'implementation': 'default_script.sh'}}}}}",0
"{'my.types.WordpressDbConnection': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'credential': {'user': 'db_user', 'token': 'db_pwd'}}}}",0
{'MyCustomAttachesTo': {'derived_from': 'AttachesTo'}},1
{'org.alien4cloud.automation.a4c.pub.relationships.AlienConfiguratorHostedOnAlien': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GraphiteDataEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'data_endpoint', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GrafanaHttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'org.alien4cloud.monitoring.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'interfaces': {'Configure': {'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collector_added.yml', 'dashboard_dir': {'get_attribute': ['TARGET', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['TARGET', 'grafana_url']}, 'grafana_user': {'get_attribute': ['TARGET', 'grafana_user']}, 'grafana_password': {'get_attribute': ['TARGET', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.aws.relationships.ELBServiceSide': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'configure': {'add_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/add_target.sh'}, 'remove_target': {'inputs': {'lb_name': {'get_property': ['SOURCE', 'lb_name']}, 'instance_id': {'get_attribute': ['TARGET', 'aws_resource_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'scripts/remove_target.sh'}}}}}",0
"{'org.alien4cloud.automation.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'hostpool_connected.yml', 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_key']}, 'key_name': {'get_property': ['SOURCE', 'key_name']}, 'key_content': {'get_property': ['SOURCE', 'key_content']}, 'region': {'get_property': ['SOURCE', 'region']}, 'instance_name': {'get_property': ['SOURCE', 'instance_name']}, 'instance_count': {'get_property': ['SOURCE', 'instance_count']}, 'host_per_instance': {'get_property': ['SOURCE', 'host_per_instance']}, 'instance_username': {'get_property': ['SOURCE', 'instance_username']}, 'instance_groups': {'get_property': ['SOURCE', 'instance_groups']}, 'instance_image': {'get_property': ['SOURCE', 'instance_image']}, 'instance_type': {'get_property': ['SOURCE', 'instance_type']}, 'instance_os': {'get_property': ['SOURCE', 'instance_os']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.ansible.relationships.ELBProxyEC2Instance': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.ansible.capabilities.EC2Instance'], 'interfaces': {'configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'add_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}, 'remove_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'remove_target.yml', 'lb_name': {'get_property': ['SOURCE', 'name']}, 'instance_id': {'get_attribute': ['TARGET', 'instance_id']}, 'region': {'get_property': ['SOURCE', 'region']}, 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key_id']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_access_key']}}, 'implementation': 'playbooks/ELBProxyEC2Instance/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleHdfsRepoOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleHdfsRepo_io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.kafka.topic.nodes.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleTopicOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.kafka.topic.nodes.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_BROKER_ENDPOINT': {'get_attribute': ['TARGET', 'kafka_broker_endpoint']}, 'TOPIC_NAME': {'get_attribute': ['TARGET', 'topic_name']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/SparkStreamingModuleTopic_io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark.streaming.relationships.SparkStreamingModuleDependency': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.demo.spark.streaming.capabilities.SparkStreamingModuleDependency']}}",0
"{'org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'ES_PORT': {'get_property': ['TARGET', 'elasticsearch', 'port']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'remove_target': {'inputs': {'operation': 'remove_target', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}, 'remove_source': {'inputs': {'operation': 'remove_source', 'duration': {'get_property': ['SOURCE', 'duration']}}, 'implementation': 'scripts/relation_operation.sh'}}}}}",unknown
"{'org.alien4cloud.relationships.demo.Relationship': {'description': 'Defines common definitions for our test.\n', 'derived_from': 'tosca.relationships.ConnectsTo', 'abstract': True, 'valid_target_types': ['org.alien4cloud.capabilities.demo.ServiceDemo']}}",0
"{'org.alien4cloud.relationships.demo.ConnectsTo': {'description': 'This is the default relationship to use between 2 concrete nodes.\n', 'derived_from': 'org.alien4cloud.relationships.demo.Relationship', 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'OPERATION': 'pre_configure_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'pre_configure_target': {'inputs': {'OPERATION': 'pre_configure_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_source': {'inputs': {'OPERATION': 'post_configure_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_target': {'inputs': {'OPERATION': 'post_configure_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'add_target': {'inputs': {'OPERATION': 'add_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'add_source': {'inputs': {'OPERATION': 'add_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'remove_target': {'inputs': {'OPERATION': 'remove_target', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}, 'remove_source': {'inputs': {'OPERATION': 'remove_source', 'RELATIONSHIP_TYPE': 'default'}, 'implementation': 'scripts/relationship.sh'}}}}}",unknown
"{'org.alien4cloud.relationships.demo.OverriddenConnectsTo': {'description': 'This is the default relationship to use when connecting a concrete node to a service.\n', 'derived_from': 'org.alien4cloud.relationships.demo.Relationship', 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'OPERATION': 'pre_configure_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'pre_configure_target': {'inputs': {'OPERATION': 'pre_configure_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_source': {'inputs': {'OPERATION': 'post_configure_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'post_configure_target': {'inputs': {'OPERATION': 'post_configure_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'add_target': {'inputs': {'OPERATION': 'add_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'add_source': {'inputs': {'OPERATION': 'add_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'remove_target': {'inputs': {'OPERATION': 'remove_target', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}, 'remove_source': {'inputs': {'OPERATION': 'remove_source', 'RELATIONSHIP_TYPE': 'overridden'}, 'implementation': 'scripts/relationship.sh'}}}}}",0
"{'org.alien4cloud.relationships.WebSiteHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'WEBFILE_URL': {'get_property': ['SOURCE', 'zip_url']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'context_path']}, 'DOC_ROOT': {'get_property': ['TARGET', 'document_root']}}, 'implementation': 'scripts/deploy_website.sh'}}}}}",0
"{'alien.relationships.PetclinicConnectsToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Petclinic with a Mysql database', 'valid_target_types': ['org.alien4cloud.capabilities.MysqlDatabaseEndpoint'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'DB_USER': {'get_property': ['TARGET', 'db_user']}, 'DB_PASS': {'get_property': ['TARGET', 'db_password']}, 'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}}, 'implementation': 'scripts/install_petclinic_mysql.sh'}}}}}",0
"{'alien.relationships.PetclinicConnectsToPostgresql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Petclinic with a Postgresql database', 'valid_target_types': ['org.alien4cloud.capabilities.PostgresqlDatabaseEndpoint'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'DB_USER': {'get_property': ['TARGET', 'user']}, 'DB_PASS': {'get_property': ['TARGET', 'password']}, 'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}}, 'implementation': 'scripts/install_petclinic_postgresql.sh'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.cloud.amazon.cli.pub.capabilities.AwsCli']}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureAWSKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/aws_configure_key.sh'}}}}}",0
"{'org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureOpenstackKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/openstack_configure_key.sh'}}}}}",0
"{'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToZookeeper': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ZOOKEEPER_IP': {'get_attribute': ['TARGET', 'zookeeper_endpoint', 'ip_address']}, 'ZOOKEEPER_PORT': {'get_attribute': ['TARGET', 'zookeeper_endpoint', 'port']}}, 'implementation': 'scripts/KafkaTopicConnectToZookeeper/pre_configure_source.sh'}}}}}",0
"{'org.alien4cloud.demo.kafka.topic.relationships.KafkaTopicConnectToBroker': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KAFKA_IP': {'get_attribute': ['TARGET', 'kafka_endpoint', 'ip_address']}, 'KAFKA_PORT': {'get_attribute': ['TARGET', 'kafka_endpoint', 'port']}}, 'implementation': 'scripts/KafkaTopicConnectToBroker/pre_configure_source.sh'}}}}}",0
{'org.alien4cloud.monitoring.diamond.pub.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the Alien is connect on the target Elasticsearch.', 'valid_target_types': ['org.alien4cloud.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/alien/config_alien.sh'}}}}}",0
"{'org.alien4cloud.relationships.AlienITConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the Alien is connect on the target Elasticsearch.', 'valid_target_types': ['alien.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/it/config_it.sh'}}}}}",0
"{'org.alien4cloud.relationships.AlienITDependsOnAlien': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship use to describe that AlienIT needs Alien.', 'valid_target_types': ['alien.capabilities.Alien']}}",0
"{'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToService': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'context': 'Private', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_api', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source_private.sh'}, 'add_target': {'inputs': {'context': 'Private', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_public_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_public_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_public_api', 'ip_address']}}, 'implementation': 'scripts/add_target.sh'}}}}}",0
"{'org.alien4cloud.sandbox.services.dummy.client.relationships.DummyClientConnectToPublicService': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.sandbox.services.dummy.pub.nodes.DummyService'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'context': 'Public', 'service_host_uname': {'get_attribute': ['TARGET', 'host_uname']}, 'service_protocol': {'get_attribute': ['TARGET', 'dummy_public_api', 'protocol']}, 'service_port': {'get_attribute': ['TARGET', 'dummy_public_api', 'port']}, 'service_ip_address': {'get_attribute': ['TARGET', 'dummy_public_api', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source_public.sh'}}}}}",0
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoInput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Input'}, 'implementation': 'scripts/io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkApp2HdfsRepoOutput': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.demo.hdfs-repository.capabilities.HdfsRepository'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'HDFS_URL': {'get_attribute': ['TARGET', 'hdfs_folder_url']}, 'HDFS_PATH': {'get_attribute': ['TARGET', 'hdfs_folder_path']}, 'REL_TYPE': 'Output'}, 'implementation': 'scripts/io.sh'}}}}}",0
"{'org.alien4cloud.demo.spark-jobs.relationships.SparkAppDependency': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.demo.spark-jobs.capabilities.SparkApplicationDependency'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/app_connect.sh'}}}}}",0
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentHostedOnHost': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'valid_target_types': ['org.alien4cloud.mock.ansible.nodes.AnsibleMockHost'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.automation.a4c.config.orchestrator.cfy.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.relationships.RegistryHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer']}}",0
"{'org.alien4cloud.relationships.RegistryConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.capabilities.PHPModule']}}",0
"{'org.alien4cloud.relationships.RegistryConfigurerDependsOnRegistry': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'configure': {'add_target': {'inputs': {'REGISTRY_HOST': {'get_attribute': ['TARGET', 'host']}, 'REGISTRY_PORT': {'get_attribute': ['TARGET', 'port']}}, 'implementation': 'scripts/RegistryConfigurerDependsOnRegistry/add_target.sh'}}}}}",0
"{'org.alien4cloud.relationships.GenericHostedOnGenericHost': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.GenericHost'], 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_source.sh'}, 'pre_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_target.sh'}, 'post_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_source.sh'}, 'post_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_target.sh'}, 'add_target': {'implementation': 'scripts/GenericConnectToGeneric/add_target.sh'}, 'add_source': {'implementation': 'scripts/GenericConnectToGeneric/add_source.sh'}, 'remove_target': {'implementation': 'scripts/GenericConnectToGeneric/remove_target.sh'}, 'remove_source': {'implementation': 'scripts/GenericConnectToGeneric/remove_source.sh'}}}}}",0
"{'org.alien4cloud.relationships.GenericConnectToGeneric': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.capabilities.GenericCapability'], 'properties': {'generic_property': {'type': 'string', 'required': False, 'default': 'default_value'}, 'complex_prop': {'type': 'alien.nodes.test.ComplexDataType', 'required': False}}, 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_source.sh'}, 'pre_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/pre_configure_target.sh'}, 'post_configure_source': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_source.sh'}, 'post_configure_target': {'implementation': 'scripts/GenericConnectToGeneric/post_configure_target.sh'}, 'add_target': {'inputs': {'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'TARGET_PROPERTY': {'get_property': ['TARGET', 'generic_property']}}, 'implementation': 'scripts/GenericConnectToGeneric/add_target.sh'}, 'add_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'SOURCE_PROPERTY': {'get_property': ['SOURCE', 'generic_property']}}, 'implementation': 'scripts/GenericConnectToGeneric/add_source.sh'}, 'remove_target': {'implementation': 'scripts/GenericConnectToGeneric/remove_target.sh'}, 'remove_source': {'implementation': 'scripts/GenericConnectToGeneric/remove_source.sh'}}}}}",0
"{'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'plugin_archive_url': {'get_property': ['SOURCE', 'plugin_archive_url']}, 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.cloudify.config.offline_plugin.relationships.ConnectsToA4C': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_a4c.yml', 'alien_user': {'get_property': ['TARGET', 'rest', 'user']}, 'alien_password': {'get_property': ['TARGET', 'rest', 'password']}, 'alien_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost': {'derived_from': 'tosca.relationships.HostedOn', 'abstract': True, 'valid_target_types': ['org.alien4cloud.mock.pub.nodes.AbstractMockHost']}}",0
"{'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'abstract': True, 'valid_target_types': ['org.alien4cloud.mock.pub.capabilities.AbstractComponentEndpoint']}}",0
"{'org.alien4cloud.relationships.RoutesToApacheLoadBalancer': {'derived_from': 'tosca.relationships.RoutesTo', 'description': 'Relationship that configures the Apache Load Balancer so it', 'interfaces': {'Configure': {'add_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/add_web_app_to_load_balancer.sh'}, 'remove_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/remove_web_app_from_load_balancer.sh'}}}}}",0
"{'org.alien4cloud.relationships.RoutesToApacheLoadBalancerService': {'derived_from': 'tosca.relationships.RoutesTo', 'description': 'Specific relationship to route an application using an apache load balancer started a a service. This relationship is expected to be processed on a sandboxed manager node and to connect to the Apache Load Balancer machine through ssh. The path to the ssh key to use for the apache machine connexion can be specified through a property.\n', 'properties': {'user': {'type': 'string', 'default': 'ubuntu'}}, 'artifacts': [{'script_directory': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'ssh_key': {'file': 'ssh/service_key.pem', 'type': 'tosca.artifacts.File'}}], 'interfaces': {'Configure': {'add_target': {'inputs': {'USER': {'get_property': ['SELF', 'user']}, 'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/service_add_web_app_to_load_balancer.sh'}, 'remove_target': {'inputs': {'USER': {'get_property': ['SELF', 'user']}, 'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/service_remove_web_app_from_load_balancer.sh'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCollectElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_elasticsearch.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'elasticsearch_host': {'get_attribute': ['TARGET', 'http', 'ip_address']}, 'elasticsearch_port': {'get_attribute': ['TARGET', 'http', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondJolokiaCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.lang.java.jmx.jolokia.capabilities.JolokiaEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_jolokia.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'ip_address']}, 'jolokia_port': {'get_attribute': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondRabbitmqCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_rabbitmq.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'rabbitmq_port': {'get_attribute': ['TARGET', 'rabbitmq_management', 'port']}, 'rabbitmq_user': {'get_attribute': ['TARGET', 'rabbitmq_management', 'user']}, 'rabbitmq_password': {'get_attribute': ['TARGET', 'rabbitmq_management', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondPostgresqlCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_postgresql.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'postgresql_port': {'get_attribute': ['TARGET', 'postgresql', 'port']}, 'postgresql_user': {'get_attribute': ['TARGET', 'postgresql', 'user']}, 'postgresql_password': {'get_attribute': ['TARGET', 'postgresql', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondA4CCollector': {'derived_from': 'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondJolokiaCollector', 'valid_target_types': ['org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint'], 'interfaces': {'Configure': {'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_alien.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'jolokia', 'ip_address']}, 'alien_data_dir': {'get_property': ['TARGET', 'data_dir']}, 'jolokia_port': {'get_property': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.monitoring.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyHostpoolCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.automation.a4c.config.applications.relationships.AddApplicationsDependsOnCsar': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.automation.a4c.config.csar']}}",0
"{'org.alien4cloud.relationships.WordpressHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.capabilities.ApacheContainer'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'CONTEXT_ROOT': {'get_property': ['SOURCE', 'context_root']}, 'DOC_ROOT': {'get_property': ['TARGET', 'document_root']}}, 'implementation': 'scripts/config_wordpress.sh'}}}}}",0
"{'org.alien4cloud.relationships.WordpressConnectToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect the Wordpress with a Mysql databse', 'valid_target_types': ['org.alien4cloud.capabilities.MysqlDatabaseEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'DB_NAME': {'get_property': ['TARGET', 'name']}, 'DB_USER': {'get_property': ['TARGET', 'db_user']}, 'DB_PASSWORD': {'get_property': ['TARGET', 'db_password']}}, 'implementation': 'scripts/config_wordpress_for_mysql.sh'}}}}}",0
"{'org.alien4cloud.relationships.WordpressConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to install the Mysql module for PHP', 'valid_target_types': ['org.alien4cloud.capabilities.PHPModule'], 'interfaces': {'Configure': {'pre_configure_source': 'scripts/install_php_module.sh'}}}}",0
"{'org.alien4cloud.automation.a4c.config.location_resources.cfy_byon.LocationConnectsToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.automation.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_hostpool.yml', 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
{'org.alien4cloud.automation.a4c.config.pub.relationships.LocationHostedOnOrchestrator': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'org.alien4cloud.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",0
"{'org.alien4cloud.relationships.Flannel': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.capabilities.flannel.Connectivity']}}",0
"{'org.alien4cloud.relationships.kubernetes.HostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.MasterHost'], 'attributes': {'kubernetes_master_ip': {'get_attribute': ['TARGET', 'ip_address']}}}}",0
"{'org.alien4cloud.relationships.kubernetes.DependsOnNamespace': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.Namespace']}}",0
"{'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress': {'abstract': True, 'derived_from': 'tosca.relationships.ConnectsTo', 'attributes': {'target_ip_address': {'get_operation_output': ['SELF', 'configure', 'postConfigureSource', 'EXPORTED_TARGET_IP']}}, 'interfaces': {'configure': {'post_configure_source': {'implementation': 'scripts/exposeTargetIpAddress.sh', 'inputs': {'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}}}}}}",0
"{'org.alien4cloud.relationships.kubernetes.RetrieveMasterConfigurations': {'derived_from': 'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.MasterConfiguration']}}",0
"{'org.alien4cloud.relationships.kubernetes.RetrieveEtcdIpAddress': {'derived_from': 'org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress', 'valid_target_types': ['org.alien4cloud.capabilities.kubernetes.ETCD']}}",0
"{'org.alien4cloud.monitoring.grafana.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.alien4cloud.monitoring.pub.capabilities.GraphiteHttpEndpoint'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, 'graphite_port': {'get_property': ['TARGET', 'http_endpoint', 'port']}, 'grafana_port': {'get_property': ['SOURCE', 'http_endpoint', 'port']}, 'grafana_user': {'get_property': ['SOURCE', 'http_endpoint', 'user']}, 'grafana_password': {'get_property': ['SOURCE', 'http_endpoint', 'password']}, 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.relationships.ConnectElasticSearchNodes': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship that models 2 ES nodes connection.', 'valid_target_types': ['alien.capabilities.ElasticSearch'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/pre_configure_source.sh'}, 'pre_configure_target': {'inputs': {'ES_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/pre_configure_target.sh'}}}}}",0
"{'org.alien4cloud.mock.ansible.relationships.AnsibleComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.ansible.capabilities.AnsibleComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'post_configure_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_target': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}, 'add_source': {'inputs': {'ANSIBLE_VERBOSE': True, 'PLAYBOOK_ENTRY': 'operation.yml', 'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",unknown
"{'org.alien4cloud.relationships.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_target_types': ['org.alien4cloud.capabilities.WarContainer'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'CONTEXT_PATH': {'get_property': ['SOURCE', 'app_endpoint', 'url_path']}, 'TOMCAT_HOME': {'get_property': ['TARGET', 'tomcat_home']}, 'TOMCAT_PORT': {'get_property': ['TARGET', 'port']}}, 'implementation': 'scripts/tomcat_install_war.sh'}}}}}",0
"{'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.lang.java.pub.capabilities.JDK']}}",0
"{'MyAttachTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'location': {'type': 'string', 'default': '/default_location'}}}}",0
"{'tosca.relationships.vendor.VendorLinksTo': {'derived_from': 'tosca.relationships.network.LinksTo', 'valid_target_types': ['tosca.capabilities.vendor.VendorLinkable']}}",0
"{'tosca.relationships.vendor.VendorBindsTo': {'derived_from': 'tosca.relationships.network.BindsTo', 'valid_target_types': ['tosca.capabilities.vendor.VendorBindable']}}",0
"{'my.relationships.ConnectsToWebUI': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'target_ip': {'type': 'string'}}, 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'target_ip': {'type': 'string'}}, 'implementation': 'scripts/my_script.sh'}}}}}",0
"{'mycompany.mytypes.myCustomClientServerType': {'derived_from': 'tosca.relationships.HostedOn', 'properties': None}}",1
"{'mycompany.mytypes.myCustomConnectionType': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': None}}",1
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint'], 'properties': {'prop.name': {'type': 'string', 'required': False}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}}}",0
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint'], 'properties': {'prop.name': {'type': 'string', 'required': False}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/test.sh'}, 'pre_configure_target': {'implementation': 'scripts/target.sh'}}}}}",0
"{'brooklyn.relationships.Configure': {'derived_from': 'tosca.relationships.DependsOn', 'valid_targets': ['tosca.capabilities.Endpoint', 'tosca.capabilities.Endpoint.Database'], 'properties': {'prop.name': {'type': 'string', 'required': True}, 'prop.value': {'type': 'string', 'required': True}, 'prop.collection': {'type': 'string', 'required': False}}}}",0
{'tosca.relationships.indigo.Manages': {'derived_from': 'tosca.relationships.Root'}},1
"{'tosca.relationships.indigo.AttachesTo': {'derived_from': 'tosca.relationships.AttachesTo', 'properties': {'fs_type': {'type': 'string', 'required': False, 'default': None}}}}",0
"{'SmartPlug': {'properties': {'vendor': {'type': 'string', 'required': False}}, 'attributes': {'ip_address': {'type': 'string'}}}}",0
"{'SuperSmartPlug': {'derived_from': 'SmartPlug', 'properties': {'failsafe': {'type': 'boolean'}}}}",0
"{'Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'relationship.Configure'}}}}",0
"{'DependsOn': {'derived_from': 'Root', 'description': 'This type represents a general dependency relationship between two nodes.', 'valid_target_types': ['Node']}}",0
"{'HostedOn': {'derived_from': 'Root', 'description': 'This type represents a hosting relationship between two nodes.', 'valid_target_types': ['Container']}}",0
"{'ConnectsTo': {'derived_from': 'Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['Endpoint'], 'properties': {'credential': {'type': 'Credential', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",0
"{'AttachesTo': {'derived_from': 'Root', 'valid_target_types': ['Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",0
"{'RoutesTo': {'derived_from': 'ConnectsTo', 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'valid_target_types': ['Endpoint']}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template.  This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a general dependency relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a hosting relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",0
"{'tosca.relationships.RoutesTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'插頭': {'properties': {'供應商': {'type': 'string'}}, 'attributes': {'IP地址': {'type': 'string'}}}}",0
{'Route': {'valid_target_types': ['Service']}},0
{'Depends': {}},1
"{'tosca.relationships.nfv.VirtualBindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.7.1'}, 'description': 'This relationship type represents an association relationship between VDU and CP node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",0
"{'tosca.relationships.nfv.Monitor': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-NFV-v1.0-csd04]', 'specification.location': '5.7.2'}, 'description': 'This relationship type represents an association relationship to the Metric capability of VDU node types.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.Metric']}}",0
{'Connection': {}},1
"{'Routing': {'derived_from': 'Connection', 'properties': {'routes': {'type': 'list', 'entry_schema': 'Route'}}}}",0
"{'tosca.relationships.samples.basic.SampleRelationship': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': None, 'interfaces': {'Configure': {'add_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/samplerelationship_add_target.sh'}, 'remove_target': {'inputs': {'PROTOCOL': {'get_attribute': ['TARGET', 'protocol']}, 'IP': {'get_attribute': ['TARGET', 'ip_address']}, 'PORT': {'get_attribute': ['TARGET', 'port']}, 'URL_PATH': {'get_attribute': ['TARGET', 'url_path']}}, 'implementation': 'scripts/samplerelationship_remove_target.sh'}}}}}",0
"{'Trunk': {'properties': {'endpoint': {'type': 'string'}}, 'attributes': {'ip': {'type': 'string'}}}}",0
"{'tosca.relationships.MiCADO.ConnectsTo': {'description': 'used to connect containers over a specific Docker network', 'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'network': {'type': 'string', 'description': 'Name of Docker network to connect containers over', 'required': True}}}}",0
"{'org.alien4cloud.terraform.openstack.relationships.SecurityGroup': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.terraform.openstack.capabilities.SecurityGroup'], 'interfaces': {'configure': {'add_target': {'inputs': {'_TF_OPENSTACK_CONFIG': {'get_property': ['SOURCE', 'openstack_config']}, '_TF_FLOATING_IP': {'get_attribute': ['TARGET', 'public_ip']}}, 'implementation': 'scripts/tf_rel_sg_add_target.sh'}, 'remove_target': {'implementation': 'scripts/tf_rel_sg_remove_target.sh'}, 'add_source': {'implementation': 'scripts/tf_rel_sg_add_source.sh'}, 'remove_source': {'implementation': 'scripts/tf_rel_sg_remove_source.sh'}}}}}",0
"{'org.alien4cloud.grafana.linux_ans.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.alien4cloud.graphite.pub.capabilities.GraphiteHttpEndpoint'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, 'graphite_port': {'get_property': ['TARGET', 'http_endpoint', 'port']}, 'grafana_port': {'get_property': ['SOURCE', 'http_endpoint', 'port']}, 'grafana_user': {'get_property': ['SOURCE', 'http_endpoint', 'user']}, 'grafana_password': {'get_property': ['SOURCE', 'http_endpoint', 'password']}, 'datasource_name': {'get_property': ['SELF', 'datasource_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.spark.linux_sh.relationships.JoinSparkCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.spark.linux_sh.nodes.SparkMaster'], 'interfaces': {'Configure': {'add_target': {'inputs': {'SPARK_INSTALL_DIR': {'get_property': ['SOURCE', 'install_dir']}, 'SPARK_MASTER_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}, 'SPARK_SLAVE_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'SPARK_MASTER_PORT': {'get_attribute': ['TARGET', 'spark_master', 'port']}}, 'implementation': 'scripts/join_spark_cluster.sh'}}}}}",0
"{'org.alien4cloud.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.java.pub.capabilities.JDK']}}",0
{'org.alien4cloud.diamond.pub.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.alien4cloud.config.orchestrator.cfy.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.consul.relationships.ConnectToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'CA_PEM': {'get_property': ['SOURCE', 'ca_pem']}, 'CA_KEY': {'get_property': ['SOURCE', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SOURCE', 'ca_passphrase']}, 'AGENT_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'AGENT_API_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}}, 'implementation': 'scripts/ConnectToConsulAgent/pre_configure_source.sh'}}}, 'artifacts': [{'ssl': {'file': 'ssl', 'type': 'tosca.artifacts.File'}}, {'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.alien4cloud.webapp.relationships.AlienConnectToElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchTransportAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ES_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'ES_PORT': {'get_property': ['TARGET', 'elasticsearch', 'port']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.samba.relationships.ConnectsToSambaServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.samba.capabilities.SambaServer'], 'properties': {'mount_point': {'type': 'string', 'default': '/var/alien4cloud'}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'SAMBA_SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SHARE_NAME': {'get_property': ['TARGET', 'share_name']}, 'MOUNT_POINT': {'get_property': ['SELF', 'mount_point']}}, 'implementation': 'scripts/smbClient/add_target.sh'}, 'remove_target': {'inputs': {'MOUNT_POINT': {'get_property': ['SELF', 'mount_point']}}, 'implementation': 'scripts/smbClient/remove_target.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.vault.relationships.ConnectToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'AGENT_IP': {'get_attribute': ['TARGET', 'private_address']}, 'AGENT_API_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}, 'AGENT_TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'VAULT_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'VAULT_PORT': {'get_property': ['SOURCE', 'port']}, 'PUBLIC_ADDRESS': {'get_attribute': ['SOURCE', 'public_address']}, 'CA_PEM': {'get_property': ['SOURCE', 'ca_pem']}, 'CA_KEY': {'get_property': ['SOURCE', 'ca_key']}, 'CA_PASSPHRASE': {'get_property': ['SOURCE', 'ca_passphrase']}}, 'implementation': 'scripts/vault/configure_vault.sh'}}}}}",0
"{'org.alien4cloud.vault.vault_sh.relationships.PolicyHostedOnVaultServer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.vault.vault_sh.nodes.VaultServer']}}",0
"{'org.alien4cloud.vault.pub.relationships.PolicyHostedOnVaultServer': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the vault policy is hosted on the vault server.', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",0
"{'org.alien4cloud.kubernetes.kubeadm.relationships.HostedOnDocker': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.kubernetes.kubeadm.capabilities.DockerHost']}}",0
"{'org.alien4cloud.kubernetes.kubeadm.relationships.JoinMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.kubernetes.kubeadm.capabilities.MasterCluster'], 'interfaces': {'configure': {'post_configure_source': {'implementation': 'scripts/kubernetes/join-master.sh', 'inputs': {'MASTER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'KUBE_TOKEN': {'get_attribute': ['TARGET', 'kube_token']}, 'KUBE_SHA256': {'get_attribute': ['TARGET', 'kube_sha256']}}}}}}}",0
"{'org.alien4cloud.alien4cloud.config.location_resources.cfy_byon.LocationConnectsToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_hostpool.yml', 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.mysql.linux_pup.relationships.MysqlHostedOnAgentPuppet': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target Apache server.', 'valid_target_types': ['org.alien4cloud.agentpuppet.capabilities.PuppetAgentContainer']}}",0
{'org.alien4cloud.alien4cloud.pub.relationships.AlienConfiguratorHostedOnAlien': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCollectElasticSearch': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.elasticsearch.pub.capabilities.ElasticSearchRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_elasticsearch.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'elasticsearch_host': {'get_attribute': ['TARGET', 'http', 'ip_address']}, 'elasticsearch_port': {'get_attribute': ['TARGET', 'http', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.java.jmx.jolokia.capabilities.JolokiaEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_jolokia.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'ip_address']}, 'jolokia_port': {'get_attribute': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondRabbitmqCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_rabbitmq.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'rabbitmq_port': {'get_attribute': ['TARGET', 'rabbitmq_management', 'port']}, 'rabbitmq_user': {'get_attribute': ['TARGET', 'rabbitmq_management', 'user']}, 'rabbitmq_password': {'get_attribute': ['TARGET', 'rabbitmq_management', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondPostgresqlCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.postgresql.pub.PostgresqlEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_postgresql.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'postgresql_port': {'get_attribute': ['TARGET', 'postgresql', 'port']}, 'postgresql_user': {'get_attribute': ['TARGET', 'postgresql', 'user']}, 'postgresql_password': {'get_attribute': ['TARGET', 'postgresql', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondA4CCollector': {'derived_from': 'org.alien4cloud.diamond.collectors.relationships.DiamondJolokiaCollector', 'valid_target_types': ['org.alien4cloud.alien4cloud.pub.capabilities.JolokiaA4CEndpoint'], 'interfaces': {'Configure': {'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_alien.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'jolokia_host': {'get_attribute': ['TARGET', 'jolokia', 'ip_address']}, 'alien_data_dir': {'get_property': ['TARGET', 'data_dir']}, 'jolokia_port': {'get_property': ['TARGET', 'jolokia', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.collectors.relationships.DiamondCloudifyHostpoolCollector': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'properties': {'collector_name': {'type': 'string', 'default': 'CloudifyHostpoolCollector'}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collect_custom.yml', 'datasource_name': {'get_attribute': ['SOURCE', 'datasource_name']}, 'collectors_conf_path': {'get_attribute': ['SOURCE', 'collectors_conf_path']}, 'dashboard_dir': {'get_attribute': ['SOURCE', 'dashboard_dir']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}}, 'implementation': 'playbook/playbook.ansible'}, 'pre_configure_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'install_custom_collector.yml', 'collectors_path': {'get_attribute': ['SOURCE', 'collectors_path']}, 'collector_name': {'get_property': ['SELF', 'collector_name']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.alien4cloud.config.backupRestoreS3.relationships.BackupRestoreS3DependsOnAwsCli': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.aws-cli.pub.capabilities.AwsCli']}}",0
{'org.alien4cloud.alien4cloud.config.pub.relationships.LocationHostedOnOrchestrator': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.alien4cloud.alien4cloud.config.applications.relationships.AddApplicationsDependsOnCsar': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.alien4cloud.config.csar']}}",0
"{'org.alien4cloud.consul.consul_sh.relationships.JoinCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'The relationship between a consul client agent and a consul server agent.\n', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulServer'], 'interfaces': {'Configure': {'add_target': {'inputs': {'CONSUL_SERVER_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/consul/join_consul_cluster.sh'}}}, 'artifacts': [{'commons': {'file': 'scripts/commons', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.alien4cloud.mock.bash.relationships.BashComponentHostedOnHost': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentHostedOnHost', 'valid_target_types': ['org.alien4cloud.mock.bash.nodes.BashMockHost'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source AnsibleComponentHostedOnHost', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.mock.bash.relationships.BashComponentConnectToComponent': {'derived_from': 'org.alien4cloud.mock.pub.relationships.AbstractComponentConnectToComponent', 'valid_target_types': ['org.alien4cloud.mock.bash.capabilities.BashComponentEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'operation': 'pre_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'pre_configure_target': {'inputs': {'operation': 'pre_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_source': {'inputs': {'operation': 'post_configure_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'post_configure_target': {'inputs': {'operation': 'post_configure_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_target': {'inputs': {'operation': 'add_target AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}, 'add_source': {'inputs': {'operation': 'add_source AnsibleComponentConnectToComponent', 'duration': 2, 'variation': {'get_property': ['SOURCE', 'variation']}, 'weight': 30, 'log_length': {'get_property': ['SOURCE', 'log_length']}}, 'implementation': 'scripts/operation.sh'}}}, 'artifacts': [{'data': {'file': 'data/data.txt', 'type': 'tosca.artifacts.File'}}]}}",unknown
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.graphite.pub.capabilities.GraphiteDataEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_graphite.yml', 'graphite_host': {'get_attribute': ['TARGET', 'data_endpoint', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_endpoint', 'port']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToGrafana': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.grafana.pub.capabilities.GrafanaHttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connects_to_grafana.yml', 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': {'get_attribute': ['TARGET', 'http_endpoint', 'user']}, 'grafana_password': {'get_attribute': ['TARGET', 'http_endpoint', 'password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondCollectorHostedOnAgent': {'derived_from': 'org.alien4cloud.diamond.pub.relationships.DiamondCollectorHostedOnAgent', 'interfaces': {'Configure': {'add_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'collector_added.yml', 'dashboard_dir': {'get_attribute': ['TARGET', 'dashboard_dir']}, 'grafana_url': {'get_attribute': ['TARGET', 'grafana_url']}, 'grafana_user': {'get_attribute': ['TARGET', 'grafana_user']}, 'grafana_password': {'get_attribute': ['TARGET', 'grafana_password']}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToCfy': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.manager.pub.capabilities.CloudifyAPIv3'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_cfy.yml', 'plugin_archive_url': {'get_property': ['SOURCE', 'plugin_archive_url']}, 'cfy_user': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_username']}, 'cfy_password': {'get_property': ['TARGET', 'cloudify_api_v3', 'admin_password']}, 'cfy_url': {'concat': [{'get_property': ['TARGET', 'cloudify_api_v3', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_api_v3', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_api_v3', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.config.offline_plugin.relationships.ConnectsToA4C': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.alien4cloud.pub.capabilities.A4cRestApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'connect_a4c.yml', 'alien_user': {'get_property': ['TARGET', 'rest', 'user']}, 'alien_password': {'get_property': ['TARGET', 'rest', 'password']}, 'alien_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.hostpool.awsfeeder.relationships.HostpoolFeederConnectToHostpool': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.cloudify.hostpool.pub.capabilities.HostPoolServiceApi'], 'interfaces': {'Configure': {'add_target': {'inputs': {'ANSIBLE_VERBOSE': False, 'PLAYBOOK_ENTRY': 'hostpool_connected.yml', 'aws_access_key': {'get_property': ['SOURCE', 'aws_access_key']}, 'aws_secret_key': {'get_property': ['SOURCE', 'aws_secret_key']}, 'key_name': {'get_property': ['SOURCE', 'key_name']}, 'key_content': {'get_property': ['SOURCE', 'key_content']}, 'region': {'get_property': ['SOURCE', 'region']}, 'instance_name': {'get_property': ['SOURCE', 'instance_name']}, 'instance_count': {'get_property': ['SOURCE', 'instance_count']}, 'host_per_instance': {'get_property': ['SOURCE', 'host_per_instance']}, 'instance_username': {'get_property': ['SOURCE', 'instance_username']}, 'instance_groups': {'get_property': ['SOURCE', 'instance_groups']}, 'instance_image': {'get_property': ['SOURCE', 'instance_image']}, 'instance_type': {'get_property': ['SOURCE', 'instance_type']}, 'instance_os': {'get_property': ['SOURCE', 'instance_os']}, 'hostpool_url': {'concat': [{'get_property': ['TARGET', 'cloudify_hostpool', 'protocol']}, '://', {'get_attribute': ['TARGET', 'cloudify_hostpool', 'ip_address']}, ':', {'get_property': ['TARGET', 'cloudify_hostpool', 'port']}]}}, 'implementation': 'playbook/playbook.ansible'}}}}}",0
"{'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureAWSKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/aws_configure_key.sh'}}}}}",0
"{'org.alien4cloud.cloudify.manager.v4.relationships.ConfigureOpenstackKey': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SSH_KEY_FILENAME': {'get_property': ['TARGET', 'key_file_name']}, 'KEYPAIR_NAME': {'get_property': ['TARGET', 'keypair_name']}}, 'implementation': 'scripts/openstack_configure_key.sh'}}}}}",0
"{'radon.relationships.google.GoogleTriggers': {'description': 'Google Cloud-specific relationship type representing GCResource-to-GCFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.google', 'abstract': 'false', 'final': 'false'}}}",0
"{'radon.relationships.monitoring.GCPIsMonitoredBy': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'user_email': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'user_email']}}, 'monitored_function': {'type': 'string', 'required': True, 'default': {'get_property': ['SOURCE', 'name']}}, 'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'pushgateway_ip']}}, 'grafana_api_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'grafana_api_ip']}}, 'service_account_file': {'type': 'string', 'required': True, 'default': '/tmp/service_account.json'}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'grafana-injection.yml', 'timeout': 30}}}}}}}",0
"{'radon.relationships.monitoring.AWSIsMonitoredBy': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'user_email': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'user_email']}}, 'monitored_function': {'type': 'string', 'required': True, 'default': {'get_property': ['SOURCE', 'function_name']}}, 'pushgateway_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'pushgateway_ip']}}, 'grafana_api_ip': {'type': 'string', 'required': True, 'default': {'get_property': ['TARGET', 'grafana_api_ip']}}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'grafana-injection.yml', 'timeout': 30}}}}}}}",0
"{'radon.relationships.aws.AwsTriggers': {'description': 'AWS-specific relationship type representing AwsResource-to-AwsLambdaFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.aws', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'description': 'List of events'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'aws_region': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'region']}}, 'bucket_name': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'bucket_name']}}, 'function_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'arn']}}, 'events': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'events']}}}, 'operations': {'post_configure_source': {'implementation': {'primary': 'event-binding.yml', 'timeout': 0}}}}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}, 'valid_target_types': ['tosca.capabilities.Attachment']}}",0
"{'radon.relationships.apache.kafka.PublishToKafkaTopic': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.apache.kafka', 'abstract': 'false', 'final': 'false'}, 'properties': {'request_required_acks': {'type': 'string', 'default': 'no_ack', 'constraints': [{'valid_values': ['no_ack', 'leader', 'in_syncs']}]}, 'request_timeout': {'type': 'integer', 'required': False, 'default': 10000, 'constraints': [{'greater_or_equal': 0}]}, 'message_send_max_retries': {'type': 'integer', 'required': False, 'default': 3, 'constraints': [{'greater_or_equal': 0}]}, 'retry_backoff': {'type': 'integer', 'required': False, 'default': 100, 'constraints': [{'greater_or_equal': 0}]}}, 'valid_target_types': ['radon.capabilities.kafka.KafkaTopic']}}",0
"{'radon.relationships.apache.openwhisk.OpenWhiskKafkaTriggers': {'description': 'OpenWhisk-specific relationship type representing Kafka-to-OpenWhisk Function communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.apache.openwhisk', 'abstract': 'false', 'final': 'false'}, 'properties': {'trigger_name': {'type': 'string', 'description': 'the name of the trigger created by this relationship. Used for proper cleanup when the relationship is removed.'}, 'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",0
"{'radon.relationships.datapipeline.ConnectNifiLocal': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.datapipeline', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'operations': {'post_configure_source': {'inputs': {'source_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}, 'source_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'id']}}}, 'implementation': {'primary': 'connect.yml', 'timeout': 0}}}}}}}",0
"{'radon.relationships.Triggers': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Event'}}, 'interactions': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Interaction'}}}, 'valid_target_types': ['radon.capabilities.Invocable']}}",0
"{'radon.relationships.openfaas.OpenFaasKafkaTriggers': {'description': 'OpenFaaS-specific relationship type representing Kafka-to-OpenFaaS Function communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.openfaas', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",0
"{'radon.relationships.nifi.ConnectsToNifi': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships.nifi', 'abstract': 'false', 'final': 'false'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'operations': {'post_configure_source': {'inputs': {'source_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}, 'source_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'id']}}}, 'implementation': {'primary': 'connect.yml', 'dependencies': ['local.yml', 'remote.yml'], 'timeout': 0}}}}}}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'credential': {'type': 'Credential', 'required': False}}, 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'radon.relationships.azure.AzureTriggers': {'description': 'Azure-specific relationship type representing AzureResource-to-AzureFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.azure', 'abstract': 'false', 'final': 'false'}, 'properties': {'events': {'type': 'string', 'constraints': [{'length': 1}]}}}}",0
"{'radon.relationships.azure.AzureCosmosDBTriggers': {'description': 'Azure-specific relationship type representing CosmosDB-to-AzureFunction communication', 'derived_from': 'radon.relationships.azure.AzureTriggers', 'metadata': {'targetNamespace': 'radon.relationships.azure', 'abstract': 'false', 'final': 'false'}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'radon.relationships.aws.ApiGatewayTriggers': {'description': 'AWS-specific relationship type representing ApiGateway-to-AwsLambdaFunction communication', 'derived_from': 'radon.relationships.Triggers', 'metadata': {'targetNamespace': 'radon.relationships.aws', 'abstract': 'false', 'final': 'false'}, 'properties': {'endpoint': {'type': 'string', 'description': 'Endpoint name'}, 'http_methods': {'type': 'string', 'description': 'List of HTTP methods'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'inputs': {'endpoint': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'endpoint']}}, 'aws_region': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'region']}}, 'role_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'role_arn']}}, 'function_arn': {'type': 'string', 'required': True, 'default': {'get_attribute': ['TARGET', 'arn']}}, 'http_methods': {'type': 'string', 'required': True, 'default': {'get_property': ['SELF', 'http_methods']}}}, 'operations': {'pre_configure_source': {'implementation': {'primary': 'pre_configure_source.yml', 'dependencies': ['generator.py'], 'timeout': 0}}}}}}}",unknown
"{'radon.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'metadata': {'targetNamespace': 'radon.relationships', 'abstract': 'false', 'final': 'false'}, 'properties': {'interactions': {'type': 'list', 'required': False, 'entry_schema': {'type': 'radon.datatypes.Interaction'}}}}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'attributes': {'tosca_name': {'type': 'string'}, 'state': {'type': 'string', 'default': 'initial'}, 'tosca_id': {'type': 'string'}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'metadata': {'targetNamespace': 'tosca.relationships', 'abstract': 'false', 'final': 'false'}, 'valid_target_types': ['tosca.capabilities.Container', 'tosca.capabilities.Node']}}",0
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",0
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.2]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",0
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '5.6.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.0]', 'specification.location': '7.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",0
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.3]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
"{'tosca.relationships.Root': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.1'}, 'description': 'This is the default (root) TOSCA Relationship Type definition that all other TOSCA Relationship Types derive from.', 'attributes': {'tosca_id': {'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.', 'type': 'string'}, 'tosca_name': {'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.', 'type': 'string'}, 'state': {'description': 'The state of the relationship instance.', 'type': 'string', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.2'}, 'description': 'This type represents a general dependency relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.3', 'role': 'host'}, 'description': 'This type represents a hosting relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.4'}, 'description': 'This type represents a network connection relationship between two nodes.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.5'}, 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.', 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as \'/usr/data\'. Note: The user must provide it and it cannot be ""root"".', 'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'description': ""The logical device name which for the attached device (which is represented by the target node in the model). e.g., '/dev/hda1'."", 'type': 'string', 'required': False}}, 'attributes': {'device': {'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.', 'type': 'string'}}}}",0
"{'tosca.relationships.RoutesTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '5.7.6'}, 'description': 'This type represents an intentional network routing between two Endpoints in different networks.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.network.LinksTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.4'}, 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'metadata': {'puccini.normative': 'true', 'specification.citation': '[TOSCA-Simple-Profile-YAML-v1.1]', 'specification.location': '8.5.5'}, 'description': 'This type represents a network association relationship between Port and Compute node types.', 'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
"{'yorc.tests.relationships.OpImplementationArtifact': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'file': 'something', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
"{'yorc.tests.relationships.ValueAssignmentHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'properties': {'literal': {'type': 'string'}, 'mapProp': {'type': 'map'}, 'listProp': {'type': 'list'}, 'literalDefault': {'type': 'string', 'default': 'relDefault'}, 'mapPropDefault': {'type': 'map', 'default': {'relProp1': 'relPropVal1', 'relProp2': 'relPropVal2'}}, 'listPropDefault': {'type': 'list', 'default': ['relPropI1', 'relPropI2', 'relPropI3']}, 'complex': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDef': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplex': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDef': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['reltypeDefL1', 'reltypeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'relnested': 1}}, {'literal': 43, 'mymap': {'relnested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'relnested': 3}}}}}}}, 'attributes': {'containerName': {'get_operation_output': ['TARGET', 'custom', 'publish', 'CONTAINER_NAME']}, 'literalAttr': {'type': 'string'}, 'mapAttr': {'type': 'map'}, 'listAttr': {'type': 'list'}, 'literalDefault': {'type': 'string', 'default': 'relDefault'}, 'mapAttrDefault': {'type': 'map', 'default': {'relAttr1': 'relAttrVal1', 'relAttr2': 'relAttrVal2'}}, 'listAttrDefault': {'type': 'list', 'default': ['relAttrI1', 'relAttrI2', 'relAttrI3']}, 'complexAttr': {'type': 'yorc.tests.datatypes.ComplexType'}, 'complexDefAttr': {'type': 'yorc.tests.datatypes.ComplexType', 'default': {'literal': 1}}, 'baseComplexAttr': {'type': 'yorc.tests.datatypes.BaseType'}, 'baseComplexDefAttr': {'type': 'yorc.tests.datatypes.BaseType', 'default': {'nestedType': {'listofstring': ['reltypeDefL1', 'reltypeDefL2'], 'subcomplex': {'literal': 4}, 'listofcomplex': [{'literal': 42, 'mymap': {'relnested': 1}}, {'literal': 43, 'mymap': {'relnested': 2}}], 'mapofcomplex': {'m1': {'literal': 52, 'mymap': {'relnested': 3}}}}}}}}}",unknown
"{'org.ystia.yorc.test.implem.AppAJoinAppARelType': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects an App A to another App A using its public address \n', 'valid_target_types': ['org.ystia.yorc.test.pub.AppACapBType'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'public_address']}}, 'implementation': 'test_playbook.yml'}}}}}",0
"{'yorc.relationships.AssignsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents an IP address assignment to a Compute node type.', 'valid_target_types': ['yorc.capabilities.Assignable']}}",0
"{'yorc.relationships.MemberOf': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents the membership of a node to a group.', 'valid_target_types': ['yorc.capabilities.Group']}}",0
"{'yorc.relationships.DeploysThrough': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This type assigns a bastion host to use for connecting to a compute instance.', 'valid_target_types': ['yorc.capabilities.SSHBastionHost']}}",0
"{'yorc.tests.relationships.GetOPOutputsRel': {'derived_from': 'tosca.relationships.DependsOn', 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': 'scripts/fdisk.sh', 'post_configure_source': {'inputs': {'PARTITION_NAME': {'get_attribute': ['SELF', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}}}",0
"{'yorc.tests.OperationHosts.relationships.OHRel': {'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'primary': 'myscript.sh', 'operation_host': 'ORCHESTRATOR'}}, 'post_configure_target': {'implementation': {'primary': 'myscript.sh'}}, 'add_source': {'implementation': 'myscript.sh'}, 'remove_target': 'myscript.sh'}}}}",0
"{'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint': {'description': 'This type represents relationship between a K8S endpoint and an external endpoint.', 'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'KUBE_SPEC_PATH': {'get_attribute': ['SOURCE', 'spec_path']}, 'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/kubectl_endpoint_join.sh'}}}, 'valid_source_types': ['tosca.capabilities.Endpoint']}}",0
"{'org.alien4cloud.lang.java.pub.relationships.JavaSoftwareHostedOnJDK': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on the JDK.', 'valid_target_types': ['org.alien4cloud.lang.java.pub.capabilities.JDK'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'TOMCAT_SEC': {'get_secret': ['/secrets/app/tominput']}}, 'implementation': 'script/my.sh'}}}}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.  See section “Relationship States” for allowed values.', 'default': 'initial'}}, 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to notify the source node of a target node being added via a relationship.'}, 'add_source': {'description': 'Operation to notify the target node of a source node which is now available via a relationship.'}, 'remove_target': {'description': 'Operation to notify the source node of a target node being removed from a relationship.'}, 'remove_source': {'description': 'Operation to notify the target node of a source node being removed from a relationship.'}, 'target_changed': {'description': 'Operation to notify source some property or attribute of the target changed'}, 'source_changed': {'description': 'Operation to notify target some property or attribute of the source'}}}}}",unknown
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.\n', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'description': 'The relative location (e.g., path on the file system), which provides the root location to address an attached node. e.g., a mount point / path such as ‘/usr/data’\nNote: The user must provide it and it cannot be “root”.\n', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'description': 'The logical device name which for the attached device (which is represented by the target node in the model). e.g., ‘/dev/hda1’\n', 'required': False}}, 'attributes': {'device': {'type': 'string', 'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.\n'}}}}",0
{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.AttachesTo'}},1
"{'tosca.relationships.Network': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Connectivity']}}",0
"{'tosca.relationships.network.LinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This relationship type represents an association relationship between Port and Network node types.', 'valid_target_types': ['tosca.capabilities.network.Linkable']}}",0
"{'tosca.relationships.network.BindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'This type represents a network association relationship between Port and Compute node types.', 'valid_target_types': ['tosca.capabilities.network.Bindable']}}",0
"{'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime': {'description': 'null', 'derived_from': 'tosca.relationships.HostedOn', 'valid_source_types': ['org.alien4cloud.extended.container.capabilities.ApplicationHost']}}",0
"{'org.alien4cloud.relationships.MountDockerVolume': {'description': 'null', 'derived_from': 'tosca.relationships.AttachTo', 'properties': {'container_path': {'type': 'string', 'description': 'Specifies where the volume is mounted inside the container.'}, 'container_subPath': {'type': 'string', 'description': ""Path within the volume from which the container's volume should be mounted."", 'required': False}, 'readonly': {'type': 'boolean', 'required': False, 'default': False}}, 'valid_source_types': ['org.alien4cloud.capabilities.DockerVolumeAttachment']}}",0
"{'yorc.types.Rel': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'inputs': {'G1': 'G1', 'G2': {'get_property': ['SOURCE', 'document_root']}, 'G3': {'get_attribute': ['TARGET', 'ip_address']}}, 'pre_configure_source': {'inputs': {'A1': {'get_property': ['SOURCE', 'document_root']}, 'A2': {'get_attribute': ['TARGET', 'ip_address']}, 'OO': {'get_operation_output': ['SELF', 'Configure', 'add_source', 'my_output']}}, 'implementation': '/tmp/pre_configure_source.sh'}, 'add_source': {'inputs': {'A1': {'get_property': ['SOURCE', 'document_root']}, 'A2': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': '/tmp/add_source.sh', 'outputs': {'OUTPUT2': ['SOURCE', 'my_attribute2']}}}}}}",0
"{'yorc.test.relationships.TestComponentOnContainer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['yorc.test.capabilities.TestContainerCapability']}}",0
"{'yorc.test.relationships.TestComponentConnectsToModule': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['yorc.test.capabilities.TestModuleCapability']}}",0
"{'yorc.tests.relationships.imports.OpImplementationArtifact': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'pre_configure_source': {'implementation': {'file': 'something', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
"{'org.ystia.yorc.test.implem.JoinAppARelType': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to an App A instance\n', 'valid_target_types': ['org.ystia.yorc.test.pub.AppACapAType'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'private_address']}}, 'implementation': 'test_playbook.yml'}}}}}",0
"{'yorc.relationships.google.AttachesTo': {'derived_from': 'tosca.relationships.AttachTo', 'description': 'This type represents an attachment relationship between two nodes. For example, an AttachesTo relationship type would be used for attaching a storage node to a Compute node.\n', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'mode': {'type': 'string', 'description': 'The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.\n', 'required': False}}, 'attributes': {'device': {'type': 'string', 'description': 'The logical name of the device as exposed to the instance. Note: A runtime property that gets set when the model gets instantiated by the orchestrator.\n'}}}}",0
"{'yorc.relationships.google.Network': {'derived_from': 'tosca.relationships.Network', 'valid_target_types': ['tosca.capabilities.Connectivity'], 'properties': {'subnet': {'type': 'string', 'description': 'Specify the sub-network to use for this relationship if network contains multiple sub-networks. If none is defined, the first matching subnet with the target Google region will be associated to it.\n', 'required': False}}}}",0
"{'yorc.tests.relationships.ValueAssignmentConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'empty_prop': {'type': 'string', 'required': False, 'default': ''}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}, 'input_empty_prop': {'get_property': ['SELF', 'empty_prop']}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}, 'pre_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}}}}}",0
"{'starlings.relationships.MountDockerVolume': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['starlings.capabilities.DockerVolumeAttachment'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HOST_PATH': {'get_property': ['SOURCE', 'host_path']}, 'CONTAINER_PATH': {'get_property': ['SOURCE', 'container_path']}}, 'implementation': 'scripts/docker_attach_volume.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'starlings.relationships.DependsOnDockerVolume': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['starlings.capabilities.DockerVolume'], 'attributes': {'host_path': {'get_operation_output': ['SELF', 'Configure', 'post_configure_target', 'HOST_PATH']}}, 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HOST_PATH': {'get_property': ['TARGET', 'host_path']}, 'TARGET_DIRECTORY': {'get_property': ['SOURCE', 'target_directory']}}, 'implementation': 'scripts/publisher_configure_copy_directories.sh'}}}, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'starlings.relationships.HostedOnDockerContainer': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['starlings.capabilities.Container.Docker'], 'attributes': {'container_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'CONTAINER_ID']}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'CONTAINER_ID': {'get_attribute': ['TARGET', 'container_id']}}, 'implementation': 'scripts/get_container_id.sh'}}}}}",0
"{'daily_test.relationships.interfaces': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'Configure': {'operations': {'pre_configure_source': '/modules/relationship_types/interfaces/playbooks/pre_configure_source.yaml', 'pre_configure_target': '/modules/relationship_types/interfaces/playbooks/pre_configure_target.yaml', 'post_configure_source': '/modules/relationship_types/interfaces/playbooks/post_configure_source.yaml', 'post_configure_target': '/modules/relationship_types/interfaces/playbooks/post_configure_target.yaml'}}}}}",0
"{'my.relationships.NginxSiteHosting': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'operations': {'post_configure_target': {'inputs': {'marker': {'default': {'get_attribute': ['TARGET', 'host', 'id']}, 'type': 'string'}}, 'implementation': {'primary': 'playbooks/reload.yaml'}}}}}}}",0
"{'steampunk.test.relationships.TeacherTeachesStudent': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Associates a teacher with a student.\n', 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'inputs': {'student_id': {'default': {'get_attribute': ['TARGET', 'student_id']}, 'type': 'string'}, 'student_ids': {'default': {'get_attribute': ['SOURCE', 'student_ids']}, 'type': 'list'}}, 'outputs': {'new_list': ['SOURCE', 'student_ids']}, 'implementation': 'playbooks/teacher-teaches-student--preconfigure-source.yaml'}}}}}}",0
"{'tosca.relationships.Root': {'derived_from': 'tosca.entity.Root', 'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from\n', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'daily_test.relationships.test': {'derived_from': 'tosca.relationships.HostedOn', 'attributes': {'relationship_attribute': {'type': 'string'}}, 'properties': {'relationship_property': {'type': 'string', 'default': 'test123', 'required': True}}, 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'inputs': {'relationship_property': {'default': {'get_property': ['SELF', 'relationship_property']}, 'type': 'string'}}, 'implementation': {'primary': 'playbooks/test.yaml'}}}}}}}",0
"{'radon.relationships.test': {'derived_from': 'tosca.relationships.HostedOn', 'attributes': {'relationship_attribute': {'type': 'string', 'default': 'Default relationship attribute'}, 'pre_configure_source_attribute': {'description': 'Attribute set by pre_configure_source interface operation', 'type': 'string'}, 'pre_configure_target_attribute': {'description': 'Attribute set by pre_configure_target interface operation', 'type': 'string'}, 'post_configure_source_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_attribute attribute that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_property_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_property property that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_input_attribute': {'description': 'Attribute set by post_configure_source interface operation from the relationship_input input that enters as an operation input\n', 'type': 'string'}, 'post_configure_source_txt_file_attribute': {'description': 'Attribute set by post_configure_source interface operation that includes the contents of the dependent txt file\n', 'type': 'string'}, 'post_configure_target_attribute': {'description': 'Attribute set by post_configure_target interface operation', 'type': 'string'}}, 'properties': {'relationship_property': {'type': 'string', 'default': 'Default relationship property'}}, 'interfaces': {'Configure': {'operations': {'pre_configure_source': {'implementation': 'playbooks/pre_configure_source.yaml'}, 'pre_configure_target': {'implementation': 'playbooks/pre_configure_target.yaml'}, 'post_configure_source': {'inputs': {'relationship_attribute': {'type': 'string', 'default': {'get_attribute': ['SELF', 'relationship_attribute']}}, 'relationship_property': {'type': 'string', 'default': {'get_property': ['SELF', 'relationship_property']}}, 'relationship_input': {'type': 'string', 'default': {'get_input': 'relationship_input'}}}, 'implementation': {'primary': 'playbooks/post_configure_source.yaml', 'dependencies': ['files/file.txt']}}, 'post_configure_target': {'implementation': 'playbooks/post_configure_target.yaml'}}}}}}",0
{'alien.test.relationships.TestComponentConnectsTo': {'derived_from': 'tosca.relationships.DependsOn'}},1
{'alien.test.relationships.CapaUpperBoundTest': {'derived_from': 'tosca.relationships.DependsOn'}},1
{'alien.test.relationships.ReqUpperBoundTest': {'derived_from': 'tosca.relationships.DependsOn'}},1
{'alien.test.relationships.ReqToBeDeleted': {'derived_from': 'tosca.relationships.DependsOn'}},1
{'alien.test.relationships.CapaToBeDeleted': {'derived_from': 'tosca.relationships.DependsOn'}},1
"{'tosca.relationships.Root': {'description': 'TOSCA Root relationship (used to define the default lifecycle).', 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'Default lifecycle for nodes in TOSCA.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to add a target node.'}, 'remove_target': {'description': 'Operation to remove a target node.'}}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_target_types': ['tosca.capabilities.Feature']}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container'], 'properties': {'password': {'type': 'string', 'description': 'user_pass', 'required': False, 'constraints': [{'min_length': 6}, {'max_length': 10}]}}}}",0
"{'fastconnect.relationships.cloudify.ConnectsToApacheLB': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a http endpoint to an ApacheLB\n', 'tags': {'marurity': 'draft'}, 'valid_target_types': ['calm.capabilities.HttpEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'post_configure_target': 'connecttoscript/invokeAddNode.groovy'}}, 'artifacts': [{'scripts': {'file': 'connecttoscript', 'type': 'fastconnect.artifacts.ResourceDirectory'}}]}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_target_types': ['tosca.capabilities.Container'], 'properties': {'password': {'type': 'string', 'description': 'user_pass', 'required': False, 'constraints': [{'min_length': 6}, {'max_length': 10}]}, 'fake_password': {'type': 'string', 'description': 'user_pass', 'required': False}}}}",0
"{'mycompany.mytypes.myapplication.MyRelationship': {'derived_from': 'tosca.relationships.Relationship', 'description': 'a custom relationship', 'properties': {'my_feature_setting': {'type': 'string'}, 'my_feature_value': {'type': 'integer'}}, 'valid_target_types': ['tosca.capabilities.Feature1', 'tosca.capabilities.Feature2']}}",0
"{'custom.relationships.MyRelationType': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'prop1': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'prop2': {'type': 'string', 'required': False}}}}",0
{'alien.test.relationships.ReqToBeChanged': {'derived_from': 'tosca.relationships.DependsOn'}},1
"{'fastconnect.relationships.cloudify.ConnectsTomcatToPostgre': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects Tomcat to an PostgreSQL\n', 'valid_sources': ['alien4cloud.capabilities.JdbcEndpoint'], 'valid_targets': ['alien4cloud.capabilities.JdbcEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'pre_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_configureDatasource.groovy'}}, 'post_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_postgreAddUser.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
"{'fastconnect.relationships.cloudify.ConnectsToApacheLB': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects Tomcat to an ApacheLB\n', 'valid_sources': ['alien4cloud.capabilities.HttpEndpoint'], 'valid_targets': ['alien4cloud.capabilities.HttpEndpoint'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'add_target': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_connectto_apache_addtarget.groovy'}}, 'remove_target': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/tomcat_connectto_apache_removetarget.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
"{'fastconnect.relationships.cloudify.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_sources': ['alien4cloud.capabilities.WarHosting'], 'valid_targets': ['alien4cloud.capabilities.WarHosting'], 'interfaces': {'tosca.interfaces.relationship.Configure': {'operations': {'post_configure_source': {'implementation_artifact': {'artifact_type': 'tosca.artifacts.GroovyScript', 'artifact_ref': 'relationshipScripts/war_hostedon_tomcat_postsource.groovy'}}}}}, 'artifacts': [{'scripts': 'relationshipScripts', 'type': 'fastconnect.artifacts.ResourceDirectory'}]}}",0
{'alien.tests.dependencies.relationships.DDependsOnC': {'derived_from': 'tosca.relationships.Root'}},1
"{'test.relationships.DependsOn': {'valid_sources': ['test.requirements.Feature'], 'valid_targets': ['test.capabilities.Feature']}}",0
"{'test.relationships.HostedOn': {'valid_sources': ['test.requirements.hosting'], 'valid_targets': ['test.capabilities.Container']}}",0
{'tosca.relationships.Root': {'description': 'root type'}},1
"{'my.maven.relationship': {'derived_from': 'tosca.relationships.Root', 'artifacts': [{'simple_war': 'binary/myWar.war'}, {'remote_war': {'file': 'alien4cloud:alien4cloud-ui:1.3.0-SM3', 'type': 'tosca.artifacts.Deployment.War', 'repository': 'maven_repo'}}]}}",0
{'my.maven.relationship.extended': {'derived_from': 'my.maven.relationship'}},1
{'tosca.relationships.Root': {'description': 'the root type'}},1
"{'tosca.relations.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.nodes.Root']}}",0
{'tosca.relations.HostedOn': {'derived_from': 'tosca.relations.DependsOn'}},1
{'tosca.relations.ConnectedTo': {'derived_from': 'tosca.relations.DependsOn'}},1
{'alien.test.relationships.TestComponentConnectsToChanged': {'derived_from': 'tosca.relationships.DependsOn'}},1
"{'fastconnect.relationships.KarDeployedOn': {'valid_sources': ['fastconnect.nodes.Kar'], 'valid_targets': ['fastconnect.nodes.Karaf']}}",0
"{'fastconnect.relationships.OsgiBundleDeployedOn': {'valid_sources': ['fastconnect.nodes.OsgiBundle'], 'valid_targets': ['fastconnect.nodes.Karaf', 'fastconnect.nodes.Equinox']}}",0
{'tosca.relations.depends_on': {'valid_target': 'tosca.nodes.root'}},0
{'tosca.relations.hosted_on': {'derived_from': 'tosca.relations.depends_on'}},1
{'tosca.relations.connected_to': {'derived_from': 'tosca.relations.depends_on'}},1
{'org.alien4cloud.relationships.test.MyRelationship': {'derived_from': 'tosca.relationships.Root'}},1
"{'alien.test.relationships.DependsOnJVM': {'derived_from': 'tosca.relationships.DependsOn', 'properties': {'context': {'type': 'string', 'required': False}}}}",0
{'alien.test.relationships.HostedOnAppServer': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'my.http.relationship': {'derived_from': 'tosca.relationships.Root', 'interfaces': {'Configure': {'create': 'https://otherCompany/script/short_notation.sh', 'start': {'inputs': {'TOTO': 'tata', 'TITI': 'tutu'}, 'implementation': {'file': 'myScript.abc', 'repository': 'script_repo', 'type': 'tosca.artifacts.Implementation.Bash'}}}}}}",0
{'my.http.relationship.extended': {'derived_from': 'my.http.relationship'}},1
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_sources': ['tosca.capabilities.Feature'], 'valid_targets': ['tosca.capabilities.Feature']}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship to use to describe that the source is hosted (installed/ deployed) on the target node.', 'valid_sources': ['tosca.capabilities.Container'], 'valid_targets': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_sources': ['tosca.capabilities.Endpoint'], 'valid_targets': ['tosca.capabilities.Endpoint']}}",0
{'alien.test.relationships.DependsOnJVM': {'derived_from': 'tosca.relationships.DependsOn'}},1
"{'alien.test.SoftwareHostedOnCompute': {'derived_from': 'tosca.relationships.HostedOn', 'properties': {'install_dir': {'type': 'string'}}}}",0
"{'alien.test.MyRelationshipDerivedFromNothing': {'valid_target_types': ['alien.test.MyCapabilityTypeDerivedFromNothing'], 'interfaces': {'Configure': {'pre_configure_source': 'scripts/myscript.sh'}}}}",0
"{'org.alien4cloud.test.functions.relationships.WarHostedOnTomcat': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship that allows to deploy a war on tomcat.', 'valid_target_types': ['org.alien4cloud.capabilities.WarHosting'], 'properties': {'relName': {'type': 'string'}}, 'interfaces': {'configure': {'post_configure_source': {'inputs': {'contextPath': {'get_property': ['SOURCE', 'context_path']}, 'propFromSourceCompute': {'get_property': ['SOURCE', 'customHostName']}, 'tomcatVersion': {'get_property': ['TARGET', 'component_version']}, 'propFromTargetCompute': {'get_property': ['TARGET', 'customHostName']}, 'tomcatIp': {'get_attribute': ['TARGET', 'ip_address']}, 'warNodeContext': {'get_attribute': ['SOURCE', 'warNodeContext']}, 'relName': {'get_property': ['SELF', 'relName']}, 'valid_node_types': {'get_property': ['TARGET', 'war_host', 'valid_node_types']}, 'bad_valid_node_types': {'get_property': ['SELF', 'war_host', 'valid_node_types']}, 'null_capa_prop1': {'get_property': ['TARGET', 'war_hosttt', 'valid_node_types']}, 'null_capa_prop2': {'get_property': ['TARGET', 'war_host', 'valid_node_typesss']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.relationships.HostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'configure': {'post_configure_source': {'inputs': {'CUSTOM_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'NAME': {'get_property': ['SOURCE', 'name']}, 'COMPUTE_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.relationships.TestTrigger': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.test.TestCompute'], 'interfaces': {'configure': {'post_configure_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'post_configure_target': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'add_target': {'inputs': {'MY_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'SOURCE_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'MY_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'add_source': {'inputs': {'MY_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'TARGET_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'MY_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'remove_target': {'inputs': {'MY_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'SOURCE_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'MY_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}, 'remove_source': {'inputs': {'MY_HOSTNAME': {'get_property': ['SOURCE', 'customHostName']}, 'TARGET_HOSTNAME': {'get_property': ['TARGET', 'customHostName']}, 'MY_IP': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'org.alien4cloud.test.relationships.DependsOnGetIpTest': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'configure': {'post_configure_source': {'inputs': {'SOURCE_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/dummy.sh'}}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'description': 'A generic depends on relationship.\n', 'valid_targets': ['tosca.capabilities.Feature']}}",0
"{'alien.relationships.LinuxPartition': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connets a FileSystem to a Volume.', 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/parted.sh'}, 'post_configure_source': {'inputs': {'FS_TYPE': {'get_property': ['SOURCE', 'fs_type']}, 'PARTITION_NAME': {'get_attribute': ['SOURCE', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'tosca.interfaces.relationship.Configure': {'description': 'The lifecycle interfaces define the essential, normative operations that each TOSCA Relationship Types may support.\n', 'pre_configure_source': {'description': 'Operation to pre-configure the source endpoint.'}, 'pre_configure_target': {'description': 'Operation to pre-configure the target endpoint.'}, 'post_configure_source': {'description': 'Operation to post-configure the source endpoint.'}, 'post_configure_target': {'description': 'Operation to post-configure the target endpoint.'}, 'add_target': {'description': 'Operation to notify the source node of a target node being added via a relationship.'}, 'add_source': {'description': 'Operation to notify the target node of a source node which is now available via a relationship.'}, 'remove_target': {'description': 'Operation to notify the source node of a target node being removed from a relationship.'}, 'remove_source': {'description': 'Operation to notify the target node of a source node being removed from a relationship.'}, 'target_changed': {'description': 'Operation to notify source some property or attribute of the target changed'}, 'source_changed': {'description': 'Operation to notify target some property or attribute of the source'}}}}}",0
"{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment']}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string', 'description': 'A unique identifier of the realized instance of a Relationship Template that derives from any TOSCA normative type.'}, 'tosca_name': {'type': 'string', 'description': 'This attribute reflects the name of the Relationship Template as defined in the TOSCA service template. This name is not unique to the realized instance model of corresponding deployed application as each template in the model can result in one or more instances (e.g., scaled) when orchestrated to a provider environment.\n'}, 'state': {'type': 'string', 'description': 'The state of the relationship instance.', 'default': 'initial'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",0
"{'my.types.WordpressDbConnection': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': 'scripts/wp_db_configure.sh'}}}}",0
{'MyCustomAttachesTo': {'derived_from': 'tosca.relationships.AttachesTo'}},1
"{'org.alien4cloud.extended.container.relationships.HostedOnContainerRuntime': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.extended.container.capabilities.ApplicationHost']}}",0
"{'org.alien4cloud.relationships.MountDockerVolume': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['org.alien4cloud.capabilities.DockerVolumeAttachment'], 'properties': {'container_path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the container.'}}}}",0
"{'openstack.relationships.ConnectsTo': {'description': 'ConnectsTo relationship.', 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['openstack.capabilities.Endpoint']}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
{'type': 'object'},1
{'additionalProperties': {'$ref': '#/definitions/relationship_type'}},1
"{'org.ystia.python.pub.relationships.HostedOnPythonRuntime': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship between a Python SoftwareComponent and its RunOnPVM', 'valid_target_types': ['org.ystia.python.pub.capabilities.PythonHosting']}}",0
"{'org.ystia.yorc.alien4cloud.relationships.ConnectsToYorc': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.yorc.pub.capabilities.YorcRestAPI'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'yorc_address_ha': {'get_property': ['SOURCE', 'yorc_address_ha']}, 'yorc_url_ha': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_property': ['SOURCE', 'yorc_address_ha']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}, 'yorc_url': {'concat': [{'get_property': ['TARGET', 'rest', 'protocol']}, '://', {'get_attribute': ['TARGET', 'rest', 'ip_address']}, ':', {'get_property': ['TARGET', 'rest', 'port']}]}, 'ca_pem': {'get_property': ['TARGET', 'ca_pem']}, 'ca_key': {'get_property': ['TARGET', 'ca_key']}, 'ca_passphrase': {'get_property': ['TARGET', 'ca_passphrase']}}, 'implementation': 'playbook/connect_yorc.yml'}}}}}",0
"{'org.ystia.mysql.linux.bash.relationships.HostedOn.MySQLServer': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'This type represents a hosting relationship between MySQLServer and MySQLDataBase nodes components\n', 'valid_target_types': ['org.ystia.mysql.pub.capabilities.Container.MySQLServer']}}",0
"{'org.ystia.mysql.linux.bash.relationships.DependsOn.MySqlVolume': {'derived_from': 'org.ystia.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TARGET_BLOCKSTORAGE_DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/mysql_pre_configure_volume.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.kafka.linux.bash.relationships.HostedOnKafka': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship between a Kafka topic and Kafka', 'valid_target_types': ['org.ystia.kafka.linux.bash.nodes.Kafka']}}",0
"{'org.ystia.kafka.linux.bash.relationships.ConnectsToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Kafka to Block Storage File System', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}, 'implementation': 'scripts/kafka-to-volume.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.flink.linux.bash.relationships.TaskManagerToJobManager': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Flink TaskmManager to a Flink JobManager\n', 'valid_target_types': ['org.ystia.flink.linux.bash.nodes.JobManager'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'JOBMANAGER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'TASKMANAGER_IP': {'get_attribute': ['SOURCE', 'ip_address']}}, 'implementation': 'scripts/taskmanager_to_jobmanager.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
{'org.ystia.yorc.pub.relationships.JoinConsulAgent': {'derived_from': 'org.ystia.yorc.experimental.consul.pub.relationships.JoinConsulAgent'}},1
{'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn'}},1
"{'org.ystia.yorc.pub.relationships.DependsOnFilessystem': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects Yorc to a FileSystem (BlockStorage, NFS...)\n', 'valid_target_types': ['alien.nodes.LinuxFileSystem']}}",0
"{'org.ystia.yorc.pub.relationships.ConnectsToVaultServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to a Vault Server\n', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",0
"{'org.ystia.yorc.pub.relationships.SaveSecretsToVault': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Saves secrets to a Vault Server\n', 'valid_target_types': ['org.alien4cloud.vault.pub.capabilities.VaultServer']}}",0
"{'org.ystia.elasticsearch.linux.bash.relationships.ConnectsToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Elasticsearch to Block Storage File System\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'scripts/elasticsearch-to-filesystem.sh', 'inputs': {'ES_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.kubernetes.linux.ansible.relationships.JoinCluster': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'JOIN_URL': {'concat': [{'get_attribute': ['TARGET', 'private_address']}, ':', {'get_attribute': ['TARGET', 'api_server', 'port']}]}, 'JOIN_URL_LB': {'concat': [{'get_attribute': ['SOURCE', 'lb_ip']}, ':', {'get_attribute': ['SOURCE', 'lb_port']}]}, 'ADMIN_TOKEN': {'get_attribute': ['TARGET', 'admin_token']}, 'CA_CERT_HASH': {'get_attribute': ['TARGET', 'ca_cert_hash']}, 'MASTER_PRIVATE_IP': {'get_attribute': ['TARGET', 'private_address']}, 'POD_CIDR': {'get_attribute': ['TARGET', 'pods_cidr']}}, 'implementation': 'playbooks/worker/post_configure.yaml'}, 'remove_source': {'inputs': {'node_name': {'get_attribute': ['SOURCE', 'node_name']}}, 'implementation': 'playbooks/master/remove_worker.yaml'}}}}}",0
"{'org.ystia.kubernetes.linux.ansible.relationships.UseLoadBalancer': {'derived_from': 'tosca.relationships.ConnectsTo', 'attributes': {'lb_ip': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_IP']}, 'lb_port': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'LB_PORT']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'lb_ip': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'playbooks/commons/kubeadm/configure_loadbalancer.yaml'}}}}}",0
"{'org.ystia.kibana.linux.bash.relationships.ConnectsKibanaToElasticsearch': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Kibana to Elasticsearch', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'relationships/elasticsearch/kibana_to_elasticsearch_pre_config_source.sh', 'inputs': {'kibanaIp': {'get_attribute': ['SOURCE', 'ip_address']}, 'elasticsearchIp': {'get_attribute': ['TARGET', 'ip_address']}, 'REPOSITORY': {'get_property': ['SOURCE', 'repository']}, 'ELASTICSEARCH_REPOSITORY': {'get_property': ['TARGET', 'repository']}, 'ELASTICSEARCH_VERSION': {'get_property': ['TARGET', 'component_version']}}}, 'post_configure_source': {'implementation': 'relationships/elasticsearch/kibana_to_elasticsearch_post_config_source.sh', 'inputs': {'cluster_name': {'get_property': ['TARGET', 'search_resource', 'cluster_name']}, 'kibanaIp': {'get_attribute': ['SOURCE', 'ip_address']}, 'elasticsearchIp': {'get_attribute': ['TARGET', 'ip_address']}, 'ELASTICSEARCH_HEAP_SIZE': {'get_property': ['SOURCE', 'es_heap_size']}, 'JAVA_HOME': {'get_attribute': ['SOURCE', 'java_home']}}}}}, 'artifacts': [{'rselasticsearch': {'file': 'relationships/elasticsearch', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.kibana.linux.bash.relationships.DashboardHostedOnKibana': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship that allows to host a Dashboard on Kibana.', 'valid_target_types': ['org.ystia.kibana.pub.capabilities.DashboardHosting']}}",0
"{'org.ystia.kibana.linux.bash.relationships.BeatsDashboardsHostedOnKibana': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship that allows to host Dashboards for Beats components on Kibana.', 'valid_target_types': ['org.ystia.kibana.pub.capabilities.DashboardHosting']}}",0
"{'org.ystia.nfs.linux.ansible.relationships.JoinNFSServer': {'derived_from': 'org.ystia.nfs.pub.relationships.JoinNFSServer', 'interfaces': {'Configure': {'inputs': {'DIRECTORY': {'get_property': ['SOURCE', 'location']}, 'SERVER_IP': {'get_attribute': ['TARGET', 'private_address']}}, 'pre_configure_source': {'implementation': 'playbooks/join_server.yml'}}}}}",0
"{'org.ystia.java.pub.relationships.HostedOnJavaRuntime': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Relationship use to describe that the SoftwareComponent is hosted on java', 'valid_target_types': ['org.ystia.java.pub.capabilities.JavaHosting'], 'attributes': {'java_home': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'JAVA_HOME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'JAVA_HOME': {'get_attribute': ['TARGET', 'java_home']}}, 'implementation': 'scripts/hosting_on_java.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.nfs.pub.relationships.JoinNFSServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Joins to a NFS Server\n', 'valid_target_types': ['org.ystia.nfs.pub.capabilities.NFSServer']}}",0
"{'org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Publish or Subscribe to a Kafka topic', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic']}}",0
"{'org.ystia.kafka.pub.relationships.PublishToKafkaTopic': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Publish to a Kafka topic', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'properties': {'request_required_acks': {'description': 'This value controls when a produce request is considered completed.\nSpecifically, how many other brokers must have committed the data to their log and acknowledged this to the leader?\nTypical values are\n- no_ack, which means that the producer never waits for an acknowledgement from the broker (the same behavior as 0.7).\n  This option provides the lowest latency but the weakest durability guarantees (some data will be lost when a server fails).\n- leader, which means that the producer gets an acknowledgement after the leader replica has received the data.\n  This option provides better durability as the client waits until the server acknowledges the request as successful\n  (only messages that were written to the now-dead leader but not yet replicated will be lost).\n- in_syncs, The producer gets an acknowledgement after all in-sync replicas have received the data.\n  This option provides the greatest level of durability.\n  However, it does not completely eliminate the risk of message loss because the number of in sync replicas may, in rare cases, shrink to 1.\n  If you want to ensure that some minimum number of replicas (typically a majority) receive a write,\n  then you must set the topic-level min.insync.replicas setting.\n  Please read the Replication section of the design documentation for a more in-depth discussion.\n', 'type': 'string', 'required': True, 'default': 'no_ack', 'constraints': [{'valid_values': ['no_ack', 'leader', 'in_syncs']}]}, 'message_send_max_retries': {'description': 'This property will cause the producer to automatically retry a failed send request. This property specifies the number of retries when such failures occur. Note that setting a non-zero value here can lead to duplicates in the case of network errors that cause a message to be sent but the acknowledgement to be lost.\n', 'type': 'integer', 'required': False, 'default': 3, 'constraints': [{'greater_or_equal': 0}]}, 'retry_backoff_ms': {'description': 'Before each retry, the producer refreshes the metadata of relevant topics to see if a new leader has been elected. Since leader election takes a bit of time, this property specifies the amount of time that the producer waits before refreshing the metadata.\n', 'type': 'integer', 'required': False, 'default': 100, 'constraints': [{'greater_or_equal': 0}]}, 'request_timeout_ms': {'description': 'The amount of time the broker will wait trying to meet the request.required.acks requirement before sending back an error to the client.\n', 'type': 'integer', 'required': False, 'default': 10000, 'constraints': [{'greater_or_equal': 0}]}}}}",0
"{'org.ystia.consul.linux.bash.relationships.ConnectsConsulAgentToServer': {'derived_from': 'org.ystia.consul.pub.relationships.ConnectsConsulAgentToServer', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'INSTALL_DIR': {'get_property': ['SOURCE', 'installation_directory']}}, 'implementation': 'scripts/consul_agent_to_server.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.logstash.linux.bash.relationships.LogstashToKafka': {'derived_from': 'org.ystia.kafka.pub.relationships.PublishToKafkaTopic', 'description': 'Connects Logstash to Kafka', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TOPIC_NAME': {'get_property': ['TARGET', 'topic_name']}, 'REQUIRED_ACKS': {'get_property': ['SELF', 'request_required_acks']}, 'MESSAGE_MAX_RETRIES': {'get_property': ['SELF', 'message_send_max_retries']}, 'RETRY_BACKOFF_MS': {'get_property': ['SELF', 'retry_backoff_ms']}, 'REQUEST_TIMEOUT_MS': {'get_property': ['SELF', 'request_timeout_ms']}}, 'implementation': 'relationships/kafka/configure-kafka-output.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.logstash.linux.bash.relationships.KafkaToLogstash': {'derived_from': 'org.ystia.kafka.pub.relationships.ConnectsToKafkaTopic', 'description': 'Connects Kafka to Logstash', 'valid_target_types': ['org.ystia.kafka.pub.capabilities.KafkaTopic'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'TOPIC_NAME': {'get_property': ['TARGET', 'topic_name']}}, 'implementation': 'relationships/kafka/configure-kafka-input.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.logstash.linux.bash.relationships.LogstashToElasticsearch': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Logstash to ElasticSearch', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'properties': {'proxy': {'description': 'Allows to specify a proxy to use to connect to ElasticSearch', 'type': 'string', 'required': False, 'default': '', 'constraints': [{'pattern': '^(https?://.+)?'}]}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'LOGSTASH_HOME': {'get_attribute': ['SOURCE', 'ls_home']}, 'cluster_name': {'get_property': ['TARGET', 'search_resource', 'cluster_name']}, 'ES_CAP_IP': {'get_attribute': ['TARGET', 'search_resource', 'ip_address']}, 'ES_IP': {'get_attribute': ['TARGET', 'private_address']}, 'ES_PUBLIC_IP': {'get_attribute': ['TARGET', 'public_address']}, 'PROXY': {'get_property': ['SELF', 'proxy']}}, 'implementation': 'relationships/elasticsearch/configure.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.logstash.linux.bash.relationships.GeonamesHostedOnLogstash': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Connects Geonames to Logstash', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashConnectorHosting'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/geonames/geonames_to_logstash.sh', 'inputs': {'LOGSTASH_HOME': {'get_attribute': ['TARGET', 'ls_home']}, 'REPOSITORY': {'get_property': ['SOURCE', 'repository']}, 'INDEX': {'get_property': ['SOURCE', 'indexname']}, 'FNAME': {'get_property': ['SOURCE', 'filename']}}}}}, 'artifacts': [{'conf': {'file': 'conf', 'type': 'tosca.artifacts.File'}}, {'geoscripts': {'file': 'geonames', 'type': 'tosca.artifacts.File'}}, {'lsscripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}, {'rsgeoscripts': {'file': 'relationships/geonames', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.logstash.linux.bash.relationships.TwitterConnectorHostedOnLogstash': {'derived_from': 'org.ystia.relationships.HostedOn', 'description': 'Configure the Logstash Twitter input\n', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashConnectorHosting'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'relationships/twitter/twitter_on_logstash.sh', 'inputs': {'CONSUMER_KEY': {'get_property': ['SOURCE', 'consumer_key']}, 'CONSUMER_SECRET': {'get_property': ['SOURCE', 'consumer_secret']}, 'OAUTH_TOKEN': {'get_property': ['SOURCE', 'oauth_token']}, 'OAUTH_TOKEN_SECRET': {'get_property': ['SOURCE', 'oauth_token_secret']}, 'USE_PROXY': {'get_property': ['SOURCE', 'use_proxy']}, 'PROXY_ADDRESS': {'get_property': ['SOURCE', 'proxy_address']}, 'PROXY_PORT': {'get_property': ['SOURCE', 'proxy_port']}, 'KEYWORDS': {'get_property': ['SOURCE', 'keywords']}, 'FOLLOWS': {'get_property': ['SOURCE', 'follows']}, 'LANGUAGES': {'get_property': ['SOURCE', 'languages']}, 'USE_SAMPLES': {'get_property': ['SOURCE', 'use_samples']}, 'FULL_TWEET': {'get_property': ['SOURCE', 'full_tweet']}, 'TAGS': {'get_property': ['SOURCE', 'tags']}, 'IGNORE_RETWEETS': {'get_property': ['SOURCE', 'ignore_retweets']}}}}}, 'artifacts': [{'twitterscripts': {'file': 'relationships/twitter', 'type': 'tosca.artifacts.File'}}, {'lsscripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.yorc.experimental.consul.pub.relationships.JoinConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Joins to a Consul agent\n', 'valid_target_types': ['org.alien4cloud.consul.pub.capabilities.ConsulAgent']}}",1
"{'org.ystia.yorc.linux.ansible.relationships.JoinConsulAgent': {'derived_from': 'org.ystia.yorc.pub.relationships.JoinConsulAgent', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'CONSUL_PORT': {'get_property': ['TARGET', 'consul_agent', 'port']}, 'TLS_ENABLED': {'get_property': ['TARGET', 'tls_enabled']}, 'CONSUL_CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/join_consul.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.ConnectsToVaultServer': {'derived_from': 'org.ystia.yorc.pub.relationships.ConnectsToVaultServer', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/configure_vault.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.DependsOnFilessystem': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects Yorc to a FileSystem (BlockStorage, NFS...)\n', 'valid_target_types': ['alien.nodes.LinuxFileSystem'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'DIRECTORY': {'get_property': ['TARGET', 'location']}}, 'implementation': 'playbooks/configure_filesystem.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.DependsOnTerraformRuntime': {'derived_from': 'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime', 'description': 'Yorc depends on Terraform runtime\n', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'PLUGINS_DIR': {'get_property': ['TARGET', 'plugins_dir']}}, 'implementation': 'playbooks/configure_terraform.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigGoogleHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with a Google Compute Engine infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'PROJECT': {'get_property': ['SOURCE', 'project']}, 'REGION': {'get_property': ['SOURCE', 'region']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CREDENTIALS': {'get_property': ['SOURCE', 'credentials']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_google.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.GoogleSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'CREDENTIALS': {'get_property': ['SOURCE', 'credentials']}}, 'implementation': 'playbooks/configure_google_secrets.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigOpenstackHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with an openstack infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'DATA_DIR': {'get_property': ['TARGET', 'data_dir']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'AUTH_URL': {'get_property': ['SOURCE', 'auth_url']}, 'TENANT_NAME': {'get_property': ['SOURCE', 'tenant_name']}, 'PROJECT_NAME': {'get_property': ['SOURCE', 'project_name']}, 'PROJECT_ID': {'get_property': ['SOURCE', 'project_id']}, 'USER_DOMAIN_NAME': {'get_property': ['SOURCE', 'user_domain_name']}, 'USER_NAME': {'get_property': ['SOURCE', 'user_name']}, 'PASSWORD': {'get_property': ['SOURCE', 'password']}, 'PRIVATE_NETWORK_NAME': {'get_property': ['SOURCE', 'private_network_name']}, 'DEFAULT_SECURITY_GROUPS': {'get_property': ['SOURCE', 'default_security_groups']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}, 'PROVISIONING_OVER_FIP_ALLOWED': {'get_property': ['SOURCE', 'provisioning_over_fip_allowed']}}, 'implementation': 'playbooks/configure_openstack.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.OpenstackSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'TENANT_NAME': {'get_property': ['SOURCE', 'tenant_name']}, 'PROJECT_NAME': {'get_property': ['SOURCE', 'project_name']}, 'PROJECT_ID': {'get_property': ['SOURCE', 'project_id']}, 'USER_DOMAIN_NAME': {'get_property': ['SOURCE', 'user_domain_name']}, 'USER_NAME': {'get_property': ['SOURCE', 'user_name']}, 'PASSWORD': {'get_property': ['SOURCE', 'password']}}, 'implementation': 'playbooks/configure_openstack_secrets.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigKubernetesHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with a kubernetes infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'MASTER_URL': {'get_property': ['SOURCE', 'master_url']}, 'CA': {'get_property': ['SOURCE', 'ca']}, 'CERT': {'get_property': ['SOURCE', 'cert']}, 'KEY': {'get_property': ['SOURCE', 'key']}, 'INSECURE': {'get_property': ['SOURCE', 'insecure']}}, 'implementation': 'playbooks/configure_kubernetes.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigAWSHostedOnYorc': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Configure a Yorc server with an aws infrastructure\n', 'valid_target_types': ['org.ystia.yorc.pub.nodes.YorcServer'], 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'ACCESS_KEY': {'get_property': ['SOURCE', 'access_key']}, 'SECRET_KEY': {'get_property': ['SOURCE', 'secret_key']}, 'REGION': {'get_property': ['SOURCE', 'region']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_aws.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.AWSSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'ACCESS_KEY': {'get_property': ['SOURCE', 'access_key']}, 'SECRET_KEY': {'get_property': ['SOURCE', 'secret_key']}}, 'implementation': 'playbooks/configure_aws_secrets.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigHostsPoolHostedOnYorc': {'derived_from': 'org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc', 'description': 'Create a Hosts Pool configuration\n', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'DATA_DIR': {'get_property': ['TARGET', 'data_dir']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'HOSTS_POOL': {'get_property': ['SOURCE', 'hosts']}, 'USE_VAULT': {'get_property': ['SOURCE', 'use_vault']}}, 'implementation': 'playbooks/configure_hostspool.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.HostsPoolSecretsOnVault': {'derived_from': 'org.ystia.yorc.pub.relationships.SaveSecretsToVault', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SERVER_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}, 'SERVER_PORT': {'get_attribute': ['TARGET', 'port']}, 'TLS_DISABLED': {'get_property': ['TARGET', 'tls_disable']}, 'TOKEN_ENCRYPTED': {'get_attribute': ['TARGET', 'vault_token_encrypted']}, 'PASSPHRASE': {'get_property': ['TARGET', 'ca_passphrase']}, 'LOCATION_NAME': {'get_property': ['SOURCE', 'location_name']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'HOSTS_POOL': {'get_property': ['SOURCE', 'hosts']}}, 'implementation': 'playbooks/configure_hostspool_secrets.yml'}}}}}",0
"{'org.ystia.yorc.linux.ansible.relationships.YorcConfigAnsible': {'description': 'Configure a Yorc server Ansible settings', 'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}, 'USE_OPENSSH': {'get_property': ['SOURCE', 'use_openssh']}, 'INVENTORY': {'get_property': ['SOURCE', 'inventory']}, 'HOST_OPERATIONS_ALLOWED': {'get_property': ['SOURCE', 'host_operations_allowed']}}, 'implementation': 'playbooks/configure_ansible.yml'}}}, 'valid_source_types': ['org.ystia.yorc.pub.nodes.YorcServer']}}",0
"{'org.ystia.ansible.pub.relationships.DependsOnAnsibleRuntime': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.ystia.ansible.pub.nodes.AnsibleRuntime']}}",0
"{'org.ystia.cloudera.linux.bash.relationships.ClouderaAgentConnectsToClouderaServer': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects a Cloudera Manager Agent to its Cloudera Manager Server\n', 'valid_target_types': ['org.ystia.cloudera.pub.capabilities.ClouderaServerEndpoint'], 'interfaces': {'configure': {'pre_configure_source': {'inputs': {'IP_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/clouderaagent_to_server.sh'}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.beats.linux.bash.relationships.ConnectsBeatToES': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Beat to Elasticsearch\n', 'valid_target_types': ['org.ystia.elasticsearch.pub.capabilities.SearchEndpoint'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/elasticsearch/beat_to_elasticsearch_post_configure_source.sh', 'inputs': {'BT_VERSION': {'get_property': ['SOURCE', 'component_version']}}}}}, 'artifacts': [{'rsscripts': {'file': 'relationships/elasticsearch', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.beats.linux.bash.relationships.ConnectsBeatToLS': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Beat to Logstash\n', 'valid_target_types': ['org.ystia.logstash.pub.capabilities.LogstashEndpoint'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'relationships/logstash/beat_to_logstash_post_configure_source.sh'}}}, 'artifacts': [{'rsscripts': {'file': 'relationships/logstash', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.beats.linux.bash.relationships.ConnectsHeartBeatToComponent': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects HeartBeat to any Component\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'post_configure_source': {'implementation': 'relationships/component/heartbeat_to_component_post_configure_source.sh'}}}, 'artifacts': [{'scripts': {'file': 'relationships/component', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.slurm.ansible.relationships.SlurmDaemonConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'CONTROLLER_HOST': {'get_attribute': ['TARGET', 'hostname']}, 'CLUSTER_NAME': {'get_property': ['TARGET', 'cluster_name']}}, 'implementation': 'playbooks/post_configure_daemon.yaml'}, 'add_source': {'inputs': {'hostname': {'get_attribute': ['SOURCE', 'hostname']}, 'sockets': {'get_attribute': ['SOURCE', 'sockets']}, 'cores_per_socket': {'get_attribute': ['SOURCE', 'cores_per_socket']}, 'threads_per_core': {'get_attribute': ['SOURCE', 'threads_per_core']}, 'real_memory': {'get_attribute': ['SOURCE', 'real_memory']}}, 'implementation': 'playbooks/add_source_daemon.yaml'}}}}}",0
"{'org.ystia.consul.pub.relationships.ConnectsToConsulAgent': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to describe that the SoftwareComponent is connected to a Consul Agent', 'valid_target_types': ['org.ystia.consul.pub.capabilities.ConsulAgent']}}",0
"{'org.ystia.consul.pub.relationships.ConnectsConsulAgentToServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul agent to a Consul server\n', 'valid_target_types': ['org.ystia.consul.pub.capabilities.ConsulServer']}}",0
"{'org.ystia.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Abstract Ystia ConnectsTo relationships', 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.relationships.HostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Abstract Ystia HostedOn relationships', 'abstract': True, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.relationships.DependsOn': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Abstract Ystia DependsOn relationships', 'abstract': True, 'artifacts': [{'utils_scripts': {'type': 'tosca.artifacts.File', 'file': 'utils_scripts'}}]}}",0
"{'org.ystia.rstudio.linux.bash.relationships.ConnectsRStudioToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects RStudio to a File System\n', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/rstudio_to_filesystem.sh', 'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'org.ystia.dns.resolvconf.ansible.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}}, 'add_target': 'playbooks/add_target_dns_server.yaml', 'remove_target': 'playbooks/remove_target_dns_server.yaml', 'add_source': {'inputs': {'HOSTNAME': {'get_attribute': ['SOURCE', 'hostname']}, 'IP_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}}, 'implementation': 'playbooks/add_host.yaml'}, 'remove_source': {'inputs': {'HOSTNAME': {'get_attribute': ['SOURCE', 'hostname']}, 'IP_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}}, 'implementation': 'playbooks/remove_host.yaml'}}}}}",0
"{'org.ystia.haproxy.linux.ansible.relationships.HAProxyRoutesTo': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'Configure': {'add_target': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'playbooks/add_route_target.yaml'}, 'remove_target': {'implementation': 'playbooks/remove_route_target.yaml'}}}}}",0
"{'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesTo': {'derived_from': 'tosca.relationships.RoutesTo', 'interfaces': {'Configure': {'inputs': {'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}, 'IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}, 'pre_configure_target': {'inputs': {'LB_IP_ADDRESS': {'get_attribute': ['SOURCE', 'ip_address']}, 'LB_PRIVATE_ADDRESS': {'get_attribute': ['SOURCE', 'private_address']}, 'LB_PUBLIC_ADDRESS': {'get_attribute': ['SOURCE', 'public_address']}, 'LB_CAP_CLIENT_PROTOCOL': {'get_property': ['SOURCE', 'client', 'protocol']}, 'LB_CAP_CLIENT_PORT': {'get_property': ['SOURCE', 'client', 'port']}, 'LB_CAP_CLIENT_URL_PATH': {'get_property': ['SOURCE', 'client', 'url_path']}}, 'implementation': 'playbooks/pre_configure_route_target.yaml'}, 'add_target': {'implementation': 'playbooks/add_route_target.yaml'}, 'remove_target': {'implementation': 'playbooks/remove_route_target.yaml'}}}}}",0
"{'org.ystia.traefik.ansible-linux.relationships.TraefikRoutesHealthCheckHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'post_configure_target': {'inputs': {'HC_CONFIG': {'get_property': ['SOURCE', 'configuration']}, 'CONFIG_DIR': {'get_property': ['TARGET', 'config_dir']}}, 'implementation': 'playbooks/configure_service_health_check.yaml'}}}}}",0
"{'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServer': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul agent to a Consul server\n', 'valid_target_types': ['org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServer'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_IP_CAP': {'get_attribute': ['TARGET', 'consul_server', 'ip_address']}, 'SERVER_IP': {'get_attribute': ['TARGET', 'ip_address']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/consul_connects_agent_to_server.yml'}}}}}",0
"{'org.ystia.yorc.experimental.consul.linux.ansible.relationships.JoinServerWAN': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects a Consul server to another Consul server using its WAN address\n', 'valid_target_types': ['org.ystia.yorc.experimental.consul.pub.capabilities.ConsulServerWAN'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'SERVER_WAN_IP': {'get_attribute': ['TARGET', 'public_address']}, 'CONFIG_DIR': {'get_property': ['SOURCE', 'config_dir']}}, 'implementation': 'playbooks/consul_connects_servers_wan.yaml'}}}}}",0
"{'org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.ystia.terraform.pub.nodes.TerraformRuntime']}}",0
"{'org.ystia.ntp.ansible.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'inputs': {'IP_ADDRESS': {'get_attribute': ['TARGET', 'private_address']}}, 'add_target': 'playbooks/add_target_ntp_server.yaml', 'remove_target': 'playbooks/remove_target_ntp_server.yaml'}}}}",0
"{'org.ystia.jupyter.linux.bash.relationships.ConnectsJupyterToFilessystem': {'derived_from': 'org.ystia.relationships.ConnectsTo', 'description': 'Connects Jupyter to a FileSystem to specify where will be stored Jupyter notebooks.', 'valid_target_types': ['tosca.capabilities.Node'], 'interfaces': {'Configure': {'pre_configure_source': {'implementation': 'scripts/jupyter-to-filesystem.sh', 'inputs': {'path_fs': {'get_property': ['TARGET', 'location']}}}}}, 'artifacts': [{'scripts': {'type': 'tosca.artifacts.File', 'file': 'scripts'}}]}}",0
"{'org.ystia.xfs.linux.bash.relationships.LinuxPartition': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Connects a FileSystem to a Volume', 'properties': {'partition_type': {'description': 'The partition type. Default value is 83: a Linux Native Partition\n', 'type': 'integer', 'default': 83}}, 'attributes': {'partition_name': {'get_operation_output': ['SELF', 'Configure', 'pre_configure_source', 'PARTITION_NAME']}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'PARTITION_TYPE': {'get_property': ['SELF', 'partition_type']}, 'DEVICE': {'get_attribute': ['TARGET', 'device']}}, 'implementation': 'scripts/fdisk.sh'}, 'post_configure_source': {'inputs': {'PARTITION_NAME': {'get_attribute': ['SOURCE', 'partition_name']}}, 'implementation': 'scripts/mkfs.sh'}}}, 'artifacts': [{'scripts': {'file': 'scripts', 'type': 'tosca.artifacts.File'}}]}}",0
"{'tosca.relationships.AttachTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",0
"{'yorc.tests.relationships.ValueAssignmentConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_source': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['SOURCE', 'empty']}, 'input_propMapdef_all': {'get_property': ['SOURCE', 'map']}, 'input_propMapdef_def1': {'get_property': ['SOURCE', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['SOURCE', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['SOURCE', 'list']}, 'input_propList_0_alien': {'get_property': ['SOURCE', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['SOURCE', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}, 'pre_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.sh'}, 'post_configure_target': {'inputs': {'input_litteral': 'testLiteral', 'input_list': ['l1', 'l2'], 'input_list_ex': ['le1', 'le2'], 'input_map': {'key1': 'value1', 'key2': 'value2'}, 'input_map_ex': {'keyex1': 'value1', 'keyex2': 'value2'}, 'input_empty': {'get_property': ['TARGET', 'empty']}, 'input_propMapdef_all': {'get_property': ['TARGET', 'map']}, 'input_propMapdef_def1': {'get_property': ['TARGET', 'mapdef.def1']}, 'input_propMapdef_def2': {'get_property': ['TARGET', 'mapdef', 'def1']}, 'input_propList_all': {'get_property': ['TARGET', 'list']}, 'input_propList_0_alien': {'get_property': ['TARGET', 'list[0]']}, 'input_propList_0_tosca': {'get_property': ['TARGET', 'list', 0]}}, 'implementation': 'scripts/show_inputs.yaml'}}}}}",unknown
{'tosca.relationships.Root': {'description': 'rel root'}},1
"{'org.yorc.samples.relationships.MyRel': {'derived_from': 'tosca.relationships.Root', 'metadata': {'icon': '/images/python.png'}, 'properties': {'hello_message': {'description': 'A simple message to print\nThis description is multiline\n', 'type': 'string', 'required': True, 'default': 'Hello World!'}, 'outputVar1': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': True, 'default': 'ov1'}, 'outputVar2': {'description': 'Dummy property used to test operation outputs', 'type': 'string', 'required': False, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}, 'a1': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'interfaces': {'Configure': {'inputs': {'debug': 'true'}, 'pre_configure_source': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}, 'var3': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'implementation': 'scripts/create.sh'}, 'add_target': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}}, 'implementation': 'scripts/start.sh'}}, 'custom': {'inputs': {'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}}, 'implementation': 'scripts/op.sh'}}}, 'artifacts': [{'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'type': 'tosca.artifacts.Implementation.Bash', 'file': 'somewhere/here.sh', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}]}}",unknown
"{'org.ystia.yorc.samples.relationships.noscheduler.DisplayResult': {'derived_from': 'tosca.relationships.DependsOn', 'interfaces': {'Configure': {'target_changed': {'inputs': {'DISPLAY_COMMAND_SPAWNED': {'get_attribute': ['TARGET', 'commandSpawned']}, 'DISPLAY_COMMAND_STDOUT': {'get_attribute': ['TARGET', 'commandStdout']}, 'DISPLAY_COMMAND_STDERR': {'get_attribute': ['TARGET', 'commandStderr']}}, 'implementation': 'scripts/operations/on_target_change.sh'}}}}}",0
"{'org.yorc.samples.relationships.MyRel': {'metadata': {'icon': '/images/python.png'}, 'description': 'null', 'derived_from': 'tosca.relationships.Root', 'properties': {'hello_message': {'type': 'string', 'description': 'A simple message to print\nThis description is multiline\n', 'default': 'Hello World!'}, 'outputVar1': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'default': 'ov1'}, 'outputVar2': {'type': 'string', 'description': 'Dummy property used to test operation outputs', 'required': False, 'default': 'ov2'}}, 'attributes': {'resolvedOutput1': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar1']}, 'resolvedOutput2': {'get_operation_output': ['SELF', 'Standard', 'create', 'myVar2']}, 'cuda_visible_devices': {'type': 'string', 'description': 'Coma separated list of visibles GPU devices for the compute.', 'default': 'none'}, 'a1': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'var1': {'get_property': ['SELF', 'outputVar1']}, 'var2': {'get_property': ['SELF', 'outputVar2']}, 'var3': {'concat': ['lit', {'concat': [{'get_attribute': ['TARGET', 'something']}, {'concat': [{'get_property': ['TARGET', 'whatever']}, {'get_attribute': ['TARGET', 'whatever']}, '!', {'get_operation_output': ['TARGET', 'Standard', 'create', 'CREATE_OUTPUT']}]}, '?']}]}, 'debug': True}, 'implementation': 'scripts/create.sh'}, 'add_target': {'inputs': {'msg': {'get_property': ['SELF', 'hello_message']}, 'debug': True}, 'implementation': 'scripts/start.sh'}}, 'custom': {'my_ops': {'inputs': {'myInput': 'test', 'var1': {'get_property': ['SELF', 'outputVar1']}, 'verbose': {'type': 'boolean', 'description': 'enable verbose output', 'default': False}}, 'implementation': 'scripts/op.sh'}}}, 'artifacts': {'myArtifact': {'description': 'A deployment artifact\nof type bash\n', 'file': 'somewhere/here.sh', 'type': 'tosca.artifacts.Implementation.Bash', 'repository': 'mydocker_repo', 'deploy_path': '/a/path/not/used/now'}}}}",0
"{'com.toscaruntime.docker.relationships.SwarmManagerDependsOnDaemon': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.docker.capabilities.DeployContainer']}}",0
"{'com.toscaruntime.docker.relationships.DeployedOnDaemon': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.docker.capabilities.DeployContainer'], 'interfaces': {'Configure': {'add_source': {'inputs': {'DOCKER_IMAGE': {'concat': [{'get_property': ['SOURCE', 'docker_image']}, ':', {'get_property': ['SOURCE', 'docker_image_tag']}]}, 'DOCKER_COMMAND': {'get_property': ['SOURCE', 'docker_command']}, 'DOCKER_PORTS': {'get_property': ['SOURCE', 'port_mapping']}, 'DOCKER_LABELS': {'get_property': ['SOURCE', 'docker_labels']}, 'DOCKER_URL': {'get_attribute': ['TARGET', 'docker_url']}, 'PUBLIC_DOCKER_URL': {'get_attribute': ['TARGET', 'public_docker_url']}, 'DOCKER_NETWORK_ID': {'get_attribute': ['TARGET', 'docker_network_id']}, 'DOCKER_CONTAINER_NAME': {'get_property': ['SOURCE', 'docker_container_name']}}, 'implementation': 'component/scripts/start_docker_component.sh'}}}}}",0
"{'com.toscaruntime.docker.relationships.AdvertiseConsul': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.ConsulDiscoveryService'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'DOCKER_ADDRESS': {'get_attribute': ['SOURCE', 'docker_address']}, 'CONSUL_CLIENT_ADDRESS': {'get_attribute': ['TARGET', 'consul_client_address']}}, 'implementation': 'consul/scripts/connect_docker_daemon_to_consul.sh'}}}}}",0
"{'com.toscaruntime.docker.relationships.SwarmUseConsul': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.ConsulDiscoveryService'], 'attributes': {'docker_network_id': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_ID']}, 'docker_network_name': {'get_operation_output': ['SELF', 'Configure', 'add_target', 'DOCKER_NETWORK_NAME']}}, 'interfaces': {'Configure': {'add_target': {'inputs': {'SWARM_PORT': {'get_property': ['SOURCE', 'swarm_port']}, 'CONSUL_CLIENT_ADDRESS': {'get_attribute': ['TARGET', 'consul_client_address']}}, 'implementation': 'consul/scripts/swarm_use_consul.sh'}}}}}",0
"{'com.toscaruntime.consul.relationships.JoinCluster': {'derived_from': 'tosca.relationships.Root', 'valid_targets': ['com.toscaruntime.consul.capabilities.FormCluster'], 'interfaces': {'Configure': {'add_target': {'inputs': {'CONSUL_SERVER_ADDRESS': {'get_attribute': ['TARGET', 'consul_server_address']}}, 'implementation': 'consul/scripts/join_consul_cluster.sh'}}}}}",0
"{'com.toscaruntime.relationships.ConflictRelationship': {'derived_from': 'tosca.relationships.Root', 'valid_sources': ['com.toscaruntime.nodes.SourceConflict'], 'valid_targets': ['com.toscaruntime.capabilities.GenerateConflict'], 'properties': {'pre_configure_source_throw_error': {'type': 'boolean', 'default': False}, 'pre_configure_target_throw_error': {'type': 'boolean', 'default': False}, 'post_configure_source_throw_error': {'type': 'boolean', 'default': False}, 'post_configure_target_throw_error': {'type': 'boolean', 'default': False}, 'remove_source_throw_error': {'type': 'boolean', 'default': False}, 'remove_target_throw_error': {'type': 'boolean', 'default': False}, 'add_source_throw_error': {'type': 'boolean', 'default': False}, 'add_target_throw_error': {'type': 'boolean', 'default': False}}, 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'pre_configure_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'pre_configure_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'pre_configure_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'post_configure_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'post_configure_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'post_configure_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'post_configure_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'add_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'add_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'add_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'add_target_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'remove_source': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'remove_source_throw_error']}}, 'implementation': 'scripts/error.sh'}, 'remove_target': {'inputs': {'THROW_ERROR': {'get_property': ['SELF', 'remove_target_throw_error']}}, 'implementation': 'scripts/error.sh'}}}}}",unknown
"{'org.ystia.monitoring.relationships.GrafanaConnectToGraphite': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'datasource_name': {'type': 'string', 'required': True, 'default': 'Graphite_DS'}}, 'valid_target_types': ['org.ystia.monitoring.service.pub.HttpEndpoint']}}",0
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToFrontEnd': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.monitoring.service.pub.HttpEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'grafana_url': {'concat': [{'get_attribute': ['TARGET', 'http_endpoint', 'protocol']}, '://', {'get_attribute': ['TARGET', 'http_endpoint', 'ip_address']}, ':', {'get_attribute': ['TARGET', 'http_endpoint', 'port']}]}, 'grafana_user': 'admin', 'grafana_password': 'admin'}, 'implementation': 'playbook/connects_to_grafana.yml'}}}}}",0
"{'org.alien4cloud.diamond.agent_linux.relationships.DiamondLinuxAgentConnectsToBackEnd': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.ystia.monitoring.service.pub.DataCollectionEndpoint'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'ANSIBLE_VERBOSE': False, 'graphite_host': {'get_attribute': ['TARGET', 'data_collection', 'ip_address']}, 'graphite_port': {'get_attribute': ['TARGET', 'data_collection', 'port']}}, 'implementation': 'playbook/connects_to_graphite.yml'}}}}}",0
"{'tosca.relationships.InstalledOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.Compute']}}",0
"{'tosca.relationships.InGroup': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.HostGroup']}}",0
"{'tosca.relationships.InQueue': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['swz.dist.nodes.Queue']}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'description': 'This type represents a network connection relationship between two nodes.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'string', 'description': 'The security credential to use to present to the target endpoint to for either authentication or authorization purposes.', 'required': False}}}}",0
"{'tosca.relationships.Root': {'description': 'The TOSCA root Relationship Type all other TOSCA base Relationship Types derive from', 'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}}",0
{'key': '{}'},1
"{'org.alien4cloud.kubernetes.api.relationships.K8SEndpointConnectToEndpoint': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents relationship between a K8S endpoint and an external endpoint.', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'interfaces': {'configure': {'pre_configure_source': {'implementation': 'scripts/kubectl_endpoint_join.sh', 'inputs': {'KUBE_SPEC_PATH': {'get_attribute': ['SOURCE', 'spec_path']}, 'TARGET_IP_ADDRESS': {'get_attribute': ['TARGET', 'ip_address']}}}}}}}",0
"{'org.alien4cloud.kubernetes.api.relationships.ConnectUrlTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'This type represents relationship between a K8S Ingress and a service.', 'valid_target_types': ['org.alien4cloud.kubernetes.api.capabilities.KubeServiceEndpoint'], 'properties': {'host': {'type': 'string', 'required': False, 'description': 'Specifies the host.'}, 'path': {'type': 'string', 'required': True, 'description': 'Specifies the path.', 'default': '/'}}}}",0
"{'otc.relationships.NodecellarHostedOnNodejs': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship use to describe that the website is deployed on the target nodejs server.', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'otc.relationships.NodejsConnectToMongo': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship use to connect nodejs with a mongodb databse', 'valid_target_types': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'pre_configure_source': {'inputs': {'DB_IP': {'get_attribute': ['TARGET', 'mongo_db', 'ip_address']}, 'DB_PORT': {'get_property': ['TARGET', 'mongo_db', 'port']}, 'NODECELLAR_PORT': {'get_property': ['SOURCE', 'app_endpoint', 'port']}}, 'implementation': 'scripts/set-mongo-url.sh'}}}}}",0
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",0
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",0
"{'tosca.relationships.nfv.Vdu.AttachedTo': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['tosca.capabilities.nfv.VirtualStorage']}}",0
{'micro.relationships.Root': {'derived_from': 'tosca.relationships.Root'}},1
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.nodes.Root'], 'properties': {'circuit_breaker': {'type': 'boolean', 'default': False}, 'dynamic_discovery': {'type': 'boolean', 'default': False}, 'timeout': {'type': 'boolean', 'default': False}}}}",0
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.nodes.Root'], 'properties': {'timeout': {'type': 'boolean', 'default': False}}}}",0
"{'micro.relationships.InteractsWith': {'derived_from': 'micro.relationships.Root', 'valid_target_types': ['micro.capabilities.Node'], 'properties': {'circuit_breaker': {'type': 'boolean', 'default': False}, 'dynamic_discovery': {'type': 'boolean', 'default': False}, 'timeout': {'type': 'boolean', 'default': False}}}}",0
"{'otc.relationships.AnsibleConnectToScriptComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'ANSIBLE_BECOME': {'get_property': ['SOURCE', 'ansible_become']}, 'IGNORE_ERRORS': {'get_property': ['SOURCE', 'ignore_errors']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/post_configure_source.yaml'}, 'add_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'ANSIBLE_BECOME': {'get_property': ['SOURCE', 'ansible_become']}, 'IGNORE_ERRORS': {'get_property': ['SOURCE', 'ignore_errors']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/add_source.yaml'}}}}}",0
"{'otc.relationships.BashConnectToScriptComponent': {'derived_from': 'tosca.relationships.ConnectsTo', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/post_configure_source.sh'}, 'add_source': {'inputs': {'SOURCE_COMPONENT_VERSION': {'get_property': ['SOURCE', 'component_version']}, 'SOURCE_IP': {'get_attribute': ['SOURCE', 'private_address']}, 'SOURCE_ENV': {'get_property': ['SOURCE', 'data_endpoint', 'env']}, 'SOURCE_PORT': {'get_property': ['SOURCE', 'data_endpoint', 'port']}, 'SOURCE_PROTOCOL': {'get_property': ['SOURCE', 'data_endpoint', 'protocol']}, 'SOURCE_URL_PATH': {'get_property': ['SOURCE', 'data_endpoint', 'url_path']}, 'SOURCE_PORT_NAME': {'get_property': ['SOURCE', 'data_endpoint', 'port_name']}, 'TARGET_COMPONENT_VERSION': {'get_property': ['TARGET', 'component_version']}, 'TARGET_IP': {'get_attribute': ['TARGET', 'private_address']}, 'TARGET_ENV': {'get_property': ['TARGET', 'data_endpoint', 'env']}, 'TARGET_PORT': {'get_property': ['TARGET', 'data_endpoint', 'port']}, 'TARGET_PROTOCOL': {'get_property': ['TARGET', 'data_endpoint', 'protocol']}, 'TARGET_URL_PATH': {'get_property': ['TARGET', 'data_endpoint', 'url_path']}, 'TARGET_PORT_NAME': {'get_property': ['TARGET', 'data_endpoint', 'port_name']}}, 'implementation': 'scripts/add_source.sh'}}}}}",unknown
"{'tosca.relationships.MiCADO.ConnectsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'properties': {'network': {'type': 'string', 'description': 'Name of Docker network to connect containers over', 'required': True}}}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.compute.Container']}}",0
"{'relationship_type_12': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'test relationship type', 'interfaces': {'relationship_type_12_interface_1': {'type': 'interface_type_2'}}}}",0
"{'tosca.relationships.nfv.VirtualLinksTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualLinkable']}}",0
"{'tosca.relationships.nfv.VirtualBindsTo': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.nfv.VirtualBindable']}}",0
"{'my.relationships.MockServerClient': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['my.nodes.MockServer']}}",0
{'additionalProperties': {'type': 'object'}},1
"{'aria.openstack.port_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > neutron_plugin.port.connect_security_group'}}}}",0
"{'aria.openstack.subnet_connected_to_router': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': 'cloudify-openstack-plugin > neutron_plugin.router.connect_subnet', 'remove_target': 'cloudify-openstack-plugin > neutron_plugin.router.disconnect_subnet'}}}}",0
"{'aria.openstack.server_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.connect_floatingip', 'inputs': {'fixed_ip': {'description': 'The fixed IP to be associated with the floating IP. If omitted, Openstack will choose which port to associate.\n', 'type': 'string', 'default': ''}}}, 'remove_source': 'cloudify-openstack-plugin > nova_plugin.server.disconnect_floatingip'}}}}",0
"{'aria.openstack.port_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > neutron_plugin.floatingip.connect_port', 'remove_source': 'cloudify-openstack-plugin > neutron_plugin.floatingip.disconnect_port'}}}}",0
"{'aria.openstack.server_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'cloudify-openstack-plugin > nova_plugin.server.connect_security_group', 'remove_source': 'cloudify-openstack-plugin > nova_plugin.server.disconnect_security_group'}}}}",0
"{'aria.openstack.server_connected_to_port': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'remove_source': 'cloudify-openstack-plugin > neutron_plugin.port.detach'}}}}",0
{'aria.openstack.server_connected_to_keypair': {'derived_from': 'ConnectsTo'}},1
{'aria.openstack.port_connected_to_subnet': {'derived_from': 'ConnectsTo'}},1
{'aria.openstack.server_depends_on_image': {'derived_from': 'DependsOn'}},1
"{'aria.openstack.volume_attached_to_server': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.attach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the attachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the attachment's status\n"", 'type': 'integer', 'default': 2}}}, 'remove_target': {'implementation': 'cloudify-openstack-plugin > nova_plugin.server.detach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the detachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the detachment's status\n"", 'type': 'integer', 'default': 2}}}}}}}",0
"{'org.lexis.datatransfer.relationships.MountCloudStagingArea': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Depends on a mounted Cloud Staging Area\n', 'valid_target_types': ['org.ddi.capabilities.CloudStagingAreaAccess']}}",0
"{'org.lexis.datatransfer.relationships.MountedCloudStagingArea': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connects to a node mouting the staging area\n', 'valid_target_types': ['org.lexis.datatransfer.MountedStagingAreaAccess']}}",0
"{'org.lexis.datatransfer.relationships.FileProvider': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship with a provider of a file\n', 'valid_target_types': ['org.lexis.datatransfer.capabilities.FileProvider']}}",0
"{'org.lexis.datatransfer.relationships.FilesProvider': {'derived_from': 'tosca.relationships.DependsOn', 'description': 'Relationship with a provider of files\n', 'valid_target_types': ['org.lexis.datatransfer.capabilities.FilesProvider']}}",0
"{'org.alien4cloud.relationships.MarathonHostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind the Marathon scheduler to a Mesos Master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster']}}",0
"{'org.alien4cloud.relationships.AppHostedOnSlave': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.MesosSlave']}}",0
"{'org.alien4cloud.relationships.MesosSlaveConnectsToMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to bind a slave to a master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'MESOS_MASTER': {'get_attribute': ['TARGET', 'master_url']}}, 'implementation': 'scripts/slave/configure_connectsToMaster.sh'}}}}}",0
"{'org.alien4cloud.relationships.MesosDNSConnectsToMaster': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.Marathon'], 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'MARATHON_API': {'get_attribute': ['TARGET', 'api_url']}}, 'implementation': 'scripts/service-discovery/configure_mesosdnsConnectsToMaster.sh'}}}}}",0
"{'org.alien4cloud.relationships.AppHostedOnMarathon': {'derived_from': 'tosca.relationships.HostedOn', 'valid_target_types': ['org.alien4cloud.nodes.Marathon']}}",0
"{'org.alien4cloud.relationships.MesosSlaveConnectsToDNS': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.MesosDNS'], 'interfaces': {'Configure': {'add_target': {'inputs': {'DNS_IP': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/slave/configure_connectsToDNS.sh'}}}}}",0
"{'org.alien4cloud.relationships.MesosSlaveDependsOnDocker': {'derived_from': 'tosca.relationships.DependsOn', 'valid_target_types': ['org.alien4cloud.nodes.DockerEngine'], 'description': 'Relationship used to bind a Mesos slave to a Docker engine', 'interfaces': {'Configure': {'post_configure_source': 'scripts/slave/configure_dependsOnDocker.sh'}}}}",0
"{'org.alien4cloud.relationships.RexrayConnectsToLibStorage': {'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['org.alien4cloud.nodes.RexrayServer'], 'description': 'Connects Rexray clients to the Rexray server', 'interfaces': {'Configure': {'post_configure_source': {'inputs': {'REXRAY_SERVER': {'get_attribute': ['TARGET', 'ip_address']}}, 'implementation': 'scripts/rexray/configure_connectsToLibStorage.sh'}}}}}",0
"{'org.alien4cloud.relationships.AuroraSchedulerHostedOnMaster': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind the Aurora scheduler to a Mesos Master', 'valid_target_types': ['org.alien4cloud.nodes.MesosMaster']}}",0
"{'org.alien4cloud.relationships.AuroraExecutorHostedOnSlave': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to bind Thermos, the Aurora executor, to a mesos worker', 'valid_target_types': ['org.alien4cloud.nodes.MesosSlave']}}",0
"{'aspide.relationships.AttachData': {'derived_from': 'tosca.relationships.AttachTo', 'valid_target_types': ['aspide.capabilities.Attachment'], 'properties': {'mode': {'type': 'string', 'required': True, 'description': 'Specifies the mode in which the volume is mounted inside the node.', 'default': 'RO', 'constraints': [{'valid_values': ['RO', 'RW']}]}}}}",0
"{'aspide.relationships.InputFrom': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['aspide.capabilities.DataInput'], 'properties': {'mount_path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the node.', 'default': '/home/aspide'}, 'data_distribution': {'type': 'string', 'default': 'partition', 'constraints': [{'valid_values': ['replicate', 'partition']}]}}}}",0
"{'aspide.relationships.OutputTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['aspide.capabilities.DataOutput'], 'properties': {'path': {'type': 'string', 'required': True, 'description': 'Specifies where the volume is mounted inside the node.', 'default': '/home/aspide'}}}}",0
"{'tosca.relationships.Root': {'attributes': {'tosca_id': {'type': 'string'}, 'tosca_name': {'type': 'string'}}, 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure'}}}}",0
"{'tosca.relationships.DependsOn': {'metadata': {'shorthand_name': 'DependsOn', 'type_qualified_name': 'tosca:DependsOn', 'type_uri': 'tosca.relationships.DependsOn'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node']}}",0
"{'tosca.relationships.HostedOn': {'metadata': {'shorthand_name': 'HostedOn', 'type_qualified_name': 'tosca:HostedOn', 'type_uri': 'tosca.relationships.HostedOn'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container']}}",0
"{'tosca.relationships.ConnectsTo': {'metadata': {'shorthand_name': 'ConnectsTo', 'type_qualified_name': 'tosca:ConnectsTo', 'type_uri': 'tosca.relationships.ConnectsTo'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}}}",0
"{'tosca.relationships.AttachesTo': {'metadata': {'shorthand_name': 'AttachesTo', 'type_qualified_name': 'tosca:AttachesTo', 'type_uri': 'tosca.relationships.AttachesTo'}, 'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Attachment'], 'properties': {'location': {'type': 'string', 'constraints': [{'min_length': 1}]}, 'device': {'type': 'string', 'required': False}}}}",0
"{'tosca.relationships.RoutesTo': {'metadata': {'shorthand_name': 'RoutesTo', 'type_qualified_name': 'tosca:RoutesTo', 'type_uri': 'tosca.relationships.RoutesTo'}, 'derived_from': 'tosca.relationships.ConnectsTo', 'valid_target_types': ['tosca.capabilities.Endpoint']}}",0
"{'radon.relationships.datapipelines.ConnectNiFi': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connecting two nifi data pipelines for forwarding data. The pipelines should be on same server.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'inputs': {'source_pipeline_id': {'default': {'get_attribute': ['SOURCE', 'id']}}, 'target_pipeline_id': {'default': {'get_attribute': ['TARGET', 'id']}}, 'source_pipeline_server_ip': {'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_server_ip': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}, 'implementation': {'primary': 'dpp/connectPipelines.yml'}}}}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node'], 'workflow': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container'], 'workflow': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'workflow': {'install': {'source_weaving': [{'after': 'configuring', 'wait_target': 'started', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_source'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_source'}, {'before': 'starting', 'wait_target': 'started'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_target'}], 'target_weaving': [{'after': 'configuring', 'after_source': 'created', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_target'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_target'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_source'}]}}}}",0
"{'radon.relationships.LB_WebApp': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Allow the new web App to be connected to a existing load balancer.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'inputs': {'LB_end_point_IP': {'default': {'get_attribute': ['SOURCE', 'host', 'public_address']}}, 'WebApp_end_points_IP': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}, 'implementation': {'primary': 'playbooks/nginx/add_webApp.yml'}}}}}}}",0
"{'my.relationships.NginxSiteHosting': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Standard': {'type': 'tosca.interfaces.node.lifecycle.Standard', 'operations': {'post_configure_source': {'implementation': {'primary': 'playbooks/nginx/reload.yml'}}}}}}}",0
"{'radon.relationships.LB_WebApp': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Allow the new web App to be connected to a existing load balancer.', 'interfaces': {'Configure': {'operations': {'post_configure_target': {'inputs': {'WebApp_end_points_IP': {'default': {'get_attribute': ['SOURCE', 'host', 'public_address']}}}, 'implementation': {'primary': 'playbooks/nginx/add_webApp.yml'}}}}}}}",0
"{'sodalite.relationships.jobHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'operations': {'add_source': {'inputs': {'wm_public_address': {'default': {'get_attribute': ['SELF', 'host', 'public_address']}}, 'wm_username': {'default': {'get_attribute': ['SELF', 'host', 'username']}}, 'wm_keypath': {'default': {'get_attribute': ['SELF', 'host', 'ssh-key']}}, 'job_name': {'default': {'get_property': ['SELF', 'name']}}}, 'implementation': {'primary': 'slurm-job/playbooks/dummy-relation-interface.yml'}}}}}}}",0
{'dcae.relationships.component_contained_in': {'derived_from': 'tosca.relationships.Root'}},1
{'dcae.relationships.rework_connected_to': {'derived_from': 'tosca.relationships.Root'}},1
{'dcae.relationships.publish_events': {'derived_from': 'tosca.relationships.Root'}},1
{'dcae.relationships.subscribe_to_events': {'derived_from': 'tosca.relationships.Root'}},1
{'dcae.relationships.publish_files': {'derived_from': 'tosca.relationships.Root'}},1
{'dcae.relationships.subscribe_to_files': {'derived_from': 'tosca.relationships.Root'}},1
{'cloudify.relationships.depends_on': {'derived_from': 'tosca.relationships.Root'}},1
"{'tosca.relationships.WordpressHostedOnApache': {'derived_from': 'tosca.relationships.HostedOn', 'description': 'Relationship used to describe that the website is deployed on the target Apache server.', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Container'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': {'inputs': {'context_root': 'string', 'doc_root': 'string'}, 'implementation': 'string'}}}}}",0
"{'tosca.relationships.WordpressConnectToMysql': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to connect the Wordpress with a Mysql database', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Endpoint.Database'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': {'inputs': {'db_ip': 'string', 'db_port': 'integer', 'db_name': 'string', 'db_user': 'string', 'db_password': 'string'}, 'implementation': 'string'}}}}}",0
"{'tosca.relationships.WordpressConnectToPHP': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Relationship used to install the Mysql module for PHP', 'valid_sources': ['tosca.nodes.WebApplication'], 'valid_targets': ['tosca.capabilities.Root'], 'interfaces': {'Configure': {'type': 'tosca.interfaces.relationship.Configure', 'pre_configure_source': 'string'}}}}",0
"{'tosca.relationships.DependsOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Node'], 'workflows': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",0
"{'tosca.relationships.HostedOn': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Container'], 'workflows': {'install': {'source_weaving': [{'before': 'creating', 'wait_target': 'started'}]}}}}",0
"{'tosca.relationships.ConnectsTo': {'derived_from': 'tosca.relationships.Root', 'valid_target_types': ['tosca.capabilities.Endpoint'], 'properties': {'credential': {'type': 'tosca.datatypes.Credential', 'required': False}}, 'workflows': {'install': {'source_weaving': [{'after': 'configuring', 'wait_target': 'started', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_source'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_source'}, {'before': 'starting', 'wait_target': 'started'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_target'}], 'target_weaving': [{'after': 'configuring', 'after_source': 'created', 'activity': 'tosca.interfaces.relationships.Configure.pre_configure_target'}, {'before': 'configured', 'activity': 'tosca.interfaces.relationships.Configure.post_configure_target'}, {'after': 'started', 'activity': 'tosca.interfaces.relationships.Configure.add_source'}]}}}}",0
"{'radon.relationships.datapipelines.ConnectNiFi': {'derived_from': 'tosca.relationships.ConnectsTo', 'description': 'Connecting two nifi data pipelines for forwarding data. The pipelines should be on same server.', 'interfaces': {'Configure': {'operations': {'post_configure_source': {'implementation': {'primary': 'dpp/connectPipelines.yml'}, 'inputs': {'source_pipeline_id': {'default': {'get_attribute': ['SOURCE', 'id']}}, 'source_pipeline_server_ip': {'default': {'get_attribute': ['SOURCE', 'host', 'host', 'public_address']}}, 'target_pipeline_id': {'default': {'get_attribute': ['TARGET', 'id']}}, 'target_pipeline_server_ip': {'default': {'get_attribute': ['TARGET', 'host', 'host', 'public_address']}}}}}}}}}",0
"{'onap.multivim.port_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > neutron_plugin.port.connect_security_group'}}}}",0
"{'onap.multivim.subnet_connected_to_router': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': 'onap-multivim-plugin > neutron_plugin.router.connect_subnet', 'remove_target': 'onap-multivim-plugin > neutron_plugin.router.disconnect_subnet'}}}}",0
"{'onap.multivim.server_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': {'implementation': 'onap-multivim-plugin > nova_plugin.server.connect_floatingip', 'inputs': {'fixed_ip': {'description': 'The fixed IP to be associated with the floating IP. If omitted, Openstack will choose which port to associate.\n', 'type': 'string', 'default': ''}}}, 'remove_source': 'onap-multivim-plugin > nova_plugin.server.disconnect_floatingip'}}}}",0
"{'onap.multivim.port_connected_to_floating_ip': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > neutron_plugin.floatingip.connect_port', 'remove_source': 'onap-multivim-plugin > neutron_plugin.floatingip.disconnect_port'}}}}",0
"{'onap.multivim.server_connected_to_security_group': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_source': 'onap-multivim-plugin > nova_plugin.server.connect_security_group', 'remove_source': 'onap-multivim-plugin > nova_plugin.server.disconnect_security_group'}}}}",0
"{'onap.multivim.server_connected_to_port': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'remove_source': 'onap-multivim-plugin > neutron_plugin.port.detach'}}}}",0
{'onap.multivim.server_connected_to_keypair': {'derived_from': 'ConnectsTo'}},1
{'onap.multivim.port_connected_to_subnet': {'derived_from': 'ConnectsTo'}},1
"{'onap.multivim.volume_attached_to_server': {'derived_from': 'ConnectsTo', 'interfaces': {'Configure': {'add_target': {'implementation': 'onap-multivim-plugin > nova_plugin.server.attach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the attachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the attachment's status\n"", 'type': 'integer', 'default': 2}}}, 'remove_target': {'implementation': 'onap-multivim-plugin > nova_plugin.server.detach_volume', 'inputs': {'status_attempts': {'description': ""Number of times to check for the detachment's status before failing\n"", 'type': 'integer', 'default': 10}, 'status_timeout': {'description': ""Interval (in seconds) between subsequent inquiries of the detachment's status\n"", 'type': 'integer', 'default': 2}}}}}}}",0
"{'my.relationships.jobHostedOn': {'derived_from': 'tosca.relationships.HostedOn', 'interfaces': {'Configure': {'add_source': {'implementation': {'primary': 'playbooks/torque-job/test.yml'}}}}}}",0